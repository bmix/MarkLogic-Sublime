[{"content":"declareUpdate(${1:options as Object})","trigger":"declareUpdate","description":"($options)"},{"content":"declareUpdate()","trigger":"declareUpdate"},{"content":"require(${1:location as String})","trigger":"require","description":"($location)"},{"content":"cts.aggregate(${1:nativePlugin as String}, ${2:aggregateName as String}, ${3:rangeIndexes as String[]})","trigger":"cts.aggregate","description":"($nativePlugin,$aggregateName,$rangeIndexes)"},{"content":"cts.aggregate(${1:nativePlugin as String}, ${2:aggregateName as String}, ${3:rangeIndexes as String[]}, ${4:argument as (Object | ValueIterator)})","trigger":"cts.aggregate","description":"($nativePlugin,$aggregateName,$rangeIndexes,$argument)"},{"content":"cts.aggregate(${1:nativePlugin as String}, ${2:aggregateName as String}, ${3:rangeIndexes as String[]}, ${4:argument as (Object | ValueIterator)}, ${5:options as String})","trigger":"cts.aggregate","description":"($nativePlugin,$aggregateName,$rangeIndexes,$argument,$options)"},{"content":"cts.aggregate(${1:nativePlugin as String}, ${2:aggregateName as String}, ${3:rangeIndexes as String[]}, ${4:argument as (Object | ValueIterator)}, ${5:options as String}, ${6:query as cts.query?})","trigger":"cts.aggregate","description":"($nativePlugin,$aggregateName,$rangeIndexes,$argument,$options,$query)"},{"content":"cts.aggregate(${1:nativePlugin as String}, ${2:aggregateName as String}, ${3:rangeIndexes as String[]}, ${4:argument as (Object | ValueIterator)}, ${5:options as String}, ${6:query as cts.query?}, ${7:forestIds as String})","trigger":"cts.aggregate","description":"($nativePlugin,$aggregateName,$rangeIndexes,$argument,$options,$query,$forestIds)"},{"content":"cts.andNotQuery(${1:positiveQuery as cts.query}, ${2:negativeQuery as cts.query})","trigger":"cts.andNotQuery","description":"($positiveQuery,$negativeQuery)"},{"content":"cts.andNotQueryNegativeQuery(${1:query as cts.andNotQuery})","trigger":"cts.andNotQueryNegativeQuery","description":"($query)"},{"content":"cts.andNotQueryPositiveQuery(${1:query as cts.andNotQuery})","trigger":"cts.andNotQueryPositiveQuery","description":"($query)"},{"content":"cts.andQuery(${1:queries as cts.query[]})","trigger":"cts.andQuery","description":"($queries)"},{"content":"cts.andQuery(${1:queries as cts.query[]}, ${2:options as String})","trigger":"cts.andQuery","description":"($queries,$options)"},{"content":"cts.andQueryOptions(${1:query as cts.andQuery})","trigger":"cts.andQueryOptions","description":"($query)"},{"content":"cts.andQueryQueries(${1:query as cts.andQuery})","trigger":"cts.andQueryQueries","description":"($query)"},{"content":"cts.approxCenter(${1:region as cts.region})","trigger":"cts.approxCenter","description":"($region)"},{"content":"cts.approxCenter(${1:region as cts.region}, ${2:options as String})","trigger":"cts.approxCenter","description":"($region,$options)"},{"content":"cts.arcIntersection(${1:p1 as cts.point}, ${2:p2 as cts.point}, ${3:q1 as cts.point}, ${4:q2 as cts.point})","trigger":"cts.arcIntersection","description":"($p1,$p2,$q1,$q2)"},{"content":"cts.arcIntersection(${1:p1 as cts.point}, ${2:p2 as cts.point}, ${3:q1 as cts.point}, ${4:q2 as cts.point}, ${5:options as String})","trigger":"cts.arcIntersection","description":"($p1,$p2,$q1,$q2,$options)"},{"content":"cts.avg(${1:arg as (String | Number | Boolean | null)[]})","trigger":"cts.avg","description":"($arg)"},{"content":"cts.avgAggregate(${1:rangeIndex as cts.reference})","trigger":"cts.avgAggregate","description":"($rangeIndex)"},{"content":"cts.avgAggregate(${1:rangeIndex as cts.reference}, ${2:options as String})","trigger":"cts.avgAggregate","description":"($rangeIndex,$options)"},{"content":"cts.avgAggregate(${1:rangeIndex as cts.reference}, ${2:options as String}, ${3:query as cts.query?})","trigger":"cts.avgAggregate","description":"($rangeIndex,$options,$query)"},{"content":"cts.avgAggregate(${1:rangeIndex as cts.reference}, ${2:options as String}, ${3:query as cts.query?}, ${4:forestIds as String})","trigger":"cts.avgAggregate","description":"($rangeIndex,$options,$query,$forestIds)"},{"content":"cts.bearing(${1:p1 as cts.point}, ${2:p2 as cts.point})","trigger":"cts.bearing","description":"($p1,$p2)"},{"content":"cts.bearing(${1:p1 as cts.point}, ${2:p2 as cts.point}, ${3:options as String})","trigger":"cts.bearing","description":"($p1,$p2,$options)"},{"content":"cts.boostQuery(${1:matchingQuery as cts.query}, ${2:boostingQuery as cts.query})","trigger":"cts.boostQuery","description":"($matchingQuery,$boostingQuery)"},{"content":"cts.boostQueryBoostingQuery(${1:query as cts.boostQuery})","trigger":"cts.boostQueryBoostingQuery","description":"($query)"},{"content":"cts.boostQueryMatchingQuery(${1:query as cts.boostQuery})","trigger":"cts.boostQueryMatchingQuery","description":"($query)"},{"content":"cts.boundingBoxes(${1:region as cts.region})","trigger":"cts.boundingBoxes","description":"($region)"},{"content":"cts.boundingBoxes(${1:region as cts.region}, ${2:options as String})","trigger":"cts.boundingBoxes","description":"($region,$options)"},{"content":"cts.box(${1:south as Number}, ${2:west as Number}, ${3:north as Number}, ${4:east as Number})","trigger":"cts.box","description":"($south,$west,$north,$east)"},{"content":"cts.boxEast(${1:box as cts.box})","trigger":"cts.boxEast","description":"($box)"},{"content":"cts.boxIntersects(${1:box as cts.box}, ${2:region as String[]})","trigger":"cts.boxIntersects","description":"($box,$region)"},{"content":"cts.boxIntersects(${1:box as cts.box}, ${2:region as String[]}, ${3:options as String})","trigger":"cts.boxIntersects","description":"($box,$region,$options)"},{"content":"cts.boxNorth(${1:box as cts.box})","trigger":"cts.boxNorth","description":"($box)"},{"content":"cts.boxSouth(${1:box as cts.box})","trigger":"cts.boxSouth","description":"($box)"},{"content":"cts.boxWest(${1:box as cts.box})","trigger":"cts.boxWest","description":"($box)"},{"content":"cts.circle(${1:radius as Number}, ${2:center as cts.point})","trigger":"cts.circle","description":"($radius,$center)"},{"content":"cts.circleCenter(${1:circle as cts.circle})","trigger":"cts.circleCenter","description":"($circle)"},{"content":"cts.circleIntersects(${1:circle as cts.circle}, ${2:region as String[]})","trigger":"cts.circleIntersects","description":"($circle,$region)"},{"content":"cts.circleIntersects(${1:circle as cts.circle}, ${2:region as String[]}, ${3:options as String})","trigger":"cts.circleIntersects","description":"($circle,$region,$options)"},{"content":"cts.circleRadius(${1:circle as cts.circle})","trigger":"cts.circleRadius","description":"($circle)"},{"content":"cts.classify(${1:dataNodes as String[]}, ${2:classifier as element(cts.classifier)})","trigger":"cts.classify","description":"($dataNodes,$classifier)"},{"content":"cts.classify(${1:dataNodes as String[]}, ${2:classifier as element(cts.classifier)}, ${3:options as Object?})","trigger":"cts.classify","description":"($dataNodes,$classifier,$options)"},{"content":"cts.classify(${1:dataNodes as String[]}, ${2:classifier as element(cts.classifier)}, ${3:options as Object?}, ${4:trainingNodes as String})","trigger":"cts.classify","description":"($dataNodes,$classifier,$options,$trainingNodes)"},{"content":"cts.cluster(${1:nodes as String[]})","trigger":"cts.cluster","description":"($nodes)"},{"content":"cts.cluster(${1:nodes as String[]}, ${2:options as Object?})","trigger":"cts.cluster","description":"($nodes,$options)"},{"content":"cts.collectionMatch(${1:pattern as String})","trigger":"cts.collectionMatch","description":"($pattern)"},{"content":"cts.collectionMatch(${1:pattern as String}, ${2:options as String})","trigger":"cts.collectionMatch","description":"($pattern,$options)"},{"content":"cts.collectionMatch(${1:pattern as String}, ${2:options as String}, ${3:query as cts.query?})","trigger":"cts.collectionMatch","description":"($pattern,$options,$query)"},{"content":"cts.collectionMatch(${1:pattern as String}, ${2:options as String}, ${3:query as cts.query?}, ${4:qualityWeight as Number?})","trigger":"cts.collectionMatch","description":"($pattern,$options,$query,$qualityWeight)"},{"content":"cts.collectionMatch(${1:pattern as String}, ${2:options as String}, ${3:query as cts.query?}, ${4:qualityWeight as Number?}, ${5:forestIds as String})","trigger":"cts.collectionMatch","description":"($pattern,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.collectionQuery(${1:uris as String[]})","trigger":"cts.collectionQuery","description":"($uris)"},{"content":"cts.collectionQueryUris(${1:query as cts.collectionQuery})","trigger":"cts.collectionQueryUris","description":"($query)"},{"content":"cts.collectionReference(${1:options as String})","trigger":"cts.collectionReference","description":"($options)"},{"content":"cts.collectionReference()","trigger":"cts.collectionReference"},{"content":"cts.collections(${1:start as String?})","trigger":"cts.collections","description":"($start)"},{"content":"cts.collections(${1:start as String?}, ${2:options as String})","trigger":"cts.collections","description":"($start,$options)"},{"content":"cts.collections(${1:start as String?}, ${2:options as String}, ${3:query as cts.query?})","trigger":"cts.collections","description":"($start,$options,$query)"},{"content":"cts.collections(${1:start as String?}, ${2:options as String}, ${3:query as cts.query?}, ${4:qualityWeight as Number?})","trigger":"cts.collections","description":"($start,$options,$query,$qualityWeight)"},{"content":"cts.collections(${1:start as String?}, ${2:options as String}, ${3:query as cts.query?}, ${4:qualityWeight as Number?}, ${5:forestIds as String})","trigger":"cts.collections","description":"($start,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.collections()","trigger":"cts.collections"},{"content":"cts.complexPolygon(${1:outer as cts.polygon}, ${2:inner as String[]})","trigger":"cts.complexPolygon","description":"($outer,$inner)"},{"content":"cts.complexPolygonContains(${1:complexPolygon as cts.complexPolygon}, ${2:region as String[]})","trigger":"cts.complexPolygonContains","description":"($complexPolygon,$region)"},{"content":"cts.complexPolygonContains(${1:complexPolygon as cts.complexPolygon}, ${2:region as String[]}, ${3:options as String})","trigger":"cts.complexPolygonContains","description":"($complexPolygon,$region,$options)"},{"content":"cts.complexPolygonInner(${1:complexPolygon as cts.complexPolygon})","trigger":"cts.complexPolygonInner","description":"($complexPolygon)"},{"content":"cts.complexPolygonIntersects(${1:complexPolygon as cts.complexPolygon}, ${2:region as String[]})","trigger":"cts.complexPolygonIntersects","description":"($complexPolygon,$region)"},{"content":"cts.complexPolygonIntersects(${1:complexPolygon as cts.complexPolygon}, ${2:region as String[]}, ${3:options as String})","trigger":"cts.complexPolygonIntersects","description":"($complexPolygon,$region,$options)"},{"content":"cts.complexPolygonOuter(${1:complexPolygon as cts.complexPolygon})","trigger":"cts.complexPolygonOuter","description":"($complexPolygon)"},{"content":"cts.confidence(${1:node as Node})","trigger":"cts.confidence","description":"($node)"},{"content":"cts.confidence()","trigger":"cts.confidence"},{"content":"cts.confidenceOrder(${1:options as String})","trigger":"cts.confidenceOrder","description":"($options)"},{"content":"cts.confidenceOrder()","trigger":"cts.confidenceOrder"},{"content":"cts.contains(${1:nodes as (Object[] | ValueIterator)}, ${2:query as cts.query})","trigger":"cts.contains","description":"($nodes,$query)"},{"content":"cts.correlation(${1:value1 as cts.reference}, ${2:value2 as cts.reference})","trigger":"cts.correlation","description":"($value1,$value2)"},{"content":"cts.correlation(${1:value1 as cts.reference}, ${2:value2 as cts.reference}, ${3:options as String})","trigger":"cts.correlation","description":"($value1,$value2,$options)"},{"content":"cts.correlation(${1:value1 as cts.reference}, ${2:value2 as cts.reference}, ${3:options as String}, ${4:query as cts.query?})","trigger":"cts.correlation","description":"($value1,$value2,$options,$query)"},{"content":"cts.correlation(${1:value1 as cts.reference}, ${2:value2 as cts.reference}, ${3:options as String}, ${4:query as cts.query?}, ${5:forestIds as String})","trigger":"cts.correlation","description":"($value1,$value2,$options,$query,$forestIds)"},{"content":"cts.count(${1:arg as (Object[] | ValueIterator)})","trigger":"cts.count","description":"($arg)"},{"content":"cts.count(${1:arg as (Object[] | ValueIterator)}, ${2:maximum as Number})","trigger":"cts.count","description":"($arg,$maximum)"},{"content":"cts.countAggregate(${1:rangeIndex as cts.reference})","trigger":"cts.countAggregate","description":"($rangeIndex)"},{"content":"cts.countAggregate(${1:rangeIndex as cts.reference}, ${2:options as String})","trigger":"cts.countAggregate","description":"($rangeIndex,$options)"},{"content":"cts.countAggregate(${1:rangeIndex as cts.reference}, ${2:options as String}, ${3:query as cts.query?})","trigger":"cts.countAggregate","description":"($rangeIndex,$options,$query)"},{"content":"cts.countAggregate(${1:rangeIndex as cts.reference}, ${2:options as String}, ${3:query as cts.query?}, ${4:forestIds as String})","trigger":"cts.countAggregate","description":"($rangeIndex,$options,$query,$forestIds)"},{"content":"cts.covariance(${1:value1 as cts.reference}, ${2:value2 as cts.reference})","trigger":"cts.covariance","description":"($value1,$value2)"},{"content":"cts.covariance(${1:value1 as cts.reference}, ${2:value2 as cts.reference}, ${3:options as String})","trigger":"cts.covariance","description":"($value1,$value2,$options)"},{"content":"cts.covariance(${1:value1 as cts.reference}, ${2:value2 as cts.reference}, ${3:options as String}, ${4:query as cts.query?})","trigger":"cts.covariance","description":"($value1,$value2,$options,$query)"},{"content":"cts.covariance(${1:value1 as cts.reference}, ${2:value2 as cts.reference}, ${3:options as String}, ${4:query as cts.query?}, ${5:forestIds as String})","trigger":"cts.covariance","description":"($value1,$value2,$options,$query,$forestIds)"},{"content":"cts.covarianceP(${1:value1 as cts.reference}, ${2:value2 as cts.reference})","trigger":"cts.covarianceP","description":"($value1,$value2)"},{"content":"cts.covarianceP(${1:value1 as cts.reference}, ${2:value2 as cts.reference}, ${3:options as String})","trigger":"cts.covarianceP","description":"($value1,$value2,$options)"},{"content":"cts.covarianceP(${1:value1 as cts.reference}, ${2:value2 as cts.reference}, ${3:options as String}, ${4:query as cts.query?})","trigger":"cts.covarianceP","description":"($value1,$value2,$options,$query)"},{"content":"cts.covarianceP(${1:value1 as cts.reference}, ${2:value2 as cts.reference}, ${3:options as String}, ${4:query as cts.query?}, ${5:forestIds as String})","trigger":"cts.covarianceP","description":"($value1,$value2,$options,$query,$forestIds)"},{"content":"cts.deregister(${1:id as String})","trigger":"cts.deregister","description":"($id)"},{"content":"cts.destination(${1:p as cts.point}, ${2:bearing as Number}, ${3:distance as Number})","trigger":"cts.destination","description":"($p,$bearing,$distance)"},{"content":"cts.destination(${1:p as cts.point}, ${2:bearing as Number}, ${3:distance as Number}, ${4:options as String})","trigger":"cts.destination","description":"($p,$bearing,$distance,$options)"},{"content":"cts.directoryQuery(${1:uris as String[]})","trigger":"cts.directoryQuery","description":"($uris)"},{"content":"cts.directoryQuery(${1:uris as String[]}, ${2:depth as String?})","trigger":"cts.directoryQuery","description":"($uris,$depth)"},{"content":"cts.directoryQueryDepth(${1:query as cts.directoryQuery})","trigger":"cts.directoryQueryDepth","description":"($query)"},{"content":"cts.directoryQueryUris(${1:query as cts.directoryQuery})","trigger":"cts.directoryQueryUris","description":"($query)"},{"content":"cts.distance(${1:p1 as cts.point}, ${2:p2 as cts.point})","trigger":"cts.distance","description":"($p1,$p2)"},{"content":"cts.distance(${1:p1 as cts.point}, ${2:p2 as cts.point}, ${3:options as String})","trigger":"cts.distance","description":"($p1,$p2,$options)"},{"content":"cts.distinctiveTerms(${1:nodes as String[]})","trigger":"cts.distinctiveTerms","description":"($nodes)"},{"content":"cts.distinctiveTerms(${1:nodes as String[]}, ${2:options as Node?})","trigger":"cts.distinctiveTerms","description":"($nodes,$options)"},{"content":"cts.doc(${1:uri as String})","trigger":"cts.doc","description":"($uri)"},{"content":"cts.documentFragmentQuery(${1:query as cts.query})","trigger":"cts.documentFragmentQuery","description":"($query)"},{"content":"cts.documentFragmentQueryQuery(${1:query as cts.documentFragmentQuery})","trigger":"cts.documentFragmentQueryQuery","description":"($query)"},{"content":"cts.documentOrder(${1:options as String})","trigger":"cts.documentOrder","description":"($options)"},{"content":"cts.documentOrder()","trigger":"cts.documentOrder"},{"content":"cts.documentQuery(${1:uris as String[]})","trigger":"cts.documentQuery","description":"($uris)"},{"content":"cts.documentQueryUris(${1:query as cts.documentQuery})","trigger":"cts.documentQueryUris","description":"($query)"},{"content":"cts.elementAttributePairGeospatialBoxes(${1:parentElementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]})","trigger":"cts.elementAttributePairGeospatialBoxes","description":"($parentElementNames,$latitudeNames,$longitudeNames)"},{"content":"cts.elementAttributePairGeospatialBoxes(${1:parentElementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:latitudeBounds as String})","trigger":"cts.elementAttributePairGeospatialBoxes","description":"($parentElementNames,$latitudeNames,$longitudeNames,$latitudeBounds)"},{"content":"cts.elementAttributePairGeospatialBoxes(${1:parentElementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:latitudeBounds as String}, ${5:longitudeBounds as String})","trigger":"cts.elementAttributePairGeospatialBoxes","description":"($parentElementNames,$latitudeNames,$longitudeNames,$latitudeBounds,$longitudeBounds)"},{"content":"cts.elementAttributePairGeospatialBoxes(${1:parentElementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:latitudeBounds as String}, ${5:longitudeBounds as String}, ${6:options as String})","trigger":"cts.elementAttributePairGeospatialBoxes","description":"($parentElementNames,$latitudeNames,$longitudeNames,$latitudeBounds,$longitudeBounds,$options)"},{"content":"cts.elementAttributePairGeospatialBoxes(${1:parentElementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:latitudeBounds as String}, ${5:longitudeBounds as String}, ${6:options as String}, ${7:query as cts.query?})","trigger":"cts.elementAttributePairGeospatialBoxes","description":"($parentElementNames,$latitudeNames,$longitudeNames,$latitudeBounds,$longitudeBounds,$options,$query)"},{"content":"cts.elementAttributePairGeospatialBoxes(${1:parentElementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:latitudeBounds as String}, ${5:longitudeBounds as String}, ${6:options as String}, ${7:query as cts.query?}, ${8:qualityWeight as Number?})","trigger":"cts.elementAttributePairGeospatialBoxes","description":"($parentElementNames,$latitudeNames,$longitudeNames,$latitudeBounds,$longitudeBounds,$options,$query,$qualityWeight)"},{"content":"cts.elementAttributePairGeospatialBoxes(${1:parentElementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:latitudeBounds as String}, ${5:longitudeBounds as String}, ${6:options as String}, ${7:query as cts.query?}, ${8:qualityWeight as Number?}, ${9:forestIds as String})","trigger":"cts.elementAttributePairGeospatialBoxes","description":"($parentElementNames,$latitudeNames,$longitudeNames,$latitudeBounds,$longitudeBounds,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.elementAttributePairGeospatialQuery(${1:elementName as String[]}, ${2:latitudeAttributeNames as String[]}, ${3:longitudeAttributeNames as String[]}, ${4:regions as String[]})","trigger":"cts.elementAttributePairGeospatialQuery","description":"($elementName,$latitudeAttributeNames,$longitudeAttributeNames,$regions)"},{"content":"cts.elementAttributePairGeospatialQuery(${1:elementName as String[]}, ${2:latitudeAttributeNames as String[]}, ${3:longitudeAttributeNames as String[]}, ${4:regions as String[]}, ${5:options as String})","trigger":"cts.elementAttributePairGeospatialQuery","description":"($elementName,$latitudeAttributeNames,$longitudeAttributeNames,$regions,$options)"},{"content":"cts.elementAttributePairGeospatialQuery(${1:elementName as String[]}, ${2:latitudeAttributeNames as String[]}, ${3:longitudeAttributeNames as String[]}, ${4:regions as String[]}, ${5:options as String}, ${6:weight as Number?})","trigger":"cts.elementAttributePairGeospatialQuery","description":"($elementName,$latitudeAttributeNames,$longitudeAttributeNames,$regions,$options,$weight)"},{"content":"cts.elementAttributePairGeospatialQueryElementName(${1:query as cts.elementAttributePairGeospatialQuery})","trigger":"cts.elementAttributePairGeospatialQueryElementName","description":"($query)"},{"content":"cts.elementAttributePairGeospatialQueryLatitudeName(${1:query as cts.elementAttributePairGeospatialQuery})","trigger":"cts.elementAttributePairGeospatialQueryLatitudeName","description":"($query)"},{"content":"cts.elementAttributePairGeospatialQueryLongitudeName(${1:query as cts.elementAttributePairGeospatialQuery})","trigger":"cts.elementAttributePairGeospatialQueryLongitudeName","description":"($query)"},{"content":"cts.elementAttributePairGeospatialQueryOptions(${1:query as cts.elementAttributePairGeospatialQuery})","trigger":"cts.elementAttributePairGeospatialQueryOptions","description":"($query)"},{"content":"cts.elementAttributePairGeospatialQueryRegion(${1:query as cts.elementAttributePairGeospatialQuery})","trigger":"cts.elementAttributePairGeospatialQueryRegion","description":"($query)"},{"content":"cts.elementAttributePairGeospatialQueryWeight(${1:query as cts.elementAttributePairGeospatialQuery})","trigger":"cts.elementAttributePairGeospatialQueryWeight","description":"($query)"},{"content":"cts.elementAttributePairGeospatialValueMatch(${1:elementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:pattern as xs.anyAtomicType})","trigger":"cts.elementAttributePairGeospatialValueMatch","description":"($elementNames,$latitudeNames,$longitudeNames,$pattern)"},{"content":"cts.elementAttributePairGeospatialValueMatch(${1:elementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:pattern as xs.anyAtomicType}, ${5:options as String})","trigger":"cts.elementAttributePairGeospatialValueMatch","description":"($elementNames,$latitudeNames,$longitudeNames,$pattern,$options)"},{"content":"cts.elementAttributePairGeospatialValueMatch(${1:elementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:pattern as xs.anyAtomicType}, ${5:options as String}, ${6:query as cts.query?})","trigger":"cts.elementAttributePairGeospatialValueMatch","description":"($elementNames,$latitudeNames,$longitudeNames,$pattern,$options,$query)"},{"content":"cts.elementAttributePairGeospatialValueMatch(${1:elementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:pattern as xs.anyAtomicType}, ${5:options as String}, ${6:query as cts.query?}, ${7:qualityWeight as Number?})","trigger":"cts.elementAttributePairGeospatialValueMatch","description":"($elementNames,$latitudeNames,$longitudeNames,$pattern,$options,$query,$qualityWeight)"},{"content":"cts.elementAttributePairGeospatialValueMatch(${1:elementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:pattern as xs.anyAtomicType}, ${5:options as String}, ${6:query as cts.query?}, ${7:qualityWeight as Number?}, ${8:forestIds as String})","trigger":"cts.elementAttributePairGeospatialValueMatch","description":"($elementNames,$latitudeNames,$longitudeNames,$pattern,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.elementAttributePairGeospatialValues(${1:elementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]})","trigger":"cts.elementAttributePairGeospatialValues","description":"($elementNames,$latitudeNames,$longitudeNames)"},{"content":"cts.elementAttributePairGeospatialValues(${1:elementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:start as cts.point?})","trigger":"cts.elementAttributePairGeospatialValues","description":"($elementNames,$latitudeNames,$longitudeNames,$start)"},{"content":"cts.elementAttributePairGeospatialValues(${1:elementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:start as cts.point?}, ${5:options as String})","trigger":"cts.elementAttributePairGeospatialValues","description":"($elementNames,$latitudeNames,$longitudeNames,$start,$options)"},{"content":"cts.elementAttributePairGeospatialValues(${1:elementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:start as cts.point?}, ${5:options as String}, ${6:query as cts.query?})","trigger":"cts.elementAttributePairGeospatialValues","description":"($elementNames,$latitudeNames,$longitudeNames,$start,$options,$query)"},{"content":"cts.elementAttributePairGeospatialValues(${1:elementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:start as cts.point?}, ${5:options as String}, ${6:query as cts.query?}, ${7:qualityWeight as Number?})","trigger":"cts.elementAttributePairGeospatialValues","description":"($elementNames,$latitudeNames,$longitudeNames,$start,$options,$query,$qualityWeight)"},{"content":"cts.elementAttributePairGeospatialValues(${1:elementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:start as cts.point?}, ${5:options as String}, ${6:query as cts.query?}, ${7:qualityWeight as Number?}, ${8:forestIds as String})","trigger":"cts.elementAttributePairGeospatialValues","description":"($elementNames,$latitudeNames,$longitudeNames,$start,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.elementAttributeRangeQuery(${1:elementName as String[]}, ${2:attributeName as String[]}, ${3:operator as String}, ${4:value as (String | Number | Boolean | null)[]})","trigger":"cts.elementAttributeRangeQuery","description":"($elementName,$attributeName,$operator,$value)"},{"content":"cts.elementAttributeRangeQuery(${1:elementName as String[]}, ${2:attributeName as String[]}, ${3:operator as String}, ${4:value as (String | Number | Boolean | null)[]}, ${5:options as String})","trigger":"cts.elementAttributeRangeQuery","description":"($elementName,$attributeName,$operator,$value,$options)"},{"content":"cts.elementAttributeRangeQuery(${1:elementName as String[]}, ${2:attributeName as String[]}, ${3:operator as String}, ${4:value as (String | Number | Boolean | null)[]}, ${5:options as String}, ${6:weight as Number?})","trigger":"cts.elementAttributeRangeQuery","description":"($elementName,$attributeName,$operator,$value,$options,$weight)"},{"content":"cts.elementAttributeRangeQueryAttributeName(${1:query as cts.elementAttributeRangeQuery})","trigger":"cts.elementAttributeRangeQueryAttributeName","description":"($query)"},{"content":"cts.elementAttributeRangeQueryElementName(${1:query as cts.elementAttributeRangeQuery})","trigger":"cts.elementAttributeRangeQueryElementName","description":"($query)"},{"content":"cts.elementAttributeRangeQueryOperator(${1:query as cts.elementAttributeRangeQuery})","trigger":"cts.elementAttributeRangeQueryOperator","description":"($query)"},{"content":"cts.elementAttributeRangeQueryOptions(${1:query as cts.elementAttributeRangeQuery})","trigger":"cts.elementAttributeRangeQueryOptions","description":"($query)"},{"content":"cts.elementAttributeRangeQueryValue(${1:query as cts.elementAttributeRangeQuery})","trigger":"cts.elementAttributeRangeQueryValue","description":"($query)"},{"content":"cts.elementAttributeRangeQueryWeight(${1:query as cts.elementAttributeRangeQuery})","trigger":"cts.elementAttributeRangeQueryWeight","description":"($query)"},{"content":"cts.elementAttributeReference(${1:element as xs.QName}, ${2:attribute as xs.QName})","trigger":"cts.elementAttributeReference","description":"($element,$attribute)"},{"content":"cts.elementAttributeReference(${1:element as xs.QName}, ${2:attribute as xs.QName}, ${3:options as String})","trigger":"cts.elementAttributeReference","description":"($element,$attribute,$options)"},{"content":"cts.elementAttributeValueCoOccurrences(${1:elementName-1 as xs.QName}, ${2:attributeName-1 as xs.QName?}, ${3:elementName-2 as xs.QName}, ${4:attributeName-2 as xs.QName?})","trigger":"cts.elementAttributeValueCoOccurrences","description":"($elementName-1,$attributeName-1,$elementName-2,$attributeName-2)"},{"content":"cts.elementAttributeValueCoOccurrences(${1:elementName-1 as xs.QName}, ${2:attributeName-1 as xs.QName?}, ${3:elementName-2 as xs.QName}, ${4:attributeName-2 as xs.QName?}, ${5:options as String})","trigger":"cts.elementAttributeValueCoOccurrences","description":"($elementName-1,$attributeName-1,$elementName-2,$attributeName-2,$options)"},{"content":"cts.elementAttributeValueCoOccurrences(${1:elementName-1 as xs.QName}, ${2:attributeName-1 as xs.QName?}, ${3:elementName-2 as xs.QName}, ${4:attributeName-2 as xs.QName?}, ${5:options as String}, ${6:query as cts.query?})","trigger":"cts.elementAttributeValueCoOccurrences","description":"($elementName-1,$attributeName-1,$elementName-2,$attributeName-2,$options,$query)"},{"content":"cts.elementAttributeValueCoOccurrences(${1:elementName-1 as xs.QName}, ${2:attributeName-1 as xs.QName?}, ${3:elementName-2 as xs.QName}, ${4:attributeName-2 as xs.QName?}, ${5:options as String}, ${6:query as cts.query?}, ${7:qualityWeight as Number?})","trigger":"cts.elementAttributeValueCoOccurrences","description":"($elementName-1,$attributeName-1,$elementName-2,$attributeName-2,$options,$query,$qualityWeight)"},{"content":"cts.elementAttributeValueCoOccurrences(${1:elementName-1 as xs.QName}, ${2:attributeName-1 as xs.QName?}, ${3:elementName-2 as xs.QName}, ${4:attributeName-2 as xs.QName?}, ${5:options as String}, ${6:query as cts.query?}, ${7:qualityWeight as Number?}, ${8:forestIds as String})","trigger":"cts.elementAttributeValueCoOccurrences","description":"($elementName-1,$attributeName-1,$elementName-2,$attributeName-2,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.elementAttributeValueGeospatialCoOccurrences(${1:elementName-1 as xs.QName}, ${2:attributeName-1 as xs.QName?}, ${3:geoElementName as xs.QName})","trigger":"cts.elementAttributeValueGeospatialCoOccurrences","description":"($elementName-1,$attributeName-1,$geoElementName)"},{"content":"cts.elementAttributeValueGeospatialCoOccurrences(${1:elementName-1 as xs.QName}, ${2:attributeName-1 as xs.QName?}, ${3:geoElementName as xs.QName}, ${4:childName-1 as xs.QName?})","trigger":"cts.elementAttributeValueGeospatialCoOccurrences","description":"($elementName-1,$attributeName-1,$geoElementName,$childName-1)"},{"content":"cts.elementAttributeValueGeospatialCoOccurrences(${1:elementName-1 as xs.QName}, ${2:attributeName-1 as xs.QName?}, ${3:geoElementName as xs.QName}, ${4:childName-1 as xs.QName?}, ${5:childName-2 as xs.QName?})","trigger":"cts.elementAttributeValueGeospatialCoOccurrences","description":"($elementName-1,$attributeName-1,$geoElementName,$childName-1,$childName-2)"},{"content":"cts.elementAttributeValueGeospatialCoOccurrences(${1:elementName-1 as xs.QName}, ${2:attributeName-1 as xs.QName?}, ${3:geoElementName as xs.QName}, ${4:childName-1 as xs.QName?}, ${5:childName-2 as xs.QName?}, ${6:options as String})","trigger":"cts.elementAttributeValueGeospatialCoOccurrences","description":"($elementName-1,$attributeName-1,$geoElementName,$childName-1,$childName-2,$options)"},{"content":"cts.elementAttributeValueGeospatialCoOccurrences(${1:elementName-1 as xs.QName}, ${2:attributeName-1 as xs.QName?}, ${3:geoElementName as xs.QName}, ${4:childName-1 as xs.QName?}, ${5:childName-2 as xs.QName?}, ${6:options as String}, ${7:query as cts.query?})","trigger":"cts.elementAttributeValueGeospatialCoOccurrences","description":"($elementName-1,$attributeName-1,$geoElementName,$childName-1,$childName-2,$options,$query)"},{"content":"cts.elementAttributeValueGeospatialCoOccurrences(${1:elementName-1 as xs.QName}, ${2:attributeName-1 as xs.QName?}, ${3:geoElementName as xs.QName}, ${4:childName-1 as xs.QName?}, ${5:childName-2 as xs.QName?}, ${6:options as String}, ${7:query as cts.query?}, ${8:qualityWeight as Number?})","trigger":"cts.elementAttributeValueGeospatialCoOccurrences","description":"($elementName-1,$attributeName-1,$geoElementName,$childName-1,$childName-2,$options,$query,$qualityWeight)"},{"content":"cts.elementAttributeValueGeospatialCoOccurrences(${1:elementName-1 as xs.QName}, ${2:attributeName-1 as xs.QName?}, ${3:geoElementName as xs.QName}, ${4:childName-1 as xs.QName?}, ${5:childName-2 as xs.QName?}, ${6:options as String}, ${7:query as cts.query?}, ${8:qualityWeight as Number?}, ${9:forestIds as String})","trigger":"cts.elementAttributeValueGeospatialCoOccurrences","description":"($elementName-1,$attributeName-1,$geoElementName,$childName-1,$childName-2,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.elementAttributeValueMatch(${1:elementNames as String[]}, ${2:attributeNames as String[]}, ${3:pattern as xs.anyAtomicType})","trigger":"cts.elementAttributeValueMatch","description":"($elementNames,$attributeNames,$pattern)"},{"content":"cts.elementAttributeValueMatch(${1:elementNames as String[]}, ${2:attributeNames as String[]}, ${3:pattern as xs.anyAtomicType}, ${4:options as String})","trigger":"cts.elementAttributeValueMatch","description":"($elementNames,$attributeNames,$pattern,$options)"},{"content":"cts.elementAttributeValueMatch(${1:elementNames as String[]}, ${2:attributeNames as String[]}, ${3:pattern as xs.anyAtomicType}, ${4:options as String}, ${5:query as cts.query?})","trigger":"cts.elementAttributeValueMatch","description":"($elementNames,$attributeNames,$pattern,$options,$query)"},{"content":"cts.elementAttributeValueMatch(${1:elementNames as String[]}, ${2:attributeNames as String[]}, ${3:pattern as xs.anyAtomicType}, ${4:options as String}, ${5:query as cts.query?}, ${6:qualityWeight as Number?})","trigger":"cts.elementAttributeValueMatch","description":"($elementNames,$attributeNames,$pattern,$options,$query,$qualityWeight)"},{"content":"cts.elementAttributeValueMatch(${1:elementNames as String[]}, ${2:attributeNames as String[]}, ${3:pattern as xs.anyAtomicType}, ${4:options as String}, ${5:query as cts.query?}, ${6:qualityWeight as Number?}, ${7:forestIds as String})","trigger":"cts.elementAttributeValueMatch","description":"($elementNames,$attributeNames,$pattern,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.elementAttributeValueQuery(${1:elementName as String[]}, ${2:attributeName as String[]}, ${3:text as String[]})","trigger":"cts.elementAttributeValueQuery","description":"($elementName,$attributeName,$text)"},{"content":"cts.elementAttributeValueQuery(${1:elementName as String[]}, ${2:attributeName as String[]}, ${3:text as String[]}, ${4:options as String})","trigger":"cts.elementAttributeValueQuery","description":"($elementName,$attributeName,$text,$options)"},{"content":"cts.elementAttributeValueQuery(${1:elementName as String[]}, ${2:attributeName as String[]}, ${3:text as String[]}, ${4:options as String}, ${5:weight as Number?})","trigger":"cts.elementAttributeValueQuery","description":"($elementName,$attributeName,$text,$options,$weight)"},{"content":"cts.elementAttributeValueQueryAttributeName(${1:query as cts.elementAttributeValueQuery})","trigger":"cts.elementAttributeValueQueryAttributeName","description":"($query)"},{"content":"cts.elementAttributeValueQueryElementName(${1:query as cts.elementAttributeValueQuery})","trigger":"cts.elementAttributeValueQueryElementName","description":"($query)"},{"content":"cts.elementAttributeValueQueryOptions(${1:query as cts.elementAttributeValueQuery})","trigger":"cts.elementAttributeValueQueryOptions","description":"($query)"},{"content":"cts.elementAttributeValueQueryText(${1:query as cts.elementAttributeValueQuery})","trigger":"cts.elementAttributeValueQueryText","description":"($query)"},{"content":"cts.elementAttributeValueQueryWeight(${1:query as cts.elementAttributeValueQuery})","trigger":"cts.elementAttributeValueQueryWeight","description":"($query)"},{"content":"cts.elementAttributeValueRanges(${1:elementNames as String[]}, ${2:attributeNames as String[]})","trigger":"cts.elementAttributeValueRanges","description":"($elementNames,$attributeNames)"},{"content":"cts.elementAttributeValueRanges(${1:elementNames as String[]}, ${2:attributeNames as String[]}, ${3:bounds as (String | Number | Boolean | null)})","trigger":"cts.elementAttributeValueRanges","description":"($elementNames,$attributeNames,$bounds)"},{"content":"cts.elementAttributeValueRanges(${1:elementNames as String[]}, ${2:attributeNames as String[]}, ${3:bounds as (String | Number | Boolean | null)}, ${4:options as String})","trigger":"cts.elementAttributeValueRanges","description":"($elementNames,$attributeNames,$bounds,$options)"},{"content":"cts.elementAttributeValueRanges(${1:elementNames as String[]}, ${2:attributeNames as String[]}, ${3:bounds as (String | Number | Boolean | null)}, ${4:options as String}, ${5:query as cts.query?})","trigger":"cts.elementAttributeValueRanges","description":"($elementNames,$attributeNames,$bounds,$options,$query)"},{"content":"cts.elementAttributeValueRanges(${1:elementNames as String[]}, ${2:attributeNames as String[]}, ${3:bounds as (String | Number | Boolean | null)}, ${4:options as String}, ${5:query as cts.query?}, ${6:qualityWeight as Number?})","trigger":"cts.elementAttributeValueRanges","description":"($elementNames,$attributeNames,$bounds,$options,$query,$qualityWeight)"},{"content":"cts.elementAttributeValueRanges(${1:elementNames as String[]}, ${2:attributeNames as String[]}, ${3:bounds as (String | Number | Boolean | null)}, ${4:options as String}, ${5:query as cts.query?}, ${6:qualityWeight as Number?}, ${7:forestIds as String})","trigger":"cts.elementAttributeValueRanges","description":"($elementNames,$attributeNames,$bounds,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.elementAttributeValues(${1:elementNames as String[]}, ${2:attributeNames as String[]})","trigger":"cts.elementAttributeValues","description":"($elementNames,$attributeNames)"},{"content":"cts.elementAttributeValues(${1:elementNames as String[]}, ${2:attributeNames as String[]}, ${3:start as xs.anyAtomicType?})","trigger":"cts.elementAttributeValues","description":"($elementNames,$attributeNames,$start)"},{"content":"cts.elementAttributeValues(${1:elementNames as String[]}, ${2:attributeNames as String[]}, ${3:start as xs.anyAtomicType?}, ${4:options as String})","trigger":"cts.elementAttributeValues","description":"($elementNames,$attributeNames,$start,$options)"},{"content":"cts.elementAttributeValues(${1:elementNames as String[]}, ${2:attributeNames as String[]}, ${3:start as xs.anyAtomicType?}, ${4:options as String}, ${5:query as cts.query?})","trigger":"cts.elementAttributeValues","description":"($elementNames,$attributeNames,$start,$options,$query)"},{"content":"cts.elementAttributeValues(${1:elementNames as String[]}, ${2:attributeNames as String[]}, ${3:start as xs.anyAtomicType?}, ${4:options as String}, ${5:query as cts.query?}, ${6:qualityWeight as Number?})","trigger":"cts.elementAttributeValues","description":"($elementNames,$attributeNames,$start,$options,$query,$qualityWeight)"},{"content":"cts.elementAttributeValues(${1:elementNames as String[]}, ${2:attributeNames as String[]}, ${3:start as xs.anyAtomicType?}, ${4:options as String}, ${5:query as cts.query?}, ${6:qualityWeight as Number?}, ${7:forestIds as String})","trigger":"cts.elementAttributeValues","description":"($elementNames,$attributeNames,$start,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.elementAttributeWordMatch(${1:elementNames as String[]}, ${2:attributeNames as String[]}, ${3:pattern as String})","trigger":"cts.elementAttributeWordMatch","description":"($elementNames,$attributeNames,$pattern)"},{"content":"cts.elementAttributeWordMatch(${1:elementNames as String[]}, ${2:attributeNames as String[]}, ${3:pattern as String}, ${4:options as String})","trigger":"cts.elementAttributeWordMatch","description":"($elementNames,$attributeNames,$pattern,$options)"},{"content":"cts.elementAttributeWordMatch(${1:elementNames as String[]}, ${2:attributeNames as String[]}, ${3:pattern as String}, ${4:options as String}, ${5:query as cts.query?})","trigger":"cts.elementAttributeWordMatch","description":"($elementNames,$attributeNames,$pattern,$options,$query)"},{"content":"cts.elementAttributeWordMatch(${1:elementNames as String[]}, ${2:attributeNames as String[]}, ${3:pattern as String}, ${4:options as String}, ${5:query as cts.query?}, ${6:qualityWeight as Number?})","trigger":"cts.elementAttributeWordMatch","description":"($elementNames,$attributeNames,$pattern,$options,$query,$qualityWeight)"},{"content":"cts.elementAttributeWordMatch(${1:elementNames as String[]}, ${2:attributeNames as String[]}, ${3:pattern as String}, ${4:options as String}, ${5:query as cts.query?}, ${6:qualityWeight as Number?}, ${7:forestIds as String})","trigger":"cts.elementAttributeWordMatch","description":"($elementNames,$attributeNames,$pattern,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.elementAttributeWordQuery(${1:elementName as String[]}, ${2:attributeName as String[]}, ${3:text as String[]})","trigger":"cts.elementAttributeWordQuery","description":"($elementName,$attributeName,$text)"},{"content":"cts.elementAttributeWordQuery(${1:elementName as String[]}, ${2:attributeName as String[]}, ${3:text as String[]}, ${4:options as String})","trigger":"cts.elementAttributeWordQuery","description":"($elementName,$attributeName,$text,$options)"},{"content":"cts.elementAttributeWordQuery(${1:elementName as String[]}, ${2:attributeName as String[]}, ${3:text as String[]}, ${4:options as String}, ${5:weight as Number?})","trigger":"cts.elementAttributeWordQuery","description":"($elementName,$attributeName,$text,$options,$weight)"},{"content":"cts.elementAttributeWordQueryAttributeName(${1:query as cts.elementAttributeWordQuery})","trigger":"cts.elementAttributeWordQueryAttributeName","description":"($query)"},{"content":"cts.elementAttributeWordQueryElementName(${1:query as cts.elementAttributeWordQuery})","trigger":"cts.elementAttributeWordQueryElementName","description":"($query)"},{"content":"cts.elementAttributeWordQueryOptions(${1:query as cts.elementAttributeWordQuery})","trigger":"cts.elementAttributeWordQueryOptions","description":"($query)"},{"content":"cts.elementAttributeWordQueryText(${1:query as cts.elementAttributeWordQuery})","trigger":"cts.elementAttributeWordQueryText","description":"($query)"},{"content":"cts.elementAttributeWordQueryWeight(${1:query as cts.elementAttributeWordQuery})","trigger":"cts.elementAttributeWordQueryWeight","description":"($query)"},{"content":"cts.elementAttributeWords(${1:elementNames as String[]}, ${2:attributeNames as String[]})","trigger":"cts.elementAttributeWords","description":"($elementNames,$attributeNames)"},{"content":"cts.elementAttributeWords(${1:elementNames as String[]}, ${2:attributeNames as String[]}, ${3:start as String?})","trigger":"cts.elementAttributeWords","description":"($elementNames,$attributeNames,$start)"},{"content":"cts.elementAttributeWords(${1:elementNames as String[]}, ${2:attributeNames as String[]}, ${3:start as String?}, ${4:options as String})","trigger":"cts.elementAttributeWords","description":"($elementNames,$attributeNames,$start,$options)"},{"content":"cts.elementAttributeWords(${1:elementNames as String[]}, ${2:attributeNames as String[]}, ${3:start as String?}, ${4:options as String}, ${5:query as cts.query?})","trigger":"cts.elementAttributeWords","description":"($elementNames,$attributeNames,$start,$options,$query)"},{"content":"cts.elementAttributeWords(${1:elementNames as String[]}, ${2:attributeNames as String[]}, ${3:start as String?}, ${4:options as String}, ${5:query as cts.query?}, ${6:qualityWeight as Number?})","trigger":"cts.elementAttributeWords","description":"($elementNames,$attributeNames,$start,$options,$query,$qualityWeight)"},{"content":"cts.elementAttributeWords(${1:elementNames as String[]}, ${2:attributeNames as String[]}, ${3:start as String?}, ${4:options as String}, ${5:query as cts.query?}, ${6:qualityWeight as Number?}, ${7:forestIds as String})","trigger":"cts.elementAttributeWords","description":"($elementNames,$attributeNames,$start,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.elementChildGeospatialBoxes(${1:parentElementNames as String[]}, ${2:childElementNames as String[]})","trigger":"cts.elementChildGeospatialBoxes","description":"($parentElementNames,$childElementNames)"},{"content":"cts.elementChildGeospatialBoxes(${1:parentElementNames as String[]}, ${2:childElementNames as String[]}, ${3:latitudeBounds as String})","trigger":"cts.elementChildGeospatialBoxes","description":"($parentElementNames,$childElementNames,$latitudeBounds)"},{"content":"cts.elementChildGeospatialBoxes(${1:parentElementNames as String[]}, ${2:childElementNames as String[]}, ${3:latitudeBounds as String}, ${4:longitudeBounds as String})","trigger":"cts.elementChildGeospatialBoxes","description":"($parentElementNames,$childElementNames,$latitudeBounds,$longitudeBounds)"},{"content":"cts.elementChildGeospatialBoxes(${1:parentElementNames as String[]}, ${2:childElementNames as String[]}, ${3:latitudeBounds as String}, ${4:longitudeBounds as String}, ${5:options as String})","trigger":"cts.elementChildGeospatialBoxes","description":"($parentElementNames,$childElementNames,$latitudeBounds,$longitudeBounds,$options)"},{"content":"cts.elementChildGeospatialBoxes(${1:parentElementNames as String[]}, ${2:childElementNames as String[]}, ${3:latitudeBounds as String}, ${4:longitudeBounds as String}, ${5:options as String}, ${6:query as cts.query?})","trigger":"cts.elementChildGeospatialBoxes","description":"($parentElementNames,$childElementNames,$latitudeBounds,$longitudeBounds,$options,$query)"},{"content":"cts.elementChildGeospatialBoxes(${1:parentElementNames as String[]}, ${2:childElementNames as String[]}, ${3:latitudeBounds as String}, ${4:longitudeBounds as String}, ${5:options as String}, ${6:query as cts.query?}, ${7:qualityWeight as Number?})","trigger":"cts.elementChildGeospatialBoxes","description":"($parentElementNames,$childElementNames,$latitudeBounds,$longitudeBounds,$options,$query,$qualityWeight)"},{"content":"cts.elementChildGeospatialBoxes(${1:parentElementNames as String[]}, ${2:childElementNames as String[]}, ${3:latitudeBounds as String}, ${4:longitudeBounds as String}, ${5:options as String}, ${6:query as cts.query?}, ${7:qualityWeight as Number?}, ${8:forestIds as String})","trigger":"cts.elementChildGeospatialBoxes","description":"($parentElementNames,$childElementNames,$latitudeBounds,$longitudeBounds,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.elementChildGeospatialQuery(${1:parentElementName as String[]}, ${2:childElementNames as String[]}, ${3:regions as String[]})","trigger":"cts.elementChildGeospatialQuery","description":"($parentElementName,$childElementNames,$regions)"},{"content":"cts.elementChildGeospatialQuery(${1:parentElementName as String[]}, ${2:childElementNames as String[]}, ${3:regions as String[]}, ${4:options as String})","trigger":"cts.elementChildGeospatialQuery","description":"($parentElementName,$childElementNames,$regions,$options)"},{"content":"cts.elementChildGeospatialQuery(${1:parentElementName as String[]}, ${2:childElementNames as String[]}, ${3:regions as String[]}, ${4:options as String}, ${5:weight as Number?})","trigger":"cts.elementChildGeospatialQuery","description":"($parentElementName,$childElementNames,$regions,$options,$weight)"},{"content":"cts.elementChildGeospatialQueryChildName(${1:query as cts.elementChildGeospatialQuery})","trigger":"cts.elementChildGeospatialQueryChildName","description":"($query)"},{"content":"cts.elementChildGeospatialQueryElementName(${1:query as cts.elementChildGeospatialQuery})","trigger":"cts.elementChildGeospatialQueryElementName","description":"($query)"},{"content":"cts.elementChildGeospatialQueryOptions(${1:query as cts.elementChildGeospatialQuery})","trigger":"cts.elementChildGeospatialQueryOptions","description":"($query)"},{"content":"cts.elementChildGeospatialQueryRegion(${1:query as cts.elementChildGeospatialQuery})","trigger":"cts.elementChildGeospatialQueryRegion","description":"($query)"},{"content":"cts.elementChildGeospatialQueryWeight(${1:query as cts.elementChildGeospatialQuery})","trigger":"cts.elementChildGeospatialQueryWeight","description":"($query)"},{"content":"cts.elementChildGeospatialValueMatch(${1:elementNames as String[]}, ${2:childNames as String[]}, ${3:pattern as xs.anyAtomicType})","trigger":"cts.elementChildGeospatialValueMatch","description":"($elementNames,$childNames,$pattern)"},{"content":"cts.elementChildGeospatialValueMatch(${1:elementNames as String[]}, ${2:childNames as String[]}, ${3:pattern as xs.anyAtomicType}, ${4:options as String})","trigger":"cts.elementChildGeospatialValueMatch","description":"($elementNames,$childNames,$pattern,$options)"},{"content":"cts.elementChildGeospatialValueMatch(${1:elementNames as String[]}, ${2:childNames as String[]}, ${3:pattern as xs.anyAtomicType}, ${4:options as String}, ${5:query as cts.query?})","trigger":"cts.elementChildGeospatialValueMatch","description":"($elementNames,$childNames,$pattern,$options,$query)"},{"content":"cts.elementChildGeospatialValueMatch(${1:elementNames as String[]}, ${2:childNames as String[]}, ${3:pattern as xs.anyAtomicType}, ${4:options as String}, ${5:query as cts.query?}, ${6:qualityWeight as Number?})","trigger":"cts.elementChildGeospatialValueMatch","description":"($elementNames,$childNames,$pattern,$options,$query,$qualityWeight)"},{"content":"cts.elementChildGeospatialValueMatch(${1:elementNames as String[]}, ${2:childNames as String[]}, ${3:pattern as xs.anyAtomicType}, ${4:options as String}, ${5:query as cts.query?}, ${6:qualityWeight as Number?}, ${7:forestIds as String})","trigger":"cts.elementChildGeospatialValueMatch","description":"($elementNames,$childNames,$pattern,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.elementChildGeospatialValues(${1:elementNames as String[]}, ${2:childNames as String[]})","trigger":"cts.elementChildGeospatialValues","description":"($elementNames,$childNames)"},{"content":"cts.elementChildGeospatialValues(${1:elementNames as String[]}, ${2:childNames as String[]}, ${3:start as cts.point?})","trigger":"cts.elementChildGeospatialValues","description":"($elementNames,$childNames,$start)"},{"content":"cts.elementChildGeospatialValues(${1:elementNames as String[]}, ${2:childNames as String[]}, ${3:start as cts.point?}, ${4:options as String})","trigger":"cts.elementChildGeospatialValues","description":"($elementNames,$childNames,$start,$options)"},{"content":"cts.elementChildGeospatialValues(${1:elementNames as String[]}, ${2:childNames as String[]}, ${3:start as cts.point?}, ${4:options as String}, ${5:query as cts.query?})","trigger":"cts.elementChildGeospatialValues","description":"($elementNames,$childNames,$start,$options,$query)"},{"content":"cts.elementChildGeospatialValues(${1:elementNames as String[]}, ${2:childNames as String[]}, ${3:start as cts.point?}, ${4:options as String}, ${5:query as cts.query?}, ${6:qualityWeight as Number?})","trigger":"cts.elementChildGeospatialValues","description":"($elementNames,$childNames,$start,$options,$query,$qualityWeight)"},{"content":"cts.elementChildGeospatialValues(${1:elementNames as String[]}, ${2:childNames as String[]}, ${3:start as cts.point?}, ${4:options as String}, ${5:query as cts.query?}, ${6:qualityWeight as Number?}, ${7:forestIds as String})","trigger":"cts.elementChildGeospatialValues","description":"($elementNames,$childNames,$start,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.elementGeospatialBoxes(${1:elementNames as String[]})","trigger":"cts.elementGeospatialBoxes","description":"($elementNames)"},{"content":"cts.elementGeospatialBoxes(${1:elementNames as String[]}, ${2:latitudeBounds as String})","trigger":"cts.elementGeospatialBoxes","description":"($elementNames,$latitudeBounds)"},{"content":"cts.elementGeospatialBoxes(${1:elementNames as String[]}, ${2:latitudeBounds as String}, ${3:longitudeBounds as String})","trigger":"cts.elementGeospatialBoxes","description":"($elementNames,$latitudeBounds,$longitudeBounds)"},{"content":"cts.elementGeospatialBoxes(${1:elementNames as String[]}, ${2:latitudeBounds as String}, ${3:longitudeBounds as String}, ${4:options as String})","trigger":"cts.elementGeospatialBoxes","description":"($elementNames,$latitudeBounds,$longitudeBounds,$options)"},{"content":"cts.elementGeospatialBoxes(${1:elementNames as String[]}, ${2:latitudeBounds as String}, ${3:longitudeBounds as String}, ${4:options as String}, ${5:query as cts.query?})","trigger":"cts.elementGeospatialBoxes","description":"($elementNames,$latitudeBounds,$longitudeBounds,$options,$query)"},{"content":"cts.elementGeospatialBoxes(${1:elementNames as String[]}, ${2:latitudeBounds as String}, ${3:longitudeBounds as String}, ${4:options as String}, ${5:query as cts.query?}, ${6:qualityWeight as Number?})","trigger":"cts.elementGeospatialBoxes","description":"($elementNames,$latitudeBounds,$longitudeBounds,$options,$query,$qualityWeight)"},{"content":"cts.elementGeospatialBoxes(${1:elementNames as String[]}, ${2:latitudeBounds as String}, ${3:longitudeBounds as String}, ${4:options as String}, ${5:query as cts.query?}, ${6:qualityWeight as Number?}, ${7:forestIds as String})","trigger":"cts.elementGeospatialBoxes","description":"($elementNames,$latitudeBounds,$longitudeBounds,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.elementGeospatialQuery(${1:elementName as String[]}, ${2:regions as String[]})","trigger":"cts.elementGeospatialQuery","description":"($elementName,$regions)"},{"content":"cts.elementGeospatialQuery(${1:elementName as String[]}, ${2:regions as String[]}, ${3:options as String})","trigger":"cts.elementGeospatialQuery","description":"($elementName,$regions,$options)"},{"content":"cts.elementGeospatialQuery(${1:elementName as String[]}, ${2:regions as String[]}, ${3:options as String}, ${4:weight as Number?})","trigger":"cts.elementGeospatialQuery","description":"($elementName,$regions,$options,$weight)"},{"content":"cts.elementGeospatialQueryElementName(${1:query as cts.elementGeospatialQuery})","trigger":"cts.elementGeospatialQueryElementName","description":"($query)"},{"content":"cts.elementGeospatialQueryOptions(${1:query as cts.elementGeospatialQuery})","trigger":"cts.elementGeospatialQueryOptions","description":"($query)"},{"content":"cts.elementGeospatialQueryRegion(${1:query as cts.elementGeospatialQuery})","trigger":"cts.elementGeospatialQueryRegion","description":"($query)"},{"content":"cts.elementGeospatialQueryWeight(${1:query as cts.elementGeospatialQuery})","trigger":"cts.elementGeospatialQueryWeight","description":"($query)"},{"content":"cts.elementGeospatialValueMatch(${1:elementNames as String[]}, ${2:pattern as xs.anyAtomicType})","trigger":"cts.elementGeospatialValueMatch","description":"($elementNames,$pattern)"},{"content":"cts.elementGeospatialValueMatch(${1:elementNames as String[]}, ${2:pattern as xs.anyAtomicType}, ${3:options as String})","trigger":"cts.elementGeospatialValueMatch","description":"($elementNames,$pattern,$options)"},{"content":"cts.elementGeospatialValueMatch(${1:elementNames as String[]}, ${2:pattern as xs.anyAtomicType}, ${3:options as String}, ${4:query as cts.query?})","trigger":"cts.elementGeospatialValueMatch","description":"($elementNames,$pattern,$options,$query)"},{"content":"cts.elementGeospatialValueMatch(${1:elementNames as String[]}, ${2:pattern as xs.anyAtomicType}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?})","trigger":"cts.elementGeospatialValueMatch","description":"($elementNames,$pattern,$options,$query,$qualityWeight)"},{"content":"cts.elementGeospatialValueMatch(${1:elementNames as String[]}, ${2:pattern as xs.anyAtomicType}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?}, ${6:forestIds as String})","trigger":"cts.elementGeospatialValueMatch","description":"($elementNames,$pattern,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.elementGeospatialValues(${1:elementNames as String[]})","trigger":"cts.elementGeospatialValues","description":"($elementNames)"},{"content":"cts.elementGeospatialValues(${1:elementNames as String[]}, ${2:start as cts.point?})","trigger":"cts.elementGeospatialValues","description":"($elementNames,$start)"},{"content":"cts.elementGeospatialValues(${1:elementNames as String[]}, ${2:start as cts.point?}, ${3:options as String})","trigger":"cts.elementGeospatialValues","description":"($elementNames,$start,$options)"},{"content":"cts.elementGeospatialValues(${1:elementNames as String[]}, ${2:start as cts.point?}, ${3:options as String}, ${4:query as cts.query?})","trigger":"cts.elementGeospatialValues","description":"($elementNames,$start,$options,$query)"},{"content":"cts.elementGeospatialValues(${1:elementNames as String[]}, ${2:start as cts.point?}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?})","trigger":"cts.elementGeospatialValues","description":"($elementNames,$start,$options,$query,$qualityWeight)"},{"content":"cts.elementGeospatialValues(${1:elementNames as String[]}, ${2:start as cts.point?}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?}, ${6:forestIds as String})","trigger":"cts.elementGeospatialValues","description":"($elementNames,$start,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.elementPairGeospatialBoxes(${1:parentElementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]})","trigger":"cts.elementPairGeospatialBoxes","description":"($parentElementNames,$latitudeNames,$longitudeNames)"},{"content":"cts.elementPairGeospatialBoxes(${1:parentElementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:latitudeBounds as String})","trigger":"cts.elementPairGeospatialBoxes","description":"($parentElementNames,$latitudeNames,$longitudeNames,$latitudeBounds)"},{"content":"cts.elementPairGeospatialBoxes(${1:parentElementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:latitudeBounds as String}, ${5:longitudeBounds as String})","trigger":"cts.elementPairGeospatialBoxes","description":"($parentElementNames,$latitudeNames,$longitudeNames,$latitudeBounds,$longitudeBounds)"},{"content":"cts.elementPairGeospatialBoxes(${1:parentElementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:latitudeBounds as String}, ${5:longitudeBounds as String}, ${6:options as String})","trigger":"cts.elementPairGeospatialBoxes","description":"($parentElementNames,$latitudeNames,$longitudeNames,$latitudeBounds,$longitudeBounds,$options)"},{"content":"cts.elementPairGeospatialBoxes(${1:parentElementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:latitudeBounds as String}, ${5:longitudeBounds as String}, ${6:options as String}, ${7:query as cts.query?})","trigger":"cts.elementPairGeospatialBoxes","description":"($parentElementNames,$latitudeNames,$longitudeNames,$latitudeBounds,$longitudeBounds,$options,$query)"},{"content":"cts.elementPairGeospatialBoxes(${1:parentElementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:latitudeBounds as String}, ${5:longitudeBounds as String}, ${6:options as String}, ${7:query as cts.query?}, ${8:qualityWeight as Number?})","trigger":"cts.elementPairGeospatialBoxes","description":"($parentElementNames,$latitudeNames,$longitudeNames,$latitudeBounds,$longitudeBounds,$options,$query,$qualityWeight)"},{"content":"cts.elementPairGeospatialBoxes(${1:parentElementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:latitudeBounds as String}, ${5:longitudeBounds as String}, ${6:options as String}, ${7:query as cts.query?}, ${8:qualityWeight as Number?}, ${9:forestIds as String})","trigger":"cts.elementPairGeospatialBoxes","description":"($parentElementNames,$latitudeNames,$longitudeNames,$latitudeBounds,$longitudeBounds,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.elementPairGeospatialQuery(${1:elementName as String[]}, ${2:latitudeElementNames as String[]}, ${3:longitudeElementNames as String[]}, ${4:regions as String[]})","trigger":"cts.elementPairGeospatialQuery","description":"($elementName,$latitudeElementNames,$longitudeElementNames,$regions)"},{"content":"cts.elementPairGeospatialQuery(${1:elementName as String[]}, ${2:latitudeElementNames as String[]}, ${3:longitudeElementNames as String[]}, ${4:regions as String[]}, ${5:options as String})","trigger":"cts.elementPairGeospatialQuery","description":"($elementName,$latitudeElementNames,$longitudeElementNames,$regions,$options)"},{"content":"cts.elementPairGeospatialQuery(${1:elementName as String[]}, ${2:latitudeElementNames as String[]}, ${3:longitudeElementNames as String[]}, ${4:regions as String[]}, ${5:options as String}, ${6:weight as Number?})","trigger":"cts.elementPairGeospatialQuery","description":"($elementName,$latitudeElementNames,$longitudeElementNames,$regions,$options,$weight)"},{"content":"cts.elementPairGeospatialQueryElementName(${1:query as cts.elementPairGeospatialQuery})","trigger":"cts.elementPairGeospatialQueryElementName","description":"($query)"},{"content":"cts.elementPairGeospatialQueryLatitudeName(${1:query as cts.elementPairGeospatialQuery})","trigger":"cts.elementPairGeospatialQueryLatitudeName","description":"($query)"},{"content":"cts.elementPairGeospatialQueryLongitudeName(${1:query as cts.elementPairGeospatialQuery})","trigger":"cts.elementPairGeospatialQueryLongitudeName","description":"($query)"},{"content":"cts.elementPairGeospatialQueryOptions(${1:query as cts.elementPairGeospatialQuery})","trigger":"cts.elementPairGeospatialQueryOptions","description":"($query)"},{"content":"cts.elementPairGeospatialQueryRegion(${1:query as cts.elementPairGeospatialQuery})","trigger":"cts.elementPairGeospatialQueryRegion","description":"($query)"},{"content":"cts.elementPairGeospatialQueryWeight(${1:query as cts.elementPairGeospatialQuery})","trigger":"cts.elementPairGeospatialQueryWeight","description":"($query)"},{"content":"cts.elementPairGeospatialValueMatch(${1:elementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:pattern as xs.anyAtomicType})","trigger":"cts.elementPairGeospatialValueMatch","description":"($elementNames,$latitudeNames,$longitudeNames,$pattern)"},{"content":"cts.elementPairGeospatialValueMatch(${1:elementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:pattern as xs.anyAtomicType}, ${5:options as String})","trigger":"cts.elementPairGeospatialValueMatch","description":"($elementNames,$latitudeNames,$longitudeNames,$pattern,$options)"},{"content":"cts.elementPairGeospatialValueMatch(${1:elementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:pattern as xs.anyAtomicType}, ${5:options as String}, ${6:query as cts.query?})","trigger":"cts.elementPairGeospatialValueMatch","description":"($elementNames,$latitudeNames,$longitudeNames,$pattern,$options,$query)"},{"content":"cts.elementPairGeospatialValueMatch(${1:elementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:pattern as xs.anyAtomicType}, ${5:options as String}, ${6:query as cts.query?}, ${7:qualityWeight as Number?})","trigger":"cts.elementPairGeospatialValueMatch","description":"($elementNames,$latitudeNames,$longitudeNames,$pattern,$options,$query,$qualityWeight)"},{"content":"cts.elementPairGeospatialValueMatch(${1:elementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:pattern as xs.anyAtomicType}, ${5:options as String}, ${6:query as cts.query?}, ${7:qualityWeight as Number?}, ${8:forestIds as String})","trigger":"cts.elementPairGeospatialValueMatch","description":"($elementNames,$latitudeNames,$longitudeNames,$pattern,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.elementPairGeospatialValues(${1:elementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]})","trigger":"cts.elementPairGeospatialValues","description":"($elementNames,$latitudeNames,$longitudeNames)"},{"content":"cts.elementPairGeospatialValues(${1:elementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:start as cts.point?})","trigger":"cts.elementPairGeospatialValues","description":"($elementNames,$latitudeNames,$longitudeNames,$start)"},{"content":"cts.elementPairGeospatialValues(${1:elementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:start as cts.point?}, ${5:options as String})","trigger":"cts.elementPairGeospatialValues","description":"($elementNames,$latitudeNames,$longitudeNames,$start,$options)"},{"content":"cts.elementPairGeospatialValues(${1:elementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:start as cts.point?}, ${5:options as String}, ${6:query as cts.query?})","trigger":"cts.elementPairGeospatialValues","description":"($elementNames,$latitudeNames,$longitudeNames,$start,$options,$query)"},{"content":"cts.elementPairGeospatialValues(${1:elementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:start as cts.point?}, ${5:options as String}, ${6:query as cts.query?}, ${7:qualityWeight as Number?})","trigger":"cts.elementPairGeospatialValues","description":"($elementNames,$latitudeNames,$longitudeNames,$start,$options,$query,$qualityWeight)"},{"content":"cts.elementPairGeospatialValues(${1:elementNames as String[]}, ${2:latitudeNames as String[]}, ${3:longitudeNames as String[]}, ${4:start as cts.point?}, ${5:options as String}, ${6:query as cts.query?}, ${7:qualityWeight as Number?}, ${8:forestIds as String})","trigger":"cts.elementPairGeospatialValues","description":"($elementNames,$latitudeNames,$longitudeNames,$start,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.elementQuery(${1:elementName as String[]}, ${2:query as cts.query})","trigger":"cts.elementQuery","description":"($elementName,$query)"},{"content":"cts.elementQueryElementName(${1:query as cts.elementQuery})","trigger":"cts.elementQueryElementName","description":"($query)"},{"content":"cts.elementQueryQuery(${1:query as cts.elementQuery})","trigger":"cts.elementQueryQuery","description":"($query)"},{"content":"cts.elementRangeQuery(${1:elementName as String[]}, ${2:operator as String}, ${3:value as (String | Number | Boolean | null)[]})","trigger":"cts.elementRangeQuery","description":"($elementName,$operator,$value)"},{"content":"cts.elementRangeQuery(${1:elementName as String[]}, ${2:operator as String}, ${3:value as (String | Number | Boolean | null)[]}, ${4:options as String})","trigger":"cts.elementRangeQuery","description":"($elementName,$operator,$value,$options)"},{"content":"cts.elementRangeQuery(${1:elementName as String[]}, ${2:operator as String}, ${3:value as (String | Number | Boolean | null)[]}, ${4:options as String}, ${5:weight as Number?})","trigger":"cts.elementRangeQuery","description":"($elementName,$operator,$value,$options,$weight)"},{"content":"cts.elementRangeQueryElementName(${1:query as cts.elementRangeQuery})","trigger":"cts.elementRangeQueryElementName","description":"($query)"},{"content":"cts.elementRangeQueryOperator(${1:query as cts.elementRangeQuery})","trigger":"cts.elementRangeQueryOperator","description":"($query)"},{"content":"cts.elementRangeQueryOptions(${1:query as cts.elementRangeQuery})","trigger":"cts.elementRangeQueryOptions","description":"($query)"},{"content":"cts.elementRangeQueryValue(${1:query as cts.elementRangeQuery})","trigger":"cts.elementRangeQueryValue","description":"($query)"},{"content":"cts.elementRangeQueryWeight(${1:query as cts.elementRangeQuery})","trigger":"cts.elementRangeQueryWeight","description":"($query)"},{"content":"cts.elementReference(${1:element as xs.QName})","trigger":"cts.elementReference","description":"($element)"},{"content":"cts.elementReference(${1:element as xs.QName}, ${2:options as String})","trigger":"cts.elementReference","description":"($element,$options)"},{"content":"cts.elementValueCoOccurrences(${1:elementName-1 as xs.QName}, ${2:elementName-2 as xs.QName})","trigger":"cts.elementValueCoOccurrences","description":"($elementName-1,$elementName-2)"},{"content":"cts.elementValueCoOccurrences(${1:elementName-1 as xs.QName}, ${2:elementName-2 as xs.QName}, ${3:options as String})","trigger":"cts.elementValueCoOccurrences","description":"($elementName-1,$elementName-2,$options)"},{"content":"cts.elementValueCoOccurrences(${1:elementName-1 as xs.QName}, ${2:elementName-2 as xs.QName}, ${3:options as String}, ${4:query as cts.query?})","trigger":"cts.elementValueCoOccurrences","description":"($elementName-1,$elementName-2,$options,$query)"},{"content":"cts.elementValueCoOccurrences(${1:elementName-1 as xs.QName}, ${2:elementName-2 as xs.QName}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?})","trigger":"cts.elementValueCoOccurrences","description":"($elementName-1,$elementName-2,$options,$query,$qualityWeight)"},{"content":"cts.elementValueCoOccurrences(${1:elementName-1 as xs.QName}, ${2:elementName-2 as xs.QName}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?}, ${6:forestIds as String})","trigger":"cts.elementValueCoOccurrences","description":"($elementName-1,$elementName-2,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.elementValueGeospatialCoOccurrences(${1:elementName-1 as xs.QName}, ${2:geoElementName as xs.QName})","trigger":"cts.elementValueGeospatialCoOccurrences","description":"($elementName-1,$geoElementName)"},{"content":"cts.elementValueGeospatialCoOccurrences(${1:elementName-1 as xs.QName}, ${2:geoElementName as xs.QName}, ${3:childName-1 as xs.QName?})","trigger":"cts.elementValueGeospatialCoOccurrences","description":"($elementName-1,$geoElementName,$childName-1)"},{"content":"cts.elementValueGeospatialCoOccurrences(${1:elementName-1 as xs.QName}, ${2:geoElementName as xs.QName}, ${3:childName-1 as xs.QName?}, ${4:childName-2 as xs.QName?})","trigger":"cts.elementValueGeospatialCoOccurrences","description":"($elementName-1,$geoElementName,$childName-1,$childName-2)"},{"content":"cts.elementValueGeospatialCoOccurrences(${1:elementName-1 as xs.QName}, ${2:geoElementName as xs.QName}, ${3:childName-1 as xs.QName?}, ${4:childName-2 as xs.QName?}, ${5:options as String})","trigger":"cts.elementValueGeospatialCoOccurrences","description":"($elementName-1,$geoElementName,$childName-1,$childName-2,$options)"},{"content":"cts.elementValueGeospatialCoOccurrences(${1:elementName-1 as xs.QName}, ${2:geoElementName as xs.QName}, ${3:childName-1 as xs.QName?}, ${4:childName-2 as xs.QName?}, ${5:options as String}, ${6:query as cts.query?})","trigger":"cts.elementValueGeospatialCoOccurrences","description":"($elementName-1,$geoElementName,$childName-1,$childName-2,$options,$query)"},{"content":"cts.elementValueGeospatialCoOccurrences(${1:elementName-1 as xs.QName}, ${2:geoElementName as xs.QName}, ${3:childName-1 as xs.QName?}, ${4:childName-2 as xs.QName?}, ${5:options as String}, ${6:query as cts.query?}, ${7:qualityWeight as Number?})","trigger":"cts.elementValueGeospatialCoOccurrences","description":"($elementName-1,$geoElementName,$childName-1,$childName-2,$options,$query,$qualityWeight)"},{"content":"cts.elementValueGeospatialCoOccurrences(${1:elementName-1 as xs.QName}, ${2:geoElementName as xs.QName}, ${3:childName-1 as xs.QName?}, ${4:childName-2 as xs.QName?}, ${5:options as String}, ${6:query as cts.query?}, ${7:qualityWeight as Number?}, ${8:forestIds as String})","trigger":"cts.elementValueGeospatialCoOccurrences","description":"($elementName-1,$geoElementName,$childName-1,$childName-2,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.elementValueMatch(${1:elementNames as String[]}, ${2:pattern as xs.anyAtomicType})","trigger":"cts.elementValueMatch","description":"($elementNames,$pattern)"},{"content":"cts.elementValueMatch(${1:elementNames as String[]}, ${2:pattern as xs.anyAtomicType}, ${3:options as String})","trigger":"cts.elementValueMatch","description":"($elementNames,$pattern,$options)"},{"content":"cts.elementValueMatch(${1:elementNames as String[]}, ${2:pattern as xs.anyAtomicType}, ${3:options as String}, ${4:query as cts.query?})","trigger":"cts.elementValueMatch","description":"($elementNames,$pattern,$options,$query)"},{"content":"cts.elementValueMatch(${1:elementNames as String[]}, ${2:pattern as xs.anyAtomicType}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?})","trigger":"cts.elementValueMatch","description":"($elementNames,$pattern,$options,$query,$qualityWeight)"},{"content":"cts.elementValueMatch(${1:elementNames as String[]}, ${2:pattern as xs.anyAtomicType}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?}, ${6:forestIds as String})","trigger":"cts.elementValueMatch","description":"($elementNames,$pattern,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.elementValueQuery(${1:elementName as String[]}, ${2:text as String[]})","trigger":"cts.elementValueQuery","description":"($elementName,$text)"},{"content":"cts.elementValueQuery(${1:elementName as String[]}, ${2:text as String[]}, ${3:options as String})","trigger":"cts.elementValueQuery","description":"($elementName,$text,$options)"},{"content":"cts.elementValueQuery(${1:elementName as String[]}, ${2:text as String[]}, ${3:options as String}, ${4:weight as Number?})","trigger":"cts.elementValueQuery","description":"($elementName,$text,$options,$weight)"},{"content":"cts.elementValueQueryElementName(${1:query as cts.elementValueQuery})","trigger":"cts.elementValueQueryElementName","description":"($query)"},{"content":"cts.elementValueQueryOptions(${1:query as cts.elementValueQuery})","trigger":"cts.elementValueQueryOptions","description":"($query)"},{"content":"cts.elementValueQueryText(${1:query as cts.elementValueQuery})","trigger":"cts.elementValueQueryText","description":"($query)"},{"content":"cts.elementValueQueryWeight(${1:query as cts.elementValueQuery})","trigger":"cts.elementValueQueryWeight","description":"($query)"},{"content":"cts.elementValueRanges(${1:elementNames as String[]})","trigger":"cts.elementValueRanges","description":"($elementNames)"},{"content":"cts.elementValueRanges(${1:elementNames as String[]}, ${2:bounds as (String | Number | Boolean | null)})","trigger":"cts.elementValueRanges","description":"($elementNames,$bounds)"},{"content":"cts.elementValueRanges(${1:elementNames as String[]}, ${2:bounds as (String | Number | Boolean | null)}, ${3:options as String})","trigger":"cts.elementValueRanges","description":"($elementNames,$bounds,$options)"},{"content":"cts.elementValueRanges(${1:elementNames as String[]}, ${2:bounds as (String | Number | Boolean | null)}, ${3:options as String}, ${4:query as cts.query?})","trigger":"cts.elementValueRanges","description":"($elementNames,$bounds,$options,$query)"},{"content":"cts.elementValueRanges(${1:elementNames as String[]}, ${2:bounds as (String | Number | Boolean | null)}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?})","trigger":"cts.elementValueRanges","description":"($elementNames,$bounds,$options,$query,$qualityWeight)"},{"content":"cts.elementValueRanges(${1:elementNames as String[]}, ${2:bounds as (String | Number | Boolean | null)}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?}, ${6:forestIds as String})","trigger":"cts.elementValueRanges","description":"($elementNames,$bounds,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.elementValues(${1:elementNames as String[]})","trigger":"cts.elementValues","description":"($elementNames)"},{"content":"cts.elementValues(${1:elementNames as String[]}, ${2:start as xs.anyAtomicType?})","trigger":"cts.elementValues","description":"($elementNames,$start)"},{"content":"cts.elementValues(${1:elementNames as String[]}, ${2:start as xs.anyAtomicType?}, ${3:options as String})","trigger":"cts.elementValues","description":"($elementNames,$start,$options)"},{"content":"cts.elementValues(${1:elementNames as String[]}, ${2:start as xs.anyAtomicType?}, ${3:options as String}, ${4:query as cts.query?})","trigger":"cts.elementValues","description":"($elementNames,$start,$options,$query)"},{"content":"cts.elementValues(${1:elementNames as String[]}, ${2:start as xs.anyAtomicType?}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?})","trigger":"cts.elementValues","description":"($elementNames,$start,$options,$query,$qualityWeight)"},{"content":"cts.elementValues(${1:elementNames as String[]}, ${2:start as xs.anyAtomicType?}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?}, ${6:forestIds as String})","trigger":"cts.elementValues","description":"($elementNames,$start,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.elementWalk(${1:node as Node}, ${2:element as String[]}, ${3:callback as function(NodeBuilder}, xs.string}, xs.string}, xs.string}, text()}, xs.integer) as xs.string?}, ${4:builder as NodeBuilder})","trigger":"cts.elementWalk","description":"($node,$element,$callback,xs.string,xs.string,xs.string,text(),xs.integer),$builder)"},{"content":"cts.elementWordMatch(${1:elementNames as String[]}, ${2:pattern as String?})","trigger":"cts.elementWordMatch","description":"($elementNames,$pattern)"},{"content":"cts.elementWordMatch(${1:elementNames as String[]}, ${2:pattern as String?}, ${3:options as String})","trigger":"cts.elementWordMatch","description":"($elementNames,$pattern,$options)"},{"content":"cts.elementWordMatch(${1:elementNames as String[]}, ${2:pattern as String?}, ${3:options as String}, ${4:query as cts.query?})","trigger":"cts.elementWordMatch","description":"($elementNames,$pattern,$options,$query)"},{"content":"cts.elementWordMatch(${1:elementNames as String[]}, ${2:pattern as String?}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?})","trigger":"cts.elementWordMatch","description":"($elementNames,$pattern,$options,$query,$qualityWeight)"},{"content":"cts.elementWordMatch(${1:elementNames as String[]}, ${2:pattern as String?}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?}, ${6:forestIds as String})","trigger":"cts.elementWordMatch","description":"($elementNames,$pattern,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.elementWordQuery(${1:elementName as String[]}, ${2:text as String[]})","trigger":"cts.elementWordQuery","description":"($elementName,$text)"},{"content":"cts.elementWordQuery(${1:elementName as String[]}, ${2:text as String[]}, ${3:options as String})","trigger":"cts.elementWordQuery","description":"($elementName,$text,$options)"},{"content":"cts.elementWordQuery(${1:elementName as String[]}, ${2:text as String[]}, ${3:options as String}, ${4:weight as Number?})","trigger":"cts.elementWordQuery","description":"($elementName,$text,$options,$weight)"},{"content":"cts.elementWordQueryElementName(${1:query as cts.elementWordQuery})","trigger":"cts.elementWordQueryElementName","description":"($query)"},{"content":"cts.elementWordQueryOptions(${1:query as cts.elementWordQuery})","trigger":"cts.elementWordQueryOptions","description":"($query)"},{"content":"cts.elementWordQueryText(${1:query as cts.elementWordQuery})","trigger":"cts.elementWordQueryText","description":"($query)"},{"content":"cts.elementWordQueryWeight(${1:query as cts.elementWordQuery})","trigger":"cts.elementWordQueryWeight","description":"($query)"},{"content":"cts.elementWords(${1:elementNames as String[]})","trigger":"cts.elementWords","description":"($elementNames)"},{"content":"cts.elementWords(${1:elementNames as String[]}, ${2:start as String?})","trigger":"cts.elementWords","description":"($elementNames,$start)"},{"content":"cts.elementWords(${1:elementNames as String[]}, ${2:start as String?}, ${3:options as String})","trigger":"cts.elementWords","description":"($elementNames,$start,$options)"},{"content":"cts.elementWords(${1:elementNames as String[]}, ${2:start as String?}, ${3:options as String}, ${4:query as cts.query?})","trigger":"cts.elementWords","description":"($elementNames,$start,$options,$query)"},{"content":"cts.elementWords(${1:elementNames as String[]}, ${2:start as String?}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?})","trigger":"cts.elementWords","description":"($elementNames,$start,$options,$query,$qualityWeight)"},{"content":"cts.elementWords(${1:elementNames as String[]}, ${2:start as String?}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?}, ${6:forestIds as String})","trigger":"cts.elementWords","description":"($elementNames,$start,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.estimate(${1:query as cts.query?})","trigger":"cts.estimate","description":"($query)"},{"content":"cts.estimate(${1:query as cts.query?}, ${2:options as String})","trigger":"cts.estimate","description":"($query,$options)"},{"content":"cts.estimate(${1:query as cts.query?}, ${2:options as String}, ${3:qualityWeight as Number?})","trigger":"cts.estimate","description":"($query,$options,$qualityWeight)"},{"content":"cts.estimate(${1:query as cts.query?}, ${2:options as String}, ${3:qualityWeight as Number?}, ${4:forestIds as String})","trigger":"cts.estimate","description":"($query,$options,$qualityWeight,$forestIds)"},{"content":"cts.estimate(${1:query as cts.query?}, ${2:options as String}, ${3:qualityWeight as Number?}, ${4:forestIds as String}, ${5:maximum as Number?})","trigger":"cts.estimate","description":"($query,$options,$qualityWeight,$forestIds,$maximum)"},{"content":"cts.exists(${1:query as cts.query?})","trigger":"cts.exists","description":"($query)"},{"content":"cts.exists(${1:query as cts.query?}, ${2:options as String})","trigger":"cts.exists","description":"($query,$options)"},{"content":"cts.exists(${1:query as cts.query?}, ${2:options as String}, ${3:qualityWeight as Number?})","trigger":"cts.exists","description":"($query,$options,$qualityWeight)"},{"content":"cts.exists(${1:query as cts.query?}, ${2:options as String}, ${3:qualityWeight as Number?}, ${4:forestIds as String})","trigger":"cts.exists","description":"($query,$options,$qualityWeight,$forestIds)"},{"content":"cts.exists(${1:query as cts.query?}, ${2:options as String}, ${3:qualityWeight as Number?}, ${4:forestIds as String}, ${5:maximum as Number?})","trigger":"cts.exists","description":"($query,$options,$qualityWeight,$forestIds,$maximum)"},{"content":"cts.fieldRangeQuery(${1:fieldName as String[]}, ${2:operator as String}, ${3:value as (String | Number | Boolean | null)[]})","trigger":"cts.fieldRangeQuery","description":"($fieldName,$operator,$value)"},{"content":"cts.fieldRangeQuery(${1:fieldName as String[]}, ${2:operator as String}, ${3:value as (String | Number | Boolean | null)[]}, ${4:options as String})","trigger":"cts.fieldRangeQuery","description":"($fieldName,$operator,$value,$options)"},{"content":"cts.fieldRangeQuery(${1:fieldName as String[]}, ${2:operator as String}, ${3:value as (String | Number | Boolean | null)[]}, ${4:options as String}, ${5:weight as Number?})","trigger":"cts.fieldRangeQuery","description":"($fieldName,$operator,$value,$options,$weight)"},{"content":"cts.fieldRangeQueryFieldName(${1:query as cts.fieldRangeQuery})","trigger":"cts.fieldRangeQueryFieldName","description":"($query)"},{"content":"cts.fieldRangeQueryOperator(${1:query as cts.fieldRangeQuery})","trigger":"cts.fieldRangeQueryOperator","description":"($query)"},{"content":"cts.fieldRangeQueryOptions(${1:query as cts.fieldRangeQuery})","trigger":"cts.fieldRangeQueryOptions","description":"($query)"},{"content":"cts.fieldRangeQueryValue(${1:query as cts.fieldRangeQuery})","trigger":"cts.fieldRangeQueryValue","description":"($query)"},{"content":"cts.fieldRangeQueryWeight(${1:query as cts.fieldRangeQuery})","trigger":"cts.fieldRangeQueryWeight","description":"($query)"},{"content":"cts.fieldReference(${1:field as String})","trigger":"cts.fieldReference","description":"($field)"},{"content":"cts.fieldReference(${1:field as String}, ${2:options as String})","trigger":"cts.fieldReference","description":"($field,$options)"},{"content":"cts.fieldValueCoOccurrences(${1:fieldName-1 as String}, ${2:fieldName-2 as String})","trigger":"cts.fieldValueCoOccurrences","description":"($fieldName-1,$fieldName-2)"},{"content":"cts.fieldValueCoOccurrences(${1:fieldName-1 as String}, ${2:fieldName-2 as String}, ${3:options as String})","trigger":"cts.fieldValueCoOccurrences","description":"($fieldName-1,$fieldName-2,$options)"},{"content":"cts.fieldValueCoOccurrences(${1:fieldName-1 as String}, ${2:fieldName-2 as String}, ${3:options as String}, ${4:query as cts.query?})","trigger":"cts.fieldValueCoOccurrences","description":"($fieldName-1,$fieldName-2,$options,$query)"},{"content":"cts.fieldValueCoOccurrences(${1:fieldName-1 as String}, ${2:fieldName-2 as String}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?})","trigger":"cts.fieldValueCoOccurrences","description":"($fieldName-1,$fieldName-2,$options,$query,$qualityWeight)"},{"content":"cts.fieldValueCoOccurrences(${1:fieldName-1 as String}, ${2:fieldName-2 as String}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?}, ${6:forestIds as String})","trigger":"cts.fieldValueCoOccurrences","description":"($fieldName-1,$fieldName-2,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.fieldValueMatch(${1:fieldNames as String[]}, ${2:pattern as xs.anyAtomicType})","trigger":"cts.fieldValueMatch","description":"($fieldNames,$pattern)"},{"content":"cts.fieldValueMatch(${1:fieldNames as String[]}, ${2:pattern as xs.anyAtomicType}, ${3:options as String})","trigger":"cts.fieldValueMatch","description":"($fieldNames,$pattern,$options)"},{"content":"cts.fieldValueMatch(${1:fieldNames as String[]}, ${2:pattern as xs.anyAtomicType}, ${3:options as String}, ${4:query as cts.query?})","trigger":"cts.fieldValueMatch","description":"($fieldNames,$pattern,$options,$query)"},{"content":"cts.fieldValueMatch(${1:fieldNames as String[]}, ${2:pattern as xs.anyAtomicType}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?})","trigger":"cts.fieldValueMatch","description":"($fieldNames,$pattern,$options,$query,$qualityWeight)"},{"content":"cts.fieldValueMatch(${1:fieldNames as String[]}, ${2:pattern as xs.anyAtomicType}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?}, ${6:forestIds as String})","trigger":"cts.fieldValueMatch","description":"($fieldNames,$pattern,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.fieldValueQuery(${1:fieldName as String[]}, ${2:text as (String | Number | Boolean | null)[]})","trigger":"cts.fieldValueQuery","description":"($fieldName,$text)"},{"content":"cts.fieldValueQuery(${1:fieldName as String[]}, ${2:text as (String | Number | Boolean | null)[]}, ${3:options as String})","trigger":"cts.fieldValueQuery","description":"($fieldName,$text,$options)"},{"content":"cts.fieldValueQuery(${1:fieldName as String[]}, ${2:text as (String | Number | Boolean | null)[]}, ${3:options as String}, ${4:weight as Number?})","trigger":"cts.fieldValueQuery","description":"($fieldName,$text,$options,$weight)"},{"content":"cts.fieldValueQueryFieldName(${1:query as cts.fieldValueQuery})","trigger":"cts.fieldValueQueryFieldName","description":"($query)"},{"content":"cts.fieldValueQueryOptions(${1:query as cts.fieldValueQuery})","trigger":"cts.fieldValueQueryOptions","description":"($query)"},{"content":"cts.fieldValueQueryText(${1:query as cts.fieldValueQuery})","trigger":"cts.fieldValueQueryText","description":"($query)"},{"content":"cts.fieldValueQueryWeight(${1:query as cts.fieldValueQuery})","trigger":"cts.fieldValueQueryWeight","description":"($query)"},{"content":"cts.fieldValueRanges(${1:fieldNames as String[]})","trigger":"cts.fieldValueRanges","description":"($fieldNames)"},{"content":"cts.fieldValueRanges(${1:fieldNames as String[]}, ${2:bounds as (String | Number | Boolean | null)})","trigger":"cts.fieldValueRanges","description":"($fieldNames,$bounds)"},{"content":"cts.fieldValueRanges(${1:fieldNames as String[]}, ${2:bounds as (String | Number | Boolean | null)}, ${3:options as String})","trigger":"cts.fieldValueRanges","description":"($fieldNames,$bounds,$options)"},{"content":"cts.fieldValueRanges(${1:fieldNames as String[]}, ${2:bounds as (String | Number | Boolean | null)}, ${3:options as String}, ${4:query as cts.query?})","trigger":"cts.fieldValueRanges","description":"($fieldNames,$bounds,$options,$query)"},{"content":"cts.fieldValueRanges(${1:fieldNames as String[]}, ${2:bounds as (String | Number | Boolean | null)}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?})","trigger":"cts.fieldValueRanges","description":"($fieldNames,$bounds,$options,$query,$qualityWeight)"},{"content":"cts.fieldValueRanges(${1:fieldNames as String[]}, ${2:bounds as (String | Number | Boolean | null)}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?}, ${6:forestIds as String})","trigger":"cts.fieldValueRanges","description":"($fieldNames,$bounds,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.fieldValues(${1:fieldNames as String[]})","trigger":"cts.fieldValues","description":"($fieldNames)"},{"content":"cts.fieldValues(${1:fieldNames as String[]}, ${2:start as xs.anyAtomicType?})","trigger":"cts.fieldValues","description":"($fieldNames,$start)"},{"content":"cts.fieldValues(${1:fieldNames as String[]}, ${2:start as xs.anyAtomicType?}, ${3:options as String})","trigger":"cts.fieldValues","description":"($fieldNames,$start,$options)"},{"content":"cts.fieldValues(${1:fieldNames as String[]}, ${2:start as xs.anyAtomicType?}, ${3:options as String}, ${4:query as cts.query?})","trigger":"cts.fieldValues","description":"($fieldNames,$start,$options,$query)"},{"content":"cts.fieldValues(${1:fieldNames as String[]}, ${2:start as xs.anyAtomicType?}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?})","trigger":"cts.fieldValues","description":"($fieldNames,$start,$options,$query,$qualityWeight)"},{"content":"cts.fieldValues(${1:fieldNames as String[]}, ${2:start as xs.anyAtomicType?}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?}, ${6:forestIds as String})","trigger":"cts.fieldValues","description":"($fieldNames,$start,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.fieldWordMatch(${1:fieldNames as String[]}, ${2:pattern as String})","trigger":"cts.fieldWordMatch","description":"($fieldNames,$pattern)"},{"content":"cts.fieldWordMatch(${1:fieldNames as String[]}, ${2:pattern as String}, ${3:options as String})","trigger":"cts.fieldWordMatch","description":"($fieldNames,$pattern,$options)"},{"content":"cts.fieldWordMatch(${1:fieldNames as String[]}, ${2:pattern as String}, ${3:options as String}, ${4:query as cts.query?})","trigger":"cts.fieldWordMatch","description":"($fieldNames,$pattern,$options,$query)"},{"content":"cts.fieldWordMatch(${1:fieldNames as String[]}, ${2:pattern as String}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?})","trigger":"cts.fieldWordMatch","description":"($fieldNames,$pattern,$options,$query,$qualityWeight)"},{"content":"cts.fieldWordMatch(${1:fieldNames as String[]}, ${2:pattern as String}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?}, ${6:forestIds as String})","trigger":"cts.fieldWordMatch","description":"($fieldNames,$pattern,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.fieldWordQuery(${1:fieldName as String[]}, ${2:text as String[]})","trigger":"cts.fieldWordQuery","description":"($fieldName,$text)"},{"content":"cts.fieldWordQuery(${1:fieldName as String[]}, ${2:text as String[]}, ${3:options as String})","trigger":"cts.fieldWordQuery","description":"($fieldName,$text,$options)"},{"content":"cts.fieldWordQuery(${1:fieldName as String[]}, ${2:text as String[]}, ${3:options as String}, ${4:weight as Number?})","trigger":"cts.fieldWordQuery","description":"($fieldName,$text,$options,$weight)"},{"content":"cts.fieldWordQueryFieldName(${1:query as cts.fieldWordQuery})","trigger":"cts.fieldWordQueryFieldName","description":"($query)"},{"content":"cts.fieldWordQueryOptions(${1:query as cts.fieldWordQuery})","trigger":"cts.fieldWordQueryOptions","description":"($query)"},{"content":"cts.fieldWordQueryText(${1:query as cts.fieldWordQuery})","trigger":"cts.fieldWordQueryText","description":"($query)"},{"content":"cts.fieldWordQueryWeight(${1:query as cts.fieldWordQuery})","trigger":"cts.fieldWordQueryWeight","description":"($query)"},{"content":"cts.fieldWords(${1:fieldNames as String[]})","trigger":"cts.fieldWords","description":"($fieldNames)"},{"content":"cts.fieldWords(${1:fieldNames as String[]}, ${2:start as String?})","trigger":"cts.fieldWords","description":"($fieldNames,$start)"},{"content":"cts.fieldWords(${1:fieldNames as String[]}, ${2:start as String?}, ${3:options as String})","trigger":"cts.fieldWords","description":"($fieldNames,$start,$options)"},{"content":"cts.fieldWords(${1:fieldNames as String[]}, ${2:start as String?}, ${3:options as String}, ${4:query as cts.query?})","trigger":"cts.fieldWords","description":"($fieldNames,$start,$options,$query)"},{"content":"cts.fieldWords(${1:fieldNames as String[]}, ${2:start as String?}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?})","trigger":"cts.fieldWords","description":"($fieldNames,$start,$options,$query,$qualityWeight)"},{"content":"cts.fieldWords(${1:fieldNames as String[]}, ${2:start as String?}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?}, ${6:forestIds as String})","trigger":"cts.fieldWords","description":"($fieldNames,$start,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.fitness(${1:node as Node})","trigger":"cts.fitness","description":"($node)"},{"content":"cts.fitness()","trigger":"cts.fitness"},{"content":"cts.fitnessOrder(${1:options as String})","trigger":"cts.fitnessOrder","description":"($options)"},{"content":"cts.fitnessOrder()","trigger":"cts.fitnessOrder"},{"content":"cts.frequency(${1:value as String})","trigger":"cts.frequency","description":"($value)"},{"content":"cts.geospatialAttributePairReference(${1:element as xs.QName}, ${2:lat as xs.QName}, ${3:long as xs.QName})","trigger":"cts.geospatialAttributePairReference","description":"($element,$lat,$long)"},{"content":"cts.geospatialAttributePairReference(${1:element as xs.QName}, ${2:lat as xs.QName}, ${3:long as xs.QName}, ${4:options as String})","trigger":"cts.geospatialAttributePairReference","description":"($element,$lat,$long,$options)"},{"content":"cts.geospatialBoxes(${1:geoIndexes as String[]})","trigger":"cts.geospatialBoxes","description":"($geoIndexes)"},{"content":"cts.geospatialBoxes(${1:geoIndexes as String[]}, ${2:latitudeBounds as String})","trigger":"cts.geospatialBoxes","description":"($geoIndexes,$latitudeBounds)"},{"content":"cts.geospatialBoxes(${1:geoIndexes as String[]}, ${2:latitudeBounds as String}, ${3:longitudeBounds as String})","trigger":"cts.geospatialBoxes","description":"($geoIndexes,$latitudeBounds,$longitudeBounds)"},{"content":"cts.geospatialBoxes(${1:geoIndexes as String[]}, ${2:latitudeBounds as String}, ${3:longitudeBounds as String}, ${4:options as String})","trigger":"cts.geospatialBoxes","description":"($geoIndexes,$latitudeBounds,$longitudeBounds,$options)"},{"content":"cts.geospatialBoxes(${1:geoIndexes as String[]}, ${2:latitudeBounds as String}, ${3:longitudeBounds as String}, ${4:options as String}, ${5:query as cts.query?})","trigger":"cts.geospatialBoxes","description":"($geoIndexes,$latitudeBounds,$longitudeBounds,$options,$query)"},{"content":"cts.geospatialBoxes(${1:geoIndexes as String[]}, ${2:latitudeBounds as String}, ${3:longitudeBounds as String}, ${4:options as String}, ${5:query as cts.query?}, ${6:qualityWeight as Number?})","trigger":"cts.geospatialBoxes","description":"($geoIndexes,$latitudeBounds,$longitudeBounds,$options,$query,$qualityWeight)"},{"content":"cts.geospatialBoxes(${1:geoIndexes as String[]}, ${2:latitudeBounds as String}, ${3:longitudeBounds as String}, ${4:options as String}, ${5:query as cts.query?}, ${6:qualityWeight as Number?}, ${7:forestIds as String})","trigger":"cts.geospatialBoxes","description":"($geoIndexes,$latitudeBounds,$longitudeBounds,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.geospatialCoOccurrences(${1:geoElementName-1 as xs.QName}, ${2:child-1Name-1 as xs.QName?}, ${3:child-1Name-2 as xs.QName?}, ${4:geoElementName-2 as xs.QName})","trigger":"cts.geospatialCoOccurrences","description":"($geoElementName-1,$child-1Name-1,$child-1Name-2,$geoElementName-2)"},{"content":"cts.geospatialCoOccurrences(${1:geoElementName-1 as xs.QName}, ${2:child-1Name-1 as xs.QName?}, ${3:child-1Name-2 as xs.QName?}, ${4:geoElementName-2 as xs.QName}, ${5:child-2Name-1 as xs.QName?})","trigger":"cts.geospatialCoOccurrences","description":"($geoElementName-1,$child-1Name-1,$child-1Name-2,$geoElementName-2,$child-2Name-1)"},{"content":"cts.geospatialCoOccurrences(${1:geoElementName-1 as xs.QName}, ${2:child-1Name-1 as xs.QName?}, ${3:child-1Name-2 as xs.QName?}, ${4:geoElementName-2 as xs.QName}, ${5:child-2Name-1 as xs.QName?}, ${6:child-2Name-2 as xs.QName?})","trigger":"cts.geospatialCoOccurrences","description":"($geoElementName-1,$child-1Name-1,$child-1Name-2,$geoElementName-2,$child-2Name-1,$child-2Name-2)"},{"content":"cts.geospatialCoOccurrences(${1:geoElementName-1 as xs.QName}, ${2:child-1Name-1 as xs.QName?}, ${3:child-1Name-2 as xs.QName?}, ${4:geoElementName-2 as xs.QName}, ${5:child-2Name-1 as xs.QName?}, ${6:child-2Name-2 as xs.QName?}, ${7:options as String})","trigger":"cts.geospatialCoOccurrences","description":"($geoElementName-1,$child-1Name-1,$child-1Name-2,$geoElementName-2,$child-2Name-1,$child-2Name-2,$options)"},{"content":"cts.geospatialCoOccurrences(${1:geoElementName-1 as xs.QName}, ${2:child-1Name-1 as xs.QName?}, ${3:child-1Name-2 as xs.QName?}, ${4:geoElementName-2 as xs.QName}, ${5:child-2Name-1 as xs.QName?}, ${6:child-2Name-2 as xs.QName?}, ${7:options as String}, ${8:query as cts.query?})","trigger":"cts.geospatialCoOccurrences","description":"($geoElementName-1,$child-1Name-1,$child-1Name-2,$geoElementName-2,$child-2Name-1,$child-2Name-2,$options,$query)"},{"content":"cts.geospatialCoOccurrences(${1:geoElementName-1 as xs.QName}, ${2:child-1Name-1 as xs.QName?}, ${3:child-1Name-2 as xs.QName?}, ${4:geoElementName-2 as xs.QName}, ${5:child-2Name-1 as xs.QName?}, ${6:child-2Name-2 as xs.QName?}, ${7:options as String}, ${8:query as cts.query?}, ${9:qualityWeight as Number?})","trigger":"cts.geospatialCoOccurrences","description":"($geoElementName-1,$child-1Name-1,$child-1Name-2,$geoElementName-2,$child-2Name-1,$child-2Name-2,$options,$query,$qualityWeight)"},{"content":"cts.geospatialCoOccurrences(${1:geoElementName-1 as xs.QName}, ${2:child-1Name-1 as xs.QName?}, ${3:child-1Name-2 as xs.QName?}, ${4:geoElementName-2 as xs.QName}, ${5:child-2Name-1 as xs.QName?}, ${6:child-2Name-2 as xs.QName?}, ${7:options as String}, ${8:query as cts.query?}, ${9:qualityWeight as Number?}, ${10:forestIds as String})","trigger":"cts.geospatialCoOccurrences","description":"($geoElementName-1,$child-1Name-1,$child-1Name-2,$geoElementName-2,$child-2Name-1,$child-2Name-2,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.geospatialElementChildReference(${1:element as xs.QName}, ${2:child as xs.QName})","trigger":"cts.geospatialElementChildReference","description":"($element,$child)"},{"content":"cts.geospatialElementChildReference(${1:element as xs.QName}, ${2:child as xs.QName}, ${3:options as String})","trigger":"cts.geospatialElementChildReference","description":"($element,$child,$options)"},{"content":"cts.geospatialElementPairReference(${1:element as xs.QName}, ${2:lat as xs.QName}, ${3:long as xs.QName})","trigger":"cts.geospatialElementPairReference","description":"($element,$lat,$long)"},{"content":"cts.geospatialElementPairReference(${1:element as xs.QName}, ${2:lat as xs.QName}, ${3:long as xs.QName}, ${4:options as String})","trigger":"cts.geospatialElementPairReference","description":"($element,$lat,$long,$options)"},{"content":"cts.geospatialElementReference(${1:element as xs.QName})","trigger":"cts.geospatialElementReference","description":"($element)"},{"content":"cts.geospatialElementReference(${1:element as xs.QName}, ${2:options as String})","trigger":"cts.geospatialElementReference","description":"($element,$options)"},{"content":"cts.geospatialJsonPropertyChildReference(${1:property as String}, ${2:child as String})","trigger":"cts.geospatialJsonPropertyChildReference","description":"($property,$child)"},{"content":"cts.geospatialJsonPropertyChildReference(${1:property as String}, ${2:child as String}, ${3:options as String})","trigger":"cts.geospatialJsonPropertyChildReference","description":"($property,$child,$options)"},{"content":"cts.geospatialJsonPropertyPairReference(${1:property as String}, ${2:lat as String}, ${3:long as String})","trigger":"cts.geospatialJsonPropertyPairReference","description":"($property,$lat,$long)"},{"content":"cts.geospatialJsonPropertyPairReference(${1:property as String}, ${2:lat as String}, ${3:long as String}, ${4:options as String})","trigger":"cts.geospatialJsonPropertyPairReference","description":"($property,$lat,$long,$options)"},{"content":"cts.geospatialJsonPropertyReference(${1:property as String})","trigger":"cts.geospatialJsonPropertyReference","description":"($property)"},{"content":"cts.geospatialJsonPropertyReference(${1:property as String}, ${2:options as String})","trigger":"cts.geospatialJsonPropertyReference","description":"($property,$options)"},{"content":"cts.geospatialPathReference(${1:pathExpression as String})","trigger":"cts.geospatialPathReference","description":"($pathExpression)"},{"content":"cts.geospatialPathReference(${1:pathExpression as String}, ${2:options as String})","trigger":"cts.geospatialPathReference","description":"($pathExpression,$options)"},{"content":"cts.highlight(${1:node as Node}, ${2:query as cts.query}, ${3:callback as function(NodeBuilder}, xs.string}, text()}, cts.query*}, xs.integer) as xs.string?}, ${4:builder as NodeBuilder})","trigger":"cts.highlight","description":"($node,$query,$callback,xs.string,text(),cts.query*,xs.integer),$builder)"},{"content":"cts.indexOrder(${1:index as cts.reference})","trigger":"cts.indexOrder","description":"($index)"},{"content":"cts.indexOrder(${1:index as cts.reference}, ${2:options as String})","trigger":"cts.indexOrder","description":"($index,$options)"},{"content":"cts.jsonPropertyChildGeospatialQuery(${1:parentPropertyName as String[]}, ${2:childPropertyNames as String[]}, ${3:regions as String[]})","trigger":"cts.jsonPropertyChildGeospatialQuery","description":"($parentPropertyName,$childPropertyNames,$regions)"},{"content":"cts.jsonPropertyChildGeospatialQuery(${1:parentPropertyName as String[]}, ${2:childPropertyNames as String[]}, ${3:regions as String[]}, ${4:options as String})","trigger":"cts.jsonPropertyChildGeospatialQuery","description":"($parentPropertyName,$childPropertyNames,$regions,$options)"},{"content":"cts.jsonPropertyChildGeospatialQuery(${1:parentPropertyName as String[]}, ${2:childPropertyNames as String[]}, ${3:regions as String[]}, ${4:options as String}, ${5:weight as Number?})","trigger":"cts.jsonPropertyChildGeospatialQuery","description":"($parentPropertyName,$childPropertyNames,$regions,$options,$weight)"},{"content":"cts.jsonPropertyChildGeospatialQueryChildName(${1:query as cts.jsonPropertyChildGeospatialQuery})","trigger":"cts.jsonPropertyChildGeospatialQueryChildName","description":"($query)"},{"content":"cts.jsonPropertyChildGeospatialQueryOptions(${1:query as cts.jsonPropertyChildGeospatialQuery})","trigger":"cts.jsonPropertyChildGeospatialQueryOptions","description":"($query)"},{"content":"cts.jsonPropertyChildGeospatialQueryPropertyName(${1:query as cts.jsonPropertyChildGeospatialQuery})","trigger":"cts.jsonPropertyChildGeospatialQueryPropertyName","description":"($query)"},{"content":"cts.jsonPropertyChildGeospatialQueryRegion(${1:query as cts.jsonPropertyChildGeospatialQuery})","trigger":"cts.jsonPropertyChildGeospatialQueryRegion","description":"($query)"},{"content":"cts.jsonPropertyChildGeospatialQueryWeight(${1:query as cts.jsonPropertyChildGeospatialQuery})","trigger":"cts.jsonPropertyChildGeospatialQueryWeight","description":"($query)"},{"content":"cts.jsonPropertyGeospatialQuery(${1:propertyName as String[]}, ${2:regions as String[]})","trigger":"cts.jsonPropertyGeospatialQuery","description":"($propertyName,$regions)"},{"content":"cts.jsonPropertyGeospatialQuery(${1:propertyName as String[]}, ${2:regions as String[]}, ${3:options as String})","trigger":"cts.jsonPropertyGeospatialQuery","description":"($propertyName,$regions,$options)"},{"content":"cts.jsonPropertyGeospatialQuery(${1:propertyName as String[]}, ${2:regions as String[]}, ${3:options as String}, ${4:weight as Number?})","trigger":"cts.jsonPropertyGeospatialQuery","description":"($propertyName,$regions,$options,$weight)"},{"content":"cts.jsonPropertyGeospatialQueryOptions(${1:query as cts.jsonPropertyGeospatialQuery})","trigger":"cts.jsonPropertyGeospatialQueryOptions","description":"($query)"},{"content":"cts.jsonPropertyGeospatialQueryPropertyName(${1:query as cts.jsonPropertyGeospatialQuery})","trigger":"cts.jsonPropertyGeospatialQueryPropertyName","description":"($query)"},{"content":"cts.jsonPropertyGeospatialQueryRegion(${1:query as cts.jsonPropertyGeospatialQuery})","trigger":"cts.jsonPropertyGeospatialQueryRegion","description":"($query)"},{"content":"cts.jsonPropertyGeospatialQueryWeight(${1:query as cts.jsonPropertyGeospatialQuery})","trigger":"cts.jsonPropertyGeospatialQueryWeight","description":"($query)"},{"content":"cts.jsonPropertyPairGeospatialQuery(${1:propertyName as String[]}, ${2:latitudePropertyNames as String[]}, ${3:longitudePropertyNames as String[]}, ${4:regions as String[]})","trigger":"cts.jsonPropertyPairGeospatialQuery","description":"($propertyName,$latitudePropertyNames,$longitudePropertyNames,$regions)"},{"content":"cts.jsonPropertyPairGeospatialQuery(${1:propertyName as String[]}, ${2:latitudePropertyNames as String[]}, ${3:longitudePropertyNames as String[]}, ${4:regions as String[]}, ${5:options as String})","trigger":"cts.jsonPropertyPairGeospatialQuery","description":"($propertyName,$latitudePropertyNames,$longitudePropertyNames,$regions,$options)"},{"content":"cts.jsonPropertyPairGeospatialQuery(${1:propertyName as String[]}, ${2:latitudePropertyNames as String[]}, ${3:longitudePropertyNames as String[]}, ${4:regions as String[]}, ${5:options as String}, ${6:weight as Number?})","trigger":"cts.jsonPropertyPairGeospatialQuery","description":"($propertyName,$latitudePropertyNames,$longitudePropertyNames,$regions,$options,$weight)"},{"content":"cts.jsonPropertyPairGeospatialQueryLatitudeName(${1:query as cts.jsonPropertyPairGeospatialQuery})","trigger":"cts.jsonPropertyPairGeospatialQueryLatitudeName","description":"($query)"},{"content":"cts.jsonPropertyPairGeospatialQueryLongitudeName(${1:query as cts.jsonPropertyPairGeospatialQuery})","trigger":"cts.jsonPropertyPairGeospatialQueryLongitudeName","description":"($query)"},{"content":"cts.jsonPropertyPairGeospatialQueryOptions(${1:query as cts.jsonPropertyPairGeospatialQuery})","trigger":"cts.jsonPropertyPairGeospatialQueryOptions","description":"($query)"},{"content":"cts.jsonPropertyPairGeospatialQueryPropertyName(${1:query as cts.jsonPropertyPairGeospatialQuery})","trigger":"cts.jsonPropertyPairGeospatialQueryPropertyName","description":"($query)"},{"content":"cts.jsonPropertyPairGeospatialQueryRegion(${1:query as cts.jsonPropertyPairGeospatialQuery})","trigger":"cts.jsonPropertyPairGeospatialQueryRegion","description":"($query)"},{"content":"cts.jsonPropertyPairGeospatialQueryWeight(${1:query as cts.jsonPropertyPairGeospatialQuery})","trigger":"cts.jsonPropertyPairGeospatialQueryWeight","description":"($query)"},{"content":"cts.jsonPropertyRangeQuery(${1:propertyName as String[]}, ${2:operator as String}, ${3:value as (String | Number | Boolean | null)[]})","trigger":"cts.jsonPropertyRangeQuery","description":"($propertyName,$operator,$value)"},{"content":"cts.jsonPropertyRangeQuery(${1:propertyName as String[]}, ${2:operator as String}, ${3:value as (String | Number | Boolean | null)[]}, ${4:options as String})","trigger":"cts.jsonPropertyRangeQuery","description":"($propertyName,$operator,$value,$options)"},{"content":"cts.jsonPropertyRangeQuery(${1:propertyName as String[]}, ${2:operator as String}, ${3:value as (String | Number | Boolean | null)[]}, ${4:options as String}, ${5:weight as Number?})","trigger":"cts.jsonPropertyRangeQuery","description":"($propertyName,$operator,$value,$options,$weight)"},{"content":"cts.jsonPropertyRangeQueryOperator(${1:query as cts.jsonPropertyRangeQuery})","trigger":"cts.jsonPropertyRangeQueryOperator","description":"($query)"},{"content":"cts.jsonPropertyRangeQueryOptions(${1:query as cts.jsonPropertyRangeQuery})","trigger":"cts.jsonPropertyRangeQueryOptions","description":"($query)"},{"content":"cts.jsonPropertyRangeQueryPropertyName(${1:query as cts.jsonPropertyRangeQuery})","trigger":"cts.jsonPropertyRangeQueryPropertyName","description":"($query)"},{"content":"cts.jsonPropertyRangeQueryValue(${1:query as cts.jsonPropertyRangeQuery})","trigger":"cts.jsonPropertyRangeQueryValue","description":"($query)"},{"content":"cts.jsonPropertyRangeQueryWeight(${1:query as cts.jsonPropertyRangeQuery})","trigger":"cts.jsonPropertyRangeQueryWeight","description":"($query)"},{"content":"cts.jsonPropertyReference(${1:property as String})","trigger":"cts.jsonPropertyReference","description":"($property)"},{"content":"cts.jsonPropertyReference(${1:property as String}, ${2:options as String})","trigger":"cts.jsonPropertyReference","description":"($property,$options)"},{"content":"cts.jsonPropertyScopeQuery(${1:propertyName as String[]}, ${2:query as cts.query})","trigger":"cts.jsonPropertyScopeQuery","description":"($propertyName,$query)"},{"content":"cts.jsonPropertyScopeQueryPropertyName(${1:query as cts.jsonPropertyScopeQuery})","trigger":"cts.jsonPropertyScopeQueryPropertyName","description":"($query)"},{"content":"cts.jsonPropertyScopeQueryQuery(${1:query as cts.jsonPropertyScopeQuery})","trigger":"cts.jsonPropertyScopeQueryQuery","description":"($query)"},{"content":"cts.jsonPropertyValueQuery(${1:propertyName as String[]}, ${2:value as (String | Number | Boolean | null)[]})","trigger":"cts.jsonPropertyValueQuery","description":"($propertyName,$value)"},{"content":"cts.jsonPropertyValueQuery(${1:propertyName as String[]}, ${2:value as (String | Number | Boolean | null)[]}, ${3:options as String})","trigger":"cts.jsonPropertyValueQuery","description":"($propertyName,$value,$options)"},{"content":"cts.jsonPropertyValueQuery(${1:propertyName as String[]}, ${2:value as (String | Number | Boolean | null)[]}, ${3:options as String}, ${4:weight as Number?})","trigger":"cts.jsonPropertyValueQuery","description":"($propertyName,$value,$options,$weight)"},{"content":"cts.jsonPropertyValueQueryOptions(${1:query as cts.jsonPropertyValueQuery})","trigger":"cts.jsonPropertyValueQueryOptions","description":"($query)"},{"content":"cts.jsonPropertyValueQueryPropertyName(${1:query as cts.jsonPropertyValueQuery})","trigger":"cts.jsonPropertyValueQueryPropertyName","description":"($query)"},{"content":"cts.jsonPropertyValueQueryValue(${1:query as cts.jsonPropertyValueQuery})","trigger":"cts.jsonPropertyValueQueryValue","description":"($query)"},{"content":"cts.jsonPropertyValueQueryWeight(${1:query as cts.jsonPropertyValueQuery})","trigger":"cts.jsonPropertyValueQueryWeight","description":"($query)"},{"content":"cts.jsonPropertyWordMatch(${1:propertyNames as String[]}, ${2:pattern as String?})","trigger":"cts.jsonPropertyWordMatch","description":"($propertyNames,$pattern)"},{"content":"cts.jsonPropertyWordMatch(${1:propertyNames as String[]}, ${2:pattern as String?}, ${3:options as String})","trigger":"cts.jsonPropertyWordMatch","description":"($propertyNames,$pattern,$options)"},{"content":"cts.jsonPropertyWordMatch(${1:propertyNames as String[]}, ${2:pattern as String?}, ${3:options as String}, ${4:query as cts.query?})","trigger":"cts.jsonPropertyWordMatch","description":"($propertyNames,$pattern,$options,$query)"},{"content":"cts.jsonPropertyWordMatch(${1:propertyNames as String[]}, ${2:pattern as String?}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?})","trigger":"cts.jsonPropertyWordMatch","description":"($propertyNames,$pattern,$options,$query,$qualityWeight)"},{"content":"cts.jsonPropertyWordMatch(${1:propertyNames as String[]}, ${2:pattern as String?}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?}, ${6:forestIds as String})","trigger":"cts.jsonPropertyWordMatch","description":"($propertyNames,$pattern,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.jsonPropertyWordQuery(${1:propertyName as String[]}, ${2:text as String[]})","trigger":"cts.jsonPropertyWordQuery","description":"($propertyName,$text)"},{"content":"cts.jsonPropertyWordQuery(${1:propertyName as String[]}, ${2:text as String[]}, ${3:options as String})","trigger":"cts.jsonPropertyWordQuery","description":"($propertyName,$text,$options)"},{"content":"cts.jsonPropertyWordQuery(${1:propertyName as String[]}, ${2:text as String[]}, ${3:options as String}, ${4:weight as Number?})","trigger":"cts.jsonPropertyWordQuery","description":"($propertyName,$text,$options,$weight)"},{"content":"cts.jsonPropertyWordQueryOptions(${1:query as cts.jsonPropertyWordQuery})","trigger":"cts.jsonPropertyWordQueryOptions","description":"($query)"},{"content":"cts.jsonPropertyWordQueryPropertyName(${1:query as cts.jsonPropertyWordQuery})","trigger":"cts.jsonPropertyWordQueryPropertyName","description":"($query)"},{"content":"cts.jsonPropertyWordQueryText(${1:query as cts.jsonPropertyWordQuery})","trigger":"cts.jsonPropertyWordQueryText","description":"($query)"},{"content":"cts.jsonPropertyWordQueryWeight(${1:query as cts.jsonPropertyWordQuery})","trigger":"cts.jsonPropertyWordQueryWeight","description":"($query)"},{"content":"cts.jsonPropertyWords(${1:propertyNames as String[]})","trigger":"cts.jsonPropertyWords","description":"($propertyNames)"},{"content":"cts.jsonPropertyWords(${1:propertyNames as String[]}, ${2:start as String?})","trigger":"cts.jsonPropertyWords","description":"($propertyNames,$start)"},{"content":"cts.jsonPropertyWords(${1:propertyNames as String[]}, ${2:start as String?}, ${3:options as String})","trigger":"cts.jsonPropertyWords","description":"($propertyNames,$start,$options)"},{"content":"cts.jsonPropertyWords(${1:propertyNames as String[]}, ${2:start as String?}, ${3:options as String}, ${4:query as cts.query?})","trigger":"cts.jsonPropertyWords","description":"($propertyNames,$start,$options,$query)"},{"content":"cts.jsonPropertyWords(${1:propertyNames as String[]}, ${2:start as String?}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?})","trigger":"cts.jsonPropertyWords","description":"($propertyNames,$start,$options,$query,$qualityWeight)"},{"content":"cts.jsonPropertyWords(${1:propertyNames as String[]}, ${2:start as String?}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?}, ${6:forestIds as String})","trigger":"cts.jsonPropertyWords","description":"($propertyNames,$start,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.linearModel(${1:values as String[]})","trigger":"cts.linearModel","description":"($values)"},{"content":"cts.linearModel(${1:values as String[]}, ${2:options as String})","trigger":"cts.linearModel","description":"($values,$options)"},{"content":"cts.linearModel(${1:values as String[]}, ${2:options as String}, ${3:query as cts.query?})","trigger":"cts.linearModel","description":"($values,$options,$query)"},{"content":"cts.linearModel(${1:values as String[]}, ${2:options as String}, ${3:query as cts.query?}, ${4:forestIds as String})","trigger":"cts.linearModel","description":"($values,$options,$query,$forestIds)"},{"content":"cts.linestring(${1:vertices as String[]})","trigger":"cts.linestring","description":"($vertices)"},{"content":"cts.linestringVertices(${1:linestring as cts.linestring})","trigger":"cts.linestringVertices","description":"($linestring)"},{"content":"cts.locksFragmentQuery(${1:query as cts.query})","trigger":"cts.locksFragmentQuery","description":"($query)"},{"content":"cts.locksFragmentQueryQuery(${1:query as cts.locksFragmentQuery})","trigger":"cts.locksFragmentQueryQuery","description":"($query)"},{"content":"cts.lsqtQuery(${1:temporalCollection as String})","trigger":"cts.lsqtQuery","description":"($temporalCollection)"},{"content":"cts.lsqtQuery(${1:temporalCollection as String}, ${2:timestamp as Date?})","trigger":"cts.lsqtQuery","description":"($temporalCollection,$timestamp)"},{"content":"cts.lsqtQuery(${1:temporalCollection as String}, ${2:timestamp as Date?}, ${3:options as String})","trigger":"cts.lsqtQuery","description":"($temporalCollection,$timestamp,$options)"},{"content":"cts.lsqtQuery(${1:temporalCollection as String}, ${2:timestamp as Date?}, ${3:options as String}, ${4:weight as Number?})","trigger":"cts.lsqtQuery","description":"($temporalCollection,$timestamp,$options,$weight)"},{"content":"cts.lsqtQueryOptions(${1:query as cts.lsqtQuery})","trigger":"cts.lsqtQueryOptions","description":"($query)"},{"content":"cts.lsqtQueryTemporalCollection(${1:query as cts.lsqtQuery})","trigger":"cts.lsqtQueryTemporalCollection","description":"($query)"},{"content":"cts.lsqtQueryTimestamp(${1:query as cts.lsqtQuery})","trigger":"cts.lsqtQueryTimestamp","description":"($query)"},{"content":"cts.lsqtQueryWeight(${1:query as cts.lsqtQuery})","trigger":"cts.lsqtQueryWeight","description":"($query)"},{"content":"cts.max(${1:rangeIndex as cts.reference})","trigger":"cts.max","description":"($rangeIndex)"},{"content":"cts.max(${1:rangeIndex as cts.reference}, ${2:options as String})","trigger":"cts.max","description":"($rangeIndex,$options)"},{"content":"cts.max(${1:rangeIndex as cts.reference}, ${2:options as String}, ${3:query as cts.query?})","trigger":"cts.max","description":"($rangeIndex,$options,$query)"},{"content":"cts.max(${1:rangeIndex as cts.reference}, ${2:options as String}, ${3:query as cts.query?}, ${4:forestIds as String})","trigger":"cts.max","description":"($rangeIndex,$options,$query,$forestIds)"},{"content":"cts.median(${1:arg as String[]})","trigger":"cts.median","description":"($arg)"},{"content":"cts.min(${1:rangeIndex as cts.reference})","trigger":"cts.min","description":"($rangeIndex)"},{"content":"cts.min(${1:rangeIndex as cts.reference}, ${2:options as String})","trigger":"cts.min","description":"($rangeIndex,$options)"},{"content":"cts.min(${1:rangeIndex as cts.reference}, ${2:options as String}, ${3:query as cts.query?})","trigger":"cts.min","description":"($rangeIndex,$options,$query)"},{"content":"cts.min(${1:rangeIndex as cts.reference}, ${2:options as String}, ${3:query as cts.query?}, ${4:forestIds as String})","trigger":"cts.min","description":"($rangeIndex,$options,$query,$forestIds)"},{"content":"cts.nearQuery(${1:queries as cts.query[]})","trigger":"cts.nearQuery","description":"($queries)"},{"content":"cts.nearQuery(${1:queries as cts.query[]}, ${2:distance as Number?})","trigger":"cts.nearQuery","description":"($queries,$distance)"},{"content":"cts.nearQuery(${1:queries as cts.query[]}, ${2:distance as Number?}, ${3:options as String})","trigger":"cts.nearQuery","description":"($queries,$distance,$options)"},{"content":"cts.nearQuery(${1:queries as cts.query[]}, ${2:distance as Number?}, ${3:options as String}, ${4:distanceWeight as Number?})","trigger":"cts.nearQuery","description":"($queries,$distance,$options,$distanceWeight)"},{"content":"cts.nearQueryDistance(${1:query as cts.nearQuery})","trigger":"cts.nearQueryDistance","description":"($query)"},{"content":"cts.nearQueryOptions(${1:query as cts.nearQuery})","trigger":"cts.nearQueryOptions","description":"($query)"},{"content":"cts.nearQueryQueries(${1:query as cts.nearQuery})","trigger":"cts.nearQueryQueries","description":"($query)"},{"content":"cts.nearQueryWeight(${1:query as cts.nearQuery})","trigger":"cts.nearQueryWeight","description":"($query)"},{"content":"cts.notInQuery(${1:positiveQuery as cts.query}, ${2:negativeQuery as cts.query})","trigger":"cts.notInQuery","description":"($positiveQuery,$negativeQuery)"},{"content":"cts.notInQueryNegativeQuery(${1:query as cts.notInQuery})","trigger":"cts.notInQueryNegativeQuery","description":"($query)"},{"content":"cts.notInQueryPositiveQuery(${1:query as cts.notInQuery})","trigger":"cts.notInQueryPositiveQuery","description":"($query)"},{"content":"cts.notQuery(${1:query as cts.query})","trigger":"cts.notQuery","description":"($query)"},{"content":"cts.notQueryQuery(${1:query as cts.notQuery})","trigger":"cts.notQueryQuery","description":"($query)"},{"content":"cts.notQueryWeight(${1:query as cts.notQuery})","trigger":"cts.notQueryWeight","description":"($query)"},{"content":"cts.orQuery(${1:queries as cts.query[]})","trigger":"cts.orQuery","description":"($queries)"},{"content":"cts.orQueryOptions(${1:query as cts.orQuery})","trigger":"cts.orQueryOptions","description":"($query)"},{"content":"cts.orQueryQueries(${1:query as cts.orQuery})","trigger":"cts.orQueryQueries","description":"($query)"},{"content":"cts.parseWkt(${1:wtk as String[]})","trigger":"cts.parseWkt","description":"($wtk)"},{"content":"cts.pathGeospatialQuery(${1:pathExpression as String[]}, ${2:regions as String[]})","trigger":"cts.pathGeospatialQuery","description":"($pathExpression,$regions)"},{"content":"cts.pathGeospatialQuery(${1:pathExpression as String[]}, ${2:regions as String[]}, ${3:options as String})","trigger":"cts.pathGeospatialQuery","description":"($pathExpression,$regions,$options)"},{"content":"cts.pathGeospatialQuery(${1:pathExpression as String[]}, ${2:regions as String[]}, ${3:options as String}, ${4:weight as Number?})","trigger":"cts.pathGeospatialQuery","description":"($pathExpression,$regions,$options,$weight)"},{"content":"cts.pathGeospatialQueryOptions(${1:query as cts.pathGeospatialQuery})","trigger":"cts.pathGeospatialQueryOptions","description":"($query)"},{"content":"cts.pathGeospatialQueryPathExpression(${1:query as cts.pathGeospatialQuery})","trigger":"cts.pathGeospatialQueryPathExpression","description":"($query)"},{"content":"cts.pathGeospatialQueryRegion(${1:query as cts.pathGeospatialQuery})","trigger":"cts.pathGeospatialQueryRegion","description":"($query)"},{"content":"cts.pathGeospatialQueryWeight(${1:query as cts.pathGeospatialQuery})","trigger":"cts.pathGeospatialQueryWeight","description":"($query)"},{"content":"cts.pathRangeQuery(${1:pathExpression as String[]}, ${2:operator as String}, ${3:value as (String | Number | Boolean | null)[]})","trigger":"cts.pathRangeQuery","description":"($pathExpression,$operator,$value)"},{"content":"cts.pathRangeQuery(${1:pathExpression as String[]}, ${2:operator as String}, ${3:value as (String | Number | Boolean | null)[]}, ${4:options as String})","trigger":"cts.pathRangeQuery","description":"($pathExpression,$operator,$value,$options)"},{"content":"cts.pathRangeQuery(${1:pathExpression as String[]}, ${2:operator as String}, ${3:value as (String | Number | Boolean | null)[]}, ${4:options as String}, ${5:weight as Number?})","trigger":"cts.pathRangeQuery","description":"($pathExpression,$operator,$value,$options,$weight)"},{"content":"cts.pathRangeQueryOperator(${1:query as cts.pathRangeQuery})","trigger":"cts.pathRangeQueryOperator","description":"($query)"},{"content":"cts.pathRangeQueryOptions(${1:query as cts.pathRangeQuery})","trigger":"cts.pathRangeQueryOptions","description":"($query)"},{"content":"cts.pathRangeQueryPathName(${1:query as cts.pathRangeQuery})","trigger":"cts.pathRangeQueryPathName","description":"($query)"},{"content":"cts.pathRangeQueryValue(${1:query as cts.pathRangeQuery})","trigger":"cts.pathRangeQueryValue","description":"($query)"},{"content":"cts.pathRangeQueryWeight(${1:query as cts.pathRangeQuery})","trigger":"cts.pathRangeQueryWeight","description":"($query)"},{"content":"cts.pathReference(${1:pathExpression as String})","trigger":"cts.pathReference","description":"($pathExpression)"},{"content":"cts.pathReference(${1:pathExpression as String}, ${2:options as String})","trigger":"cts.pathReference","description":"($pathExpression,$options)"},{"content":"cts.percentRank(${1:arg as (String | Number | Boolean | null)[]}, ${2:value as xs.anyAtomicType})","trigger":"cts.percentRank","description":"($arg,$value)"},{"content":"cts.percentRank(${1:arg as (String | Number | Boolean | null)[]}, ${2:value as xs.anyAtomicType}, ${3:options as String})","trigger":"cts.percentRank","description":"($arg,$value,$options)"},{"content":"cts.percentile(${1:arg as String[]}, ${2:p as String[]})","trigger":"cts.percentile","description":"($arg,$p)"},{"content":"cts.period(${1:start as Date}, ${2:end as Date})","trigger":"cts.period","description":"($start,$end)"},{"content":"cts.periodCompare(${1:period-1 as cts.period}, ${2:operator as String}, ${3:period-2 as cts.period})","trigger":"cts.periodCompare","description":"($period-1,$operator,$period-2)"},{"content":"cts.periodCompareQuery(${1:axis-1 as String}, ${2:operator as String}, ${3:axis-2 as String})","trigger":"cts.periodCompareQuery","description":"($axis-1,$operator,$axis-2)"},{"content":"cts.periodCompareQuery(${1:axis-1 as String}, ${2:operator as String}, ${3:axis-2 as String}, ${4:options as String})","trigger":"cts.periodCompareQuery","description":"($axis-1,$operator,$axis-2,$options)"},{"content":"cts.periodCompareQuery(${1:axis-1 as String}, ${2:operator as String}, ${3:axis-2 as String}, ${4:options as String}, ${5:weight as Number?})","trigger":"cts.periodCompareQuery","description":"($axis-1,$operator,$axis-2,$options,$weight)"},{"content":"cts.periodCompareQueryAxis1(${1:query as cts.periodCompareQuery})","trigger":"cts.periodCompareQueryAxis1","description":"($query)"},{"content":"cts.periodCompareQueryAxis2(${1:query as cts.periodCompareQuery})","trigger":"cts.periodCompareQueryAxis2","description":"($query)"},{"content":"cts.periodCompareQueryOperator(${1:query as cts.periodCompareQuery})","trigger":"cts.periodCompareQueryOperator","description":"($query)"},{"content":"cts.periodCompareQueryOptions(${1:query as cts.periodCompareQuery})","trigger":"cts.periodCompareQueryOptions","description":"($query)"},{"content":"cts.periodCompareQueryWeight(${1:query as cts.periodCompareQuery})","trigger":"cts.periodCompareQueryWeight","description":"($query)"},{"content":"cts.periodRangeQuery(${1:axisName as String[]}, ${2:operator as String})","trigger":"cts.periodRangeQuery","description":"($axisName,$operator)"},{"content":"cts.periodRangeQuery(${1:axisName as String[]}, ${2:operator as String}, ${3:period as String})","trigger":"cts.periodRangeQuery","description":"($axisName,$operator,$period)"},{"content":"cts.periodRangeQuery(${1:axisName as String[]}, ${2:operator as String}, ${3:period as String}, ${4:options as String})","trigger":"cts.periodRangeQuery","description":"($axisName,$operator,$period,$options)"},{"content":"cts.periodRangeQueryAxis(${1:query as cts.periodRangeQuery})","trigger":"cts.periodRangeQueryAxis","description":"($query)"},{"content":"cts.periodRangeQueryOperator(${1:query as cts.periodRangeQuery})","trigger":"cts.periodRangeQueryOperator","description":"($query)"},{"content":"cts.periodRangeQueryOptions(${1:query as cts.periodRangeQuery})","trigger":"cts.periodRangeQueryOptions","description":"($query)"},{"content":"cts.periodRangeQueryPeriod(${1:query as cts.periodRangeQuery})","trigger":"cts.periodRangeQueryPeriod","description":"($query)"},{"content":"cts.periodRangeQueryWeight(${1:query as cts.periodRangeQuery})","trigger":"cts.periodRangeQueryWeight","description":"($query)"},{"content":"cts.plan(${1:query as cts.query?})","trigger":"cts.plan","description":"($query)"},{"content":"cts.plan(${1:query as cts.query?}, ${2:options as String})","trigger":"cts.plan","description":"($query,$options)"},{"content":"cts.plan(${1:query as cts.query?}, ${2:options as String}, ${3:qualityWeight as Number?})","trigger":"cts.plan","description":"($query,$options,$qualityWeight)"},{"content":"cts.plan(${1:query as cts.query?}, ${2:options as String}, ${3:qualityWeight as Number?}, ${4:forestIds as String})","trigger":"cts.plan","description":"($query,$options,$qualityWeight,$forestIds)"},{"content":"cts.plan(${1:query as cts.query?}, ${2:options as String}, ${3:qualityWeight as Number?}, ${4:forestIds as String}, ${5:maximum as Number?})","trigger":"cts.plan","description":"($query,$options,$qualityWeight,$forestIds,$maximum)"},{"content":"cts.point(${1:latitude as Number}, ${2:longitude as Number})","trigger":"cts.point","description":"($latitude,$longitude)"},{"content":"cts.pointLatitude(${1:point as cts.point})","trigger":"cts.pointLatitude","description":"($point)"},{"content":"cts.pointLongitude(${1:point as cts.point})","trigger":"cts.pointLongitude","description":"($point)"},{"content":"cts.polygon(${1:vertices as String[]})","trigger":"cts.polygon","description":"($vertices)"},{"content":"cts.polygonContains(${1:polygon as cts.polygon}, ${2:region as String[]})","trigger":"cts.polygonContains","description":"($polygon,$region)"},{"content":"cts.polygonContains(${1:polygon as cts.polygon}, ${2:region as String[]}, ${3:options as String})","trigger":"cts.polygonContains","description":"($polygon,$region,$options)"},{"content":"cts.polygonIntersects(${1:polygon as cts.polygon}, ${2:region as String[]})","trigger":"cts.polygonIntersects","description":"($polygon,$region)"},{"content":"cts.polygonIntersects(${1:polygon as cts.polygon}, ${2:region as String[]}, ${3:options as String})","trigger":"cts.polygonIntersects","description":"($polygon,$region,$options)"},{"content":"cts.polygonVertices(${1:polygon as cts.polygon})","trigger":"cts.polygonVertices","description":"($polygon)"},{"content":"cts.propertiesFragmentQuery(${1:query as cts.query})","trigger":"cts.propertiesFragmentQuery","description":"($query)"},{"content":"cts.propertiesFragmentQueryQuery(${1:query as cts.propertiesFragmentQuery})","trigger":"cts.propertiesFragmentQueryQuery","description":"($query)"},{"content":"cts.quality(${1:node as Node})","trigger":"cts.quality","description":"($node)"},{"content":"cts.quality()","trigger":"cts.quality"},{"content":"cts.qualityOrder(${1:options as String})","trigger":"cts.qualityOrder","description":"($options)"},{"content":"cts.qualityOrder()","trigger":"cts.qualityOrder"},{"content":"cts.query(${1:query as Node})","trigger":"cts.query","description":"($query)"},{"content":"cts.rank(${1:arg as (String | Number | Boolean | null)[]}, ${2:value as xs.anyAtomicType})","trigger":"cts.rank","description":"($arg,$value)"},{"content":"cts.rank(${1:arg as (String | Number | Boolean | null)[]}, ${2:value as xs.anyAtomicType}, ${3:options as String})","trigger":"cts.rank","description":"($arg,$value,$options)"},{"content":"cts.referenceParse(${1:reference as Node})","trigger":"cts.referenceParse","description":"($reference)"},{"content":"cts.referenceScalarType(${1:index as cts.reference})","trigger":"cts.referenceScalarType","description":"($index)"},{"content":"cts.regionContains(${1:region as cts.region}, ${2:region as String[]})","trigger":"cts.regionContains","description":"($region,$region)"},{"content":"cts.regionContains(${1:region as cts.region}, ${2:region as String[]}, ${3:options as String})","trigger":"cts.regionContains","description":"($region,$region,$options)"},{"content":"cts.regionIntersects(${1:target as cts.region}, ${2:region as String[]})","trigger":"cts.regionIntersects","description":"($target,$region)"},{"content":"cts.regionIntersects(${1:target as cts.region}, ${2:region as String[]}, ${3:options as String})","trigger":"cts.regionIntersects","description":"($target,$region,$options)"},{"content":"cts.register(${1:query as cts.query})","trigger":"cts.register","description":"($query)"},{"content":"cts.registeredQuery(${1:ids as String[]})","trigger":"cts.registeredQuery","description":"($ids)"},{"content":"cts.registeredQuery(${1:ids as String[]}, ${2:options as String})","trigger":"cts.registeredQuery","description":"($ids,$options)"},{"content":"cts.registeredQuery(${1:ids as String[]}, ${2:options as String}, ${3:weight as Number?})","trigger":"cts.registeredQuery","description":"($ids,$options,$weight)"},{"content":"cts.registeredQueryIds(${1:query as cts.registeredQuery})","trigger":"cts.registeredQueryIds","description":"($query)"},{"content":"cts.registeredQueryOptions(${1:query as cts.registeredQuery})","trigger":"cts.registeredQueryOptions","description":"($query)"},{"content":"cts.registeredQueryWeight(${1:query as cts.registeredQuery})","trigger":"cts.registeredQueryWeight","description":"($query)"},{"content":"cts.relevanceInfo(${1:node as Node})","trigger":"cts.relevanceInfo","description":"($node)"},{"content":"cts.relevanceInfo()","trigger":"cts.relevanceInfo"},{"content":"cts.remainder(${1:node as Node})","trigger":"cts.remainder","description":"($node)"},{"content":"cts.remainder()","trigger":"cts.remainder"},{"content":"cts.reverseQuery(${1:nodes as String[]})","trigger":"cts.reverseQuery","description":"($nodes)"},{"content":"cts.reverseQuery(${1:nodes as String[]}, ${2:weight as Number?})","trigger":"cts.reverseQuery","description":"($nodes,$weight)"},{"content":"cts.reverseQueryNodes(${1:query as cts.reverseQuery})","trigger":"cts.reverseQueryNodes","description":"($query)"},{"content":"cts.reverseQueryWeight(${1:query as cts.reverseQuery})","trigger":"cts.reverseQueryWeight","description":"($query)"},{"content":"cts.score(${1:node as Node})","trigger":"cts.score","description":"($node)"},{"content":"cts.score()","trigger":"cts.score"},{"content":"cts.scoreOrder(${1:options as String})","trigger":"cts.scoreOrder","description":"($options)"},{"content":"cts.scoreOrder()","trigger":"cts.scoreOrder"},{"content":"cts.search(${1:query as cts.query?})","trigger":"cts.search","description":"($query)"},{"content":"cts.search(${1:query as cts.query?}, ${2:options as String})","trigger":"cts.search","description":"($query,$options)"},{"content":"cts.search(${1:query as cts.query?}, ${2:options as String}, ${3:qualityWeight as Number?})","trigger":"cts.search","description":"($query,$options,$qualityWeight)"},{"content":"cts.search(${1:query as cts.query?}, ${2:options as String}, ${3:qualityWeight as Number?}, ${4:forestIds as String})","trigger":"cts.search","description":"($query,$options,$qualityWeight,$forestIds)"},{"content":"cts.shortestDistance(${1:p1 as cts.point}, ${2:region as String[]})","trigger":"cts.shortestDistance","description":"($p1,$region)"},{"content":"cts.shortestDistance(${1:p1 as cts.point}, ${2:region as String[]}, ${3:options as String})","trigger":"cts.shortestDistance","description":"($p1,$region,$options)"},{"content":"cts.similarQuery(${1:nodes as String[]})","trigger":"cts.similarQuery","description":"($nodes)"},{"content":"cts.similarQuery(${1:nodes as String[]}, ${2:weight as Number?})","trigger":"cts.similarQuery","description":"($nodes,$weight)"},{"content":"cts.similarQuery(${1:nodes as String[]}, ${2:weight as Number?}, ${3:options as Node?})","trigger":"cts.similarQuery","description":"($nodes,$weight,$options)"},{"content":"cts.similarQueryNodes(${1:query as cts.similarQuery})","trigger":"cts.similarQueryNodes","description":"($query)"},{"content":"cts.similarQueryWeight(${1:query as cts.similarQuery})","trigger":"cts.similarQueryWeight","description":"($query)"},{"content":"cts.stddev(${1:rangeIndex as cts.reference})","trigger":"cts.stddev","description":"($rangeIndex)"},{"content":"cts.stddev(${1:rangeIndex as cts.reference}, ${2:options as String})","trigger":"cts.stddev","description":"($rangeIndex,$options)"},{"content":"cts.stddev(${1:rangeIndex as cts.reference}, ${2:options as String}, ${3:query as cts.query?})","trigger":"cts.stddev","description":"($rangeIndex,$options,$query)"},{"content":"cts.stddev(${1:rangeIndex as cts.reference}, ${2:options as String}, ${3:query as cts.query?}, ${4:forestIds as String})","trigger":"cts.stddev","description":"($rangeIndex,$options,$query,$forestIds)"},{"content":"cts.stddevP(${1:rangeIndex as cts.reference})","trigger":"cts.stddevP","description":"($rangeIndex)"},{"content":"cts.stddevP(${1:rangeIndex as cts.reference}, ${2:options as String})","trigger":"cts.stddevP","description":"($rangeIndex,$options)"},{"content":"cts.stddevP(${1:rangeIndex as cts.reference}, ${2:options as String}, ${3:query as cts.query?})","trigger":"cts.stddevP","description":"($rangeIndex,$options,$query)"},{"content":"cts.stddevP(${1:rangeIndex as cts.reference}, ${2:options as String}, ${3:query as cts.query?}, ${4:forestIds as String})","trigger":"cts.stddevP","description":"($rangeIndex,$options,$query,$forestIds)"},{"content":"cts.stem(${1:text as String})","trigger":"cts.stem","description":"($text)"},{"content":"cts.stem(${1:text as String}, ${2:language as String?})","trigger":"cts.stem","description":"($text,$language)"},{"content":"cts.sum(${1:arg as (String | Number | Boolean | null)[]})","trigger":"cts.sum","description":"($arg)"},{"content":"cts.sum(${1:arg as (String | Number | Boolean | null)[]}, ${2:zero as xs.anyAtomicType?})","trigger":"cts.sum","description":"($arg,$zero)"},{"content":"cts.sumAggregate(${1:rangeIndex as cts.reference})","trigger":"cts.sumAggregate","description":"($rangeIndex)"},{"content":"cts.sumAggregate(${1:rangeIndex as cts.reference}, ${2:options as String})","trigger":"cts.sumAggregate","description":"($rangeIndex,$options)"},{"content":"cts.sumAggregate(${1:rangeIndex as cts.reference}, ${2:options as String}, ${3:query as cts.query?})","trigger":"cts.sumAggregate","description":"($rangeIndex,$options,$query)"},{"content":"cts.sumAggregate(${1:rangeIndex as cts.reference}, ${2:options as String}, ${3:query as cts.query?}, ${4:forestIds as String})","trigger":"cts.sumAggregate","description":"($rangeIndex,$options,$query,$forestIds)"},{"content":"cts.thresholds(${1:computedLabels as String[]}, ${2:knownLabels as String[]})","trigger":"cts.thresholds","description":"($computedLabels,$knownLabels)"},{"content":"cts.thresholds(${1:computedLabels as String[]}, ${2:knownLabels as String[]}, ${3:recallWeight as Number?})","trigger":"cts.thresholds","description":"($computedLabels,$knownLabels,$recallWeight)"},{"content":"cts.toWkt(${1:wtk as String[]})","trigger":"cts.toWkt","description":"($wtk)"},{"content":"cts.tokenize(${1:text as String})","trigger":"cts.tokenize","description":"($text)"},{"content":"cts.tokenize(${1:text as String}, ${2:language as String?})","trigger":"cts.tokenize","description":"($text,$language)"},{"content":"cts.tokenize(${1:text as String}, ${2:language as String?}, ${3:field as String?})","trigger":"cts.tokenize","description":"($text,$language,$field)"},{"content":"cts.train(${1:trainingNodes as String[]}, ${2:labels as String[]})","trigger":"cts.train","description":"($trainingNodes,$labels)"},{"content":"cts.train(${1:trainingNodes as String[]}, ${2:labels as String[]}, ${3:options as Object?})","trigger":"cts.train","description":"($trainingNodes,$labels,$options)"},{"content":"cts.tripleRangeQuery(${1:subject as (String | Number | Boolean | null)[]}, ${2:predicate as (String | Number | Boolean | null)[]}, ${3:object as (String | Number | Boolean | null)[]})","trigger":"cts.tripleRangeQuery","description":"($subject,$predicate,$object)"},{"content":"cts.tripleRangeQuery(${1:subject as (String | Number | Boolean | null)[]}, ${2:predicate as (String | Number | Boolean | null)[]}, ${3:object as (String | Number | Boolean | null)[]}, ${4:operator as String})","trigger":"cts.tripleRangeQuery","description":"($subject,$predicate,$object,$operator)"},{"content":"cts.tripleRangeQuery(${1:subject as (String | Number | Boolean | null)[]}, ${2:predicate as (String | Number | Boolean | null)[]}, ${3:object as (String | Number | Boolean | null)[]}, ${4:operator as String}, ${5:options as String})","trigger":"cts.tripleRangeQuery","description":"($subject,$predicate,$object,$operator,$options)"},{"content":"cts.tripleRangeQuery(${1:subject as (String | Number | Boolean | null)[]}, ${2:predicate as (String | Number | Boolean | null)[]}, ${3:object as (String | Number | Boolean | null)[]}, ${4:operator as String}, ${5:options as String}, ${6:weight as Number?})","trigger":"cts.tripleRangeQuery","description":"($subject,$predicate,$object,$operator,$options,$weight)"},{"content":"cts.tripleRangeQueryObject(${1:query as cts.tripleRangeQuery})","trigger":"cts.tripleRangeQueryObject","description":"($query)"},{"content":"cts.tripleRangeQueryOperator(${1:query as cts.tripleRangeQuery})","trigger":"cts.tripleRangeQueryOperator","description":"($query)"},{"content":"cts.tripleRangeQueryOptions(${1:query as cts.tripleRangeQuery})","trigger":"cts.tripleRangeQueryOptions","description":"($query)"},{"content":"cts.tripleRangeQueryPredicate(${1:query as cts.tripleRangeQuery})","trigger":"cts.tripleRangeQueryPredicate","description":"($query)"},{"content":"cts.tripleRangeQuerySubject(${1:query as cts.tripleRangeQuery})","trigger":"cts.tripleRangeQuerySubject","description":"($query)"},{"content":"cts.tripleRangeQueryWeight(${1:query as cts.tripleRangeQuery})","trigger":"cts.tripleRangeQueryWeight","description":"($query)"},{"content":"cts.triples(${1:subject as (String | Number | Boolean | null)})","trigger":"cts.triples","description":"($subject)"},{"content":"cts.triples(${1:subject as (String | Number | Boolean | null)}, ${2:predicate as (String | Number | Boolean | null)})","trigger":"cts.triples","description":"($subject,$predicate)"},{"content":"cts.triples(${1:subject as (String | Number | Boolean | null)}, ${2:predicate as (String | Number | Boolean | null)}, ${3:object as (String | Number | Boolean | null)})","trigger":"cts.triples","description":"($subject,$predicate,$object)"},{"content":"cts.triples(${1:subject as (String | Number | Boolean | null)}, ${2:predicate as (String | Number | Boolean | null)}, ${3:object as (String | Number | Boolean | null)}, ${4:operator as String})","trigger":"cts.triples","description":"($subject,$predicate,$object,$operator)"},{"content":"cts.triples(${1:subject as (String | Number | Boolean | null)}, ${2:predicate as (String | Number | Boolean | null)}, ${3:object as (String | Number | Boolean | null)}, ${4:operator as String}, ${5:options as String})","trigger":"cts.triples","description":"($subject,$predicate,$object,$operator,$options)"},{"content":"cts.triples(${1:subject as (String | Number | Boolean | null)}, ${2:predicate as (String | Number | Boolean | null)}, ${3:object as (String | Number | Boolean | null)}, ${4:operator as String}, ${5:options as String}, ${6:query as cts.query?})","trigger":"cts.triples","description":"($subject,$predicate,$object,$operator,$options,$query)"},{"content":"cts.triples(${1:subject as (String | Number | Boolean | null)}, ${2:predicate as (String | Number | Boolean | null)}, ${3:object as (String | Number | Boolean | null)}, ${4:operator as String}, ${5:options as String}, ${6:query as cts.query?}, ${7:forestIds as String})","trigger":"cts.triples","description":"($subject,$predicate,$object,$operator,$options,$query,$forestIds)"},{"content":"cts.triples()","trigger":"cts.triples"},{"content":"cts.unordered()","trigger":"cts.unordered"},{"content":"cts.uriMatch(${1:pattern as String})","trigger":"cts.uriMatch","description":"($pattern)"},{"content":"cts.uriMatch(${1:pattern as String}, ${2:options as String})","trigger":"cts.uriMatch","description":"($pattern,$options)"},{"content":"cts.uriMatch(${1:pattern as String}, ${2:options as String}, ${3:query as cts.query?})","trigger":"cts.uriMatch","description":"($pattern,$options,$query)"},{"content":"cts.uriMatch(${1:pattern as String}, ${2:options as String}, ${3:query as cts.query?}, ${4:qualityWeight as Number?})","trigger":"cts.uriMatch","description":"($pattern,$options,$query,$qualityWeight)"},{"content":"cts.uriMatch(${1:pattern as String}, ${2:options as String}, ${3:query as cts.query?}, ${4:qualityWeight as Number?}, ${5:forestIds as String})","trigger":"cts.uriMatch","description":"($pattern,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.uriReference()","trigger":"cts.uriReference"},{"content":"cts.uris(${1:start as String?})","trigger":"cts.uris","description":"($start)"},{"content":"cts.uris(${1:start as String?}, ${2:options as String})","trigger":"cts.uris","description":"($start,$options)"},{"content":"cts.uris(${1:start as String?}, ${2:options as String}, ${3:query as cts.query?})","trigger":"cts.uris","description":"($start,$options,$query)"},{"content":"cts.uris(${1:start as String?}, ${2:options as String}, ${3:query as cts.query?}, ${4:qualityWeight as Number?})","trigger":"cts.uris","description":"($start,$options,$query,$qualityWeight)"},{"content":"cts.uris(${1:start as String?}, ${2:options as String}, ${3:query as cts.query?}, ${4:qualityWeight as Number?}, ${5:forestIds as String})","trigger":"cts.uris","description":"($start,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.uris()","trigger":"cts.uris"},{"content":"cts.validIndexPath(${1:string as String}, ${2:ignorens as Boolean})","trigger":"cts.validIndexPath","description":"($string,$ignorens)"},{"content":"cts.valueCoOccurrences(${1:rangeIndex-1 as cts.reference}, ${2:rangeIndex-2 as cts.reference})","trigger":"cts.valueCoOccurrences","description":"($rangeIndex-1,$rangeIndex-2)"},{"content":"cts.valueCoOccurrences(${1:rangeIndex-1 as cts.reference}, ${2:rangeIndex-2 as cts.reference}, ${3:options as String})","trigger":"cts.valueCoOccurrences","description":"($rangeIndex-1,$rangeIndex-2,$options)"},{"content":"cts.valueCoOccurrences(${1:rangeIndex-1 as cts.reference}, ${2:rangeIndex-2 as cts.reference}, ${3:options as String}, ${4:query as cts.query?})","trigger":"cts.valueCoOccurrences","description":"($rangeIndex-1,$rangeIndex-2,$options,$query)"},{"content":"cts.valueCoOccurrences(${1:rangeIndex-1 as cts.reference}, ${2:rangeIndex-2 as cts.reference}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?})","trigger":"cts.valueCoOccurrences","description":"($rangeIndex-1,$rangeIndex-2,$options,$query,$qualityWeight)"},{"content":"cts.valueCoOccurrences(${1:rangeIndex-1 as cts.reference}, ${2:rangeIndex-2 as cts.reference}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?}, ${6:forestIds as String})","trigger":"cts.valueCoOccurrences","description":"($rangeIndex-1,$rangeIndex-2,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.valueMatch(${1:rangeIndexes as String[]}, ${2:pattern as xs.anyAtomicType})","trigger":"cts.valueMatch","description":"($rangeIndexes,$pattern)"},{"content":"cts.valueMatch(${1:rangeIndexes as String[]}, ${2:pattern as xs.anyAtomicType}, ${3:options as String})","trigger":"cts.valueMatch","description":"($rangeIndexes,$pattern,$options)"},{"content":"cts.valueMatch(${1:rangeIndexes as String[]}, ${2:pattern as xs.anyAtomicType}, ${3:options as String}, ${4:query as cts.query?})","trigger":"cts.valueMatch","description":"($rangeIndexes,$pattern,$options,$query)"},{"content":"cts.valueMatch(${1:rangeIndexes as String[]}, ${2:pattern as xs.anyAtomicType}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?})","trigger":"cts.valueMatch","description":"($rangeIndexes,$pattern,$options,$query,$qualityWeight)"},{"content":"cts.valueMatch(${1:rangeIndexes as String[]}, ${2:pattern as xs.anyAtomicType}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?}, ${6:forestIds as String})","trigger":"cts.valueMatch","description":"($rangeIndexes,$pattern,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.valueRanges(${1:rangeIndexes as String[]})","trigger":"cts.valueRanges","description":"($rangeIndexes)"},{"content":"cts.valueRanges(${1:rangeIndexes as String[]}, ${2:bounds as (String | Number | Boolean | null)})","trigger":"cts.valueRanges","description":"($rangeIndexes,$bounds)"},{"content":"cts.valueRanges(${1:rangeIndexes as String[]}, ${2:bounds as (String | Number | Boolean | null)}, ${3:options as String})","trigger":"cts.valueRanges","description":"($rangeIndexes,$bounds,$options)"},{"content":"cts.valueRanges(${1:rangeIndexes as String[]}, ${2:bounds as (String | Number | Boolean | null)}, ${3:options as String}, ${4:query as cts.query?})","trigger":"cts.valueRanges","description":"($rangeIndexes,$bounds,$options,$query)"},{"content":"cts.valueRanges(${1:rangeIndexes as String[]}, ${2:bounds as (String | Number | Boolean | null)}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?})","trigger":"cts.valueRanges","description":"($rangeIndexes,$bounds,$options,$query,$qualityWeight)"},{"content":"cts.valueRanges(${1:rangeIndexes as String[]}, ${2:bounds as (String | Number | Boolean | null)}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?}, ${6:forestIds as String})","trigger":"cts.valueRanges","description":"($rangeIndexes,$bounds,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.valueTuples(${1:rangeIndexes as String[]})","trigger":"cts.valueTuples","description":"($rangeIndexes)"},{"content":"cts.valueTuples(${1:rangeIndexes as String[]}, ${2:options as String})","trigger":"cts.valueTuples","description":"($rangeIndexes,$options)"},{"content":"cts.valueTuples(${1:rangeIndexes as String[]}, ${2:options as String}, ${3:query as cts.query?})","trigger":"cts.valueTuples","description":"($rangeIndexes,$options,$query)"},{"content":"cts.valueTuples(${1:rangeIndexes as String[]}, ${2:options as String}, ${3:query as cts.query?}, ${4:qualityWeight as Number?})","trigger":"cts.valueTuples","description":"($rangeIndexes,$options,$query,$qualityWeight)"},{"content":"cts.valueTuples(${1:rangeIndexes as String[]}, ${2:options as String}, ${3:query as cts.query?}, ${4:qualityWeight as Number?}, ${5:forestIds as String})","trigger":"cts.valueTuples","description":"($rangeIndexes,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.values(${1:rangeIndexes as String[]})","trigger":"cts.values","description":"($rangeIndexes)"},{"content":"cts.values(${1:rangeIndexes as String[]}, ${2:start as xs.anyAtomicType?})","trigger":"cts.values","description":"($rangeIndexes,$start)"},{"content":"cts.values(${1:rangeIndexes as String[]}, ${2:start as xs.anyAtomicType?}, ${3:options as String})","trigger":"cts.values","description":"($rangeIndexes,$start,$options)"},{"content":"cts.values(${1:rangeIndexes as String[]}, ${2:start as xs.anyAtomicType?}, ${3:options as String}, ${4:query as cts.query?})","trigger":"cts.values","description":"($rangeIndexes,$start,$options,$query)"},{"content":"cts.values(${1:rangeIndexes as String[]}, ${2:start as xs.anyAtomicType?}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?})","trigger":"cts.values","description":"($rangeIndexes,$start,$options,$query,$qualityWeight)"},{"content":"cts.values(${1:rangeIndexes as String[]}, ${2:start as xs.anyAtomicType?}, ${3:options as String}, ${4:query as cts.query?}, ${5:qualityWeight as Number?}, ${6:forestIds as String})","trigger":"cts.values","description":"($rangeIndexes,$start,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.variance(${1:rangeIndex as cts.reference})","trigger":"cts.variance","description":"($rangeIndex)"},{"content":"cts.variance(${1:rangeIndex as cts.reference}, ${2:options as String})","trigger":"cts.variance","description":"($rangeIndex,$options)"},{"content":"cts.variance(${1:rangeIndex as cts.reference}, ${2:options as String}, ${3:query as cts.query?})","trigger":"cts.variance","description":"($rangeIndex,$options,$query)"},{"content":"cts.variance(${1:rangeIndex as cts.reference}, ${2:options as String}, ${3:query as cts.query?}, ${4:forestIds as String})","trigger":"cts.variance","description":"($rangeIndex,$options,$query,$forestIds)"},{"content":"cts.varianceP(${1:rangeIndex as cts.reference})","trigger":"cts.varianceP","description":"($rangeIndex)"},{"content":"cts.varianceP(${1:rangeIndex as cts.reference}, ${2:options as String})","trigger":"cts.varianceP","description":"($rangeIndex,$options)"},{"content":"cts.varianceP(${1:rangeIndex as cts.reference}, ${2:options as String}, ${3:query as cts.query?})","trigger":"cts.varianceP","description":"($rangeIndex,$options,$query)"},{"content":"cts.varianceP(${1:rangeIndex as cts.reference}, ${2:options as String}, ${3:query as cts.query?}, ${4:forestIds as String})","trigger":"cts.varianceP","description":"($rangeIndex,$options,$query,$forestIds)"},{"content":"cts.walk(${1:node as Node}, ${2:query as cts.query}, ${3:callback as function(xs.string}, text()}, cts.query*}, xs.integer})","trigger":"cts.walk","description":"($node,$query,$callback,text(),cts.query*,xs.integer)"},{"content":"cts.wordMatch(${1:pattern as String})","trigger":"cts.wordMatch","description":"($pattern)"},{"content":"cts.wordMatch(${1:pattern as String}, ${2:options as String})","trigger":"cts.wordMatch","description":"($pattern,$options)"},{"content":"cts.wordMatch(${1:pattern as String}, ${2:options as String}, ${3:query as cts.query?})","trigger":"cts.wordMatch","description":"($pattern,$options,$query)"},{"content":"cts.wordMatch(${1:pattern as String}, ${2:options as String}, ${3:query as cts.query?}, ${4:qualityWeight as Number?})","trigger":"cts.wordMatch","description":"($pattern,$options,$query,$qualityWeight)"},{"content":"cts.wordMatch(${1:pattern as String}, ${2:options as String}, ${3:query as cts.query?}, ${4:qualityWeight as Number?}, ${5:forestIds as String})","trigger":"cts.wordMatch","description":"($pattern,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.wordQuery(${1:text as String[]})","trigger":"cts.wordQuery","description":"($text)"},{"content":"cts.wordQuery(${1:text as String[]}, ${2:options as String})","trigger":"cts.wordQuery","description":"($text,$options)"},{"content":"cts.wordQuery(${1:text as String[]}, ${2:options as String}, ${3:weight as Number?})","trigger":"cts.wordQuery","description":"($text,$options,$weight)"},{"content":"cts.wordQueryOptions(${1:query as cts.wordQuery})","trigger":"cts.wordQueryOptions","description":"($query)"},{"content":"cts.wordQueryText(${1:query as cts.wordQuery})","trigger":"cts.wordQueryText","description":"($query)"},{"content":"cts.wordQueryWeight(${1:query as cts.wordQuery})","trigger":"cts.wordQueryWeight","description":"($query)"},{"content":"cts.words(${1:start as String?})","trigger":"cts.words","description":"($start)"},{"content":"cts.words(${1:start as String?}, ${2:options as String})","trigger":"cts.words","description":"($start,$options)"},{"content":"cts.words(${1:start as String?}, ${2:options as String}, ${3:query as cts.query?})","trigger":"cts.words","description":"($start,$options,$query)"},{"content":"cts.words(${1:start as String?}, ${2:options as String}, ${3:query as cts.query?}, ${4:qualityWeight as Number?})","trigger":"cts.words","description":"($start,$options,$query,$qualityWeight)"},{"content":"cts.words(${1:start as String?}, ${2:options as String}, ${3:query as cts.query?}, ${4:qualityWeight as Number?}, ${5:forestIds as String})","trigger":"cts.words","description":"($start,$options,$query,$qualityWeight,$forestIds)"},{"content":"cts.words()","trigger":"cts.words"},{"content":"exsl.nodeSet(${1:value as (Object[] | ValueIterator)})","trigger":"exsl.nodeSet","description":"($value)"},{"content":"exsl.objectType(${1:value as (Object[] | ValueIterator)})","trigger":"exsl.objectType","description":"($value)"},{"content":"fn.QName(${1:paramURI as String?}, ${2:paramQName as String})","trigger":"fn.QName","description":"($paramURI,$paramQName)"},{"content":"fn.abs(${1:arg as numeric?})","trigger":"fn.abs","description":"($arg)"},{"content":"fn.adjustDateTimeToTimezone(${1:arg as Date?})","trigger":"fn.adjustDateTimeToTimezone","description":"($arg)"},{"content":"fn.adjustDateTimeToTimezone(${1:arg as Date?}, ${2:timezone as xs.dayTimeDuration?})","trigger":"fn.adjustDateTimeToTimezone","description":"($arg,$timezone)"},{"content":"fn.adjustDateToTimezone(${1:arg as Date?})","trigger":"fn.adjustDateToTimezone","description":"($arg)"},{"content":"fn.adjustDateToTimezone(${1:arg as Date?}, ${2:timezone as xs.dayTimeDuration?})","trigger":"fn.adjustDateToTimezone","description":"($arg,$timezone)"},{"content":"fn.adjustTimeToTimezone(${1:arg as String?})","trigger":"fn.adjustTimeToTimezone","description":"($arg)"},{"content":"fn.adjustTimeToTimezone(${1:arg as String?}, ${2:timezone as xs.dayTimeDuration?})","trigger":"fn.adjustTimeToTimezone","description":"($arg,$timezone)"},{"content":"fn.analyzeString(${1:in as String?}, ${2:regex as String})","trigger":"fn.analyzeString","description":"($in,$regex)"},{"content":"fn.analyzeString(${1:in as String?}, ${2:regex as String}, ${3:flags as String})","trigger":"fn.analyzeString","description":"($in,$regex,$flags)"},{"content":"fn.avg(${1:arg as (String | Number | Boolean | null)[]})","trigger":"fn.avg","description":"($arg)"},{"content":"fn.baseUri(${1:arg as Node?})","trigger":"fn.baseUri","description":"($arg)"},{"content":"fn.baseUri()","trigger":"fn.baseUri"},{"content":"fn.boolean(${1:arg as (Object[] | ValueIterator)})","trigger":"fn.boolean","description":"($arg)"},{"content":"fn.ceiling(${1:arg as numeric?})","trigger":"fn.ceiling","description":"($arg)"},{"content":"fn.codepointEqual(${1:comparand1 as String?}, ${2:comparand2 as String?})","trigger":"fn.codepointEqual","description":"($comparand1,$comparand2)"},{"content":"fn.codepointsToString(${1:arg as String[]})","trigger":"fn.codepointsToString","description":"($arg)"},{"content":"fn.collection(${1:uri as String})","trigger":"fn.collection","description":"($uri)"},{"content":"fn.collection()","trigger":"fn.collection"},{"content":"fn.compare(${1:comparand1 as String?}, ${2:comparand2 as String?})","trigger":"fn.compare","description":"($comparand1,$comparand2)"},{"content":"fn.compare(${1:comparand1 as String?}, ${2:comparand2 as String?}, ${3:collation as String})","trigger":"fn.compare","description":"($comparand1,$comparand2,$collation)"},{"content":"fn.concat(${1:parameter1 as xs.anyAtomicType?}, [${2:parameterN as xs.anyAtomicType?}, ...]})","trigger":"fn.concat","description":"($parameter1,[$parameterN,...])"},{"content":"fn.contains(${1:parameter1 as String?}, ${2:parameter2 as String?})","trigger":"fn.contains","description":"($parameter1,$parameter2)"},{"content":"fn.contains(${1:parameter1 as String?}, ${2:parameter2 as String?}, ${3:collation as String})","trigger":"fn.contains","description":"($parameter1,$parameter2,$collation)"},{"content":"fn.count(${1:arg as (Object[] | ValueIterator)})","trigger":"fn.count","description":"($arg)"},{"content":"fn.count(${1:arg as (Object[] | ValueIterator)}, ${2:maximum as Number?})","trigger":"fn.count","description":"($arg,$maximum)"},{"content":"fn.currentDate()","trigger":"fn.currentDate"},{"content":"fn.currentDateTime()","trigger":"fn.currentDateTime"},{"content":"fn.currentTime()","trigger":"fn.currentTime"},{"content":"fn.data(${1:arg as (Object[] | ValueIterator)})","trigger":"fn.data","description":"($arg)"},{"content":"fn.dayFromDate(${1:arg as Date?})","trigger":"fn.dayFromDate","description":"($arg)"},{"content":"fn.dayFromDateTime(${1:arg as Date?})","trigger":"fn.dayFromDateTime","description":"($arg)"},{"content":"fn.daysFromDuration(${1:arg as xs.duration?})","trigger":"fn.daysFromDuration","description":"($arg)"},{"content":"fn.deepEqual(${1:parameter1 as (Object[] | ValueIterator)}, ${2:parameter2 as (Object[] | ValueIterator)})","trigger":"fn.deepEqual","description":"($parameter1,$parameter2)"},{"content":"fn.deepEqual(${1:parameter1 as (Object[] | ValueIterator)}, ${2:parameter2 as (Object[] | ValueIterator)}, ${3:collation as String})","trigger":"fn.deepEqual","description":"($parameter1,$parameter2,$collation)"},{"content":"fn.defaultCollation()","trigger":"fn.defaultCollation"},{"content":"fn.distinctValues(${1:arg as (String | Number | Boolean | null)[]})","trigger":"fn.distinctValues","description":"($arg)"},{"content":"fn.distinctValues(${1:arg as (String | Number | Boolean | null)[]}, ${2:collation as String})","trigger":"fn.distinctValues","description":"($arg,$collation)"},{"content":"fn.doc(${1:uri as String})","trigger":"fn.doc","description":"($uri)"},{"content":"fn.doc()","trigger":"fn.doc"},{"content":"fn.docAvailable(${1:uri as String?})","trigger":"fn.docAvailable","description":"($uri)"},{"content":"fn.document(${1:uris as (Object[] | ValueIterator)})","trigger":"fn.document","description":"($uris)"},{"content":"fn.document(${1:uris as (Object[] | ValueIterator)}, ${2:baseNode as Node})","trigger":"fn.document","description":"($uris,$baseNode)"},{"content":"fn.documentUri(${1:arg as Node?})","trigger":"fn.documentUri","description":"($arg)"},{"content":"fn.empty(${1:arg as (Object[] | ValueIterator)})","trigger":"fn.empty","description":"($arg)"},{"content":"fn.encodeForUri(${1:uriPart as String})","trigger":"fn.encodeForUri","description":"($uriPart)"},{"content":"fn.endsWith(${1:parameter1 as String?}, ${2:parameter2 as String?})","trigger":"fn.endsWith","description":"($parameter1,$parameter2)"},{"content":"fn.endsWith(${1:parameter1 as String?}, ${2:parameter2 as String?}, ${3:collation as String})","trigger":"fn.endsWith","description":"($parameter1,$parameter2,$collation)"},{"content":"fn.error(${1:error as xs.QName?})","trigger":"fn.error","description":"($error)"},{"content":"fn.error(${1:error as xs.QName?}, ${2:description as String})","trigger":"fn.error","description":"($error,$description)"},{"content":"fn.error(${1:error as xs.QName?}, ${2:description as String}, ${3:data as (Object | ValueIterator)})","trigger":"fn.error","description":"($error,$description,$data)"},{"content":"fn.error()","trigger":"fn.error"},{"content":"fn.escapeHtmlUri(${1:uriPart as String})","trigger":"fn.escapeHtmlUri","description":"($uriPart)"},{"content":"fn.exactlyOne(${1:arg as (Object[] | ValueIterator)})","trigger":"fn.exactlyOne","description":"($arg)"},{"content":"fn.exists(${1:arg as (Object[] | ValueIterator)})","trigger":"fn.exists","description":"($arg)"},{"content":"fn.false()","trigger":"fn.false"},{"content":"fn.filter(${1:function as function(item()) as xs.boolean}, ${2:seq as (Object[] | ValueIterator)})","trigger":"fn.filter","description":"($function,$seq)"},{"content":"fn.floor(${1:arg as numeric?})","trigger":"fn.floor","description":"($arg)"},{"content":"fn.foldLeft(${1:function as String[]}, ${2:zero as (Object[] | ValueIterator)}, ${3:seq as (Object[] | ValueIterator)})","trigger":"fn.foldLeft","description":"($function,$zero,$seq)"},{"content":"fn.foldRight(${1:function as String[]}, ${2:zero as (Object[] | ValueIterator)}, ${3:seq as (Object[] | ValueIterator)})","trigger":"fn.foldRight","description":"($function,$zero,$seq)"},{"content":"fn.formatDate(${1:value as Date}, ${2:picture as String})","trigger":"fn.formatDate","description":"($value,$picture)"},{"content":"fn.formatDate(${1:value as Date}, ${2:picture as String}, ${3:language as String})","trigger":"fn.formatDate","description":"($value,$picture,$language)"},{"content":"fn.formatDate(${1:value as Date}, ${2:picture as String}, ${3:language as String}, ${4:calendar as String})","trigger":"fn.formatDate","description":"($value,$picture,$language,$calendar)"},{"content":"fn.formatDate(${1:value as Date}, ${2:picture as String}, ${3:language as String}, ${4:calendar as String}, ${5:country as String})","trigger":"fn.formatDate","description":"($value,$picture,$language,$calendar,$country)"},{"content":"fn.formatDateTime(${1:value as Date}, ${2:picture as String})","trigger":"fn.formatDateTime","description":"($value,$picture)"},{"content":"fn.formatDateTime(${1:value as Date}, ${2:picture as String}, ${3:language as String})","trigger":"fn.formatDateTime","description":"($value,$picture,$language)"},{"content":"fn.formatDateTime(${1:value as Date}, ${2:picture as String}, ${3:language as String}, ${4:calendar as String})","trigger":"fn.formatDateTime","description":"($value,$picture,$language,$calendar)"},{"content":"fn.formatDateTime(${1:value as Date}, ${2:picture as String}, ${3:language as String}, ${4:calendar as String}, ${5:country as String})","trigger":"fn.formatDateTime","description":"($value,$picture,$language,$calendar,$country)"},{"content":"fn.formatNumber(${1:value as Number}, ${2:picture as String})","trigger":"fn.formatNumber","description":"($value,$picture)"},{"content":"fn.formatNumber(${1:value as Number}, ${2:picture as String}, ${3:decimalFormatName as String})","trigger":"fn.formatNumber","description":"($value,$picture,$decimalFormatName)"},{"content":"fn.formatTime(${1:value as String}, ${2:picture as String})","trigger":"fn.formatTime","description":"($value,$picture)"},{"content":"fn.formatTime(${1:value as String}, ${2:picture as String}, ${3:language as String})","trigger":"fn.formatTime","description":"($value,$picture,$language)"},{"content":"fn.formatTime(${1:value as String}, ${2:picture as String}, ${3:language as String}, ${4:calendar as String})","trigger":"fn.formatTime","description":"($value,$picture,$language,$calendar)"},{"content":"fn.formatTime(${1:value as String}, ${2:picture as String}, ${3:language as String}, ${4:calendar as String}, ${5:country as String})","trigger":"fn.formatTime","description":"($value,$picture,$language,$calendar,$country)"},{"content":"fn.functionArity(${1:function as function(*)})","trigger":"fn.functionArity","description":"($function)"},{"content":"fn.functionAvailable(${1:functionName as String})","trigger":"fn.functionAvailable","description":"($functionName)"},{"content":"fn.functionAvailable(${1:functionName as String}, ${2:arity as Integer})","trigger":"fn.functionAvailable","description":"($functionName,$arity)"},{"content":"fn.functionLookup(${1:name as xs.QName}, ${2:arity as Integer})","trigger":"fn.functionLookup","description":"($name,$arity)"},{"content":"fn.functionName(${1:function as function(*)})","trigger":"fn.functionName","description":"($function)"},{"content":"fn.generateId(${1:node as Node?})","trigger":"fn.generateId","description":"($node)"},{"content":"fn.generateId()","trigger":"fn.generateId"},{"content":"fn.head(${1:seq as (Object[] | ValueIterator)})","trigger":"fn.head","description":"($seq)"},{"content":"fn.hoursFromDateTime(${1:arg as Date?})","trigger":"fn.hoursFromDateTime","description":"($arg)"},{"content":"fn.hoursFromDuration(${1:arg as xs.duration?})","trigger":"fn.hoursFromDuration","description":"($arg)"},{"content":"fn.hoursFromTime(${1:arg as String?})","trigger":"fn.hoursFromTime","description":"($arg)"},{"content":"fn.id(${1:arg as String[]})","trigger":"fn.id","description":"($arg)"},{"content":"fn.id(${1:arg as String[]}, ${2:node as Node})","trigger":"fn.id","description":"($arg,$node)"},{"content":"fn.idref(${1:arg as String[]})","trigger":"fn.idref","description":"($arg)"},{"content":"fn.idref(${1:arg as String[]}, ${2:node as Node})","trigger":"fn.idref","description":"($arg,$node)"},{"content":"fn.implicitTimezone()","trigger":"fn.implicitTimezone"},{"content":"fn.inScopePrefixes(${1:element as Node})","trigger":"fn.inScopePrefixes","description":"($element)"},{"content":"fn.indexOf(${1:seqParam as (String | Number | Boolean | null)[]}, ${2:srchParam as xs.anyAtomicType})","trigger":"fn.indexOf","description":"($seqParam,$srchParam)"},{"content":"fn.indexOf(${1:seqParam as (String | Number | Boolean | null)[]}, ${2:srchParam as xs.anyAtomicType}, ${3:collationLiteral as String})","trigger":"fn.indexOf","description":"($seqParam,$srchParam,$collationLiteral)"},{"content":"fn.insertBefore(${1:target as (Object[] | ValueIterator)}, ${2:position as Integer}, ${3:inserts as (Object[] | ValueIterator)})","trigger":"fn.insertBefore","description":"($target,$position,$inserts)"},{"content":"fn.iriToUri(${1:uriPart as String})","trigger":"fn.iriToUri","description":"($uriPart)"},{"content":"fn.lang(${1:testlang as String?})","trigger":"fn.lang","description":"($testlang)"},{"content":"fn.lang(${1:testlang as String?}, ${2:node as Node})","trigger":"fn.lang","description":"($testlang,$node)"},{"content":"fn.localName(${1:arg as Node?})","trigger":"fn.localName","description":"($arg)"},{"content":"fn.localName()","trigger":"fn.localName"},{"content":"fn.localNameFromQName(${1:arg as xs.QName?})","trigger":"fn.localNameFromQName","description":"($arg)"},{"content":"fn.lowerCase(${1:string as String?})","trigger":"fn.lowerCase","description":"($string)"},{"content":"fn.map(${1:function as String[]}, ${2:seq as (Object[] | ValueIterator)})","trigger":"fn.map","description":"($function,$seq)"},{"content":"fn.mapPairs(${1:function as String[]}, ${2:seq1 as (Object[] | ValueIterator)}, ${3:seq2 as (Object[] | ValueIterator)})","trigger":"fn.mapPairs","description":"($function,$seq1,$seq2)"},{"content":"fn.matches(${1:input as String?}, ${2:pattern as String})","trigger":"fn.matches","description":"($input,$pattern)"},{"content":"fn.matches(${1:input as String?}, ${2:pattern as String}, ${3:flags as String})","trigger":"fn.matches","description":"($input,$pattern,$flags)"},{"content":"fn.max(${1:arg as (String | Number | Boolean | null)[]})","trigger":"fn.max","description":"($arg)"},{"content":"fn.max(${1:arg as (String | Number | Boolean | null)[]}, ${2:collation as String})","trigger":"fn.max","description":"($arg,$collation)"},{"content":"fn.min(${1:arg as (String | Number | Boolean | null)[]})","trigger":"fn.min","description":"($arg)"},{"content":"fn.min(${1:arg as (String | Number | Boolean | null)[]}, ${2:collation as String})","trigger":"fn.min","description":"($arg,$collation)"},{"content":"fn.minutesFromDateTime(${1:arg as Date?})","trigger":"fn.minutesFromDateTime","description":"($arg)"},{"content":"fn.minutesFromDuration(${1:arg as xs.duration?})","trigger":"fn.minutesFromDuration","description":"($arg)"},{"content":"fn.minutesFromTime(${1:arg as String?})","trigger":"fn.minutesFromTime","description":"($arg)"},{"content":"fn.monthFromDate(${1:arg as Date?})","trigger":"fn.monthFromDate","description":"($arg)"},{"content":"fn.monthFromDateTime(${1:arg as Date?})","trigger":"fn.monthFromDateTime","description":"($arg)"},{"content":"fn.monthsFromDuration(${1:arg as xs.duration?})","trigger":"fn.monthsFromDuration","description":"($arg)"},{"content":"fn.name(${1:arg as Node?})","trigger":"fn.name","description":"($arg)"},{"content":"fn.name()","trigger":"fn.name"},{"content":"fn.namespaceUri(${1:arg as Node?})","trigger":"fn.namespaceUri","description":"($arg)"},{"content":"fn.namespaceUri()","trigger":"fn.namespaceUri"},{"content":"fn.namespaceUriForPrefix(${1:prefix as String?}, ${2:element as Node})","trigger":"fn.namespaceUriForPrefix","description":"($prefix,$element)"},{"content":"fn.namespaceUriFromQName(${1:arg as xs.QName?})","trigger":"fn.namespaceUriFromQName","description":"($arg)"},{"content":"fn.nilled(${1:arg as Node?})","trigger":"fn.nilled","description":"($arg)"},{"content":"fn.nodeName(${1:arg as Node?})","trigger":"fn.nodeName","description":"($arg)"},{"content":"fn.normalizeSpace(${1:input as String?})","trigger":"fn.normalizeSpace","description":"($input)"},{"content":"fn.normalizeSpace()","trigger":"fn.normalizeSpace"},{"content":"fn.normalizeUnicode(${1:arg as String?})","trigger":"fn.normalizeUnicode","description":"($arg)"},{"content":"fn.normalizeUnicode(${1:arg as String?}, ${2:normalizationForm as String})","trigger":"fn.normalizeUnicode","description":"($arg,$normalizationForm)"},{"content":"fn.not(${1:arg as (Object[] | ValueIterator)})","trigger":"fn.not","description":"($arg)"},{"content":"fn.number(${1:arg as xs.anyAtomicType?})","trigger":"fn.number","description":"($arg)"},{"content":"fn.number()","trigger":"fn.number"},{"content":"fn.oneOrMore(${1:arg as (Object[] | ValueIterator)})","trigger":"fn.oneOrMore","description":"($arg)"},{"content":"fn.prefixFromQName(${1:arg as xs.QName?})","trigger":"fn.prefixFromQName","description":"($arg)"},{"content":"fn.remove(${1:target as (Object[] | ValueIterator)}, ${2:position as Integer})","trigger":"fn.remove","description":"($target,$position)"},{"content":"fn.replace(${1:input as String?}, ${2:pattern as String}, ${3:replacement as String})","trigger":"fn.replace","description":"($input,$pattern,$replacement)"},{"content":"fn.replace(${1:input as String?}, ${2:pattern as String}, ${3:replacement as String}, ${4:flags as String})","trigger":"fn.replace","description":"($input,$pattern,$replacement,$flags)"},{"content":"fn.resolveQName(${1:qname as String?}, ${2:element as Node})","trigger":"fn.resolveQName","description":"($qname,$element)"},{"content":"fn.resolveUri(${1:relative as String?})","trigger":"fn.resolveUri","description":"($relative)"},{"content":"fn.resolveUri(${1:relative as String?}, ${2:base as String})","trigger":"fn.resolveUri","description":"($relative,$base)"},{"content":"fn.reverse(${1:target as (Object[] | ValueIterator)})","trigger":"fn.reverse","description":"($target)"},{"content":"fn.root(${1:arg as Node?})","trigger":"fn.root","description":"($arg)"},{"content":"fn.root()","trigger":"fn.root"},{"content":"fn.round(${1:arg as numeric?})","trigger":"fn.round","description":"($arg)"},{"content":"fn.roundHalfToEven(${1:arg as numeric?})","trigger":"fn.roundHalfToEven","description":"($arg)"},{"content":"fn.roundHalfToEven(${1:arg as numeric?}, ${2:precision as Integer})","trigger":"fn.roundHalfToEven","description":"($arg,$precision)"},{"content":"fn.secondsFromDateTime(${1:arg as Date?})","trigger":"fn.secondsFromDateTime","description":"($arg)"},{"content":"fn.secondsFromDuration(${1:arg as xs.duration?})","trigger":"fn.secondsFromDuration","description":"($arg)"},{"content":"fn.secondsFromTime(${1:arg as String?})","trigger":"fn.secondsFromTime","description":"($arg)"},{"content":"fn.startsWith(${1:parameter1 as String?}, ${2:parameter2 as String?})","trigger":"fn.startsWith","description":"($parameter1,$parameter2)"},{"content":"fn.startsWith(${1:parameter1 as String?}, ${2:parameter2 as String?}, ${3:collation as String})","trigger":"fn.startsWith","description":"($parameter1,$parameter2,$collation)"},{"content":"fn.staticBaseUri()","trigger":"fn.staticBaseUri"},{"content":"fn.string(${1:arg as String?})","trigger":"fn.string","description":"($arg)"},{"content":"fn.string()","trigger":"fn.string"},{"content":"fn.stringJoin(${1:parameter1 as String[]}, ${2:parameter2 as String})","trigger":"fn.stringJoin","description":"($parameter1,$parameter2)"},{"content":"fn.stringLength(${1:sourceString as String?})","trigger":"fn.stringLength","description":"($sourceString)"},{"content":"fn.stringLength()","trigger":"fn.stringLength"},{"content":"fn.stringToCodepoints(${1:arg as String})","trigger":"fn.stringToCodepoints","description":"($arg)"},{"content":"fn.subsequence(${1:sourceSeq as (Object[] | ValueIterator)}, ${2:startingLoc as Number})","trigger":"fn.subsequence","description":"($sourceSeq,$startingLoc)"},{"content":"fn.subsequence(${1:sourceSeq as (Object[] | ValueIterator)}, ${2:startingLoc as Number}, ${3:length as Number})","trigger":"fn.subsequence","description":"($sourceSeq,$startingLoc,$length)"},{"content":"fn.substring(${1:sourceString as String?}, ${2:startingLoc as Number})","trigger":"fn.substring","description":"($sourceString,$startingLoc)"},{"content":"fn.substring(${1:sourceString as String?}, ${2:startingLoc as Number}, ${3:length as Number})","trigger":"fn.substring","description":"($sourceString,$startingLoc,$length)"},{"content":"fn.substringAfter(${1:input as String?}, ${2:after as String?})","trigger":"fn.substringAfter","description":"($input,$after)"},{"content":"fn.substringAfter(${1:input as String?}, ${2:after as String?}, ${3:collation as String})","trigger":"fn.substringAfter","description":"($input,$after,$collation)"},{"content":"fn.substringBefore(${1:input as String?}, ${2:before as String?})","trigger":"fn.substringBefore","description":"($input,$before)"},{"content":"fn.substringBefore(${1:input as String?}, ${2:before as String?}, ${3:collation as String})","trigger":"fn.substringBefore","description":"($input,$before,$collation)"},{"content":"fn.sum(${1:arg as (String | Number | Boolean | null)[]})","trigger":"fn.sum","description":"($arg)"},{"content":"fn.sum(${1:arg as (String | Number | Boolean | null)[]}, ${2:zero as xs.anyAtomicType?})","trigger":"fn.sum","description":"($arg,$zero)"},{"content":"fn.tail(${1:seq as (Object[] | ValueIterator)})","trigger":"fn.tail","description":"($seq)"},{"content":"fn.timezoneFromDate(${1:arg as Date?})","trigger":"fn.timezoneFromDate","description":"($arg)"},{"content":"fn.timezoneFromDateTime(${1:arg as Date?})","trigger":"fn.timezoneFromDateTime","description":"($arg)"},{"content":"fn.timezoneFromTime(${1:arg as String?})","trigger":"fn.timezoneFromTime","description":"($arg)"},{"content":"fn.tokenize(${1:input as String?}, ${2:pattern as String})","trigger":"fn.tokenize","description":"($input,$pattern)"},{"content":"fn.tokenize(${1:input as String?}, ${2:pattern as String}, ${3:flags as String})","trigger":"fn.tokenize","description":"($input,$pattern,$flags)"},{"content":"fn.trace(${1:value as (Object[] | ValueIterator)}, ${2:label as String})","trigger":"fn.trace","description":"($value,$label)"},{"content":"fn.translate(${1:src as String?}, ${2:mapString as String?}, ${3:transString as String?})","trigger":"fn.translate","description":"($src,$mapString,$transString)"},{"content":"fn.true()","trigger":"fn.true"},{"content":"fn.typeAvailable(${1:typeName as String})","trigger":"fn.typeAvailable","description":"($typeName)"},{"content":"fn.unordered(${1:sourceSeq as (Object[] | ValueIterator)})","trigger":"fn.unordered","description":"($sourceSeq)"},{"content":"fn.unparsedText(${1:href as String})","trigger":"fn.unparsedText","description":"($href)"},{"content":"fn.unparsedText(${1:href as String}, ${2:encoding as String})","trigger":"fn.unparsedText","description":"($href,$encoding)"},{"content":"fn.unparsedTextAvailable(${1:href as String})","trigger":"fn.unparsedTextAvailable","description":"($href)"},{"content":"fn.unparsedTextAvailable(${1:href as String}, ${2:encoding as String})","trigger":"fn.unparsedTextAvailable","description":"($href,$encoding)"},{"content":"fn.upperCase(${1:string as String?})","trigger":"fn.upperCase","description":"($string)"},{"content":"fn.yearFromDate(${1:arg as Date?})","trigger":"fn.yearFromDate","description":"($arg)"},{"content":"fn.yearFromDateTime(${1:arg as Date?})","trigger":"fn.yearFromDateTime","description":"($arg)"},{"content":"fn.yearsFromDuration(${1:arg as xs.duration?})","trigger":"fn.yearsFromDuration","description":"($arg)"},{"content":"fn.zeroOrOne(${1:arg as (Object[] | ValueIterator)})","trigger":"fn.zeroOrOne","description":"($arg)"},{"content":"math.acos(${1:x as Number})","trigger":"math.acos","description":"($x)"},{"content":"math.asin(${1:x as Number})","trigger":"math.asin","description":"($x)"},{"content":"math.atan(${1:x as Number})","trigger":"math.atan","description":"($x)"},{"content":"math.atan2(${1:y as Number}, ${2:x as Number})","trigger":"math.atan2","description":"($y,$x)"},{"content":"math.ceil(${1:x as Number})","trigger":"math.ceil","description":"($x)"},{"content":"math.correlation(${1:arg as String[]})","trigger":"math.correlation","description":"($arg)"},{"content":"math.cos(${1:x as Number})","trigger":"math.cos","description":"($x)"},{"content":"math.cosh(${1:x as Number})","trigger":"math.cosh","description":"($x)"},{"content":"math.cot(${1:x as Number})","trigger":"math.cot","description":"($x)"},{"content":"math.covariance(${1:arg as String[]})","trigger":"math.covariance","description":"($arg)"},{"content":"math.covarianceP(${1:arg as String[]})","trigger":"math.covarianceP","description":"($arg)"},{"content":"math.degrees(${1:x as Number})","trigger":"math.degrees","description":"($x)"},{"content":"math.exp(${1:x as Number})","trigger":"math.exp","description":"($x)"},{"content":"math.fabs(${1:x as Number})","trigger":"math.fabs","description":"($x)"},{"content":"math.floor(${1:x as Number})","trigger":"math.floor","description":"($x)"},{"content":"math.fmod(${1:x as Number}, ${2:x as Number})","trigger":"math.fmod","description":"($x,$x)"},{"content":"math.frexp(${1:x as Number) as (xs.double}, xs.integer})","trigger":"math.frexp","description":"($x,xs.integer)"},{"content":"math.ldexp(${1:y as Number}, ${2:i as Integer})","trigger":"math.ldexp","description":"($y,$i)"},{"content":"math.linearModel(${1:arg as String[]})","trigger":"math.linearModel","description":"($arg)"},{"content":"math.linearModelCoeff(${1:linearModel as math.linearModel})","trigger":"math.linearModelCoeff","description":"($linearModel)"},{"content":"math.linearModelIntercept(${1:linearModel as math.linearModel})","trigger":"math.linearModelIntercept","description":"($linearModel)"},{"content":"math.linearModelRsquared(${1:linearModel as math.linearModel})","trigger":"math.linearModelRsquared","description":"($linearModel)"},{"content":"math.log(${1:x as Number})","trigger":"math.log","description":"($x)"},{"content":"math.log10(${1:x as Number})","trigger":"math.log10","description":"($x)"},{"content":"math.median(${1:arg as String[]})","trigger":"math.median","description":"($arg)"},{"content":"math.mode(${1:arg as (String | Number | Boolean | null)[]})","trigger":"math.mode","description":"($arg)"},{"content":"math.mode(${1:arg as (String | Number | Boolean | null)[]}, ${2:options as String})","trigger":"math.mode","description":"($arg,$options)"},{"content":"math.modf(${1:x as Number) as (xs.double}, xs.double})","trigger":"math.modf","description":"($x,xs.double)"},{"content":"math.percentRank(${1:arg as (String | Number | Boolean | null)[]}, ${2:value as xs.anyAtomicType})","trigger":"math.percentRank","description":"($arg,$value)"},{"content":"math.percentRank(${1:arg as (String | Number | Boolean | null)[]}, ${2:value as xs.anyAtomicType}, ${3:options as String})","trigger":"math.percentRank","description":"($arg,$value,$options)"},{"content":"math.percentile(${1:arg as String[]}, ${2:p as String[]})","trigger":"math.percentile","description":"($arg,$p)"},{"content":"math.pi()","trigger":"math.pi"},{"content":"math.pow(${1:x as Number}, ${2:y as Number})","trigger":"math.pow","description":"($x,$y)"},{"content":"math.radians(${1:x as Number})","trigger":"math.radians","description":"($x)"},{"content":"math.rank(${1:arg as (String | Number | Boolean | null)[]}, ${2:arg as xs.anyAtomicType})","trigger":"math.rank","description":"($arg,$arg)"},{"content":"math.rank(${1:arg as (String | Number | Boolean | null)[]}, ${2:arg as xs.anyAtomicType}, ${3:options as String})","trigger":"math.rank","description":"($arg,$arg,$options)"},{"content":"math.sin(${1:x as Number})","trigger":"math.sin","description":"($x)"},{"content":"math.sinh(${1:x as Number})","trigger":"math.sinh","description":"($x)"},{"content":"math.sqrt(${1:x as Number})","trigger":"math.sqrt","description":"($x)"},{"content":"math.stddev(${1:arg as String[]})","trigger":"math.stddev","description":"($arg)"},{"content":"math.stddevP(${1:arg as String[]})","trigger":"math.stddevP","description":"($arg)"},{"content":"math.tan(${1:x as Number})","trigger":"math.tan","description":"($x)"},{"content":"math.tanh(${1:x as Number})","trigger":"math.tanh","description":"($x)"},{"content":"math.trunc(${1:arg as numeric?})","trigger":"math.trunc","description":"($arg)"},{"content":"math.trunc(${1:arg as numeric?}, ${2:n as Integer})","trigger":"math.trunc","description":"($arg,$n)"},{"content":"math.variance(${1:arg as String[]})","trigger":"math.variance","description":"($arg)"},{"content":"math.varianceP(${1:arg as String[]})","trigger":"math.varianceP","description":"($arg)"},{"content":"rdf.langString(${1:string as String}, ${2:lang as String})","trigger":"rdf.langString","description":"($string,$lang)"},{"content":"rdf.langStringLanguage(${1:val as rdf.langString})","trigger":"rdf.langStringLanguage","description":"($val)"},{"content":"sc.annotations(${1:arg as schemaComponent()})","trigger":"sc.annotations","description":"($arg)"},{"content":"sc.annotations()","trigger":"sc.annotations"},{"content":"sc.attributeDecl(${1:arg as String})","trigger":"sc.attributeDecl","description":"($arg)"},{"content":"sc.attributeDecl()","trigger":"sc.attributeDecl"},{"content":"sc.attributes(${1:arg as schemaComponent()})","trigger":"sc.attributes","description":"($arg)"},{"content":"sc.attributes()","trigger":"sc.attributes"},{"content":"sc.canonicalPath(${1:arg as schemaComponent()})","trigger":"sc.canonicalPath","description":"($arg)"},{"content":"sc.canonicalPath()","trigger":"sc.canonicalPath"},{"content":"sc.complexType(${1:arg as String})","trigger":"sc.complexType","description":"($arg)"},{"content":"sc.complexType()","trigger":"sc.complexType"},{"content":"sc.componentProperty(${1:propname as String})","trigger":"sc.componentProperty","description":"($propname)"},{"content":"sc.componentProperty(${1:propname as String}, ${2:arg as schemaComponent()})","trigger":"sc.componentProperty","description":"($propname,$arg)"},{"content":"sc.elementDecl(${1:arg as String})","trigger":"sc.elementDecl","description":"($arg)"},{"content":"sc.elementDecl()","trigger":"sc.elementDecl"},{"content":"sc.facets(${1:arg as schemaComponent()})","trigger":"sc.facets","description":"($arg)"},{"content":"sc.facets()","trigger":"sc.facets"},{"content":"sc.functionParameterType(${1:arg as function(*)})","trigger":"sc.functionParameterType","description":"($arg)"},{"content":"sc.functionParameterType(${1:arg as function(*)}, ${2:param as Integer?})","trigger":"sc.functionParameterType","description":"($arg,$param)"},{"content":"sc.functionParameterType()","trigger":"sc.functionParameterType"},{"content":"sc.functionReturnType(${1:arg as function(*)})","trigger":"sc.functionReturnType","description":"($arg)"},{"content":"sc.functionReturnType()","trigger":"sc.functionReturnType"},{"content":"sc.name(${1:arg as schemaComponent()})","trigger":"sc.name","description":"($arg)"},{"content":"sc.name()","trigger":"sc.name"},{"content":"sc.particles(${1:arg as schemaComponent()})","trigger":"sc.particles","description":"($arg)"},{"content":"sc.particles()","trigger":"sc.particles"},{"content":"sc.schema(${1:arg as String})","trigger":"sc.schema","description":"($arg)"},{"content":"sc.schema()","trigger":"sc.schema"},{"content":"sc.schemaFromPath(${1:namespace as String})","trigger":"sc.schemaFromPath","description":"($namespace)"},{"content":"sc.schemaFromPath(${1:namespace as String}, ${2:location as String})","trigger":"sc.schemaFromPath","description":"($namespace,$location)"},{"content":"sc.simpleType(${1:arg as String})","trigger":"sc.simpleType","description":"($arg)"},{"content":"sc.simpleType()","trigger":"sc.simpleType"},{"content":"sc.type(${1:arg as String})","trigger":"sc.type","description":"($arg)"},{"content":"sc.type()","trigger":"sc.type"},{"content":"sc.typeApply(${1:type as schemaType()}, ${2:arg as String})","trigger":"sc.typeApply","description":"($type,$arg)"},{"content":"sc.typeNamed(${1:arg as xs.QName})","trigger":"sc.typeNamed","description":"($arg)"},{"content":"sem.binding(${1:map as element(json.object)})","trigger":"sem.binding","description":"($map)"},{"content":"sem.binding()","trigger":"sem.binding"},{"content":"sem.bnode(${1:value as xs.anyAtomicType})","trigger":"sem.bnode","description":"($value)"},{"content":"sem.bnode()","trigger":"sem.bnode"},{"content":"sem.coalesce(${1:parameter1 as (Object[] | ValueIterator)}, [${2:parameterN as item()*}, ...]})","trigger":"sem.coalesce","description":"($parameter1,[$parameterN,...])"},{"content":"sem.curieExpand(${1:curie as String})","trigger":"sem.curieExpand","description":"($curie)"},{"content":"sem.curieExpand(${1:curie as String}, ${2:mapping as Object})","trigger":"sem.curieExpand","description":"($curie,$mapping)"},{"content":"sem.curieShorten(${1:iri as sem.iri})","trigger":"sem.curieShorten","description":"($iri)"},{"content":"sem.curieShorten(${1:iri as sem.iri}, ${2:mapping as Object})","trigger":"sem.curieShorten","description":"($iri,$mapping)"},{"content":"sem.databaseNodes(${1:triples as String[]})","trigger":"sem.databaseNodes","description":"($triples)"},{"content":"sem.databaseNodes(${1:triples as String[]}, ${2:options as String})","trigger":"sem.databaseNodes","description":"($triples,$options)"},{"content":"sem.databaseNodes(${1:triples as String[]}, ${2:options as String}, ${3:query as cts.query?})","trigger":"sem.databaseNodes","description":"($triples,$options,$query)"},{"content":"sem.datatype(${1:value as xs.anyAtomicType})","trigger":"sem.datatype","description":"($value)"},{"content":"sem.defaultGraphIri()","trigger":"sem.defaultGraphIri"},{"content":"sem.describe(${1:iris as String[]})","trigger":"sem.describe","description":"($iris)"},{"content":"sem.graph(${1:graphname as sem.iri})","trigger":"sem.graph","description":"($graphname)"},{"content":"sem.graphAddPermissions(${1:graph as sem.iri}, ${2:permissions as Object[]})","trigger":"sem.graphAddPermissions","description":"($graph,$permissions)"},{"content":"sem.graphDelete(${1:graphname as sem.iri})","trigger":"sem.graphDelete","description":"($graphname)"},{"content":"sem.graphGetPermissions(${1:graph as sem.iri}, ${2:format as String})","trigger":"sem.graphGetPermissions","description":"($graph,$format)"},{"content":"sem.graphInsert(${1:graphname as sem.iri}, ${2:triples as String[]})","trigger":"sem.graphInsert","description":"($graphname,$triples)"},{"content":"sem.graphInsert(${1:graphname as sem.iri}, ${2:triples as String[]}, ${3:permissions as (Object | ValueIterator)})","trigger":"sem.graphInsert","description":"($graphname,$triples,$permissions)"},{"content":"sem.graphInsert(${1:graphname as sem.iri}, ${2:triples as String[]}, ${3:permissions as (Object | ValueIterator)}, ${4:collections as String})","trigger":"sem.graphInsert","description":"($graphname,$triples,$permissions,$collections)"},{"content":"sem.graphInsert(${1:graphname as sem.iri}, ${2:triples as String[]}, ${3:permissions as (Object | ValueIterator)}, ${4:collections as String}, ${5:quality as xs.int?})","trigger":"sem.graphInsert","description":"($graphname,$triples,$permissions,$collections,$quality)"},{"content":"sem.graphInsert(${1:graphname as sem.iri}, ${2:triples as String[]}, ${3:permissions as (Object | ValueIterator)}, ${4:collections as String}, ${5:quality as xs.int?}, ${6:forestIds as String})","trigger":"sem.graphInsert","description":"($graphname,$triples,$permissions,$collections,$quality,$forestIds)"},{"content":"sem.graphRemovePermissions(${1:graph as sem.iri}, ${2:permissions as Object[]})","trigger":"sem.graphRemovePermissions","description":"($graph,$permissions)"},{"content":"sem.graphSetPermissions(${1:graph as sem.iri}, ${2:permissions as Object[]})","trigger":"sem.graphSetPermissions","description":"($graph,$permissions)"},{"content":"sem.if(${1:condition as Boolean}, ${2:then as (Object[] | ValueIterator)}, ${3:else as (Object[] | ValueIterator)})","trigger":"sem.if","description":"($condition,$then,$else)"},{"content":"sem.inMemoryStore(${1:dataset as String[]})","trigger":"sem.inMemoryStore","description":"($dataset)"},{"content":"sem.invalid(${1:string as String}, ${2:datatype as sem.iri})","trigger":"sem.invalid","description":"($string,$datatype)"},{"content":"sem.invalidDatatype(${1:val as sem.invalid})","trigger":"sem.invalidDatatype","description":"($val)"},{"content":"sem.iri(${1:stringIri as String})","trigger":"sem.iri","description":"($stringIri)"},{"content":"sem.isBlank(${1:value as xs.anyAtomicType})","trigger":"sem.isBlank","description":"($value)"},{"content":"sem.isIRI(${1:value as xs.anyAtomicType})","trigger":"sem.isIRI","description":"($value)"},{"content":"sem.isLiteral(${1:value as xs.anyAtomicType})","trigger":"sem.isLiteral","description":"($value)"},{"content":"sem.isNumeric(${1:value as xs.anyAtomicType})","trigger":"sem.isNumeric","description":"($value)"},{"content":"sem.lang(${1:value as xs.anyAtomicType})","trigger":"sem.lang","description":"($value)"},{"content":"sem.langMatches(${1:langTag as String}, ${2:langRange as String})","trigger":"sem.langMatches","description":"($langTag,$langRange)"},{"content":"sem.prefixes(${1:prefixdef as String?})","trigger":"sem.prefixes","description":"($prefixdef)"},{"content":"sem.prefixes(${1:prefixdef as String?}, ${2:includeCommon as Boolean?})","trigger":"sem.prefixes","description":"($prefixdef,$includeCommon)"},{"content":"sem.queryResultsSerialize(${1:results as (Object[] | ValueIterator)})","trigger":"sem.queryResultsSerialize","description":"($results)"},{"content":"sem.queryResultsSerialize(${1:results as (Object[] | ValueIterator)}, ${2:options as String})","trigger":"sem.queryResultsSerialize","description":"($results,$options)"},{"content":"sem.random()","trigger":"sem.random"},{"content":"sem.rdfBuilder(item(), item())","trigger":"sem.rdfBuilder","description":"(item(),item())"},{"content":"sem.rdfBuilder(item()}, item()}, ${1:prefixes as Object?})","trigger":"sem.rdfBuilder","description":"(item(),item(),$prefixes)"},{"content":"sem.rdfBuilder(item()}, item()}, ${1:prefixes as Object?}, ${2:graph as sem.iri?) as function(item()})","trigger":"sem.rdfBuilder","description":"(item(),item(),$prefixes,$graph)"},{"content":"sem.rdfGet(${1:location as String})","trigger":"sem.rdfGet","description":"($location)"},{"content":"sem.rdfGet(${1:location as String}, ${2:options as String})","trigger":"sem.rdfGet","description":"($location,$options)"},{"content":"sem.rdfGet(${1:location as String}, ${2:options as String}, ${3:httpOpts as Node?})","trigger":"sem.rdfGet","description":"($location,$options,$httpOpts)"},{"content":"sem.rdfInsert(${1:triples as String[]})","trigger":"sem.rdfInsert","description":"($triples)"},{"content":"sem.rdfInsert(${1:triples as String[]}, ${2:options as String})","trigger":"sem.rdfInsert","description":"($triples,$options)"},{"content":"sem.rdfInsert(${1:triples as String[]}, ${2:options as String}, ${3:permissions as (Object | ValueIterator)})","trigger":"sem.rdfInsert","description":"($triples,$options,$permissions)"},{"content":"sem.rdfInsert(${1:triples as String[]}, ${2:options as String}, ${3:permissions as (Object | ValueIterator)}, ${4:collections as String})","trigger":"sem.rdfInsert","description":"($triples,$options,$permissions,$collections)"},{"content":"sem.rdfInsert(${1:triples as String[]}, ${2:options as String}, ${3:permissions as (Object | ValueIterator)}, ${4:collections as String}, ${5:quality as xs.int?})","trigger":"sem.rdfInsert","description":"($triples,$options,$permissions,$collections,$quality)"},{"content":"sem.rdfInsert(${1:triples as String[]}, ${2:options as String}, ${3:permissions as (Object | ValueIterator)}, ${4:collections as String}, ${5:quality as xs.int?}, ${6:forestIds as String})","trigger":"sem.rdfInsert","description":"($triples,$options,$permissions,$collections,$quality,$forestIds)"},{"content":"sem.rdfLoad(${1:location as String})","trigger":"sem.rdfLoad","description":"($location)"},{"content":"sem.rdfLoad(${1:location as String}, ${2:options as String})","trigger":"sem.rdfLoad","description":"($location,$options)"},{"content":"sem.rdfLoad(${1:location as String}, ${2:options as String}, ${3:httpOpts as Node?})","trigger":"sem.rdfLoad","description":"($location,$options,$httpOpts)"},{"content":"sem.rdfLoad(${1:location as String}, ${2:options as String}, ${3:httpOpts as Node?}, ${4:permissions as (Object | ValueIterator)})","trigger":"sem.rdfLoad","description":"($location,$options,$httpOpts,$permissions)"},{"content":"sem.rdfLoad(${1:location as String}, ${2:options as String}, ${3:httpOpts as Node?}, ${4:permissions as (Object | ValueIterator)}, ${5:collections as String})","trigger":"sem.rdfLoad","description":"($location,$options,$httpOpts,$permissions,$collections)"},{"content":"sem.rdfLoad(${1:location as String}, ${2:options as String}, ${3:httpOpts as Node?}, ${4:permissions as (Object | ValueIterator)}, ${5:collections as String}, ${6:quality as xs.int?})","trigger":"sem.rdfLoad","description":"($location,$options,$httpOpts,$permissions,$collections,$quality)"},{"content":"sem.rdfLoad(${1:location as String}, ${2:options as String}, ${3:httpOpts as Node?}, ${4:permissions as (Object | ValueIterator)}, ${5:collections as String}, ${6:quality as xs.int?}, ${7:forestIds as String})","trigger":"sem.rdfLoad","description":"($location,$options,$httpOpts,$permissions,$collections,$quality,$forestIds)"},{"content":"sem.rdfParse(${1:in as String})","trigger":"sem.rdfParse","description":"($in)"},{"content":"sem.rdfParse(${1:in as String}, ${2:options as String})","trigger":"sem.rdfParse","description":"($in,$options)"},{"content":"sem.rdfSerialize(${1:triples as String[]})","trigger":"sem.rdfSerialize","description":"($triples)"},{"content":"sem.rdfSerialize(${1:triples as String[]}, ${2:options as String})","trigger":"sem.rdfSerialize","description":"($triples,$options)"},{"content":"sem.resolveIri(${1:relative as String})","trigger":"sem.resolveIri","description":"($relative)"},{"content":"sem.resolveIri(${1:relative as String}, ${2:base as String})","trigger":"sem.resolveIri","description":"($relative,$base)"},{"content":"sem.rulesetStore(${1:locations as String[]})","trigger":"sem.rulesetStore","description":"($locations)"},{"content":"sem.rulesetStore(${1:locations as String[]}, ${2:store as String})","trigger":"sem.rulesetStore","description":"($locations,$store)"},{"content":"sem.rulesetStore(${1:locations as String[]}, ${2:store as String}, ${3:options as String})","trigger":"sem.rulesetStore","description":"($locations,$store,$options)"},{"content":"sem.sameTerm(${1:a as xs.anyAtomicType}, ${2:b as xs.anyAtomicType})","trigger":"sem.sameTerm","description":"($a,$b)"},{"content":"sem.sparql(${1:sparql as String})","trigger":"sem.sparql","description":"($sparql)"},{"content":"sem.sparql(${1:sparql as String}, ${2:bindings as Object?})","trigger":"sem.sparql","description":"($sparql,$bindings)"},{"content":"sem.sparql(${1:sparql as String}, ${2:bindings as Object?}, ${3:options as String})","trigger":"sem.sparql","description":"($sparql,$bindings,$options)"},{"content":"sem.sparql(${1:sparql as String}, ${2:bindings as Object?}, ${3:options as String}, ${4:store as String})","trigger":"sem.sparql","description":"($sparql,$bindings,$options,$store)"},{"content":"sem.sparqlUpdate(${1:sparql as String})","trigger":"sem.sparqlUpdate","description":"($sparql)"},{"content":"sem.sparqlUpdate(${1:sparql as String}, ${2:bindings as Object?})","trigger":"sem.sparqlUpdate","description":"($sparql,$bindings)"},{"content":"sem.sparqlUpdate(${1:sparql as String}, ${2:bindings as Object?}, ${3:options as String})","trigger":"sem.sparqlUpdate","description":"($sparql,$bindings,$options)"},{"content":"sem.sparqlUpdate(${1:sparql as String}, ${2:bindings as Object?}, ${3:options as String}, ${4:store as String})","trigger":"sem.sparqlUpdate","description":"($sparql,$bindings,$options,$store)"},{"content":"sem.sparqlUpdate(${1:sparql as String}, ${2:bindings as Object?}, ${3:options as String}, ${4:store as String}, ${5:defaultPermissions as Object})","trigger":"sem.sparqlUpdate","description":"($sparql,$bindings,$options,$store,$defaultPermissions)"},{"content":"sem.sparqlValues(${1:sparql as String}, ${2:values as String[]})","trigger":"sem.sparqlValues","description":"($sparql,$values)"},{"content":"sem.sparqlValues(${1:sparql as String}, ${2:values as String[]}, ${3:options as String})","trigger":"sem.sparqlValues","description":"($sparql,$values,$options)"},{"content":"sem.sparqlValues(${1:sparql as String}, ${2:values as String[]}, ${3:options as String}, ${4:store as (Object | ValueIterator)})","trigger":"sem.sparqlValues","description":"($sparql,$values,$options,$store)"},{"content":"sem.store(${1:options as String})","trigger":"sem.store","description":"($options)"},{"content":"sem.store(${1:options as String}, ${2:query as cts.query?})","trigger":"sem.store","description":"($options,$query)"},{"content":"sem.store()","trigger":"sem.store"},{"content":"sem.timezoneString(${1:value as Date})","trigger":"sem.timezoneString","description":"($value)"},{"content":"sem.transitiveClosure(${1:seeds as String[]}, ${2:predicates as String[]}, ${3:limit as Integer})","trigger":"sem.transitiveClosure","description":"($seeds,$predicates,$limit)"},{"content":"sem.triple(${1:subject_or_node as String})","trigger":"sem.triple","description":"($subject_or_node)"},{"content":"sem.triple(${1:subject_or_node as String}, ${2:predicate as xs.anyAtomicType})","trigger":"sem.triple","description":"($subject_or_node,$predicate)"},{"content":"sem.triple(${1:subject_or_node as String}, ${2:predicate as xs.anyAtomicType}, ${3:object as xs.anyAtomicType})","trigger":"sem.triple","description":"($subject_or_node,$predicate,$object)"},{"content":"sem.triple(${1:subject_or_node as String}, ${2:predicate as xs.anyAtomicType}, ${3:object as xs.anyAtomicType}, ${4:graph as sem.iri?})","trigger":"sem.triple","description":"($subject_or_node,$predicate,$object,$graph)"},{"content":"sem.tripleGraph(${1:triple as sem.triple})","trigger":"sem.tripleGraph","description":"($triple)"},{"content":"sem.tripleObject(${1:triple as sem.triple})","trigger":"sem.tripleObject","description":"($triple)"},{"content":"sem.triplePredicate(${1:triple as sem.triple})","trigger":"sem.triplePredicate","description":"($triple)"},{"content":"sem.tripleSubject(${1:triple as sem.triple})","trigger":"sem.tripleSubject","description":"($triple)"},{"content":"sem.typedLiteral(${1:value as String}, ${2:datatype as sem.iri})","trigger":"sem.typedLiteral","description":"($value,$datatype)"},{"content":"sem.unknown(${1:string as String}, ${2:datatype as sem.iri})","trigger":"sem.unknown","description":"($string,$datatype)"},{"content":"sem.unknownDatatype(${1:val as sem.unknown})","trigger":"sem.unknownDatatype","description":"($val)"},{"content":"sem.uuid()","trigger":"sem.uuid"},{"content":"sem.uuidString()","trigger":"sem.uuidString"},{"content":"spell.doubleMetaphone(${1:word as String})","trigger":"spell.doubleMetaphone","description":"($word)"},{"content":"spell.isCorrect(${1:uri as String[]}, ${2:word as String})","trigger":"spell.isCorrect","description":"($uri,$word)"},{"content":"spell.levenshteinDistance(${1:str1 as String}, ${2:str2 as String})","trigger":"spell.levenshteinDistance","description":"($str1,$str2)"},{"content":"spell.romanize(${1:string as String})","trigger":"spell.romanize","description":"($string)"},{"content":"spell.suggest(${1:uri as String[]}, ${2:word as String})","trigger":"spell.suggest","description":"($uri,$word)"},{"content":"spell.suggest(${1:uri as String[]}, ${2:word as String}, ${3:options as Object?})","trigger":"spell.suggest","description":"($uri,$word,$options)"},{"content":"spell.suggestDetailed(${1:dictionary_uris as String[]}, ${2:word as String})","trigger":"spell.suggestDetailed","description":"($dictionary_uris,$word)"},{"content":"spell.suggestDetailed(${1:dictionary_uris as String[]}, ${2:word as String}, ${3:options as Object?})","trigger":"spell.suggestDetailed","description":"($dictionary_uris,$word,$options)"},{"content":"sql.dateadd(${1:datepart as String}, ${2:number as Integer}, ${3:date as String})","trigger":"sql.dateadd","description":"($datepart,$number,$date)"},{"content":"sql.datediff(${1:datepart as String}, ${2:startdate as String}, ${3:enddate as String})","trigger":"sql.datediff","description":"($datepart,$startdate,$enddate)"},{"content":"sql.datepart(${1:datepart as String?}, ${2:date as xs.genericDateTimeArg})","trigger":"sql.datepart","description":"($datepart,$date)"},{"content":"temporal.advanceLsqt(${1:temporalCollection as String})","trigger":"temporal.advanceLsqt","description":"($temporalCollection)"},{"content":"temporal.axes()","trigger":"temporal.axes"},{"content":"temporal.axisCreate(${1:axisName as String}, ${2:startRangeIndex as cts.reference}, ${3:endRangeIndex as cts.reference})","trigger":"temporal.axisCreate","description":"($axisName,$startRangeIndex,$endRangeIndex)"},{"content":"temporal.axisGetEnd(${1:axisName as String})","trigger":"temporal.axisGetEnd","description":"($axisName)"},{"content":"temporal.axisGetStart(${1:axisName as String})","trigger":"temporal.axisGetStart","description":"($axisName)"},{"content":"temporal.axisRemove(${1:axisName as String})","trigger":"temporal.axisRemove","description":"($axisName)"},{"content":"temporal.collectionCreate(${1:collectionName as String}, ${2:systemAxis as String}, ${3:validAxis as String})","trigger":"temporal.collectionCreate","description":"($collectionName,$systemAxis,$validAxis)"},{"content":"temporal.collectionCreate(${1:collectionName as String}, ${2:systemAxis as String}, ${3:validAxis as String}, ${4:options as String})","trigger":"temporal.collectionCreate","description":"($collectionName,$systemAxis,$validAxis,$options)"},{"content":"temporal.collectionGetAxis(${1:temporalCollection as String}, ${2:axis as String})","trigger":"temporal.collectionGetAxis","description":"($temporalCollection,$axis)"},{"content":"temporal.collectionGetOptions(${1:temporalCollection as String})","trigger":"temporal.collectionGetOptions","description":"($temporalCollection)"},{"content":"temporal.collectionRemove(${1:collectionName as String})","trigger":"temporal.collectionRemove","description":"($collectionName)"},{"content":"temporal.collectionSetOptions(${1:temporalCollection as String}, ${2:options as String[]})","trigger":"temporal.collectionSetOptions","description":"($temporalCollection,$options)"},{"content":"temporal.collections()","trigger":"temporal.collections"},{"content":"temporal.documentDelete(${1:temporalCollection as String}, ${2:uri as String})","trigger":"temporal.documentDelete","description":"($temporalCollection,$uri)"},{"content":"temporal.documentInsert(${1:temporalCollection as String}, ${2:uri as String}, ${3:root as Node})","trigger":"temporal.documentInsert","description":"($temporalCollection,$uri,$root)"},{"content":"temporal.documentInsert(${1:temporalCollection as String}, ${2:uri as String}, ${3:root as Node}, ${4:permissions as Object})","trigger":"temporal.documentInsert","description":"($temporalCollection,$uri,$root,$permissions)"},{"content":"temporal.documentInsert(${1:temporalCollection as String}, ${2:uri as String}, ${3:root as Node}, ${4:permissions as Object}, ${5:collections as String})","trigger":"temporal.documentInsert","description":"($temporalCollection,$uri,$root,$permissions,$collections)"},{"content":"temporal.documentInsert(${1:temporalCollection as String}, ${2:uri as String}, ${3:root as Node}, ${4:permissions as Object}, ${5:collections as String}, ${6:quality as xs.int?})","trigger":"temporal.documentInsert","description":"($temporalCollection,$uri,$root,$permissions,$collections,$quality)"},{"content":"temporal.documentInsert(${1:temporalCollection as String}, ${2:uri as String}, ${3:root as Node}, ${4:permissions as Object}, ${5:collections as String}, ${6:quality as xs.int?}, ${7:forestIds as String})","trigger":"temporal.documentInsert","description":"($temporalCollection,$uri,$root,$permissions,$collections,$quality,$forestIds)"},{"content":"temporal.documentLoad(${1:temporalCollection as String}, ${2:location as String})","trigger":"temporal.documentLoad","description":"($temporalCollection,$location)"},{"content":"temporal.documentLoad(${1:temporalCollection as String}, ${2:location as String}, ${3:options as Object?})","trigger":"temporal.documentLoad","description":"($temporalCollection,$location,$options)"},{"content":"temporal.documentPeriod(${1:temporalCollection as String}, ${2:axis as String}, ${3:root as Node})","trigger":"temporal.documentPeriod","description":"($temporalCollection,$axis,$root)"},{"content":"temporal.getLsqt(${1:temporalCollection as String})","trigger":"temporal.getLsqt","description":"($temporalCollection)"},{"content":"temporal.getLsqtAutomation(${1:temporalCollection as String})","trigger":"temporal.getLsqtAutomation","description":"($temporalCollection)"},{"content":"temporal.getLsqtAutomationLag(${1:temporalCollection as String})","trigger":"temporal.getLsqtAutomationLag","description":"($temporalCollection)"},{"content":"temporal.getLsqtAutomationPeriod(${1:temporalCollection as String})","trigger":"temporal.getLsqtAutomationPeriod","description":"($temporalCollection)"},{"content":"temporal.getUseLsqt(${1:temporalCollection as String})","trigger":"temporal.getUseLsqt","description":"($temporalCollection)"},{"content":"temporal.setLsqtAutomation(${1:temporalCollection as String}, ${2:on as Boolean})","trigger":"temporal.setLsqtAutomation","description":"($temporalCollection,$on)"},{"content":"temporal.setLsqtAutomation(${1:temporalCollection as String}, ${2:on as Boolean}, ${3:period as Number})","trigger":"temporal.setLsqtAutomation","description":"($temporalCollection,$on,$period)"},{"content":"temporal.setLsqtAutomation(${1:temporalCollection as String}, ${2:on as Boolean}, ${3:period as Number}, ${4:lag as Number})","trigger":"temporal.setLsqtAutomation","description":"($temporalCollection,$on,$period,$lag)"},{"content":"temporal.setUseLsqt(${1:temporalCollection as String}, ${2:on as Boolean})","trigger":"temporal.setUseLsqt","description":"($temporalCollection,$on)"},{"content":"temporal.statementGetSystemTime(${1:systemTime as Date})","trigger":"temporal.statementGetSystemTime","description":"($systemTime)"},{"content":"temporal.statementSetSystemTime(${1:systemTime as Date})","trigger":"temporal.statementSetSystemTime","description":"($systemTime)"},{"content":"xdmp.QNameFromKey(${1:key as String})","trigger":"xdmp.QNameFromKey","description":"($key)"},{"content":"xdmp.access(${1:uri as String}, ${2:action as String})","trigger":"xdmp.access","description":"($uri,$action)"},{"content":"xdmp.add64(${1:x as String}, ${2:y as String})","trigger":"xdmp.add64","description":"($x,$y)"},{"content":"xdmp.addResponseHeader(${1:name as String}, ${2:value as String})","trigger":"xdmp.addResponseHeader","description":"($name,$value)"},{"content":"xdmp.amp(${1:namespace as String}, ${2:localname as String}, ${3:moduleUri as String}, ${4:database as String})","trigger":"xdmp.amp","description":"($namespace,$localname,$moduleUri,$database)"},{"content":"xdmp.ampRoles(${1:namespaceUri as String}, ${2:localname as String}, ${3:documentUri as String}, ${4:databaseId as String})","trigger":"xdmp.ampRoles","description":"($namespaceUri,$localname,$documentUri,$databaseId)"},{"content":"xdmp.and64(${1:x as String}, ${2:y as String})","trigger":"xdmp.and64","description":"($x,$y)"},{"content":"xdmp.annotation(${1:function as function(*)}, ${2:name as xs.QName})","trigger":"xdmp.annotation","description":"($function,$name)"},{"content":"xdmp.apply(${1:function as function})","trigger":"xdmp.apply","description":"($function)"},{"content":"xdmp.apply(${1:function as function}, ${2:params-1To-N as (Object | ValueIterator)})","trigger":"xdmp.apply","description":"($function,$params-1To-N)"},{"content":"xdmp.architecture()","trigger":"xdmp.architecture"},{"content":"xdmp.arrayValues(${1:Array as Array})","trigger":"xdmp.arrayValues","description":"($Array)"},{"content":"xdmp.arrayValues(${1:Array as Array}, ${2:flatten as Boolean})","trigger":"xdmp.arrayValues","description":"($Array,$flatten)"},{"content":"xdmp.atomizable(${1:item as String})","trigger":"xdmp.atomizable","description":"($item)"},{"content":"xdmp.atomizable()","trigger":"xdmp.atomizable"},{"content":"xdmp.base64Decode(${1:encoded as String})","trigger":"xdmp.base64Decode","description":"($encoded)"},{"content":"xdmp.base64Encode(${1:plaintext as String})","trigger":"xdmp.base64Encode","description":"($plaintext)"},{"content":"xdmp.binaryDecode(${1:encoded as Node}, ${2:encodingName as String})","trigger":"xdmp.binaryDecode","description":"($encoded,$encodingName)"},{"content":"xdmp.binaryIsExternal(${1:source as binary()})","trigger":"xdmp.binaryIsExternal","description":"($source)"},{"content":"xdmp.binaryIsLarge(${1:source as binary()})","trigger":"xdmp.binaryIsLarge","description":"($source)"},{"content":"xdmp.binaryIsSmall(${1:source as binary()})","trigger":"xdmp.binaryIsSmall","description":"($source)"},{"content":"xdmp.binarySize(${1:source as binary()?})","trigger":"xdmp.binarySize","description":"($source)"},{"content":"xdmp.binarySize()","trigger":"xdmp.binarySize"},{"content":"xdmp.cacheStatus(${1:hostId as String})","trigger":"xdmp.cacheStatus","description":"($hostId)"},{"content":"xdmp.cacheStatus()","trigger":"xdmp.cacheStatus"},{"content":"xdmp.canGrantRoles(${1:roles as String[]})","trigger":"xdmp.canGrantRoles","description":"($roles)"},{"content":"xdmp.castableAs(${1:namespaceUri as String}, ${2:localName as String}, ${3:item as String?})","trigger":"xdmp.castableAs","description":"($namespaceUri,$localName,$item)"},{"content":"xdmp.cluster(${1:name as String})","trigger":"xdmp.cluster","description":"($name)"},{"content":"xdmp.cluster()","trigger":"xdmp.cluster"},{"content":"xdmp.clusterName(${1:id as String})","trigger":"xdmp.clusterName","description":"($id)"},{"content":"xdmp.clusterName()","trigger":"xdmp.clusterName"},{"content":"xdmp.collationCanonicalUri(${1:collationUri as String})","trigger":"xdmp.collationCanonicalUri","description":"($collationUri)"},{"content":"xdmp.collectionDelete(${1:uri as String})","trigger":"xdmp.collectionDelete","description":"($uri)"},{"content":"xdmp.collectionLocks(${1:uri as String})","trigger":"xdmp.collectionLocks","description":"($uri)"},{"content":"xdmp.collectionLocks()","trigger":"xdmp.collectionLocks"},{"content":"xdmp.collectionProperties(${1:uri as String})","trigger":"xdmp.collectionProperties","description":"($uri)"},{"content":"xdmp.collectionProperties()","trigger":"xdmp.collectionProperties"},{"content":"xdmp.commit()","trigger":"xdmp.commit"},{"content":"xdmp.configurationTimestamp(${1:name as String})","trigger":"xdmp.configurationTimestamp","description":"($name)"},{"content":"xdmp.configurationTimestamp()","trigger":"xdmp.configurationTimestamp"},{"content":"xdmp.crypt(${1:password as String}, ${2:salt as String})","trigger":"xdmp.crypt","description":"($password,$salt)"},{"content":"xdmp.crypt2(${1:password as String})","trigger":"xdmp.crypt2","description":"($password)"},{"content":"xdmp.database(${1:name as String})","trigger":"xdmp.database","description":"($name)"},{"content":"xdmp.database()","trigger":"xdmp.database"},{"content":"xdmp.databaseBackup(${1:forestIDs as String[]}, ${2:pathname as String})","trigger":"xdmp.databaseBackup","description":"($forestIDs,$pathname)"},{"content":"xdmp.databaseBackup(${1:forestIDs as String[]}, ${2:pathname as String}, ${3:journalArchiving as Boolean?})","trigger":"xdmp.databaseBackup","description":"($forestIDs,$pathname,$journalArchiving)"},{"content":"xdmp.databaseBackup(${1:forestIDs as String[]}, ${2:pathname as String}, ${3:journalArchiving as Boolean?}, ${4:journalArchivePath as String?})","trigger":"xdmp.databaseBackup","description":"($forestIDs,$pathname,$journalArchiving,$journalArchivePath)"},{"content":"xdmp.databaseBackup(${1:forestIDs as String[]}, ${2:pathname as String}, ${3:journalArchiving as Boolean?}, ${4:journalArchivePath as String?}, ${5:lagLimit as String?})","trigger":"xdmp.databaseBackup","description":"($forestIDs,$pathname,$journalArchiving,$journalArchivePath,$lagLimit)"},{"content":"xdmp.databaseBackupCancel(${1:jobid as String})","trigger":"xdmp.databaseBackupCancel","description":"($jobid)"},{"content":"xdmp.databaseBackupPurge(${1:dir as String}, ${2:keepNumBackups as Number})","trigger":"xdmp.databaseBackupPurge","description":"($dir,$keepNumBackups)"},{"content":"xdmp.databaseBackupPurge(${1:dir as String}, ${2:keepNumBackups as Number}, ${3:incrementalDir as String})","trigger":"xdmp.databaseBackupPurge","description":"($dir,$keepNumBackups,$incrementalDir)"},{"content":"xdmp.databaseBackupStatus(${1:jobid as String[]})","trigger":"xdmp.databaseBackupStatus","description":"($jobid)"},{"content":"xdmp.databaseBackupStatus(${1:jobid as String[]}, ${2:hostid as String})","trigger":"xdmp.databaseBackupStatus","description":"($jobid,$hostid)"},{"content":"xdmp.databaseBackupValidate(${1:forestIDs as String[]}, ${2:pathname as String})","trigger":"xdmp.databaseBackupValidate","description":"($forestIDs,$pathname)"},{"content":"xdmp.databaseBackupValidate(${1:forestIDs as String[]}, ${2:pathname as String}, ${3:includeReplicas as Boolean?})","trigger":"xdmp.databaseBackupValidate","description":"($forestIDs,$pathname,$includeReplicas)"},{"content":"xdmp.databaseBackupValidate(${1:forestIDs as String[]}, ${2:pathname as String}, ${3:includeReplicas as Boolean?}, ${4:journalArchiving as Boolean?})","trigger":"xdmp.databaseBackupValidate","description":"($forestIDs,$pathname,$includeReplicas,$journalArchiving)"},{"content":"xdmp.databaseBackupValidate(${1:forestIDs as String[]}, ${2:pathname as String}, ${3:includeReplicas as Boolean?}, ${4:journalArchiving as Boolean?}, ${5:journalArchivePath as String?})","trigger":"xdmp.databaseBackupValidate","description":"($forestIDs,$pathname,$includeReplicas,$journalArchiving,$journalArchivePath)"},{"content":"xdmp.databaseBackupValidate(${1:forestIDs as String[]}, ${2:pathname as String}, ${3:includeReplicas as Boolean?}, ${4:journalArchiving as Boolean?}, ${5:journalArchivePath as String?}, ${6:lagLimit as String?})","trigger":"xdmp.databaseBackupValidate","description":"($forestIDs,$pathname,$includeReplicas,$journalArchiving,$journalArchivePath,$lagLimit)"},{"content":"xdmp.databaseForests(${1:databaseId as String})","trigger":"xdmp.databaseForests","description":"($databaseId)"},{"content":"xdmp.databaseForests(${1:databaseId as String}, ${2:includeReplicas as Boolean})","trigger":"xdmp.databaseForests","description":"($databaseId,$includeReplicas)"},{"content":"xdmp.databaseGlobalNonblockingTimestamp(${1:databaseId as String})","trigger":"xdmp.databaseGlobalNonblockingTimestamp","description":"($databaseId)"},{"content":"xdmp.databaseIncrementalBackup(${1:forestIDs as String[]}, ${2:pathname as String})","trigger":"xdmp.databaseIncrementalBackup","description":"($forestIDs,$pathname)"},{"content":"xdmp.databaseIncrementalBackup(${1:forestIDs as String[]}, ${2:pathname as String}, ${3:incrementalDir as String?})","trigger":"xdmp.databaseIncrementalBackup","description":"($forestIDs,$pathname,$incrementalDir)"},{"content":"xdmp.databaseIncrementalBackup(${1:forestIDs as String[]}, ${2:pathname as String}, ${3:incrementalDir as String?}, ${4:journalArchiving as Boolean?})","trigger":"xdmp.databaseIncrementalBackup","description":"($forestIDs,$pathname,$incrementalDir,$journalArchiving)"},{"content":"xdmp.databaseIncrementalBackup(${1:forestIDs as String[]}, ${2:pathname as String}, ${3:incrementalDir as String?}, ${4:journalArchiving as Boolean?}, ${5:journalArchivePath as String?})","trigger":"xdmp.databaseIncrementalBackup","description":"($forestIDs,$pathname,$incrementalDir,$journalArchiving,$journalArchivePath)"},{"content":"xdmp.databaseIncrementalBackup(${1:forestIDs as String[]}, ${2:pathname as String}, ${3:incrementalDir as String?}, ${4:journalArchiving as Boolean?}, ${5:journalArchivePath as String?}, ${6:lagLimit as String?})","trigger":"xdmp.databaseIncrementalBackup","description":"($forestIDs,$pathname,$incrementalDir,$journalArchiving,$journalArchivePath,$lagLimit)"},{"content":"xdmp.databaseIncrementalBackupValidate(${1:forestIDs as String[]}, ${2:pathname as String})","trigger":"xdmp.databaseIncrementalBackupValidate","description":"($forestIDs,$pathname)"},{"content":"xdmp.databaseIncrementalBackupValidate(${1:forestIDs as String[]}, ${2:pathname as String}, ${3:includeReplicas as Boolean?})","trigger":"xdmp.databaseIncrementalBackupValidate","description":"($forestIDs,$pathname,$includeReplicas)"},{"content":"xdmp.databaseIncrementalBackupValidate(${1:forestIDs as String[]}, ${2:pathname as String}, ${3:includeReplicas as Boolean?}, ${4:incrementalDir as String?})","trigger":"xdmp.databaseIncrementalBackupValidate","description":"($forestIDs,$pathname,$includeReplicas,$incrementalDir)"},{"content":"xdmp.databaseIncrementalBackupValidate(${1:forestIDs as String[]}, ${2:pathname as String}, ${3:includeReplicas as Boolean?}, ${4:incrementalDir as String?}, ${5:journalArchiving as Boolean?})","trigger":"xdmp.databaseIncrementalBackupValidate","description":"($forestIDs,$pathname,$includeReplicas,$incrementalDir,$journalArchiving)"},{"content":"xdmp.databaseIncrementalBackupValidate(${1:forestIDs as String[]}, ${2:pathname as String}, ${3:includeReplicas as Boolean?}, ${4:incrementalDir as String?}, ${5:journalArchiving as Boolean?}, ${6:journalArchivePath as String?})","trigger":"xdmp.databaseIncrementalBackupValidate","description":"($forestIDs,$pathname,$includeReplicas,$incrementalDir,$journalArchiving,$journalArchivePath)"},{"content":"xdmp.databaseIncrementalBackupValidate(${1:forestIDs as String[]}, ${2:pathname as String}, ${3:includeReplicas as Boolean?}, ${4:incrementalDir as String?}, ${5:journalArchiving as Boolean?}, ${6:journalArchivePath as String?}, ${7:lagLimit as String?})","trigger":"xdmp.databaseIncrementalBackupValidate","description":"($forestIDs,$pathname,$includeReplicas,$incrementalDir,$journalArchiving,$journalArchivePath,$lagLimit)"},{"content":"xdmp.databaseIsReplica(${1:databaseId as String})","trigger":"xdmp.databaseIsReplica","description":"($databaseId)"},{"content":"xdmp.databaseJournalArchivePurge(${1:dir as String})","trigger":"xdmp.databaseJournalArchivePurge","description":"($dir)"},{"content":"xdmp.databaseJournalArchivePurge(${1:dir as String}, ${2:incrementalDir as String})","trigger":"xdmp.databaseJournalArchivePurge","description":"($dir,$incrementalDir)"},{"content":"xdmp.databaseJournalArchivePurge(${1:dir as String}, ${2:incrementalDir as String}, ${3:journalArchivePath as String})","trigger":"xdmp.databaseJournalArchivePurge","description":"($dir,$incrementalDir,$journalArchivePath)"},{"content":"xdmp.databaseName(${1:databaseId as String})","trigger":"xdmp.databaseName","description":"($databaseId)"},{"content":"xdmp.databaseNonblockingTimestamp(${1:databaseId as String})","trigger":"xdmp.databaseNonblockingTimestamp","description":"($databaseId)"},{"content":"xdmp.databasePartitionForests(${1:value as xs.anyAtomicType})","trigger":"xdmp.databasePartitionForests","description":"($value)"},{"content":"xdmp.databasePathNamespaces(${1:dbid as String})","trigger":"xdmp.databasePathNamespaces","description":"($dbid)"},{"content":"xdmp.databasePathNamespaces()","trigger":"xdmp.databasePathNamespaces"},{"content":"xdmp.databaseRestore(${1:forestIDs as String[]}, ${2:pathname as String})","trigger":"xdmp.databaseRestore","description":"($forestIDs,$pathname)"},{"content":"xdmp.databaseRestore(${1:forestIDs as String[]}, ${2:pathname as String}, ${3:restoreToTime as Date?})","trigger":"xdmp.databaseRestore","description":"($forestIDs,$pathname,$restoreToTime)"},{"content":"xdmp.databaseRestore(${1:forestIDs as String[]}, ${2:pathname as String}, ${3:restoreToTime as Date?}, ${4:journalArchiving as Boolean?})","trigger":"xdmp.databaseRestore","description":"($forestIDs,$pathname,$restoreToTime,$journalArchiving)"},{"content":"xdmp.databaseRestore(${1:forestIDs as String[]}, ${2:pathname as String}, ${3:restoreToTime as Date?}, ${4:journalArchiving as Boolean?}, ${5:journalArchivePath as String?})","trigger":"xdmp.databaseRestore","description":"($forestIDs,$pathname,$restoreToTime,$journalArchiving,$journalArchivePath)"},{"content":"xdmp.databaseRestore(${1:forestIDs as String[]}, ${2:pathname as String}, ${3:restoreToTime as Date?}, ${4:journalArchiving as Boolean?}, ${5:journalArchivePath as String?}, ${6:incrementalBackup as Boolean?})","trigger":"xdmp.databaseRestore","description":"($forestIDs,$pathname,$restoreToTime,$journalArchiving,$journalArchivePath,$incrementalBackup)"},{"content":"xdmp.databaseRestore(${1:forestIDs as String[]}, ${2:pathname as String}, ${3:restoreToTime as Date?}, ${4:journalArchiving as Boolean?}, ${5:journalArchivePath as String?}, ${6:incrementalBackup as Boolean?}, ${7:incrementalBackupPath as String?})","trigger":"xdmp.databaseRestore","description":"($forestIDs,$pathname,$restoreToTime,$journalArchiving,$journalArchivePath,$incrementalBackup,$incrementalBackupPath)"},{"content":"xdmp.databaseRestoreCancel(${1:jobid as String})","trigger":"xdmp.databaseRestoreCancel","description":"($jobid)"},{"content":"xdmp.databaseRestoreStatus(${1:jobid as String})","trigger":"xdmp.databaseRestoreStatus","description":"($jobid)"},{"content":"xdmp.databaseRestoreValidate(${1:forestIDs as String[]}, ${2:pathname as String})","trigger":"xdmp.databaseRestoreValidate","description":"($forestIDs,$pathname)"},{"content":"xdmp.databaseRestoreValidate(${1:forestIDs as String[]}, ${2:pathname as String}, ${3:restoreToTime as Date?})","trigger":"xdmp.databaseRestoreValidate","description":"($forestIDs,$pathname,$restoreToTime)"},{"content":"xdmp.databaseRestoreValidate(${1:forestIDs as String[]}, ${2:pathname as String}, ${3:restoreToTime as Date?}, ${4:includeReplicas as Boolean?})","trigger":"xdmp.databaseRestoreValidate","description":"($forestIDs,$pathname,$restoreToTime,$includeReplicas)"},{"content":"xdmp.databaseRestoreValidate(${1:forestIDs as String[]}, ${2:pathname as String}, ${3:restoreToTime as Date?}, ${4:includeReplicas as Boolean?}, ${5:journalArchiving as Boolean?})","trigger":"xdmp.databaseRestoreValidate","description":"($forestIDs,$pathname,$restoreToTime,$includeReplicas,$journalArchiving)"},{"content":"xdmp.databaseRestoreValidate(${1:forestIDs as String[]}, ${2:pathname as String}, ${3:restoreToTime as Date?}, ${4:includeReplicas as Boolean?}, ${5:journalArchiving as Boolean?}, ${6:journalArchivePath as String?})","trigger":"xdmp.databaseRestoreValidate","description":"($forestIDs,$pathname,$restoreToTime,$includeReplicas,$journalArchiving,$journalArchivePath)"},{"content":"xdmp.databaseRestoreValidate(${1:forestIDs as String[]}, ${2:pathname as String}, ${3:restoreToTime as Date?}, ${4:includeReplicas as Boolean?}, ${5:journalArchiving as Boolean?}, ${6:journalArchivePath as String?}, ${7:incrementalBackup as Boolean?})","trigger":"xdmp.databaseRestoreValidate","description":"($forestIDs,$pathname,$restoreToTime,$includeReplicas,$journalArchiving,$journalArchivePath,$incrementalBackup)"},{"content":"xdmp.databaseRestoreValidate(${1:forestIDs as String[]}, ${2:pathname as String}, ${3:restoreToTime as Date?}, ${4:includeReplicas as Boolean?}, ${5:journalArchiving as Boolean?}, ${6:journalArchivePath as String?}, ${7:incrementalBackup as Boolean?}, ${8:incrementalBackupPath as String?})","trigger":"xdmp.databaseRestoreValidate","description":"($forestIDs,$pathname,$restoreToTime,$includeReplicas,$journalArchiving,$journalArchivePath,$incrementalBackup,$incrementalBackupPath)"},{"content":"xdmp.databases()","trigger":"xdmp.databases"},{"content":"xdmp.daynameFromDate(${1:arg as Date?})","trigger":"xdmp.daynameFromDate","description":"($arg)"},{"content":"xdmp.decodeFromNCName(${1:name as String})","trigger":"xdmp.decodeFromNCName","description":"($name)"},{"content":"xdmp.defaultCollections(${1:uri as String})","trigger":"xdmp.defaultCollections","description":"($uri)"},{"content":"xdmp.defaultCollections()","trigger":"xdmp.defaultCollections"},{"content":"xdmp.describe(${1:item as (Object[] | ValueIterator)})","trigger":"xdmp.describe","description":"($item)"},{"content":"xdmp.describe(${1:item as (Object[] | ValueIterator)}, ${2:maxSequenceLength as Number?})","trigger":"xdmp.describe","description":"($item,$maxSequenceLength)"},{"content":"xdmp.describe(${1:item as (Object[] | ValueIterator)}, ${2:maxSequenceLength as Number?}, ${3:maxItemLength as Number?})","trigger":"xdmp.describe","description":"($item,$maxSequenceLength,$maxItemLength)"},{"content":"xdmp.diacriticLess(${1:string as String})","trigger":"xdmp.diacriticLess","description":"($string)"},{"content":"xdmp.directory(${1:uri as String[]})","trigger":"xdmp.directory","description":"($uri)"},{"content":"xdmp.directory(${1:uri as String[]}, ${2:depth as String?})","trigger":"xdmp.directory","description":"($uri,$depth)"},{"content":"xdmp.directoryCreate(${1:uri as String})","trigger":"xdmp.directoryCreate","description":"($uri)"},{"content":"xdmp.directoryCreate(${1:uri as String}, ${2:permissions as Object})","trigger":"xdmp.directoryCreate","description":"($uri,$permissions)"},{"content":"xdmp.directoryCreate(${1:uri as String}, ${2:permissions as Object}, ${3:collections as String})","trigger":"xdmp.directoryCreate","description":"($uri,$permissions,$collections)"},{"content":"xdmp.directoryCreate(${1:uri as String}, ${2:permissions as Object}, ${3:collections as String}, ${4:quality as xs.int?})","trigger":"xdmp.directoryCreate","description":"($uri,$permissions,$collections,$quality)"},{"content":"xdmp.directoryCreate(${1:uri as String}, ${2:permissions as Object}, ${3:collections as String}, ${4:quality as xs.int?}, ${5:forestIds as String})","trigger":"xdmp.directoryCreate","description":"($uri,$permissions,$collections,$quality,$forestIds)"},{"content":"xdmp.directoryDelete(${1:uri as String})","trigger":"xdmp.directoryDelete","description":"($uri)"},{"content":"xdmp.directoryLocks(${1:uri as String[]})","trigger":"xdmp.directoryLocks","description":"($uri)"},{"content":"xdmp.directoryLocks(${1:uri as String[]}, ${2:depth as String?})","trigger":"xdmp.directoryLocks","description":"($uri,$depth)"},{"content":"xdmp.directoryProperties(${1:uri as String[]})","trigger":"xdmp.directoryProperties","description":"($uri)"},{"content":"xdmp.directoryProperties(${1:uri as String[]}, ${2:depth as String?})","trigger":"xdmp.directoryProperties","description":"($uri,$depth)"},{"content":"xdmp.documentAddCollections(${1:uri as String}, ${2:collections as String[]})","trigger":"xdmp.documentAddCollections","description":"($uri,$collections)"},{"content":"xdmp.documentAddPermissions(${1:uri as String}, ${2:permissions as Object[]})","trigger":"xdmp.documentAddPermissions","description":"($uri,$permissions)"},{"content":"xdmp.documentAddProperties(${1:uri as String}, ${2:props as String[]})","trigger":"xdmp.documentAddProperties","description":"($uri,$props)"},{"content":"xdmp.documentAssign(${1:uri as String}, ${2:forestCount as Number})","trigger":"xdmp.documentAssign","description":"($uri,$forestCount)"},{"content":"xdmp.documentAssign(${1:uri as String}, ${2:forestCount as Number}, ${3:assignmentPolicy as String})","trigger":"xdmp.documentAssign","description":"($uri,$forestCount,$assignmentPolicy)"},{"content":"xdmp.documentDelete(${1:uri as String})","trigger":"xdmp.documentDelete","description":"($uri)"},{"content":"xdmp.documentFilter(${1:doc as Node})","trigger":"xdmp.documentFilter","description":"($doc)"},{"content":"xdmp.documentFilter(${1:doc as Node}, ${2:options as Object?})","trigger":"xdmp.documentFilter","description":"($doc,$options)"},{"content":"xdmp.documentForest(${1:uri as String})","trigger":"xdmp.documentForest","description":"($uri)"},{"content":"xdmp.documentForest(${1:uri as String}, ${2:forestIds as String})","trigger":"xdmp.documentForest","description":"($uri,$forestIds)"},{"content":"xdmp.documentGet(${1:location as String})","trigger":"xdmp.documentGet","description":"($location)"},{"content":"xdmp.documentGet(${1:location as String}, ${2:options as Object?})","trigger":"xdmp.documentGet","description":"($location,$options)"},{"content":"xdmp.documentGetCollections(${1:uri as String})","trigger":"xdmp.documentGetCollections","description":"($uri)"},{"content":"xdmp.documentGetProperties(${1:uri as String}, ${2:property as xs.QName})","trigger":"xdmp.documentGetProperties","description":"($uri,$property)"},{"content":"xdmp.documentGetQuality(${1:uri as String})","trigger":"xdmp.documentGetQuality","description":"($uri)"},{"content":"xdmp.documentInsert(${1:uri as String}, ${2:root as Node})","trigger":"xdmp.documentInsert","description":"($uri,$root)"},{"content":"xdmp.documentInsert(${1:uri as String}, ${2:root as Node}, ${3:permissions as Object})","trigger":"xdmp.documentInsert","description":"($uri,$root,$permissions)"},{"content":"xdmp.documentInsert(${1:uri as String}, ${2:root as Node}, ${3:permissions as Object}, ${4:collections as String})","trigger":"xdmp.documentInsert","description":"($uri,$root,$permissions,$collections)"},{"content":"xdmp.documentInsert(${1:uri as String}, ${2:root as Node}, ${3:permissions as Object}, ${4:collections as String}, ${5:quality as xs.int?})","trigger":"xdmp.documentInsert","description":"($uri,$root,$permissions,$collections,$quality)"},{"content":"xdmp.documentInsert(${1:uri as String}, ${2:root as Node}, ${3:permissions as Object}, ${4:collections as String}, ${5:quality as xs.int?}, ${6:forestIds as String})","trigger":"xdmp.documentInsert","description":"($uri,$root,$permissions,$collections,$quality,$forestIds)"},{"content":"xdmp.documentLoad(${1:location as String})","trigger":"xdmp.documentLoad","description":"($location)"},{"content":"xdmp.documentLoad(${1:location as String}, ${2:options as Object?})","trigger":"xdmp.documentLoad","description":"($location,$options)"},{"content":"xdmp.documentLocks(${1:uri as String})","trigger":"xdmp.documentLocks","description":"($uri)"},{"content":"xdmp.documentLocks()","trigger":"xdmp.documentLocks"},{"content":"xdmp.documentProperties(${1:uri as String})","trigger":"xdmp.documentProperties","description":"($uri)"},{"content":"xdmp.documentProperties()","trigger":"xdmp.documentProperties"},{"content":"xdmp.documentRemoveCollections(${1:uri as String}, ${2:collections as String[]})","trigger":"xdmp.documentRemoveCollections","description":"($uri,$collections)"},{"content":"xdmp.documentRemovePermissions(${1:uri as String}, ${2:permissions as Object[]})","trigger":"xdmp.documentRemovePermissions","description":"($uri,$permissions)"},{"content":"xdmp.documentRemoveProperties(${1:uri as String}, ${2:propertyNames as String[]})","trigger":"xdmp.documentRemoveProperties","description":"($uri,$propertyNames)"},{"content":"xdmp.documentSetCollections(${1:uri as String}, ${2:collections as String[]})","trigger":"xdmp.documentSetCollections","description":"($uri,$collections)"},{"content":"xdmp.documentSetPermissions(${1:uri as String}, ${2:permissions as Object[]})","trigger":"xdmp.documentSetPermissions","description":"($uri,$permissions)"},{"content":"xdmp.documentSetProperties(${1:uri as String}, ${2:props as String[]})","trigger":"xdmp.documentSetProperties","description":"($uri,$props)"},{"content":"xdmp.documentSetProperty(${1:uri as String}, ${2:prop as Node})","trigger":"xdmp.documentSetProperty","description":"($uri,$prop)"},{"content":"xdmp.documentSetQuality(${1:uri as String}, ${2:quality as Integer})","trigger":"xdmp.documentSetQuality","description":"($uri,$quality)"},{"content":"xdmp.documentTimestamp(${1:uri as String})","trigger":"xdmp.documentTimestamp","description":"($uri)"},{"content":"xdmp.elapsedTime()","trigger":"xdmp.elapsedTime"},{"content":"xdmp.elementContentType(${1:element as Node})","trigger":"xdmp.elementContentType","description":"($element)"},{"content":"xdmp.email(${1:message as Node})","trigger":"xdmp.email","description":"($message)"},{"content":"xdmp.encodeForNCName(${1:name as String})","trigger":"xdmp.encodeForNCName","description":"($name)"},{"content":"xdmp.encodingLanguageDetect(${1:document as Node})","trigger":"xdmp.encodingLanguageDetect","description":"($document)"},{"content":"xdmp.eval(${1:xquery as String})","trigger":"xdmp.eval","description":"($xquery)"},{"content":"xdmp.eval(${1:xquery as String}, ${2:vars as (Object | ValueIterator)})","trigger":"xdmp.eval","description":"($xquery,$vars)"},{"content":"xdmp.eval(${1:xquery as String}, ${2:vars as (Object | ValueIterator)}, ${3:options as Object?})","trigger":"xdmp.eval","description":"($xquery,$vars,$options)"},{"content":"xdmp.evalIn(${1:xquery as String}, ${2:ID as String[]})","trigger":"xdmp.evalIn","description":"($xquery,$ID)"},{"content":"xdmp.evalIn(${1:xquery as String}, ${2:ID as String[]}, ${3:vars as (Object | ValueIterator)})","trigger":"xdmp.evalIn","description":"($xquery,$ID,$vars)"},{"content":"xdmp.evalIn(${1:xquery as String}, ${2:ID as String[]}, ${3:vars as (Object | ValueIterator)}, ${4:modules as String?})","trigger":"xdmp.evalIn","description":"($xquery,$ID,$vars,$modules)"},{"content":"xdmp.evalIn(${1:xquery as String}, ${2:ID as String[]}, ${3:vars as (Object | ValueIterator)}, ${4:modules as String?}, ${5:root as String?})","trigger":"xdmp.evalIn","description":"($xquery,$ID,$vars,$modules,$root)"},{"content":"xdmp.excelConvert(${1:doc as Node}, ${2:filename as String})","trigger":"xdmp.excelConvert","description":"($doc,$filename)"},{"content":"xdmp.excelConvert(${1:doc as Node}, ${2:filename as String}, ${3:options as Object?})","trigger":"xdmp.excelConvert","description":"($doc,$filename,$options)"},{"content":"xdmp.externalBinary(${1:path as String})","trigger":"xdmp.externalBinary","description":"($path)"},{"content":"xdmp.externalBinary(${1:path as String}, ${2:startingLocation as Number})","trigger":"xdmp.externalBinary","description":"($path,$startingLocation)"},{"content":"xdmp.externalBinary(${1:path as String}, ${2:startingLocation as Number}, ${3:length as Number})","trigger":"xdmp.externalBinary","description":"($path,$startingLocation,$length)"},{"content":"xdmp.externalBinaryPath(${1:source as binary()})","trigger":"xdmp.externalBinaryPath","description":"($source)"},{"content":"xdmp.externalSecurity(${1:externalSecurity as String})","trigger":"xdmp.externalSecurity","description":"($externalSecurity)"},{"content":"xdmp.filesystemDirectory(${1:pathname as String})","trigger":"xdmp.filesystemDirectory","description":"($pathname)"},{"content":"xdmp.filesystemDirectoryCreate(${1:pathname as String})","trigger":"xdmp.filesystemDirectoryCreate","description":"($pathname)"},{"content":"xdmp.filesystemDirectoryCreate(${1:pathname as String}, ${2:options as String})","trigger":"xdmp.filesystemDirectoryCreate","description":"($pathname,$options)"},{"content":"xdmp.filesystemFile(${1:pathname as String})","trigger":"xdmp.filesystemFile","description":"($pathname)"},{"content":"xdmp.filesystemFileExists(${1:pathname as String})","trigger":"xdmp.filesystemFileExists","description":"($pathname)"},{"content":"xdmp.filesystemFileExists(${1:pathname as String}, ${2:host as String?})","trigger":"xdmp.filesystemFileExists","description":"($pathname,$host)"},{"content":"xdmp.filesystemFileLength(${1:pathname as String})","trigger":"xdmp.filesystemFileLength","description":"($pathname)"},{"content":"xdmp.filesystemFilepath(${1:pathname as String})","trigger":"xdmp.filesystemFilepath","description":"($pathname)"},{"content":"xdmp.foreignClusterStatus(${1:hostId as String}, ${2:foreignClusterId as String})","trigger":"xdmp.foreignClusterStatus","description":"($hostId,$foreignClusterId)"},{"content":"xdmp.foreignClusters()","trigger":"xdmp.foreignClusters"},{"content":"xdmp.forest(${1:name as String})","trigger":"xdmp.forest","description":"($name)"},{"content":"xdmp.forestBackup(${1:forestID as String}, ${2:pathname as String})","trigger":"xdmp.forestBackup","description":"($forestID,$pathname)"},{"content":"xdmp.forestBackupStatus(${1:forestid as String[]})","trigger":"xdmp.forestBackupStatus","description":"($forestid)"},{"content":"xdmp.forestClear(${1:forestIDs as String[]})","trigger":"xdmp.forestClear","description":"($forestIDs)"},{"content":"xdmp.forestCounts(${1:forestId as String[]})","trigger":"xdmp.forestCounts","description":"($forestId)"},{"content":"xdmp.forestCounts(${1:forestId as String[]}, ${2:showElements as String})","trigger":"xdmp.forestCounts","description":"($forestId,$showElements)"},{"content":"xdmp.forestCounts(${1:forestId as String[]}, ${2:showElements as String}, ${3:options as String})","trigger":"xdmp.forestCounts","description":"($forestId,$showElements,$options)"},{"content":"xdmp.forestDatabases(${1:forest as String})","trigger":"xdmp.forestDatabases","description":"($forest)"},{"content":"xdmp.forestHost(${1:id as String})","trigger":"xdmp.forestHost","description":"($id)"},{"content":"xdmp.forestName(${1:forestId as String})","trigger":"xdmp.forestName","description":"($forestId)"},{"content":"xdmp.forestOnline(${1:forestID as String})","trigger":"xdmp.forestOnline","description":"($forestID)"},{"content":"xdmp.forestOnline(${1:forestID as String}, ${2:timestamp as String})","trigger":"xdmp.forestOnline","description":"($forestID,$timestamp)"},{"content":"xdmp.forestOnline(${1:forestID as String}, ${2:timestamp as String}, ${3:isReplica as Boolean})","trigger":"xdmp.forestOnline","description":"($forestID,$timestamp,$isReplica)"},{"content":"xdmp.forestOnline(${1:forestID as String}, ${2:timestamp as String}, ${3:isReplica as Boolean}, ${4:syncingOk as Boolean})","trigger":"xdmp.forestOnline","description":"($forestID,$timestamp,$isReplica,$syncingOk)"},{"content":"xdmp.forestOpenReplica(${1:forestIDs as String[]})","trigger":"xdmp.forestOpenReplica","description":"($forestIDs)"},{"content":"xdmp.forestRestart(${1:forestIDs as String[]})","trigger":"xdmp.forestRestart","description":"($forestIDs)"},{"content":"xdmp.forestRestore(${1:forestID as String}, ${2:pathname as String})","trigger":"xdmp.forestRestore","description":"($forestID,$pathname)"},{"content":"xdmp.forestRollback(${1:forestIDs as String[]}, ${2:timestamp as String})","trigger":"xdmp.forestRollback","description":"($forestIDs,$timestamp)"},{"content":"xdmp.forestStatus(${1:forestId as String[]})","trigger":"xdmp.forestStatus","description":"($forestId)"},{"content":"xdmp.forestUpdatesAllowed(${1:forestId as String})","trigger":"xdmp.forestUpdatesAllowed","description":"($forestId)"},{"content":"xdmp.forests()","trigger":"xdmp.forests"},{"content":"xdmp.formatNumber(${1:value as String[]})","trigger":"xdmp.formatNumber","description":"($value)"},{"content":"xdmp.formatNumber(${1:value as String[]}, ${2:picture as String?})","trigger":"xdmp.formatNumber","description":"($value,$picture)"},{"content":"xdmp.formatNumber(${1:value as String[]}, ${2:picture as String?}, ${3:language as String?})","trigger":"xdmp.formatNumber","description":"($value,$picture,$language)"},{"content":"xdmp.formatNumber(${1:value as String[]}, ${2:picture as String?}, ${3:language as String?}, ${4:letterValue as String?})","trigger":"xdmp.formatNumber","description":"($value,$picture,$language,$letterValue)"},{"content":"xdmp.formatNumber(${1:value as String[]}, ${2:picture as String?}, ${3:language as String?}, ${4:letterValue as String?}, ${5:ordchar as String?})","trigger":"xdmp.formatNumber","description":"($value,$picture,$language,$letterValue,$ordchar)"},{"content":"xdmp.formatNumber(${1:value as String[]}, ${2:picture as String?}, ${3:language as String?}, ${4:letterValue as String?}, ${5:ordchar as String?}, ${6:zeroPadding as String?})","trigger":"xdmp.formatNumber","description":"($value,$picture,$language,$letterValue,$ordchar,$zeroPadding)"},{"content":"xdmp.formatNumber(${1:value as String[]}, ${2:picture as String?}, ${3:language as String?}, ${4:letterValue as String?}, ${5:ordchar as String?}, ${6:zeroPadding as String?}, ${7:groupingSeparator as String?})","trigger":"xdmp.formatNumber","description":"($value,$picture,$language,$letterValue,$ordchar,$zeroPadding,$groupingSeparator)"},{"content":"xdmp.formatNumber(${1:value as String[]}, ${2:picture as String?}, ${3:language as String?}, ${4:letterValue as String?}, ${5:ordchar as String?}, ${6:zeroPadding as String?}, ${7:groupingSeparator as String?}, ${8:groupingSize as Integer?})","trigger":"xdmp.formatNumber","description":"($value,$picture,$language,$letterValue,$ordchar,$zeroPadding,$groupingSeparator,$groupingSize)"},{"content":"xdmp.fromJSON(${1:arg as Node})","trigger":"xdmp.fromJSON","description":"($arg)"},{"content":"xdmp.fromJsonString(${1:arg as String})","trigger":"xdmp.fromJsonString","description":"($arg)"},{"content":"xdmp.function(${1:function as xs.QName})","trigger":"xdmp.function","description":"($function)"},{"content":"xdmp.function(${1:function as xs.QName}, ${2:modulePath as String?})","trigger":"xdmp.function","description":"($function,$modulePath)"},{"content":"xdmp.functionModule(${1:function as function})","trigger":"xdmp.functionModule","description":"($function)"},{"content":"xdmp.functionName(${1:function as function})","trigger":"xdmp.functionName","description":"($function)"},{"content":"xdmp.functionParameterName(${1:function as function(*)}, ${2:position as Integer})","trigger":"xdmp.functionParameterName","description":"($function,$position)"},{"content":"xdmp.functionParameterType(${1:function as function(*)}, ${2:position as Integer})","trigger":"xdmp.functionParameterType","description":"($function,$position)"},{"content":"xdmp.functionReturnType(${1:function as function(*)})","trigger":"xdmp.functionReturnType","description":"($function)"},{"content":"xdmp.functionSignature(${1:function as function(*)})","trigger":"xdmp.functionSignature","description":"($function)"},{"content":"xdmp.functions()","trigger":"xdmp.functions"},{"content":"xdmp.getCurrentRoles()","trigger":"xdmp.getCurrentRoles"},{"content":"xdmp.getCurrentUser()","trigger":"xdmp.getCurrentUser"},{"content":"xdmp.getCurrentUserid()","trigger":"xdmp.getCurrentUserid"},{"content":"xdmp.getInvokedPath()","trigger":"xdmp.getInvokedPath"},{"content":"xdmp.getOriginalUrl()","trigger":"xdmp.getOriginalUrl"},{"content":"xdmp.getOrphanedBinaries(${1:id as String})","trigger":"xdmp.getOrphanedBinaries","description":"($id)"},{"content":"xdmp.getRequestBody(${1:format as String?})","trigger":"xdmp.getRequestBody","description":"($format)"},{"content":"xdmp.getRequestBody()","trigger":"xdmp.getRequestBody"},{"content":"xdmp.getRequestClientAddress()","trigger":"xdmp.getRequestClientAddress"},{"content":"xdmp.getRequestClientCertificate()","trigger":"xdmp.getRequestClientCertificate"},{"content":"xdmp.getRequestErrorFormat()","trigger":"xdmp.getRequestErrorFormat"},{"content":"xdmp.getRequestField(${1:name as String})","trigger":"xdmp.getRequestField","description":"($name)"},{"content":"xdmp.getRequestField(${1:name as String}, ${2:default as String?})","trigger":"xdmp.getRequestField","description":"($name,$default)"},{"content":"xdmp.getRequestFieldContentType(${1:fieldName as String})","trigger":"xdmp.getRequestFieldContentType","description":"($fieldName)"},{"content":"xdmp.getRequestFieldFilename(${1:fieldName as String})","trigger":"xdmp.getRequestFieldFilename","description":"($fieldName)"},{"content":"xdmp.getRequestFieldNames()","trigger":"xdmp.getRequestFieldNames"},{"content":"xdmp.getRequestHeader(${1:name as String})","trigger":"xdmp.getRequestHeader","description":"($name)"},{"content":"xdmp.getRequestHeader(${1:name as String}, ${2:default as String?})","trigger":"xdmp.getRequestHeader","description":"($name,$default)"},{"content":"xdmp.getRequestHeaderNames()","trigger":"xdmp.getRequestHeaderNames"},{"content":"xdmp.getRequestMethod()","trigger":"xdmp.getRequestMethod"},{"content":"xdmp.getRequestPath()","trigger":"xdmp.getRequestPath"},{"content":"xdmp.getRequestPort()","trigger":"xdmp.getRequestPort"},{"content":"xdmp.getRequestProtocol()","trigger":"xdmp.getRequestProtocol"},{"content":"xdmp.getRequestUrl()","trigger":"xdmp.getRequestUrl"},{"content":"xdmp.getRequestUser()","trigger":"xdmp.getRequestUser"},{"content":"xdmp.getRequestUsername()","trigger":"xdmp.getRequestUsername"},{"content":"xdmp.getResponseCode()","trigger":"xdmp.getResponseCode"},{"content":"xdmp.getResponseEncoding()","trigger":"xdmp.getResponseEncoding"},{"content":"xdmp.getServerField(${1:name as String})","trigger":"xdmp.getServerField","description":"($name)"},{"content":"xdmp.getServerField(${1:name as String}, ${2:default as (Object | ValueIterator)})","trigger":"xdmp.getServerField","description":"($name,$default)"},{"content":"xdmp.getServerFieldNames()","trigger":"xdmp.getServerFieldNames"},{"content":"xdmp.getSessionField(${1:name as String})","trigger":"xdmp.getSessionField","description":"($name)"},{"content":"xdmp.getSessionField(${1:name as String}, ${2:default as (Object | ValueIterator)})","trigger":"xdmp.getSessionField","description":"($name,$default)"},{"content":"xdmp.getSessionFieldNames()","trigger":"xdmp.getSessionFieldNames"},{"content":"xdmp.getTransactionMode()","trigger":"xdmp.getTransactionMode"},{"content":"xdmp.getUrlRewriterPath()","trigger":"xdmp.getUrlRewriterPath"},{"content":"xdmp.group(${1:name as String})","trigger":"xdmp.group","description":"($name)"},{"content":"xdmp.group()","trigger":"xdmp.group"},{"content":"xdmp.groupHosts(${1:name as String})","trigger":"xdmp.groupHosts","description":"($name)"},{"content":"xdmp.groupHosts()","trigger":"xdmp.groupHosts"},{"content":"xdmp.groupName(${1:name as String})","trigger":"xdmp.groupName","description":"($name)"},{"content":"xdmp.groupName()","trigger":"xdmp.groupName"},{"content":"xdmp.groupServers(${1:name as String})","trigger":"xdmp.groupServers","description":"($name)"},{"content":"xdmp.groupServers()","trigger":"xdmp.groupServers"},{"content":"xdmp.groups()","trigger":"xdmp.groups"},{"content":"xdmp.gssServerNegotiate(${1:inputToken as String})","trigger":"xdmp.gssServerNegotiate","description":"($inputToken)"},{"content":"xdmp.gunzip(${1:gzipnode as binary()}, ${2:options as Object?})","trigger":"xdmp.gunzip","description":"($gzipnode,$options)"},{"content":"xdmp.gzip(${1:node as Node})","trigger":"xdmp.gzip","description":"($node)"},{"content":"xdmp.hasPrivilege(${1:privileges as String[]}, ${2:kind as String})","trigger":"xdmp.hasPrivilege","description":"($privileges,$kind)"},{"content":"xdmp.hash32(${1:string as String})","trigger":"xdmp.hash32","description":"($string)"},{"content":"xdmp.hash64(${1:string as String})","trigger":"xdmp.hash64","description":"($string)"},{"content":"xdmp.hexToInteger(${1:hex as String})","trigger":"xdmp.hexToInteger","description":"($hex)"},{"content":"xdmp.hmacMd5(${1:secretkey as String}, ${2:message as String})","trigger":"xdmp.hmacMd5","description":"($secretkey,$message)"},{"content":"xdmp.hmacMd5(${1:secretkey as String}, ${2:message as String}, ${3:encoding as String})","trigger":"xdmp.hmacMd5","description":"($secretkey,$message,$encoding)"},{"content":"xdmp.hmacSha1(${1:secretkey as String}, ${2:message as String})","trigger":"xdmp.hmacSha1","description":"($secretkey,$message)"},{"content":"xdmp.hmacSha1(${1:secretkey as String}, ${2:message as String}, ${3:encoding as String})","trigger":"xdmp.hmacSha1","description":"($secretkey,$message,$encoding)"},{"content":"xdmp.hmacSha256(${1:secretkey as String}, ${2:message as String})","trigger":"xdmp.hmacSha256","description":"($secretkey,$message)"},{"content":"xdmp.hmacSha256(${1:secretkey as String}, ${2:message as String}, ${3:encoding as String})","trigger":"xdmp.hmacSha256","description":"($secretkey,$message,$encoding)"},{"content":"xdmp.hmacSha512(${1:secretkey as String}, ${2:message as String})","trigger":"xdmp.hmacSha512","description":"($secretkey,$message)"},{"content":"xdmp.hmacSha512(${1:secretkey as String}, ${2:message as String}, ${3:encoding as String})","trigger":"xdmp.hmacSha512","description":"($secretkey,$message,$encoding)"},{"content":"xdmp.host(${1:name as String})","trigger":"xdmp.host","description":"($name)"},{"content":"xdmp.host()","trigger":"xdmp.host"},{"content":"xdmp.hostForests(${1:ID as String})","trigger":"xdmp.hostForests","description":"($ID)"},{"content":"xdmp.hostGetSslFipsEnabled(${1:hostId as String[]})","trigger":"xdmp.hostGetSslFipsEnabled","description":"($hostId)"},{"content":"xdmp.hostName(${1:ID as String})","trigger":"xdmp.hostName","description":"($ID)"},{"content":"xdmp.hostName()","trigger":"xdmp.hostName"},{"content":"xdmp.hostStatus(${1:hostId as String[]})","trigger":"xdmp.hostStatus","description":"($hostId)"},{"content":"xdmp.hosts()","trigger":"xdmp.hosts"},{"content":"xdmp.httpDelete(${1:uri as String})","trigger":"xdmp.httpDelete","description":"($uri)"},{"content":"xdmp.httpDelete(${1:uri as String}, ${2:options as Object?})","trigger":"xdmp.httpDelete","description":"($uri,$options)"},{"content":"xdmp.httpGet(${1:uri as String})","trigger":"xdmp.httpGet","description":"($uri)"},{"content":"xdmp.httpGet(${1:uri as String}, ${2:options as Object?})","trigger":"xdmp.httpGet","description":"($uri,$options)"},{"content":"xdmp.httpHead(${1:uri as String})","trigger":"xdmp.httpHead","description":"($uri)"},{"content":"xdmp.httpHead(${1:uri as String}, ${2:options as Object?})","trigger":"xdmp.httpHead","description":"($uri,$options)"},{"content":"xdmp.httpOptions(${1:uri as String})","trigger":"xdmp.httpOptions","description":"($uri)"},{"content":"xdmp.httpOptions(${1:uri as String}, ${2:options as Object?})","trigger":"xdmp.httpOptions","description":"($uri,$options)"},{"content":"xdmp.httpPost(${1:uri as String})","trigger":"xdmp.httpPost","description":"($uri)"},{"content":"xdmp.httpPost(${1:uri as String}, ${2:options as Object?})","trigger":"xdmp.httpPost","description":"($uri,$options)"},{"content":"xdmp.httpPost(${1:uri as String}, ${2:options as Object?}, ${3:data as Node?})","trigger":"xdmp.httpPost","description":"($uri,$options,$data)"},{"content":"xdmp.httpPut(${1:uri as String})","trigger":"xdmp.httpPut","description":"($uri)"},{"content":"xdmp.httpPut(${1:uri as String}, ${2:options as Object?})","trigger":"xdmp.httpPut","description":"($uri,$options)"},{"content":"xdmp.httpPut(${1:uri as String}, ${2:options as Object?}, ${3:data as Node?})","trigger":"xdmp.httpPut","description":"($uri,$options,$data)"},{"content":"xdmp.initcap(${1:string as String?})","trigger":"xdmp.initcap","description":"($string)"},{"content":"xdmp.integerToHex(${1:val as Integer})","trigger":"xdmp.integerToHex","description":"($val)"},{"content":"xdmp.integerToOctal(${1:val as Integer})","trigger":"xdmp.integerToOctal","description":"($val)"},{"content":"xdmp.invoke(${1:path as String})","trigger":"xdmp.invoke","description":"($path)"},{"content":"xdmp.invoke(${1:path as String}, ${2:vars as (Object | ValueIterator)})","trigger":"xdmp.invoke","description":"($path,$vars)"},{"content":"xdmp.invoke(${1:path as String}, ${2:vars as (Object | ValueIterator)}, ${3:options as Object?})","trigger":"xdmp.invoke","description":"($path,$vars,$options)"},{"content":"xdmp.invokeFunction(${1:jsFunc as function()})","trigger":"xdmp.invokeFunction","description":"($jsFunc)"},{"content":"xdmp.invokeFunction(${1:jsFunc as function()}, ${2:options as Object?})","trigger":"xdmp.invokeFunction","description":"($jsFunc,$options)"},{"content":"xdmp.invokeIn(${1:uri as String}, ${2:ID as String[]})","trigger":"xdmp.invokeIn","description":"($uri,$ID)"},{"content":"xdmp.invokeIn(${1:uri as String}, ${2:ID as String[]}, ${3:vars as (Object | ValueIterator)})","trigger":"xdmp.invokeIn","description":"($uri,$ID,$vars)"},{"content":"xdmp.invokeIn(${1:uri as String}, ${2:ID as String[]}, ${3:vars as (Object | ValueIterator)}, ${4:modules as String?})","trigger":"xdmp.invokeIn","description":"($uri,$ID,$vars,$modules)"},{"content":"xdmp.invokeIn(${1:uri as String}, ${2:ID as String[]}, ${3:vars as (Object | ValueIterator)}, ${4:modules as String?}, ${5:root as String?})","trigger":"xdmp.invokeIn","description":"($uri,$ID,$vars,$modules,$root)"},{"content":"xdmp.keyFromQName(${1:name as xs.QName})","trigger":"xdmp.keyFromQName","description":"($name)"},{"content":"xdmp.ldapLookup(${1:DN as String})","trigger":"xdmp.ldapLookup","description":"($DN)"},{"content":"xdmp.ldapLookup(${1:DN as String}, ${2:options as Object?})","trigger":"xdmp.ldapLookup","description":"($DN,$options)"},{"content":"xdmp.ldapSearch(${1:query as String})","trigger":"xdmp.ldapSearch","description":"($query)"},{"content":"xdmp.ldapSearch(${1:query as String}, ${2:options as Object?})","trigger":"xdmp.ldapSearch","description":"($query,$options)"},{"content":"xdmp.load(${1:path as String})","trigger":"xdmp.load","description":"($path)"},{"content":"xdmp.load(${1:path as String}, ${2:uri as String?})","trigger":"xdmp.load","description":"($path,$uri)"},{"content":"xdmp.load(${1:path as String}, ${2:uri as String?}, ${3:permissions as Object})","trigger":"xdmp.load","description":"($path,$uri,$permissions)"},{"content":"xdmp.load(${1:path as String}, ${2:uri as String?}, ${3:permissions as Object}, ${4:collections as String})","trigger":"xdmp.load","description":"($path,$uri,$permissions,$collections)"},{"content":"xdmp.load(${1:path as String}, ${2:uri as String?}, ${3:permissions as Object}, ${4:collections as String}, ${5:quality as xs.int?})","trigger":"xdmp.load","description":"($path,$uri,$permissions,$collections,$quality)"},{"content":"xdmp.load(${1:path as String}, ${2:uri as String?}, ${3:permissions as Object}, ${4:collections as String}, ${5:quality as xs.int?}, ${6:defaultNamespace as String?})","trigger":"xdmp.load","description":"($path,$uri,$permissions,$collections,$quality,$defaultNamespace)"},{"content":"xdmp.load(${1:path as String}, ${2:uri as String?}, ${3:permissions as Object}, ${4:collections as String}, ${5:quality as xs.int?}, ${6:defaultNamespace as String?}, ${7:options as String})","trigger":"xdmp.load","description":"($path,$uri,$permissions,$collections,$quality,$defaultNamespace,$options)"},{"content":"xdmp.load(${1:path as String}, ${2:uri as String?}, ${3:permissions as Object}, ${4:collections as String}, ${5:quality as xs.int?}, ${6:defaultNamespace as String?}, ${7:options as String}, ${8:forestIds as String})","trigger":"xdmp.load","description":"($path,$uri,$permissions,$collections,$quality,$defaultNamespace,$options,$forestIds)"},{"content":"xdmp.lockAcquire(${1:uri as String})","trigger":"xdmp.lockAcquire","description":"($uri)"},{"content":"xdmp.lockAcquire(${1:uri as String}, ${2:scope as String?})","trigger":"xdmp.lockAcquire","description":"($uri,$scope)"},{"content":"xdmp.lockAcquire(${1:uri as String}, ${2:scope as String?}, ${3:depth as String?})","trigger":"xdmp.lockAcquire","description":"($uri,$scope,$depth)"},{"content":"xdmp.lockAcquire(${1:uri as String}, ${2:scope as String?}, ${3:depth as String?}, ${4:owner as (Object | ValueIterator)})","trigger":"xdmp.lockAcquire","description":"($uri,$scope,$depth,$owner)"},{"content":"xdmp.lockAcquire(${1:uri as String}, ${2:scope as String?}, ${3:depth as String?}, ${4:owner as (Object | ValueIterator)}, ${5:timeout as String?})","trigger":"xdmp.lockAcquire","description":"($uri,$scope,$depth,$owner,$timeout)"},{"content":"xdmp.lockForUpdate(${1:uri as String})","trigger":"xdmp.lockForUpdate","description":"($uri)"},{"content":"xdmp.lockRelease(${1:uri as String})","trigger":"xdmp.lockRelease","description":"($uri)"},{"content":"xdmp.log(${1:msg as (Object[] | ValueIterator)})","trigger":"xdmp.log","description":"($msg)"},{"content":"xdmp.log(${1:msg as (Object[] | ValueIterator)}, ${2:level as String?})","trigger":"xdmp.log","description":"($msg,$level)"},{"content":"xdmp.logLevel()","trigger":"xdmp.logLevel"},{"content":"xdmp.login(${1:name as String})","trigger":"xdmp.login","description":"($name)"},{"content":"xdmp.login(${1:name as String}, ${2:password as String?})","trigger":"xdmp.login","description":"($name,$password)"},{"content":"xdmp.login(${1:name as String}, ${2:password as String?}, ${3:setSession as Boolean?})","trigger":"xdmp.login","description":"($name,$password,$setSession)"},{"content":"xdmp.login(${1:name as String}, ${2:password as String?}, ${3:setSession as Boolean?}, ${4:roleNames as String})","trigger":"xdmp.login","description":"($name,$password,$setSession,$roleNames)"},{"content":"xdmp.logout()","trigger":"xdmp.logout"},{"content":"xdmp.lshift64(${1:x as String}, ${2:y as Integer})","trigger":"xdmp.lshift64","description":"($x,$y)"},{"content":"xdmp.md5(${1:data as String})","trigger":"xdmp.md5","description":"($data)"},{"content":"xdmp.md5(${1:data as String}, ${2:encoding as String})","trigger":"xdmp.md5","description":"($data,$encoding)"},{"content":"xdmp.merge(${1:options as Object?})","trigger":"xdmp.merge","description":"($options)"},{"content":"xdmp.merge()","trigger":"xdmp.merge"},{"content":"xdmp.mergeCancel(${1:forest-ID as String}, ${2:merge-ID as String})","trigger":"xdmp.mergeCancel","description":"($forest-ID,$merge-ID)"},{"content":"xdmp.merging()","trigger":"xdmp.merging"},{"content":"xdmp.modulesDatabase()","trigger":"xdmp.modulesDatabase"},{"content":"xdmp.modulesRoot()","trigger":"xdmp.modulesRoot"},{"content":"xdmp.monthNameFromDate(${1:arg as Date?})","trigger":"xdmp.monthNameFromDate","description":"($arg)"},{"content":"xdmp.mul64(${1:x as String}, ${2:y as String})","trigger":"xdmp.mul64","description":"($x,$y)"},{"content":"xdmp.multipartDecode(${1:separator as String}, ${2:data as binary()})","trigger":"xdmp.multipartDecode","description":"($separator,$data)"},{"content":"xdmp.multipartDecode(${1:separator as String}, ${2:data as binary()}, ${3:options as Node})","trigger":"xdmp.multipartDecode","description":"($separator,$data,$options)"},{"content":"xdmp.multipartEncode(${1:separator as String}, ${2:manifest as Node}, ${3:content as String[]})","trigger":"xdmp.multipartEncode","description":"($separator,$manifest,$content)"},{"content":"xdmp.nodeDatabase(${1:node as Node})","trigger":"xdmp.nodeDatabase","description":"($node)"},{"content":"xdmp.nodeDelete(${1:old as Node})","trigger":"xdmp.nodeDelete","description":"($old)"},{"content":"xdmp.nodeInsertAfter(${1:sibling as Node}, ${2:new as Node})","trigger":"xdmp.nodeInsertAfter","description":"($sibling,$new)"},{"content":"xdmp.nodeInsertBefore(${1:sibling as Node}, ${2:new as Node})","trigger":"xdmp.nodeInsertBefore","description":"($sibling,$new)"},{"content":"xdmp.nodeInsertChild(${1:parent as Node}, ${2:new as Node})","trigger":"xdmp.nodeInsertChild","description":"($parent,$new)"},{"content":"xdmp.nodeKind(${1:node as Node})","trigger":"xdmp.nodeKind","description":"($node)"},{"content":"xdmp.nodeReplace(${1:old as Node}, ${2:new as Node})","trigger":"xdmp.nodeReplace","description":"($old,$new)"},{"content":"xdmp.nodeUri(${1:node as Node})","trigger":"xdmp.nodeUri","description":"($node)"},{"content":"xdmp.not64(${1:x as String})","trigger":"xdmp.not64","description":"($x)"},{"content":"xdmp.octalToInteger(${1:octal as String})","trigger":"xdmp.octalToInteger","description":"($octal)"},{"content":"xdmp.or64(${1:x as String}, ${2:y as String})","trigger":"xdmp.or64","description":"($x,$y)"},{"content":"xdmp.parseDateTime(${1:picture as String}, ${2:value as String})","trigger":"xdmp.parseDateTime","description":"($picture,$value)"},{"content":"xdmp.parseDateTime(${1:picture as String}, ${2:value as String}, ${3:language as String?})","trigger":"xdmp.parseDateTime","description":"($picture,$value,$language)"},{"content":"xdmp.parseDateTime(${1:picture as String}, ${2:value as String}, ${3:language as String?}, ${4:calendar as String?})","trigger":"xdmp.parseDateTime","description":"($picture,$value,$language,$calendar)"},{"content":"xdmp.parseDateTime(${1:picture as String}, ${2:value as String}, ${3:language as String?}, ${4:calendar as String?}, ${5:country as String?})","trigger":"xdmp.parseDateTime","description":"($picture,$value,$language,$calendar,$country)"},{"content":"xdmp.parseYymmdd(${1:picture as String}, ${2:value as String})","trigger":"xdmp.parseYymmdd","description":"($picture,$value)"},{"content":"xdmp.parseYymmdd(${1:picture as String}, ${2:value as String}, ${3:language as String?})","trigger":"xdmp.parseYymmdd","description":"($picture,$value,$language)"},{"content":"xdmp.parseYymmdd(${1:picture as String}, ${2:value as String}, ${3:language as String?}, ${4:calendar as String?})","trigger":"xdmp.parseYymmdd","description":"($picture,$value,$language,$calendar)"},{"content":"xdmp.parseYymmdd(${1:picture as String}, ${2:value as String}, ${3:language as String?}, ${4:calendar as String?}, ${5:country as String?})","trigger":"xdmp.parseYymmdd","description":"($picture,$value,$language,$calendar,$country)"},{"content":"xdmp.path(${1:node as Node})","trigger":"xdmp.path","description":"($node)"},{"content":"xdmp.path(${1:node as Node}, ${2:includeDocument as Boolean?})","trigger":"xdmp.path","description":"($node,$includeDocument)"},{"content":"xdmp.pdfConvert(${1:doc as Node}, ${2:filename as String})","trigger":"xdmp.pdfConvert","description":"($doc,$filename)"},{"content":"xdmp.pdfConvert(${1:doc as Node}, ${2:filename as String}, ${3:options as Object?})","trigger":"xdmp.pdfConvert","description":"($doc,$filename,$options)"},{"content":"xdmp.permission(${1:role as String}, ${2:capability as String}, ${3:format as String})","trigger":"xdmp.permission","description":"($role,$capability,$format)"},{"content":"xdmp.platform()","trigger":"xdmp.platform"},{"content":"xdmp.position(${1:test as String?}, ${2:target as String?})","trigger":"xdmp.position","description":"($test,$target)"},{"content":"xdmp.position(${1:test as String?}, ${2:target as String?}, ${3:collation as String?})","trigger":"xdmp.position","description":"($test,$target,$collation)"},{"content":"xdmp.powerpointConvert(${1:doc as Node}, ${2:filename as String})","trigger":"xdmp.powerpointConvert","description":"($doc,$filename)"},{"content":"xdmp.powerpointConvert(${1:doc as Node}, ${2:filename as String}, ${3:options as Object?})","trigger":"xdmp.powerpointConvert","description":"($doc,$filename,$options)"},{"content":"xdmp.prettyPrint(${1:xquery as String})","trigger":"xdmp.prettyPrint","description":"($xquery)"},{"content":"xdmp.privilege(${1:action as String}, ${2:kind as String})","trigger":"xdmp.privilege","description":"($action,$kind)"},{"content":"xdmp.privilegeRoles(${1:action as String}, ${2:kind as String})","trigger":"xdmp.privilegeRoles","description":"($action,$kind)"},{"content":"xdmp.productEdition()","trigger":"xdmp.productEdition"},{"content":"xdmp.productEnvironment()","trigger":"xdmp.productEnvironment"},{"content":"xdmp.quarterFromDate(${1:arg as Date?})","trigger":"xdmp.quarterFromDate","description":"($arg)"},{"content":"xdmp.queryMeters()","trigger":"xdmp.queryMeters"},{"content":"xdmp.queryTrace(${1:enabled as Boolean})","trigger":"xdmp.queryTrace","description":"($enabled)"},{"content":"xdmp.quote(${1:arg as (Object[] | ValueIterator)})","trigger":"xdmp.quote","description":"($arg)"},{"content":"xdmp.quote(${1:arg as (Object[] | ValueIterator)}, ${2:options as Object?})","trigger":"xdmp.quote","description":"($arg,$options)"},{"content":"xdmp.random(${1:max as String})","trigger":"xdmp.random","description":"($max)"},{"content":"xdmp.random()","trigger":"xdmp.random"},{"content":"xdmp.redirectResponse(${1:name as String})","trigger":"xdmp.redirectResponse","description":"($name)"},{"content":"xdmp.removeOrphanedBinary(${1:forestID as String}, ${2:binaryID as String})","trigger":"xdmp.removeOrphanedBinary","description":"($forestID,$binaryID)"},{"content":"xdmp.request()","trigger":"xdmp.request"},{"content":"xdmp.requestCancel(${1:hostID as String}, ${2:serverID as String}, ${3:requestID as String})","trigger":"xdmp.requestCancel","description":"($hostID,$serverID,$requestID)"},{"content":"xdmp.requestStatus(${1:hostId as String}, ${2:serverId as String}, ${3:requestId as String[]})","trigger":"xdmp.requestStatus","description":"($hostId,$serverId,$requestId)"},{"content":"xdmp.requestTimestamp()","trigger":"xdmp.requestTimestamp"},{"content":"xdmp.resolveUri(${1:relative as String?})","trigger":"xdmp.resolveUri","description":"($relative)"},{"content":"xdmp.resolveUri(${1:relative as String?}, ${2:base as String})","trigger":"xdmp.resolveUri","description":"($relative,$base)"},{"content":"xdmp.restart(${1:hostIDs as String[]}, ${2:reason as String})","trigger":"xdmp.restart","description":"($hostIDs,$reason)"},{"content":"xdmp.rethrow()","trigger":"xdmp.rethrow"},{"content":"xdmp.role(${1:role as String})","trigger":"xdmp.role","description":"($role)"},{"content":"xdmp.roleRoles(${1:name as String})","trigger":"xdmp.roleRoles","description":"($name)"},{"content":"xdmp.rollback()","trigger":"xdmp.rollback"},{"content":"xdmp.rshift64(${1:x as String}, ${2:y as Integer})","trigger":"xdmp.rshift64","description":"($x,$y)"},{"content":"xdmp.save(${1:path as String}, ${2:node as Node})","trigger":"xdmp.save","description":"($path,$node)"},{"content":"xdmp.save(${1:path as String}, ${2:node as Node}, ${3:options as Object?})","trigger":"xdmp.save","description":"($path,$node,$options)"},{"content":"xdmp.schemaDatabase(${1:databaseId as String})","trigger":"xdmp.schemaDatabase","description":"($databaseId)"},{"content":"xdmp.schemaDatabase()","trigger":"xdmp.schemaDatabase"},{"content":"xdmp.securityAssert(${1:privileges as String[]}, ${2:kind as String})","trigger":"xdmp.securityAssert","description":"($privileges,$kind)"},{"content":"xdmp.securityDatabase(${1:databaseId as String})","trigger":"xdmp.securityDatabase","description":"($databaseId)"},{"content":"xdmp.securityDatabase()","trigger":"xdmp.securityDatabase"},{"content":"xdmp.server(${1:name as String})","trigger":"xdmp.server","description":"($name)"},{"content":"xdmp.server(${1:name as String}, ${2:group as String})","trigger":"xdmp.server","description":"($name,$group)"},{"content":"xdmp.server()","trigger":"xdmp.server"},{"content":"xdmp.serverName(${1:id as String})","trigger":"xdmp.serverName","description":"($id)"},{"content":"xdmp.serverStatus(${1:hostId as String}, ${2:serverId as String[]})","trigger":"xdmp.serverStatus","description":"($hostId,$serverId)"},{"content":"xdmp.servers()","trigger":"xdmp.servers"},{"content":"xdmp.setRequestTimeLimit(${1:timeLimit as Number})","trigger":"xdmp.setRequestTimeLimit","description":"($timeLimit)"},{"content":"xdmp.setRequestTimeLimit(${1:timeLimit as Number}, ${2:hostID as String?})","trigger":"xdmp.setRequestTimeLimit","description":"($timeLimit,$hostID)"},{"content":"xdmp.setRequestTimeLimit(${1:timeLimit as Number}, ${2:hostID as String?}, ${3:serverID as String?})","trigger":"xdmp.setRequestTimeLimit","description":"($timeLimit,$hostID,$serverID)"},{"content":"xdmp.setRequestTimeLimit(${1:timeLimit as Number}, ${2:hostID as String?}, ${3:serverID as String?}, ${4:requestID as String?})","trigger":"xdmp.setRequestTimeLimit","description":"($timeLimit,$hostID,$serverID,$requestID)"},{"content":"xdmp.setResponseCode(${1:code as Integer}, ${2:message as String})","trigger":"xdmp.setResponseCode","description":"($code,$message)"},{"content":"xdmp.setResponseContentType(${1:name as String})","trigger":"xdmp.setResponseContentType","description":"($name)"},{"content":"xdmp.setResponseEncoding(${1:encoding as String})","trigger":"xdmp.setResponseEncoding","description":"($encoding)"},{"content":"xdmp.setServerField(${1:name as String}, ${2:value as (Object[] | ValueIterator)})","trigger":"xdmp.setServerField","description":"($name,$value)"},{"content":"xdmp.setServerFieldPrivilege(${1:name as String}, ${2:privilege as String?})","trigger":"xdmp.setServerFieldPrivilege","description":"($name,$privilege)"},{"content":"xdmp.setSessionField(${1:name as String}, ${2:value as (Object[] | ValueIterator)})","trigger":"xdmp.setSessionField","description":"($name,$value)"},{"content":"xdmp.setTransactionMode(${1:value as String})","trigger":"xdmp.setTransactionMode","description":"($value)"},{"content":"xdmp.setTransactionName(${1:name as String})","trigger":"xdmp.setTransactionName","description":"($name)"},{"content":"xdmp.setTransactionName(${1:name as String}, ${2:hostId as String})","trigger":"xdmp.setTransactionName","description":"($name,$hostId)"},{"content":"xdmp.setTransactionName(${1:name as String}, ${2:hostId as String}, ${3:txnId as String})","trigger":"xdmp.setTransactionName","description":"($name,$hostId,$txnId)"},{"content":"xdmp.setTransactionTimeLimit(${1:timeLimit as Number})","trigger":"xdmp.setTransactionTimeLimit","description":"($timeLimit)"},{"content":"xdmp.setTransactionTimeLimit(${1:timeLimit as Number}, ${2:hostId as String})","trigger":"xdmp.setTransactionTimeLimit","description":"($timeLimit,$hostId)"},{"content":"xdmp.setTransactionTimeLimit(${1:timeLimit as Number}, ${2:hostId as String}, ${3:txnId as String})","trigger":"xdmp.setTransactionTimeLimit","description":"($timeLimit,$hostId,$txnId)"},{"content":"xdmp.sha1(${1:data as String})","trigger":"xdmp.sha1","description":"($data)"},{"content":"xdmp.sha1(${1:data as String}, ${2:encoding as String})","trigger":"xdmp.sha1","description":"($data,$encoding)"},{"content":"xdmp.sha256(${1:data as String})","trigger":"xdmp.sha256","description":"($data)"},{"content":"xdmp.sha256(${1:data as String}, ${2:encoding as String})","trigger":"xdmp.sha256","description":"($data,$encoding)"},{"content":"xdmp.sha384(${1:data as String})","trigger":"xdmp.sha384","description":"($data)"},{"content":"xdmp.sha384(${1:data as String}, ${2:encoding as String})","trigger":"xdmp.sha384","description":"($data,$encoding)"},{"content":"xdmp.sha512(${1:data as String})","trigger":"xdmp.sha512","description":"($data)"},{"content":"xdmp.sha512(${1:data as String}, ${2:encoding as String})","trigger":"xdmp.sha512","description":"($data,$encoding)"},{"content":"xdmp.shutdown(${1:hostIDs as String[]}, ${2:reason as String})","trigger":"xdmp.shutdown","description":"($hostIDs,$reason)"},{"content":"xdmp.sleep(${1:msec as Number})","trigger":"xdmp.sleep","description":"($msec)"},{"content":"xdmp.spawn(${1:path as String})","trigger":"xdmp.spawn","description":"($path)"},{"content":"xdmp.spawn(${1:path as String}, ${2:vars as (Object | ValueIterator)})","trigger":"xdmp.spawn","description":"($path,$vars)"},{"content":"xdmp.spawn(${1:path as String}, ${2:vars as (Object | ValueIterator)}, ${3:options as Object?})","trigger":"xdmp.spawn","description":"($path,$vars,$options)"},{"content":"xdmp.sql(${1:sql as String})","trigger":"xdmp.sql","description":"($sql)"},{"content":"xdmp.sql(${1:sql as String}, ${2:options as String})","trigger":"xdmp.sql","description":"($sql,$options)"},{"content":"xdmp.startJournalArchiving(${1:forestIDs as String[]}, ${2:journalArchivePath as String})","trigger":"xdmp.startJournalArchiving","description":"($forestIDs,$journalArchivePath)"},{"content":"xdmp.startJournalArchiving(${1:forestIDs as String[]}, ${2:journalArchivePath as String}, ${3:lagLimit as String?})","trigger":"xdmp.startJournalArchiving","description":"($forestIDs,$journalArchivePath,$lagLimit)"},{"content":"xdmp.step64(${1:initial as String}, ${2:step as String})","trigger":"xdmp.step64","description":"($initial,$step)"},{"content":"xdmp.stopJournalArchiving(${1:forestIDs as String[]})","trigger":"xdmp.stopJournalArchiving","description":"($forestIDs)"},{"content":"xdmp.strftime(${1:format as String}, ${2:value as Date})","trigger":"xdmp.strftime","description":"($format,$value)"},{"content":"xdmp.subbinary(${1:source as binary()}, ${2:startingLocation as Number})","trigger":"xdmp.subbinary","description":"($source,$startingLocation)"},{"content":"xdmp.subbinary(${1:source as binary()}, ${2:startingLocation as Number}, ${3:length as Number})","trigger":"xdmp.subbinary","description":"($source,$startingLocation,$length)"},{"content":"xdmp.tidy(${1:doc as String})","trigger":"xdmp.tidy","description":"($doc)"},{"content":"xdmp.tidy(${1:doc as String}, ${2:options as Object?})","trigger":"xdmp.tidy","description":"($doc,$options)"},{"content":"xdmp.timestampToWallclock(${1:timestamp as String})","trigger":"xdmp.timestampToWallclock","description":"($timestamp)"},{"content":"xdmp.toJSON(${1:item as (Object[] | ValueIterator)})","trigger":"xdmp.toJSON","description":"($item)"},{"content":"xdmp.toJsonString(${1:item as (Object[] | ValueIterator)})","trigger":"xdmp.toJsonString","description":"($item)"},{"content":"xdmp.trace(${1:name as String}, ${2:value as (Object[] | ValueIterator)})","trigger":"xdmp.trace","description":"($name,$value)"},{"content":"xdmp.transaction(${1:txnName as String})","trigger":"xdmp.transaction","description":"($txnName)"},{"content":"xdmp.transaction(${1:txnName as String}, ${2:hostId as String})","trigger":"xdmp.transaction","description":"($txnName,$hostId)"},{"content":"xdmp.transaction()","trigger":"xdmp.transaction"},{"content":"xdmp.transactionCommit(${1:hostId as String}, ${2:txnId as String})","trigger":"xdmp.transactionCommit","description":"($hostId,$txnId)"},{"content":"xdmp.transactionRollback(${1:hostId as String}, ${2:txnId as String})","trigger":"xdmp.transactionRollback","description":"($hostId,$txnId)"},{"content":"xdmp.triggersDatabase(${1:databaseId as String})","trigger":"xdmp.triggersDatabase","description":"($databaseId)"},{"content":"xdmp.triggersDatabase()","trigger":"xdmp.triggersDatabase"},{"content":"xdmp.type(${1:value as xs.anyAtomicType})","trigger":"xdmp.type","description":"($value)"},{"content":"xdmp.unpath(${1:expr as String})","trigger":"xdmp.unpath","description":"($expr)"},{"content":"xdmp.unpath(${1:expr as String}, ${2:map as Object})","trigger":"xdmp.unpath","description":"($expr,$map)"},{"content":"xdmp.unquote(${1:arg as String})","trigger":"xdmp.unquote","description":"($arg)"},{"content":"xdmp.unquote(${1:arg as String}, ${2:defaultNamespace as String?})","trigger":"xdmp.unquote","description":"($arg,$defaultNamespace)"},{"content":"xdmp.unquote(${1:arg as String}, ${2:defaultNamespace as String?}, ${3:options as String})","trigger":"xdmp.unquote","description":"($arg,$defaultNamespace,$options)"},{"content":"xdmp.uriContentType(${1:uri as String})","trigger":"xdmp.uriContentType","description":"($uri)"},{"content":"xdmp.uriFormat(${1:uri as String})","trigger":"xdmp.uriFormat","description":"($uri)"},{"content":"xdmp.uriIsFile(${1:uri as String?})","trigger":"xdmp.uriIsFile","description":"($uri)"},{"content":"xdmp.urlDecode(${1:encoded as String})","trigger":"xdmp.urlDecode","description":"($encoded)"},{"content":"xdmp.urlEncode(${1:plaintext as String})","trigger":"xdmp.urlEncode","description":"($plaintext)"},{"content":"xdmp.urlEncode(${1:plaintext as String}, ${2:noSpacePlus as Boolean?})","trigger":"xdmp.urlEncode","description":"($plaintext,$noSpacePlus)"},{"content":"xdmp.user(${1:user as String})","trigger":"xdmp.user","description":"($user)"},{"content":"xdmp.user(${1:user as String}, ${2:extSecId as String})","trigger":"xdmp.user","description":"($user,$extSecId)"},{"content":"xdmp.user(${1:user as String}, ${2:extSecId as String}, ${3:secDbFirst as Boolean})","trigger":"xdmp.user","description":"($user,$extSecId,$secDbFirst)"},{"content":"xdmp.userExternalSecurity(${1:userId as String})","trigger":"xdmp.userExternalSecurity","description":"($userId)"},{"content":"xdmp.userLastLogin(${1:user as String})","trigger":"xdmp.userLastLogin","description":"($user)"},{"content":"xdmp.userLastLogin()","trigger":"xdmp.userLastLogin"},{"content":"xdmp.userRoles(${1:name as String})","trigger":"xdmp.userRoles","description":"($name)"},{"content":"xdmp.userRoles(${1:name as String}, ${2:extSecId as String})","trigger":"xdmp.userRoles","description":"($name,$extSecId)"},{"content":"xdmp.userRoles(${1:name as String}, ${2:extSecId as String}, ${3:secDbFirst as Boolean})","trigger":"xdmp.userRoles","description":"($name,$extSecId,$secDbFirst)"},{"content":"xdmp.useridRoles(${1:userId as String})","trigger":"xdmp.useridRoles","description":"($userId)"},{"content":"xdmp.useridRoles(${1:userId as String}, ${2:extSecId as String})","trigger":"xdmp.useridRoles","description":"($userId,$extSecId)"},{"content":"xdmp.useridRoles(${1:userId as String}, ${2:extSecId as String}, ${3:secDbFirst as Boolean})","trigger":"xdmp.useridRoles","description":"($userId,$extSecId,$secDbFirst)"},{"content":"xdmp.validate(${1:node as Node})","trigger":"xdmp.validate","description":"($node)"},{"content":"xdmp.validate(${1:node as Node}, ${2:mode as String})","trigger":"xdmp.validate","description":"($node,$mode)"},{"content":"xdmp.validate(${1:node as Node}, ${2:mode as String}, ${3:typeName as xs.QName})","trigger":"xdmp.validate","description":"($node,$mode,$typeName)"},{"content":"xdmp.version()","trigger":"xdmp.version"},{"content":"xdmp.wallclockToTimestamp(${1:timestamp as Date})","trigger":"xdmp.wallclockToTimestamp","description":"($timestamp)"},{"content":"xdmp.weekFromDate(${1:arg as Date?})","trigger":"xdmp.weekFromDate","description":"($arg)"},{"content":"xdmp.weekdayFromDate(${1:arg as Date?})","trigger":"xdmp.weekdayFromDate","description":"($arg)"},{"content":"xdmp.wordConvert(${1:doc as Node}, ${2:filename as String})","trigger":"xdmp.wordConvert","description":"($doc,$filename)"},{"content":"xdmp.wordConvert(${1:doc as Node}, ${2:filename as String}, ${3:options as Object?})","trigger":"xdmp.wordConvert","description":"($doc,$filename,$options)"},{"content":"xdmp.x509CertificateExtract(${1:cert as String})","trigger":"xdmp.x509CertificateExtract","description":"($cert)"},{"content":"xdmp.xaComplete(${1:forestID as String}, ${2:txnId as String}, ${3:commit as Boolean}, ${4:remember as Boolean})","trigger":"xdmp.xaComplete","description":"($forestID,$txnId,$commit,$remember)"},{"content":"xdmp.xaForget(${1:forestID as String}, ${2:txnId as String})","trigger":"xdmp.xaForget","description":"($forestID,$txnId)"},{"content":"xdmp.xor64(${1:x as String}, ${2:y as String})","trigger":"xdmp.xor64","description":"($x,$y)"},{"content":"xdmp.xqueryEval(${1:xquery as String})","trigger":"xdmp.xqueryEval","description":"($xquery)"},{"content":"xdmp.xqueryEval(${1:xquery as String}, ${2:vars as (Object | ValueIterator)})","trigger":"xdmp.xqueryEval","description":"($xquery,$vars)"},{"content":"xdmp.xqueryEval(${1:xquery as String}, ${2:vars as (Object | ValueIterator)}, ${3:options as Object?})","trigger":"xdmp.xqueryEval","description":"($xquery,$vars,$options)"},{"content":"xdmp.xsltEval(${1:stylesheet as Node})","trigger":"xdmp.xsltEval","description":"($stylesheet)"},{"content":"xdmp.xsltEval(${1:stylesheet as Node}, ${2:input as Node?})","trigger":"xdmp.xsltEval","description":"($stylesheet,$input)"},{"content":"xdmp.xsltEval(${1:stylesheet as Node}, ${2:input as Node?}, ${3:params as Object?})","trigger":"xdmp.xsltEval","description":"($stylesheet,$input,$params)"},{"content":"xdmp.xsltEval(${1:stylesheet as Node}, ${2:input as Node?}, ${3:params as Object?}, ${4:options as Object?})","trigger":"xdmp.xsltEval","description":"($stylesheet,$input,$params,$options)"},{"content":"xdmp.xsltInvoke(${1:path as String})","trigger":"xdmp.xsltInvoke","description":"($path)"},{"content":"xdmp.xsltInvoke(${1:path as String}, ${2:input as Node?})","trigger":"xdmp.xsltInvoke","description":"($path,$input)"},{"content":"xdmp.xsltInvoke(${1:path as String}, ${2:input as Node?}, ${3:params as Object?})","trigger":"xdmp.xsltInvoke","description":"($path,$input,$params)"},{"content":"xdmp.xsltInvoke(${1:path as String}, ${2:input as Node?}, ${3:params as Object?}, ${4:options as Object?})","trigger":"xdmp.xsltInvoke","description":"($path,$input,$params,$options)"},{"content":"xdmp.yeardayFromDate(${1:arg as Date?})","trigger":"xdmp.yeardayFromDate","description":"($arg)"},{"content":"xdmp.zipCreate(${1:manifest as Node}, ${2:nodes as String[]})","trigger":"xdmp.zipCreate","description":"($manifest,$nodes)"},{"content":"xdmp.zipGet(${1:zipfile as binary()}, ${2:name as String})","trigger":"xdmp.zipGet","description":"($zipfile,$name)"},{"content":"xdmp.zipGet(${1:zipfile as binary()}, ${2:name as String}, ${3:options as Object?})","trigger":"xdmp.zipGet","description":"($zipfile,$name,$options)"},{"content":"xdmp.zipManifest(${1:zipfile as binary()})","trigger":"xdmp.zipManifest","description":"($zipfile)"}]