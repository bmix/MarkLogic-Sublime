[{"content":"fn:node-kind(${1:\\$node as node()?})", "trigger":"fn:node-kind", "description":"($node as node()?)"}, {"content":"xdmp:node-kind(${1:\\$node as node()})", "trigger":"xdmp:node-kind", "description":"($node as node())"}, {"content":"fn:node-name(${1:\\$arg as node()?})", "trigger":"fn:node-name", "description":"($arg as node()?)"}, {"content":"fn:nilled(${1:\\$arg as node()?})", "trigger":"fn:nilled", "description":"($arg as node()?)"}, {"content":"fn:string()", "trigger":"fn:string", "description":"()"}, {"content":"fn:string(${1:\\$arg as item()?})", "trigger":"fn:string", "description":"($arg as item()?)"}, {"content":"fn:data(${1:\\$arg as item()*})", "trigger":"fn:data", "description":"($arg as item()*)"}, {"content":"fn:base-uri()", "trigger":"fn:base-uri", "description":"()"}, {"content":"fn:base-uri(${1:\\$arg as node()?})", "trigger":"fn:base-uri", "description":"($arg as node()?)"}, {"content":"fn:document-uri(${1:\\$arg as node()?})", "trigger":"fn:document-uri", "description":"($arg as node()?)"}, {"content":"xdmp:atomizable()", "trigger":"xdmp:atomizable", "description":"()"}, {"content":"xdmp:atomizable(${1:\\$item as item()})", "trigger":"xdmp:atomizable", "description":"($item as item())"}, {"content":"admin:get-database-ids(${1:\\$config as element(configuration)})", "trigger":"admin:get-database-ids", "description":"($config as element(configuration))"}, {"content":"admin:get-host-ids(${1:\\$config as element(configuration)})", "trigger":"admin:get-host-ids", "description":"($config as element(configuration))"}, {"content":"admin:get-group-ids(${1:\\$config as element(configuration)})", "trigger":"admin:get-group-ids", "description":"($config as element(configuration))"}, {"content":"admin:get-forest-ids(${1:\\$config as element(configuration)})", "trigger":"admin:get-forest-ids", "description":"($config as element(configuration))"}, {"content":"admin:get-appserver-ids(${1:\\$config as element(configuration)})", "trigger":"admin:get-appserver-ids", "description":"($config as element(configuration))"}, {"content":"admin:get-configuration()", "trigger":"admin:get-configuration", "description":"()"}, {"content":"admin:save-configuration-without-restart(${1:\\$config as element(configuration)})", "trigger":"admin:save-configuration-without-restart", "description":"($config as element(configuration))"}, {"content":"admin:save-configuration(${1:\\$config as element(configuration)})", "trigger":"admin:save-configuration", "description":"($config as element(configuration))"}, {"content":"admin:restart-hosts(${1:\\$hosts as xs:unsignedLong*})", "trigger":"admin:restart-hosts", "description":"($hosts as xs:unsignedLong*)"}, {"content":"admin:database-delete(${1:\\$config as element(configuration)}, ${2:\\$database-ids as xs:unsignedLong*})", "trigger":"admin:database-delete", "description":"($config as element(configuration), $database-ids as xs:unsignedLong*)"}, {"content":"admin:database-create(${1:\\$config as element(configuration)}, ${2:\\$database-name as xs:string}, ${3:\\$security-db as xs:unsignedLong}, ${4:\\$schema-db as xs:unsignedLong})", "trigger":"admin:database-create", "description":"($config as element(configuration), $database-name as xs:string, $security-db as xs:unsignedLong, $schema-db as xs:unsignedLong)"}, {"content":"admin:database-copy(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$database-name as xs:string})", "trigger":"admin:database-copy", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $database-name as xs:string)"}, {"content":"admin:database-detach-forest(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$forest-id as xs:unsignedLong})", "trigger":"admin:database-detach-forest", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $forest-id as xs:unsignedLong)"}, {"content":"admin:database-attach-forest(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$forest-id as xs:unsignedLong})", "trigger":"admin:database-attach-forest", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $forest-id as xs:unsignedLong)"}, {"content":"admin:database-get-backups(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-backups", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-weekly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$days as xs:string+}, ${4:\\$start-time as xs:time}, ${5:\\$max-backups as xs:unsignedLong}, ${6:\\$backup-security-db as xs:boolean}, ${7:\\$backup-schemas-db as xs:boolean}, ${8:\\$backup-triggers-db as xs:boolean})", "trigger":"admin:database-weekly-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $days as xs:string+, $start-time as xs:time, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean)"}, {"content":"admin:database-weekly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$days as xs:string+}, ${4:\\$start-time as xs:time}, ${5:\\$max-backups as xs:unsignedLong}, ${6:\\$backup-security-db as xs:boolean}, ${7:\\$backup-schemas-db as xs:boolean}, ${8:\\$backup-triggers-db as xs:boolean}, ${9:\\$include-replicas as xs:boolean})", "trigger":"admin:database-weekly-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $days as xs:string+, $start-time as xs:time, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean)"}, {"content":"admin:database-weekly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$days as xs:string+}, ${4:\\$start-time as xs:time}, ${5:\\$max-backups as xs:unsignedLong}, ${6:\\$backup-security-db as xs:boolean}, ${7:\\$backup-schemas-db as xs:boolean}, ${8:\\$backup-triggers-db as xs:boolean}, ${9:\\$include-replicas as xs:boolean}, ${10:\\$journal-archiving as xs:boolean})", "trigger":"admin:database-weekly-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $days as xs:string+, $start-time as xs:time, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $journal-archiving as xs:boolean)"}, {"content":"admin:database-weekly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$days as xs:string+}, ${4:\\$start-time as xs:time}, ${5:\\$max-backups as xs:unsignedLong}, ${6:\\$backup-security-db as xs:boolean}, ${7:\\$backup-schemas-db as xs:boolean}, ${8:\\$backup-triggers-db as xs:boolean}, ${9:\\$include-replicas as xs:boolean}, ${10:\\$journal-archiving as xs:boolean}, ${11:\\$journal-archive-path as xs:string})", "trigger":"admin:database-weekly-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $days as xs:string+, $start-time as xs:time, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $journal-archiving as xs:boolean, $journal-archive-path as xs:string)"}, {"content":"admin:database-weekly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$days as xs:string+}, ${4:\\$start-time as xs:time}, ${5:\\$max-backups as xs:unsignedLong}, ${6:\\$backup-security-db as xs:boolean}, ${7:\\$backup-schemas-db as xs:boolean}, ${8:\\$backup-triggers-db as xs:boolean}, ${9:\\$include-replicas as xs:boolean}, ${10:\\$journal-archiving as xs:boolean}, ${11:\\$journal-archive-path as xs:string}, ${12:\\$lag-limit as xs:unsignedLong})", "trigger":"admin:database-weekly-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $days as xs:string+, $start-time as xs:time, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $journal-archiving as xs:boolean, $journal-archive-path as xs:string, $lag-limit as xs:unsignedLong)"}, {"content":"admin:database-weekly-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$days as xs:string+}, ${4:\\$start-time as xs:time}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean})", "trigger":"admin:database-weekly-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $days as xs:string+, $start-time as xs:time, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean)"}, {"content":"admin:database-weekly-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$days as xs:string+}, ${4:\\$start-time as xs:time}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean}, ${8:\\$include-replicas as xs:boolean})", "trigger":"admin:database-weekly-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $days as xs:string+, $start-time as xs:time, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean)"}, {"content":"admin:database-weekly-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$days as xs:string+}, ${4:\\$start-time as xs:time}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean}, ${8:\\$include-replicas as xs:boolean}, ${9:\\$incremental-dir as xs:string?})", "trigger":"admin:database-weekly-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $days as xs:string+, $start-time as xs:time, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?)"}, {"content":"admin:database-weekly-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$days as xs:string+}, ${4:\\$start-time as xs:time}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean}, ${8:\\$include-replicas as xs:boolean}, ${9:\\$incremental-dir as xs:string?}, ${10:\\$purge-journal-archive as xs:boolean?})", "trigger":"admin:database-weekly-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $days as xs:string+, $start-time as xs:time, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?, $purge-journal-archive as xs:boolean?)"}, {"content":"admin:database-weekly-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$days as xs:string+}, ${4:\\$start-time as xs:time}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean}, ${8:\\$include-replicas as xs:boolean}, ${9:\\$incremental-dir as xs:string?}, ${10:\\$purge-journal-archive as xs:boolean?}, ${11:\\$journal-archiving as xs:boolean})", "trigger":"admin:database-weekly-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $days as xs:string+, $start-time as xs:time, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?, $purge-journal-archive as xs:boolean?, $journal-archiving as xs:boolean)"}, {"content":"admin:database-weekly-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$days as xs:string+}, ${4:\\$start-time as xs:time}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean}, ${8:\\$include-replicas as xs:boolean}, ${9:\\$incremental-dir as xs:string?}, ${10:\\$purge-journal-archive as xs:boolean?}, ${11:\\$journal-archiving as xs:boolean}, ${12:\\$journal-archive-path as xs:string})", "trigger":"admin:database-weekly-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $days as xs:string+, $start-time as xs:time, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?, $purge-journal-archive as xs:boolean?, $journal-archiving as xs:boolean, $journal-archive-path as xs:string)"}, {"content":"admin:database-weekly-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$days as xs:string+}, ${4:\\$start-time as xs:time}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean}, ${8:\\$include-replicas as xs:boolean}, ${9:\\$incremental-dir as xs:string?}, ${10:\\$purge-journal-archive as xs:boolean?}, ${11:\\$journal-archiving as xs:boolean}, ${12:\\$journal-archive-path as xs:string}, ${13:\\$lag-limit as xs:unsignedLong})", "trigger":"admin:database-weekly-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $days as xs:string+, $start-time as xs:time, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?, $purge-journal-archive as xs:boolean?, $journal-archiving as xs:boolean, $journal-archive-path as xs:string, $lag-limit as xs:unsignedLong)"}, {"content":"admin:database-monthly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$backup-month-day as xs:unsignedLong}, ${4:\\$start-time as xs:time}, ${5:\\$max-backups as xs:unsignedLong}, ${6:\\$backup-security-db as xs:boolean}, ${7:\\$backup-schemas-db as xs:boolean}, ${8:\\$backup-triggers-db as xs:boolean})", "trigger":"admin:database-monthly-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $backup-month-day as xs:unsignedLong, $start-time as xs:time, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean)"}, {"content":"admin:database-monthly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$backup-month-day as xs:unsignedLong}, ${4:\\$start-time as xs:time}, ${5:\\$max-backups as xs:unsignedLong}, ${6:\\$backup-security-db as xs:boolean}, ${7:\\$backup-schemas-db as xs:boolean}, ${8:\\$backup-triggers-db as xs:boolean}, ${9:\\$include-replicas as xs:boolean})", "trigger":"admin:database-monthly-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $backup-month-day as xs:unsignedLong, $start-time as xs:time, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean)"}, {"content":"admin:database-monthly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$backup-month-day as xs:unsignedLong}, ${4:\\$start-time as xs:time}, ${5:\\$max-backups as xs:unsignedLong}, ${6:\\$backup-security-db as xs:boolean}, ${7:\\$backup-schemas-db as xs:boolean}, ${8:\\$backup-triggers-db as xs:boolean}, ${9:\\$include-replicas as xs:boolean}, ${10:\\$journal-archiving as xs:boolean?})", "trigger":"admin:database-monthly-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $backup-month-day as xs:unsignedLong, $start-time as xs:time, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $journal-archiving as xs:boolean?)"}, {"content":"admin:database-monthly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$backup-month-day as xs:unsignedLong}, ${4:\\$start-time as xs:time}, ${5:\\$max-backups as xs:unsignedLong}, ${6:\\$backup-security-db as xs:boolean}, ${7:\\$backup-schemas-db as xs:boolean}, ${8:\\$backup-triggers-db as xs:boolean}, ${9:\\$include-replicas as xs:boolean}, ${10:\\$journal-archiving as xs:boolean?}, ${11:\\$journal-archive-path as xs:string?})", "trigger":"admin:database-monthly-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $backup-month-day as xs:unsignedLong, $start-time as xs:time, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?)"}, {"content":"admin:database-monthly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$backup-month-day as xs:unsignedLong}, ${4:\\$start-time as xs:time}, ${5:\\$max-backups as xs:unsignedLong}, ${6:\\$backup-security-db as xs:boolean}, ${7:\\$backup-schemas-db as xs:boolean}, ${8:\\$backup-triggers-db as xs:boolean}, ${9:\\$include-replicas as xs:boolean}, ${10:\\$journal-archiving as xs:boolean?}, ${11:\\$journal-archive-path as xs:string?}, ${12:\\$lag-limit as xs:unsignedLong?})", "trigger":"admin:database-monthly-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $backup-month-day as xs:unsignedLong, $start-time as xs:time, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?, $lag-limit as xs:unsignedLong?)"}, {"content":"admin:database-monthly-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$backup-month-day as xs:unsignedLong}, ${4:\\$start-time as xs:time}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean})", "trigger":"admin:database-monthly-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $backup-month-day as xs:unsignedLong, $start-time as xs:time, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean)"}, {"content":"admin:database-monthly-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$backup-month-day as xs:unsignedLong}, ${4:\\$start-time as xs:time}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean}, ${8:\\$include-replicas as xs:boolean})", "trigger":"admin:database-monthly-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $backup-month-day as xs:unsignedLong, $start-time as xs:time, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean)"}, {"content":"admin:database-monthly-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$backup-month-day as xs:unsignedLong}, ${4:\\$start-time as xs:time}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean}, ${8:\\$include-replicas as xs:boolean}, ${9:\\$incremental-dir as xs:string?})", "trigger":"admin:database-monthly-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $backup-month-day as xs:unsignedLong, $start-time as xs:time, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?)"}, {"content":"admin:database-monthly-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$backup-month-day as xs:unsignedLong}, ${4:\\$start-time as xs:time}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean}, ${8:\\$include-replicas as xs:boolean}, ${9:\\$incremental-dir as xs:string?}, ${10:\\$purge-journal-archive as xs:boolean?})", "trigger":"admin:database-monthly-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $backup-month-day as xs:unsignedLong, $start-time as xs:time, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?, $purge-journal-archive as xs:boolean?)"}, {"content":"admin:database-monthly-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$backup-month-day as xs:unsignedLong}, ${4:\\$start-time as xs:time}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean}, ${8:\\$include-replicas as xs:boolean}, ${9:\\$incremental-dir as xs:string?}, ${10:\\$purge-journal-archive as xs:boolean?}, ${11:\\$journal-archiving as xs:boolean?})", "trigger":"admin:database-monthly-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $backup-month-day as xs:unsignedLong, $start-time as xs:time, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?, $purge-journal-archive as xs:boolean?, $journal-archiving as xs:boolean?)"}, {"content":"admin:database-monthly-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$backup-month-day as xs:unsignedLong}, ${4:\\$start-time as xs:time}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean}, ${8:\\$include-replicas as xs:boolean}, ${9:\\$incremental-dir as xs:string?}, ${10:\\$purge-journal-archive as xs:boolean?}, ${11:\\$journal-archiving as xs:boolean?}, ${12:\\$journal-archive-path as xs:string?})", "trigger":"admin:database-monthly-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $backup-month-day as xs:unsignedLong, $start-time as xs:time, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?, $purge-journal-archive as xs:boolean?, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?)"}, {"content":"admin:database-monthly-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$backup-month-day as xs:unsignedLong}, ${4:\\$start-time as xs:time}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean}, ${8:\\$include-replicas as xs:boolean}, ${9:\\$incremental-dir as xs:string?}, ${10:\\$purge-journal-archive as xs:boolean?}, ${11:\\$journal-archiving as xs:boolean?}, ${12:\\$journal-archive-path as xs:string?}, ${13:\\$lag-limit as xs:unsignedLong?})", "trigger":"admin:database-monthly-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $backup-month-day as xs:unsignedLong, $start-time as xs:time, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?, $purge-journal-archive as xs:boolean?, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?, $lag-limit as xs:unsignedLong?)"}, {"content":"admin:database-one-time-backup(${1:\\$backup-dir as xs:string}, ${2:\\$start as xs:dateTime}, ${3:\\$max-backups as xs:unsignedLong}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean})", "trigger":"admin:database-one-time-backup", "description":"($backup-dir as xs:string, $start as xs:dateTime, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean)"}, {"content":"admin:database-one-time-backup(${1:\\$backup-dir as xs:string}, ${2:\\$start as xs:dateTime}, ${3:\\$max-backups as xs:unsignedLong}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean}, ${7:\\$include-replicas as xs:boolean})", "trigger":"admin:database-one-time-backup", "description":"($backup-dir as xs:string, $start as xs:dateTime, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean)"}, {"content":"admin:database-one-time-backup(${1:\\$backup-dir as xs:string}, ${2:\\$start as xs:dateTime}, ${3:\\$max-backups as xs:unsignedLong}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean}, ${7:\\$include-replicas as xs:boolean}, ${8:\\$journal-archiving as xs:boolean?})", "trigger":"admin:database-one-time-backup", "description":"($backup-dir as xs:string, $start as xs:dateTime, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $journal-archiving as xs:boolean?)"}, {"content":"admin:database-one-time-backup(${1:\\$backup-dir as xs:string}, ${2:\\$start as xs:dateTime}, ${3:\\$max-backups as xs:unsignedLong}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean}, ${7:\\$include-replicas as xs:boolean}, ${8:\\$journal-archiving as xs:boolean?}, ${9:\\$journal-archive-path as xs:string?})", "trigger":"admin:database-one-time-backup", "description":"($backup-dir as xs:string, $start as xs:dateTime, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?)"}, {"content":"admin:database-one-time-backup(${1:\\$backup-dir as xs:string}, ${2:\\$start as xs:dateTime}, ${3:\\$max-backups as xs:unsignedLong}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean}, ${7:\\$include-replicas as xs:boolean}, ${8:\\$journal-archiving as xs:boolean?}, ${9:\\$journal-archive-path as xs:string?}, ${10:\\$lag-limit as xs:unsignedLong?})", "trigger":"admin:database-one-time-backup", "description":"($backup-dir as xs:string, $start as xs:dateTime, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?, $lag-limit as xs:unsignedLong?)"}, {"content":"admin:database-one-time-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$start as xs:dateTime}, ${3:\\$backup-security-db as xs:boolean}, ${4:\\$backup-schemas-db as xs:boolean}, ${5:\\$backup-triggers-db as xs:boolean})", "trigger":"admin:database-one-time-incremental-backup", "description":"($backup-dir as xs:string, $start as xs:dateTime, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean)"}, {"content":"admin:database-one-time-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$start as xs:dateTime}, ${3:\\$backup-security-db as xs:boolean}, ${4:\\$backup-schemas-db as xs:boolean}, ${5:\\$backup-triggers-db as xs:boolean}, ${6:\\$include-replicas as xs:boolean})", "trigger":"admin:database-one-time-incremental-backup", "description":"($backup-dir as xs:string, $start as xs:dateTime, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean)"}, {"content":"admin:database-one-time-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$start as xs:dateTime}, ${3:\\$backup-security-db as xs:boolean}, ${4:\\$backup-schemas-db as xs:boolean}, ${5:\\$backup-triggers-db as xs:boolean}, ${6:\\$include-replicas as xs:boolean}, ${7:\\$incremental-dir as xs:string?})", "trigger":"admin:database-one-time-incremental-backup", "description":"($backup-dir as xs:string, $start as xs:dateTime, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?)"}, {"content":"admin:database-one-time-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$start as xs:dateTime}, ${3:\\$backup-security-db as xs:boolean}, ${4:\\$backup-schemas-db as xs:boolean}, ${5:\\$backup-triggers-db as xs:boolean}, ${6:\\$include-replicas as xs:boolean}, ${7:\\$incremental-dir as xs:string?}, ${8:\\$purge-journal-archive as xs:boolean?})", "trigger":"admin:database-one-time-incremental-backup", "description":"($backup-dir as xs:string, $start as xs:dateTime, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?, $purge-journal-archive as xs:boolean?)"}, {"content":"admin:database-one-time-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$start as xs:dateTime}, ${3:\\$backup-security-db as xs:boolean}, ${4:\\$backup-schemas-db as xs:boolean}, ${5:\\$backup-triggers-db as xs:boolean}, ${6:\\$include-replicas as xs:boolean}, ${7:\\$incremental-dir as xs:string?}, ${8:\\$purge-journal-archive as xs:boolean?}, ${9:\\$journal-archiving as xs:boolean?})", "trigger":"admin:database-one-time-incremental-backup", "description":"($backup-dir as xs:string, $start as xs:dateTime, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?, $purge-journal-archive as xs:boolean?, $journal-archiving as xs:boolean?)"}, {"content":"admin:database-one-time-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$start as xs:dateTime}, ${3:\\$backup-security-db as xs:boolean}, ${4:\\$backup-schemas-db as xs:boolean}, ${5:\\$backup-triggers-db as xs:boolean}, ${6:\\$include-replicas as xs:boolean}, ${7:\\$incremental-dir as xs:string?}, ${8:\\$purge-journal-archive as xs:boolean?}, ${9:\\$journal-archiving as xs:boolean?}, ${10:\\$journal-archive-path as xs:string?})", "trigger":"admin:database-one-time-incremental-backup", "description":"($backup-dir as xs:string, $start as xs:dateTime, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?, $purge-journal-archive as xs:boolean?, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?)"}, {"content":"admin:database-one-time-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$start as xs:dateTime}, ${3:\\$backup-security-db as xs:boolean}, ${4:\\$backup-schemas-db as xs:boolean}, ${5:\\$backup-triggers-db as xs:boolean}, ${6:\\$include-replicas as xs:boolean}, ${7:\\$incremental-dir as xs:string?}, ${8:\\$purge-journal-archive as xs:boolean?}, ${9:\\$journal-archiving as xs:boolean?}, ${10:\\$journal-archive-path as xs:string?}, ${11:\\$lag-limit as xs:unsignedLong?})", "trigger":"admin:database-one-time-incremental-backup", "description":"($backup-dir as xs:string, $start as xs:dateTime, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?, $purge-journal-archive as xs:boolean?, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?, $lag-limit as xs:unsignedLong?)"}, {"content":"admin:database-add-backup(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$backups as element(db:database-backup)*})", "trigger":"admin:database-add-backup", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $backups as element(db:database-backup)*)"}, {"content":"admin:database-delete-backup(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$backups as element(db:database-backup)*})", "trigger":"admin:database-delete-backup", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $backups as element(db:database-backup)*)"}, {"content":"admin:database-get-merge-blackouts(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-merge-blackouts", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-recurring-merge-blackout(${1:\\$limit as xs:unsignedInt}, ${2:\\$merge-priority as xs:string}, ${3:\\$days as xs:string+}, ${4:\\$start-time as xs:time?}, ${5:\\$end-time as xs:time?}, ${6:\\$duration as xs:duration?})", "trigger":"admin:database-recurring-merge-blackout", "description":"($limit as xs:unsignedInt, $merge-priority as xs:string, $days as xs:string+, $start-time as xs:time?, $end-time as xs:time?, $duration as xs:duration?)"}, {"content":"admin:database-one-time-merge-blackout(${1:\\$limit as xs:unsignedInt}, ${2:\\$merge-priority as xs:string}, ${3:\\$start as xs:dateTime}, ${4:\\$end as xs:dateTime?}, ${5:\\$duration as xs:duration?})", "trigger":"admin:database-one-time-merge-blackout", "description":"($limit as xs:unsignedInt, $merge-priority as xs:string, $start as xs:dateTime, $end as xs:dateTime?, $duration as xs:duration?)"}, {"content":"admin:database-add-merge-blackout(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$merge-blackouts as element(db:merge-blackout)*})", "trigger":"admin:database-add-merge-blackout", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $merge-blackouts as element(db:merge-blackout)*)"}, {"content":"admin:database-delete-merge-blackout(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$blackouts as element(db:merge-blackout)*})", "trigger":"admin:database-delete-merge-blackout", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $blackouts as element(db:merge-blackout)*)"}, {"content":"admin:database-get-fragment-roots(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-fragment-roots", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-fragment-root(${1:\\$namespace as xs:string?}, ${2:\\$localname as xs:string})", "trigger":"admin:database-fragment-root", "description":"($namespace as xs:string?, $localname as xs:string)"}, {"content":"admin:database-add-fragment-root(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$fragment-roots as element(db:fragment-root)*})", "trigger":"admin:database-add-fragment-root", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $fragment-roots as element(db:fragment-root)*)"}, {"content":"admin:database-delete-fragment-root(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$fragment-roots as element(db:fragment-root)*})", "trigger":"admin:database-delete-fragment-root", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $fragment-roots as element(db:fragment-root)*)"}, {"content":"admin:database-get-fragment-parents(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-fragment-parents", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-fragment-parent(${1:\\$namespace as xs:string?}, ${2:\\$localname as xs:string})", "trigger":"admin:database-fragment-parent", "description":"($namespace as xs:string?, $localname as xs:string)"}, {"content":"admin:database-add-fragment-parent(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$fragment-parents as element(db:fragment-parent)*})", "trigger":"admin:database-add-fragment-parent", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $fragment-parents as element(db:fragment-parent)*)"}, {"content":"admin:database-delete-fragment-parent(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$fragment-parents as element(db:fragment-parent)*})", "trigger":"admin:database-delete-fragment-parent", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $fragment-parents as element(db:fragment-parent)*)"}, {"content":"admin:database-range-element-index(${1:\\$scalar-type as xs:string}, ${2:\\$namespace as xs:string?}, ${3:\\$localname as xs:string}, ${4:\\$collation as xs:string?}, ${5:\\$range-value-positions as xs:boolean})", "trigger":"admin:database-range-element-index", "description":"($scalar-type as xs:string, $namespace as xs:string?, $localname as xs:string, $collation as xs:string?, $range-value-positions as xs:boolean)"}, {"content":"admin:database-range-element-index(${1:\\$scalar-type as xs:string}, ${2:\\$namespace as xs:string?}, ${3:\\$localname as xs:string}, ${4:\\$collation as xs:string?}, ${5:\\$range-value-positions as xs:boolean}, ${6:\\$invalid-values as xs:string})", "trigger":"admin:database-range-element-index", "description":"($scalar-type as xs:string, $namespace as xs:string?, $localname as xs:string, $collation as xs:string?, $range-value-positions as xs:boolean, $invalid-values as xs:string)"}, {"content":"admin:database-range-field-index(${1:\\$scalar-type as xs:string}, ${2:\\$fieldname as xs:string}, ${3:\\$collation as xs:string?}, ${4:\\$range-value-positions as xs:boolean})", "trigger":"admin:database-range-field-index", "description":"($scalar-type as xs:string, $fieldname as xs:string, $collation as xs:string?, $range-value-positions as xs:boolean)"}, {"content":"admin:database-range-field-index(${1:\\$scalar-type as xs:string}, ${2:\\$fieldname as xs:string}, ${3:\\$collation as xs:string?}, ${4:\\$range-value-positions as xs:boolean}, ${5:\\$invalid-values as xs:string})", "trigger":"admin:database-range-field-index", "description":"($scalar-type as xs:string, $fieldname as xs:string, $collation as xs:string?, $range-value-positions as xs:boolean, $invalid-values as xs:string)"}, {"content":"admin:database-get-range-element-indexes(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-range-element-indexes", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-range-field-indexes(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-range-field-indexes", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-add-range-element-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$range-indexes as element(db:range-element-index)*})", "trigger":"admin:database-add-range-element-index", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $range-indexes as element(db:range-element-index)*)"}, {"content":"admin:database-add-range-field-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$range-indexes as element(db:range-field-index)*})", "trigger":"admin:database-add-range-field-index", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $range-indexes as element(db:range-field-index)*)"}, {"content":"admin:database-delete-range-element-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$range-indexes as element(db:range-element-index)*})", "trigger":"admin:database-delete-range-element-index", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $range-indexes as element(db:range-element-index)*)"}, {"content":"admin:database-delete-range-field-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$range-indexes as element(db:range-field-index)*})", "trigger":"admin:database-delete-range-field-index", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $range-indexes as element(db:range-field-index)*)"}, {"content":"admin:database-delete-all-range-field-indexes(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$fieldnames as xs:string*})", "trigger":"admin:database-delete-all-range-field-indexes", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $fieldnames as xs:string*)"}, {"content":"admin:database-get-range-element-attribute-indexes(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-range-element-attribute-indexes", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-range-element-attribute-index(${1:\\$scalar-type as xs:string}, ${2:\\$parent-namespace as xs:string?}, ${3:\\$parent-localname as xs:string}, ${4:\\$namespace as xs:string?}, ${5:\\$localname as xs:string}, ${6:\\$collation as xs:string?}, ${7:\\$range-value-positions as xs:boolean})", "trigger":"admin:database-range-element-attribute-index", "description":"($scalar-type as xs:string, $parent-namespace as xs:string?, $parent-localname as xs:string, $namespace as xs:string?, $localname as xs:string, $collation as xs:string?, $range-value-positions as xs:boolean)"}, {"content":"admin:database-range-element-attribute-index(${1:\\$scalar-type as xs:string}, ${2:\\$parent-namespace as xs:string?}, ${3:\\$parent-localname as xs:string}, ${4:\\$namespace as xs:string?}, ${5:\\$localname as xs:string}, ${6:\\$collation as xs:string?}, ${7:\\$range-value-positions as xs:boolean}, ${8:\\$invalid-values as xs:string})", "trigger":"admin:database-range-element-attribute-index", "description":"($scalar-type as xs:string, $parent-namespace as xs:string?, $parent-localname as xs:string, $namespace as xs:string?, $localname as xs:string, $collation as xs:string?, $range-value-positions as xs:boolean, $invalid-values as xs:string)"}, {"content":"admin:database-add-range-element-attribute-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$attribute-indexes as element(db:range-element-attribute-index)*})", "trigger":"admin:database-add-range-element-attribute-index", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $attribute-indexes as element(db:range-element-attribute-index)*)"}, {"content":"admin:database-delete-range-element-attribute-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$attribute-indexes as element(db:range-element-attribute-index)*})", "trigger":"admin:database-delete-range-element-attribute-index", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $attribute-indexes as element(db:range-element-attribute-index)*)"}, {"content":"admin:database-element-word-lexicon(${1:\\$namespace as xs:string?}, ${2:\\$localname as xs:string}, ${3:\\$collation as xs:string})", "trigger":"admin:database-element-word-lexicon", "description":"($namespace as xs:string?, $localname as xs:string, $collation as xs:string)"}, {"content":"admin:database-get-element-word-lexicons(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-element-word-lexicons", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-add-element-word-lexicon(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$element-word-lexicons as element(db:element-word-lexicon)*})", "trigger":"admin:database-add-element-word-lexicon", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $element-word-lexicons as element(db:element-word-lexicon)*)"}, {"content":"admin:database-delete-element-word-lexicon(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$element-word-lexicons as element(db:element-word-lexicon)*})", "trigger":"admin:database-delete-element-word-lexicon", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $element-word-lexicons as element(db:element-word-lexicon)*)"}, {"content":"admin:database-element-attribute-word-lexicon(${1:\\$parent-namespace as xs:string?}, ${2:\\$parent-localname as xs:string}, ${3:\\$namespace as xs:string?}, ${4:\\$localname as xs:string}, ${5:\\$collation as xs:string})", "trigger":"admin:database-element-attribute-word-lexicon", "description":"($parent-namespace as xs:string?, $parent-localname as xs:string, $namespace as xs:string?, $localname as xs:string, $collation as xs:string)"}, {"content":"admin:database-get-element-attribute-word-lexicons(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-element-attribute-word-lexicons", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-add-element-attribute-word-lexicon(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$element-attribute-word-lexicons as element(db:element-attribute-word-lexicon)*})", "trigger":"admin:database-add-element-attribute-word-lexicon", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $element-attribute-word-lexicons as element(db:element-attribute-word-lexicon)*)"}, {"content":"admin:database-delete-element-attribute-word-lexicon(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$lexicons as element(db:element-attribute-word-lexicon)*})", "trigger":"admin:database-delete-element-attribute-word-lexicon", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $lexicons as element(db:element-attribute-word-lexicon)*)"}, {"content":"admin:database-phrase-through(${1:\\$namespace as xs:string?}, ${2:\\$localname as xs:string})", "trigger":"admin:database-phrase-through", "description":"($namespace as xs:string?, $localname as xs:string)"}, {"content":"admin:database-get-phrase-throughs(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-phrase-throughs", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-add-phrase-through(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$phrase-throughs as element(db:phrase-through)*})", "trigger":"admin:database-add-phrase-through", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $phrase-throughs as element(db:phrase-through)*)"}, {"content":"admin:database-delete-phrase-through(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$phrase-throughs as element(db:phrase-through)*})", "trigger":"admin:database-delete-phrase-through", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $phrase-throughs as element(db:phrase-through)*)"}, {"content":"admin:database-phrase-around(${1:\\$namespace as xs:string?}, ${2:\\$localname as xs:string})", "trigger":"admin:database-phrase-around", "description":"($namespace as xs:string?, $localname as xs:string)"}, {"content":"admin:database-get-phrase-arounds(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-phrase-arounds", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-add-phrase-around(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$phrase-arounds as element(db:phrase-around)*})", "trigger":"admin:database-add-phrase-around", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $phrase-arounds as element(db:phrase-around)*)"}, {"content":"admin:database-delete-phrase-around(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$phrase-arounds as element(db:phrase-around)*})", "trigger":"admin:database-delete-phrase-around", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $phrase-arounds as element(db:phrase-around)*)"}, {"content":"admin:database-element-word-query-through(${1:\\$namespace as xs:string?}, ${2:\\$localname as xs:string})", "trigger":"admin:database-element-word-query-through", "description":"($namespace as xs:string?, $localname as xs:string)"}, {"content":"admin:database-get-element-word-query-throughs(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-element-word-query-throughs", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-add-element-word-query-through(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$element-word-query-throughs as element(db:element-word-query-through)*})", "trigger":"admin:database-add-element-word-query-through", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $element-word-query-throughs as element(db:element-word-query-through)*)"}, {"content":"admin:database-delete-element-word-query-through(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$throughs as element(db:element-word-query-through)*})", "trigger":"admin:database-delete-element-word-query-through", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $throughs as element(db:element-word-query-through)*)"}, {"content":"admin:database-word-lexicon(${1:\\$collation as xs:string})", "trigger":"admin:database-word-lexicon", "description":"($collation as xs:string)"}, {"content":"admin:database-get-word-lexicons(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-word-lexicons", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-add-word-lexicon(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$word-lexicons as element(db:word-lexicon)*})", "trigger":"admin:database-add-word-lexicon", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $word-lexicons as element(db:word-lexicon)*)"}, {"content":"admin:database-delete-word-lexicon(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$word-lexicons as element(db:word-lexicon)*})", "trigger":"admin:database-delete-word-lexicon", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $word-lexicons as element(db:word-lexicon)*)"}, {"content":"admin:database-geospatial-element-index(${1:\\$namespace as xs:string?}, ${2:\\$localname as xs:string}, ${3:\\$coordinate-system as xs:string}, ${4:\\$range-value-positions as xs:boolean})", "trigger":"admin:database-geospatial-element-index", "description":"($namespace as xs:string?, $localname as xs:string, $coordinate-system as xs:string, $range-value-positions as xs:boolean)"}, {"content":"admin:database-geospatial-element-index(${1:\\$namespace as xs:string?}, ${2:\\$localname as xs:string}, ${3:\\$coordinate-system as xs:string}, ${4:\\$range-value-positions as xs:boolean}, ${5:\\$point-format as xs:string})", "trigger":"admin:database-geospatial-element-index", "description":"($namespace as xs:string?, $localname as xs:string, $coordinate-system as xs:string, $range-value-positions as xs:boolean, $point-format as xs:string)"}, {"content":"admin:database-geospatial-element-index(${1:\\$namespace as xs:string?}, ${2:\\$localname as xs:string}, ${3:\\$coordinate-system as xs:string}, ${4:\\$range-value-positions as xs:boolean}, ${5:\\$point-format as xs:string}, ${6:\\$invalid-values as xs:string})", "trigger":"admin:database-geospatial-element-index", "description":"($namespace as xs:string?, $localname as xs:string, $coordinate-system as xs:string, $range-value-positions as xs:boolean, $point-format as xs:string, $invalid-values as xs:string)"}, {"content":"admin:database-get-geospatial-element-indexes(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-geospatial-element-indexes", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-add-geospatial-element-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$geospatial-element-indexes as element(db:geospatial-element-index)*})", "trigger":"admin:database-add-geospatial-element-index", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $geospatial-element-indexes as element(db:geospatial-element-index)*)"}, {"content":"admin:database-delete-geospatial-element-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$geospatial-element-indexes as element(db:geospatial-element-index)*})", "trigger":"admin:database-delete-geospatial-element-index", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $geospatial-element-indexes as element(db:geospatial-element-index)*)"}, {"content":"admin:database-geospatial-element-child-index(${1:\\$parent-namespace as xs:string?}, ${2:\\$parent-localname as xs:string}, ${3:\\$namespace as xs:string?}, ${4:\\$localname as xs:string}, ${5:\\$coordinate-system as xs:string}, ${6:\\$range-value-positions as xs:boolean})", "trigger":"admin:database-geospatial-element-child-index", "description":"($parent-namespace as xs:string?, $parent-localname as xs:string, $namespace as xs:string?, $localname as xs:string, $coordinate-system as xs:string, $range-value-positions as xs:boolean)"}, {"content":"admin:database-geospatial-element-child-index(${1:\\$parent-namespace as xs:string?}, ${2:\\$parent-localname as xs:string}, ${3:\\$namespace as xs:string?}, ${4:\\$localname as xs:string}, ${5:\\$coordinate-system as xs:string}, ${6:\\$range-value-positions as xs:boolean}, ${7:\\$point-format as xs:string})", "trigger":"admin:database-geospatial-element-child-index", "description":"($parent-namespace as xs:string?, $parent-localname as xs:string, $namespace as xs:string?, $localname as xs:string, $coordinate-system as xs:string, $range-value-positions as xs:boolean, $point-format as xs:string)"}, {"content":"admin:database-geospatial-element-child-index(${1:\\$parent-namespace as xs:string?}, ${2:\\$parent-localname as xs:string}, ${3:\\$namespace as xs:string?}, ${4:\\$localname as xs:string}, ${5:\\$coordinate-system as xs:string}, ${6:\\$range-value-positions as xs:boolean}, ${7:\\$point-format as xs:string}, ${8:\\$invalid-values as xs:string})", "trigger":"admin:database-geospatial-element-child-index", "description":"($parent-namespace as xs:string?, $parent-localname as xs:string, $namespace as xs:string?, $localname as xs:string, $coordinate-system as xs:string, $range-value-positions as xs:boolean, $point-format as xs:string, $invalid-values as xs:string)"}, {"content":"admin:database-get-geospatial-element-child-indexes(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-geospatial-element-child-indexes", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-add-geospatial-element-child-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$geospatial-element-child-indexes as element(db:geospatial-element-child-index)*})", "trigger":"admin:database-add-geospatial-element-child-index", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $geospatial-element-child-indexes as element(db:geospatial-element-child-index)*)"}, {"content":"admin:database-delete-geospatial-element-child-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$geospatial-element-child-indexes as element(db:geospatial-element-child-index)*})", "trigger":"admin:database-delete-geospatial-element-child-index", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $geospatial-element-child-indexes as element(db:geospatial-element-child-index)*)"}, {"content":"admin:database-geospatial-element-pair-index(${1:\\$parent-namespace as xs:string?}, ${2:\\$parent-localname as xs:string}, ${3:\\$latitude-namespace as xs:string?}, ${4:\\$latitude-localname as xs:string}, ${5:\\$longitude-namespace as xs:string?}, ${6:\\$longitude-localname as xs:string}, ${7:\\$coordinate-system as xs:string}, ${8:\\$range-value-positions as xs:boolean})", "trigger":"admin:database-geospatial-element-pair-index", "description":"($parent-namespace as xs:string?, $parent-localname as xs:string, $latitude-namespace as xs:string?, $latitude-localname as xs:string, $longitude-namespace as xs:string?, $longitude-localname as xs:string, $coordinate-system as xs:string, $range-value-positions as xs:boolean)"}, {"content":"admin:database-geospatial-element-pair-index(${1:\\$parent-namespace as xs:string?}, ${2:\\$parent-localname as xs:string}, ${3:\\$latitude-namespace as xs:string?}, ${4:\\$latitude-localname as xs:string}, ${5:\\$longitude-namespace as xs:string?}, ${6:\\$longitude-localname as xs:string}, ${7:\\$coordinate-system as xs:string}, ${8:\\$range-value-positions as xs:boolean}, ${9:\\$invalid-values as xs:string})", "trigger":"admin:database-geospatial-element-pair-index", "description":"($parent-namespace as xs:string?, $parent-localname as xs:string, $latitude-namespace as xs:string?, $latitude-localname as xs:string, $longitude-namespace as xs:string?, $longitude-localname as xs:string, $coordinate-system as xs:string, $range-value-positions as xs:boolean, $invalid-values as xs:string)"}, {"content":"admin:database-get-geospatial-element-pair-indexes(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-geospatial-element-pair-indexes", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-add-geospatial-element-pair-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$geospatial-element-pair-indexes as element(db:geospatial-element-pair-index)*})", "trigger":"admin:database-add-geospatial-element-pair-index", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $geospatial-element-pair-indexes as element(db:geospatial-element-pair-index)*)"}, {"content":"admin:database-delete-geospatial-element-pair-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$geospatial-element-pair-indexes as element(db:geospatial-element-pair-index)*})", "trigger":"admin:database-delete-geospatial-element-pair-index", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $geospatial-element-pair-indexes as element(db:geospatial-element-pair-index)*)"}, {"content":"admin:database-geospatial-element-attribute-pair-index(${1:\\$parent-namespace as xs:string?}, ${2:\\$parent-localname as xs:string}, ${3:\\$latitude-namespace as xs:string?}, ${4:\\$latitude-localname as xs:string}, ${5:\\$longitude-namespace as xs:string?}, ${6:\\$longitude-localname as xs:string}, ${7:\\$coordinate-system as xs:string}, ${8:\\$range-value-positions as xs:boolean})", "trigger":"admin:database-geospatial-element-attribute-pair-index", "description":"($parent-namespace as xs:string?, $parent-localname as xs:string, $latitude-namespace as xs:string?, $latitude-localname as xs:string, $longitude-namespace as xs:string?, $longitude-localname as xs:string, $coordinate-system as xs:string, $range-value-positions as xs:boolean)"}, {"content":"admin:database-geospatial-element-attribute-pair-index(${1:\\$parent-namespace as xs:string?}, ${2:\\$parent-localname as xs:string}, ${3:\\$latitude-namespace as xs:string?}, ${4:\\$latitude-localname as xs:string}, ${5:\\$longitude-namespace as xs:string?}, ${6:\\$longitude-localname as xs:string}, ${7:\\$coordinate-system as xs:string}, ${8:\\$range-value-positions as xs:boolean}, ${9:\\$invalid-values as xs:string})", "trigger":"admin:database-geospatial-element-attribute-pair-index", "description":"($parent-namespace as xs:string?, $parent-localname as xs:string, $latitude-namespace as xs:string?, $latitude-localname as xs:string, $longitude-namespace as xs:string?, $longitude-localname as xs:string, $coordinate-system as xs:string, $range-value-positions as xs:boolean, $invalid-values as xs:string)"}, {"content":"admin:database-get-geospatial-element-attribute-pair-indexes(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-geospatial-element-attribute-pair-indexes", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-add-geospatial-element-attribute-pair-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$geospatial-element-attribute-pair-indexes as element(db:geospatial-element-attribute-pair-index)*})", "trigger":"admin:database-add-geospatial-element-attribute-pair-index", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $geospatial-element-attribute-pair-indexes as element(db:geospatial-element-attribute-pair-index)*)"}, {"content":"admin:database-delete-geospatial-element-attribute-pair-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$indexes as element(db:geospatial-element-attribute-pair-index)*})", "trigger":"admin:database-delete-geospatial-element-attribute-pair-index", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $indexes as element(db:geospatial-element-attribute-pair-index)*)"}, {"content":"admin:database-geospatial-region-path-index(${1:\\$pathexpr as xs:string}, ${2:\\$coordinate-system as xs:string}, ${3:\\$geohash-precision as xs:integer}, ${4:\\$invalid-values as xs:string})", "trigger":"admin:database-geospatial-region-path-index", "description":"($pathexpr as xs:string, $coordinate-system as xs:string, $geohash-precision as xs:integer, $invalid-values as xs:string)"}, {"content":"admin:database-add-geospatial-region-path-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$geospatial-region-path-indexes as element(db:geospatial-region-path-index)*})", "trigger":"admin:database-add-geospatial-region-path-index", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $geospatial-region-path-indexes as element(db:geospatial-region-path-index)*)"}, {"content":"admin:database-delete-geospatial-region-path-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$geospatial-region-path-indexes as element(db:geospatial-region-path-index)*})", "trigger":"admin:database-delete-geospatial-region-path-index", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $geospatial-region-path-indexes as element(db:geospatial-region-path-index)*)"}, {"content":"admin:database-get-geospatial-region-path-indexes(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-geospatial-region-path-indexes", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-set-name(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:database-set-name", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:database-set-enabled(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-enabled", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-security-database(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedLong})", "trigger":"admin:database-set-security-database", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:unsignedLong)"}, {"content":"admin:database-set-schema-database(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedLong})", "trigger":"admin:database-set-schema-database", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:unsignedLong)"}, {"content":"admin:database-set-triggers-database(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedLong})", "trigger":"admin:database-set-triggers-database", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:unsignedLong)"}, {"content":"admin:database-set-language(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:database-set-language", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:database-set-stemmed-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:database-set-stemmed-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:database-set-word-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-word-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-word-positions", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-fast-phrase-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-fast-phrase-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-fast-case-sensitive-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-fast-case-sensitive-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-fast-reverse-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-fast-reverse-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-fast-diacritic-sensitive-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-fast-diacritic-sensitive-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-fast-element-word-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-fast-element-word-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-element-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-element-word-positions", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-fast-element-phrase-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-fast-element-phrase-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-element-value-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-element-value-positions", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-attribute-value-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-attribute-value-positions", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-trailing-wildcard-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-trailing-wildcard-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-trailing-wildcard-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-trailing-wildcard-word-positions", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-fast-element-trailing-wildcard-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-fast-element-trailing-wildcard-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-three-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-three-character-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-three-character-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-three-character-word-positions", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-two-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-two-character-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-one-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-one-character-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-fast-element-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-fast-element-character-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-uri-lexicon(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-uri-lexicon", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-collection-lexicon(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-collection-lexicon", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-reindexer-enable(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-reindexer-enable", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-maintain-last-modified(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-maintain-last-modified", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-maintain-directory-last-modified(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-maintain-directory-last-modified", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-inherit-permissions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-inherit-permissions", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-inherit-collections(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-inherit-collections", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-inherit-quality(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-inherit-quality", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-preallocate-journals(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-preallocate-journals", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-preload-mapped-data(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-preload-mapped-data", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-range-index-optimize(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:database-set-range-index-optimize", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:database-set-directory-creation(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:database-set-directory-creation", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:database-set-format-compatibility(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:database-set-format-compatibility", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:database-set-index-detection(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:database-set-index-detection", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:database-set-expunge-locks(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:database-set-expunge-locks", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:database-set-reindexer-timestamp(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedLong})", "trigger":"admin:database-set-reindexer-timestamp", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:unsignedLong)"}, {"content":"admin:database-set-in-memory-limit(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:database-set-in-memory-limit", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:database-set-in-memory-list-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:database-set-in-memory-list-size", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:database-set-in-memory-tree-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:database-set-in-memory-tree-size", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:database-set-in-memory-range-index-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:database-set-in-memory-range-index-size", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:database-set-in-memory-reverse-index-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:database-set-in-memory-reverse-index-size", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:database-set-large-size-threshold(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:database-set-large-size-threshold", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:database-set-locking(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:database-set-locking", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:database-set-journaling(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:database-set-journaling", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:database-set-journal-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:database-set-journal-size", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:database-set-positions-list-max-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:database-set-positions-list-max-size", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:database-set-merge-max-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:database-set-merge-max-size", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:database-set-merge-min-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:database-set-merge-min-size", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:database-set-merge-min-ratio(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:database-set-merge-min-ratio", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:database-set-merge-priority(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:database-set-merge-priority", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:database-set-merge-timestamp(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:long})", "trigger":"admin:database-set-merge-timestamp", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:long)"}, {"content":"admin:database-set-reindexer-throttle(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:database-set-reindexer-throttle", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:database-get-attached-forests(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-attached-forests", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-id(${1:\\$config as element(configuration)}, ${2:\\$database-name as xs:string})", "trigger":"admin:database-get-id", "description":"($config as element(configuration), $database-name as xs:string)"}, {"content":"admin:database-get-enabled(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-enabled", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-name(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-name", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-security-database(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-security-database", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-schema-database(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-schema-database", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-triggers-database(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-triggers-database", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-language(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-language", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-stemmed-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-stemmed-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-word-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-word-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-word-positions", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-fast-phrase-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-fast-phrase-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-fast-case-sensitive-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-fast-case-sensitive-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-fast-reverse-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-fast-reverse-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-fast-diacritic-sensitive-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-fast-diacritic-sensitive-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-fast-element-word-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-fast-element-word-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-element-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-element-word-positions", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-fast-element-phrase-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-fast-element-phrase-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-element-value-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-element-value-positions", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-attribute-value-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-attribute-value-positions", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-trailing-wildcard-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-trailing-wildcard-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-trailing-wildcard-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-trailing-wildcard-word-positions", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-fast-element-trailing-wildcard-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-fast-element-trailing-wildcard-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-three-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-three-character-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-three-character-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-three-character-word-positions", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-two-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-two-character-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-one-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-one-character-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-fast-element-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-fast-element-character-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-uri-lexicon(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-uri-lexicon", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-collection-lexicon(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-collection-lexicon", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-reindexer-enable(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-reindexer-enable", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-maintain-last-modified(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-maintain-last-modified", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-maintain-directory-last-modified(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-maintain-directory-last-modified", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-inherit-permissions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-inherit-permissions", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-inherit-collections(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-inherit-collections", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-inherit-quality(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-inherit-quality", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-preallocate-journals(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-preallocate-journals", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-preload-mapped-data(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-preload-mapped-data", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-range-index-optimize(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-range-index-optimize", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-directory-creation(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-directory-creation", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-format-compatibility(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-format-compatibility", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-index-detection(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-index-detection", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-expunge-locks(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-expunge-locks", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-reindexer-timestamp(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-reindexer-timestamp", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-in-memory-limit(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-in-memory-limit", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-in-memory-list-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-in-memory-list-size", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-in-memory-tree-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-in-memory-tree-size", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-in-memory-range-index-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-in-memory-range-index-size", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-in-memory-reverse-index-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-in-memory-reverse-index-size", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-locking(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-locking", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-journaling(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-journaling", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-journal-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-journal-size", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-positions-list-max-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-positions-list-max-size", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-merge-max-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-merge-max-size", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-merge-min-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-merge-min-size", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-merge-min-ratio(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-merge-min-ratio", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-merge-priority(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-merge-priority", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-merge-timestamp(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-merge-timestamp", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-reindexer-throttle(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-reindexer-throttle", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-included-element(${1:\\$namespace as xs:string?}, ${2:\\$localname as xs:string}, ${3:\\$weight as xs:double}, ${4:\\$attribute-namespace as xs:string?}, ${5:\\$attribute-localname as xs:string}, ${6:\\$attribute-value as xs:string})", "trigger":"admin:database-included-element", "description":"($namespace as xs:string?, $localname as xs:string, $weight as xs:double, $attribute-namespace as xs:string?, $attribute-localname as xs:string, $attribute-value as xs:string)"}, {"content":"admin:database-excluded-element(${1:\\$namespace as xs:string?}, ${2:\\$localname as xs:string})", "trigger":"admin:database-excluded-element", "description":"($namespace as xs:string?, $localname as xs:string)"}, {"content":"admin:database-excluded-element(${1:\\$namespace as xs:string?}, ${2:\\$localname as xs:string}, ${3:\\$attribute-namespace as xs:string?})", "trigger":"admin:database-excluded-element", "description":"($namespace as xs:string?, $localname as xs:string, $attribute-namespace as xs:string?)"}, {"content":"admin:database-excluded-element(${1:\\$namespace as xs:string?}, ${2:\\$localname as xs:string}, ${3:\\$attribute-namespace as xs:string?}, ${4:\\$attribute-localname as xs:string})", "trigger":"admin:database-excluded-element", "description":"($namespace as xs:string?, $localname as xs:string, $attribute-namespace as xs:string?, $attribute-localname as xs:string)"}, {"content":"admin:database-excluded-element(${1:\\$namespace as xs:string?}, ${2:\\$localname as xs:string}, ${3:\\$attribute-namespace as xs:string?}, ${4:\\$attribute-localname as xs:string}, ${5:\\$attribute-value as xs:string})", "trigger":"admin:database-excluded-element", "description":"($namespace as xs:string?, $localname as xs:string, $attribute-namespace as xs:string?, $attribute-localname as xs:string, $attribute-value as xs:string)"}, {"content":"admin:database-field(${1:\\$field-name as xs:string}, ${2:\\$include-root as xs:boolean})", "trigger":"admin:database-field", "description":"($field-name as xs:string, $include-root as xs:boolean)"}, {"content":"admin:database-get-word-query-included-elements(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-word-query-included-elements", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-word-query-excluded-elements(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-word-query-excluded-elements", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-fields(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-fields", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-field-included-elements(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "trigger":"admin:database-get-field-included-elements", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string)"}, {"content":"admin:database-get-field-excluded-elements(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "trigger":"admin:database-get-field-excluded-elements", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string)"}, {"content":"admin:database-get-field(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "trigger":"admin:database-get-field", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string)"}, {"content":"admin:database-add-field(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$fields as element(db:field)*})", "trigger":"admin:database-add-field", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $fields as element(db:field)*)"}, {"content":"admin:database-delete-field(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-names as xs:string*})", "trigger":"admin:database-delete-field", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-names as xs:string*)"}, {"content":"admin:database-add-word-query-included-element(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$included-elements as element(db:included-element)*})", "trigger":"admin:database-add-word-query-included-element", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $included-elements as element(db:included-element)*)"}, {"content":"admin:database-delete-word-query-included-element(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$included-elements as element(db:included-element)*})", "trigger":"admin:database-delete-word-query-included-element", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $included-elements as element(db:included-element)*)"}, {"content":"admin:database-add-field-included-element(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$included-elements as element(db:included-element)*})", "trigger":"admin:database-add-field-included-element", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string, $included-elements as element(db:included-element)*)"}, {"content":"admin:database-delete-field-included-element(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$included-elements as element(db:included-element)*})", "trigger":"admin:database-delete-field-included-element", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string, $included-elements as element(db:included-element)*)"}, {"content":"admin:database-add-word-query-excluded-element(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$excluded-elements as element(db:excluded-element)*})", "trigger":"admin:database-add-word-query-excluded-element", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $excluded-elements as element(db:excluded-element)*)"}, {"content":"admin:database-delete-word-query-excluded-element(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$excluded-elements as element(db:excluded-element)*})", "trigger":"admin:database-delete-word-query-excluded-element", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $excluded-elements as element(db:excluded-element)*)"}, {"content":"admin:database-add-field-excluded-element(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$excluded-elements as element(db:excluded-element)*})", "trigger":"admin:database-add-field-excluded-element", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string, $excluded-elements as element(db:excluded-element)*)"}, {"content":"admin:database-delete-field-excluded-element(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$excluded-elements as element(db:excluded-element)*})", "trigger":"admin:database-delete-field-excluded-element", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string, $excluded-elements as element(db:excluded-element)*)"}, {"content":"admin:database-get-field-word-lexicons(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "trigger":"admin:database-get-field-word-lexicons", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string)"}, {"content":"admin:database-add-field-word-lexicon(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$word-lexicons as element(db:word-lexicon)*})", "trigger":"admin:database-add-field-word-lexicon", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string, $word-lexicons as element(db:word-lexicon)*)"}, {"content":"admin:database-delete-field-word-lexicon(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$word-lexicons as element(db:word-lexicon)*})", "trigger":"admin:database-delete-field-word-lexicon", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string, $word-lexicons as element(db:word-lexicon)*)"}, {"content":"admin:database-get-word-query-include-document-root(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-word-query-include-document-root", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-word-query-stemmed-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-word-query-stemmed-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-word-query-word-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-word-query-word-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-word-query-fast-phrase-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-word-query-fast-phrase-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-word-query-fast-case-sensitive-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-word-query-fast-case-sensitive-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-word-query-fast-diacritic-sensitive-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-word-query-fast-diacritic-sensitive-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-word-query-trailing-wildcard-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-word-query-trailing-wildcard-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-word-query-trailing-wildcard-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-word-query-trailing-wildcard-word-positions", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-word-query-three-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-word-query-three-character-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-word-query-three-character-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-word-query-three-character-word-positions", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-word-query-two-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-word-query-two-character-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-word-query-one-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-word-query-one-character-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-set-word-query-stemmed-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:string?})", "trigger":"admin:database-set-word-query-stemmed-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:string?)"}, {"content":"admin:database-set-word-query-word-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean?})", "trigger":"admin:database-set-word-query-word-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean?)"}, {"content":"admin:database-set-word-query-fast-phrase-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean?})", "trigger":"admin:database-set-word-query-fast-phrase-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean?)"}, {"content":"admin:database-set-word-query-fast-case-sensitive-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean?})", "trigger":"admin:database-set-word-query-fast-case-sensitive-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean?)"}, {"content":"admin:database-set-word-query-fast-diacritic-sensitive-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean?})", "trigger":"admin:database-set-word-query-fast-diacritic-sensitive-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean?)"}, {"content":"admin:database-set-word-query-trailing-wildcard-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean?})", "trigger":"admin:database-set-word-query-trailing-wildcard-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean?)"}, {"content":"admin:database-set-word-query-trailing-wildcard-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean?})", "trigger":"admin:database-set-word-query-trailing-wildcard-word-positions", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean?)"}, {"content":"admin:database-set-word-query-three-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean?})", "trigger":"admin:database-set-word-query-three-character-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean?)"}, {"content":"admin:database-set-word-query-three-character-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean?})", "trigger":"admin:database-set-word-query-three-character-word-positions", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean?)"}, {"content":"admin:database-set-word-query-two-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean?})", "trigger":"admin:database-set-word-query-two-character-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean?)"}, {"content":"admin:database-set-word-query-one-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean?})", "trigger":"admin:database-set-word-query-one-character-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean?)"}, {"content":"admin:database-set-word-query-include-document-root(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-word-query-include-document-root", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-get-field-include-document-root(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "trigger":"admin:database-get-field-include-document-root", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string)"}, {"content":"admin:database-get-field-stemmed-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "trigger":"admin:database-get-field-stemmed-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string)"}, {"content":"admin:database-get-field-word-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "trigger":"admin:database-get-field-word-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string)"}, {"content":"admin:database-get-field-fast-phrase-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "trigger":"admin:database-get-field-fast-phrase-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string)"}, {"content":"admin:database-get-field-fast-case-sensitive-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "trigger":"admin:database-get-field-fast-case-sensitive-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string)"}, {"content":"admin:database-get-field-fast-diacritic-sensitive-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "trigger":"admin:database-get-field-fast-diacritic-sensitive-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string)"}, {"content":"admin:database-get-field-trailing-wildcard-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "trigger":"admin:database-get-field-trailing-wildcard-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string)"}, {"content":"admin:database-get-field-trailing-wildcard-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "trigger":"admin:database-get-field-trailing-wildcard-word-positions", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string)"}, {"content":"admin:database-get-field-three-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "trigger":"admin:database-get-field-three-character-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string)"}, {"content":"admin:database-get-field-three-character-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "trigger":"admin:database-get-field-three-character-word-positions", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string)"}, {"content":"admin:database-get-field-two-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "trigger":"admin:database-get-field-two-character-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string)"}, {"content":"admin:database-get-field-one-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "trigger":"admin:database-get-field-one-character-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string)"}, {"content":"admin:database-set-field-stemmed-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:string?})", "trigger":"admin:database-set-field-stemmed-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string, $value as xs:string?)"}, {"content":"admin:database-set-field-word-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:boolean?})", "trigger":"admin:database-set-field-word-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string, $value as xs:boolean?)"}, {"content":"admin:database-set-field-fast-phrase-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:boolean?})", "trigger":"admin:database-set-field-fast-phrase-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string, $value as xs:boolean?)"}, {"content":"admin:database-set-field-fast-case-sensitive-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:boolean?})", "trigger":"admin:database-set-field-fast-case-sensitive-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string, $value as xs:boolean?)"}, {"content":"admin:database-set-field-fast-diacritic-sensitive-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:boolean?})", "trigger":"admin:database-set-field-fast-diacritic-sensitive-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string, $value as xs:boolean?)"}, {"content":"admin:database-set-field-trailing-wildcard-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:boolean?})", "trigger":"admin:database-set-field-trailing-wildcard-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string, $value as xs:boolean?)"}, {"content":"admin:database-set-field-trailing-wildcard-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:boolean?})", "trigger":"admin:database-set-field-trailing-wildcard-word-positions", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string, $value as xs:boolean?)"}, {"content":"admin:database-set-field-three-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:boolean?})", "trigger":"admin:database-set-field-three-character-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string, $value as xs:boolean?)"}, {"content":"admin:database-set-field-three-character-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:boolean?})", "trigger":"admin:database-set-field-three-character-word-positions", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string, $value as xs:boolean?)"}, {"content":"admin:database-set-field-two-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:boolean?})", "trigger":"admin:database-set-field-two-character-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string, $value as xs:boolean?)"}, {"content":"admin:database-set-field-one-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:boolean?})", "trigger":"admin:database-set-field-one-character-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string, $value as xs:boolean?)"}, {"content":"admin:database-set-field-include-document-root(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:boolean})", "trigger":"admin:database-set-field-include-document-root", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string, $value as xs:boolean)"}, {"content":"admin:database-set-field-name(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:string})", "trigger":"admin:database-set-field-name", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string, $value as xs:string)"}, {"content":"admin:forest-get-name(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "trigger":"admin:forest-get-name", "description":"($config as element(configuration), $forest-id as xs:unsignedLong)"}, {"content":"admin:forest-get-host(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "trigger":"admin:forest-get-host", "description":"($config as element(configuration), $forest-id as xs:unsignedLong)"}, {"content":"admin:forest-get-id(${1:\\$config as element(configuration)}, ${2:\\$forest-name as xs:string})", "trigger":"admin:forest-get-id", "description":"($config as element(configuration), $forest-name as xs:string)"}, {"content":"admin:forest-get-enabled(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "trigger":"admin:forest-get-enabled", "description":"($config as element(configuration), $forest-id as xs:unsignedLong)"}, {"content":"admin:forest-get-data-directory(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "trigger":"admin:forest-get-data-directory", "description":"($config as element(configuration), $forest-id as xs:unsignedLong)"}, {"content":"admin:forest-get-large-data-directory(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "trigger":"admin:forest-get-large-data-directory", "description":"($config as element(configuration), $forest-id as xs:unsignedLong)"}, {"content":"admin:forest-get-failover-enable(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "trigger":"admin:forest-get-failover-enable", "description":"($config as element(configuration), $forest-id as xs:unsignedLong)"}, {"content":"admin:forest-get-updates-allowed(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "trigger":"admin:forest-get-updates-allowed", "description":"($config as element(configuration), $forest-id as xs:unsignedLong)"}, {"content":"admin:forest-get-failover-hosts(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "trigger":"admin:forest-get-failover-hosts", "description":"($config as element(configuration), $forest-id as xs:unsignedLong)"}, {"content":"admin:forest-set-host(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedLong})", "trigger":"admin:forest-set-host", "description":"($config as element(configuration), $forest-id as xs:unsignedLong, $value as xs:unsignedLong)"}, {"content":"admin:forest-set-enabled(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:forest-set-enabled", "description":"($config as element(configuration), $forest-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:forest-set-failover-enable(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:forest-set-failover-enable", "description":"($config as element(configuration), $forest-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:forest-set-updates-allowed(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:forest-set-updates-allowed", "description":"($config as element(configuration), $forest-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:forest-add-failover-host(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$hosts as xs:unsignedLong*})", "trigger":"admin:forest-add-failover-host", "description":"($config as element(configuration), $forest-id as xs:unsignedLong, $hosts as xs:unsignedLong*)"}, {"content":"admin:forest-delete-failover-host(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$hosts as xs:unsignedLong*})", "trigger":"admin:forest-delete-failover-host", "description":"($config as element(configuration), $forest-id as xs:unsignedLong, $hosts as xs:unsignedLong*)"}, {"content":"admin:forest-delete(${1:\\$config as element(configuration)}, ${2:\\$forest-ids as xs:unsignedLong*}, ${3:\\$delete-data as xs:boolean})", "trigger":"admin:forest-delete", "description":"($config as element(configuration), $forest-ids as xs:unsignedLong*, $delete-data as xs:boolean)"}, {"content":"admin:forest-create(${1:\\$config as element(configuration)}, ${2:\\$forest-name as xs:string}, ${3:\\$host-id as xs:unsignedLong}, ${4:\\$data-directory as xs:string?})", "trigger":"admin:forest-create", "description":"($config as element(configuration), $forest-name as xs:string, $host-id as xs:unsignedLong, $data-directory as xs:string?)"}, {"content":"admin:forest-create(${1:\\$config as element(configuration)}, ${2:\\$forest-name as xs:string}, ${3:\\$host-id as xs:unsignedLong}, ${4:\\$data-directory as xs:string?}, ${5:\\$large-data-directory as xs:string?})", "trigger":"admin:forest-create", "description":"($config as element(configuration), $forest-name as xs:string, $host-id as xs:unsignedLong, $data-directory as xs:string?, $large-data-directory as xs:string?)"}, {"content":"admin:forest-create(${1:\\$config as element(configuration)}, ${2:\\$forest-name as xs:string}, ${3:\\$host-id as xs:unsignedLong}, ${4:\\$data-directory as xs:string?}, ${5:\\$large-data-directory as xs:string?}, ${6:\\$fast-data-directory as xs:string?})", "trigger":"admin:forest-create", "description":"($config as element(configuration), $forest-name as xs:string, $host-id as xs:unsignedLong, $data-directory as xs:string?, $large-data-directory as xs:string?, $fast-data-directory as xs:string?)"}, {"content":"admin:forest-copy(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$forest-name as xs:string}, ${4:\\$data-directory as xs:string?})", "trigger":"admin:forest-copy", "description":"($config as element(configuration), $forest-id as xs:unsignedLong, $forest-name as xs:string, $data-directory as xs:string?)"}, {"content":"admin:forest-copy(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$forest-name as xs:string}, ${4:\\$data-directory as xs:string?}, ${5:\\$large-data-directory as xs:string?})", "trigger":"admin:forest-copy", "description":"($config as element(configuration), $forest-id as xs:unsignedLong, $forest-name as xs:string, $data-directory as xs:string?, $large-data-directory as xs:string?)"}, {"content":"admin:forest-copy(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$forest-name as xs:string}, ${4:\\$data-directory as xs:string?}, ${5:\\$large-data-directory as xs:string?}, ${6:\\$fast-data-directory as xs:string?})", "trigger":"admin:forest-copy", "description":"($config as element(configuration), $forest-id as xs:unsignedLong, $forest-name as xs:string, $data-directory as xs:string?, $large-data-directory as xs:string?, $fast-data-directory as xs:string?)"}, {"content":"admin:forest-get-backups(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "trigger":"admin:forest-get-backups", "description":"($config as element(configuration), $forest-id as xs:unsignedLong)"}, {"content":"admin:forest-weekly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$days as xs:string+}, ${4:\\$start-time as xs:time})", "trigger":"admin:forest-weekly-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $days as xs:string+, $start-time as xs:time)"}, {"content":"admin:forest-monthly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$backup-month-day as xs:unsignedInt}, ${4:\\$start-time as xs:time})", "trigger":"admin:forest-monthly-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $backup-month-day as xs:unsignedInt, $start-time as xs:time)"}, {"content":"admin:forest-one-time-backup(${1:\\$backup-dir as xs:string}, ${2:\\$start as xs:dateTime})", "trigger":"admin:forest-one-time-backup", "description":"($backup-dir as xs:string, $start as xs:dateTime)"}, {"content":"admin:forest-add-backup(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$backups as element(as:forest-backup)*})", "trigger":"admin:forest-add-backup", "description":"($config as element(configuration), $forest-id as xs:unsignedLong, $backups as element(as:forest-backup)*)"}, {"content":"admin:forest-delete-backup(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$backups as element(as:forest-backup)*})", "trigger":"admin:forest-delete-backup", "description":"($config as element(configuration), $forest-id as xs:unsignedLong, $backups as element(as:forest-backup)*)"}, {"content":"admin:host-get-id(${1:\\$config as element(configuration)}, ${2:\\$host-name as xs:string})", "trigger":"admin:host-get-id", "description":"($config as element(configuration), $host-name as xs:string)"}, {"content":"admin:host-get-name(${1:\\$config as element(configuration)}, ${2:\\$host-id as xs:unsignedLong})", "trigger":"admin:host-get-name", "description":"($config as element(configuration), $host-id as xs:unsignedLong)"}, {"content":"admin:host-get-group(${1:\\$config as element(configuration)}, ${2:\\$host-id as xs:unsignedLong})", "trigger":"admin:host-get-group", "description":"($config as element(configuration), $host-id as xs:unsignedLong)"}, {"content":"admin:host-get-port(${1:\\$config as element(configuration)}, ${2:\\$host-id as xs:unsignedLong})", "trigger":"admin:host-get-port", "description":"($config as element(configuration), $host-id as xs:unsignedLong)"}, {"content":"admin:host-set-name(${1:\\$config as element(configuration)}, ${2:\\$host-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:host-set-name", "description":"($config as element(configuration), $host-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:host-set-group(${1:\\$config as element(configuration)}, ${2:\\$host-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedLong})", "trigger":"admin:host-set-group", "description":"($config as element(configuration), $host-id as xs:unsignedLong, $value as xs:unsignedLong)"}, {"content":"admin:host-set-port(${1:\\$config as element(configuration)}, ${2:\\$host-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:host-set-port", "description":"($config as element(configuration), $host-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:appserver-get-type(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-type", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-group-id(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-group-id", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-host-ids(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-host-ids", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-id(${1:\\$config as element(configuration)}, ${2:\\$group-ids as xs:unsignedLong*}, ${3:\\$appserver-name as xs:string})", "trigger":"admin:appserver-get-id", "description":"($config as element(configuration), $group-ids as xs:unsignedLong*, $appserver-name as xs:string)"}, {"content":"admin:appserver-get-name(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-name", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-root(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-root", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-port(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-port", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-modules-database(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-modules-database", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-database(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-database", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-last-login(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-last-login", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-display-last-login(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-display-last-login", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-address(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-address", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-backlog(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-backlog", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-threads(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-threads", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-request-timeout(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-request-timeout", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-keep-alive-timeout(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-keep-alive-timeout", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-session-timeout(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-session-timeout", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-connection-timeout(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-connection-timeout", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-default-time-limit(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-default-time-limit", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-default-query-time-limit(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-default-query-time-limit", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-max-time-limit(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-max-time-limit", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-max-query-time-limit(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-max-query-time-limit", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-pre-commit-trigger-depth(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-pre-commit-trigger-depth", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-pre-commit-trigger-limit(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-pre-commit-trigger-limit", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-collation(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-collation", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-authentication(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-authentication", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-default-user(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-default-user", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-privilege(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-privilege", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-concurrent-request-limit(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-concurrent-request-limit", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-file-log-level(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-file-log-level", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-log-errors(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-log-errors", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-debug-allow(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-debug-allow", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-profile-allow(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-profile-allow", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-default-xquery-version(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-default-xquery-version", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-multi-version-concurrency-control(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-multi-version-concurrency-control", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-distribute-timestamps(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-distribute-timestamps", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-output-sgml-character-entities(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-output-sgml-character-entities", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-output-encoding(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-output-encoding", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-error-handler(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-error-handler", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-url-rewriter(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-url-rewriter", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-enabled(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-enabled", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-schemas(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-schemas", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-namespaces(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-namespaces", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-static-expires(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-static-expires", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-compute-content-length(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-compute-content-length", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-set-name(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-name", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-root(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-root", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-port(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:appserver-set-port", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:appserver-set-modules-database(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as item()})", "trigger":"admin:appserver-set-modules-database", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as item())"}, {"content":"admin:appserver-set-database(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedLong})", "trigger":"admin:appserver-set-database", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:unsignedLong)"}, {"content":"admin:appserver-set-last-login(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedLong?})", "trigger":"admin:appserver-set-last-login", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:unsignedLong?)"}, {"content":"admin:appserver-set-display-last-login(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:appserver-set-display-last-login", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:appserver-set-address(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-address", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-backlog(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:appserver-set-backlog", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:appserver-set-threads(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:appserver-set-threads", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:appserver-set-request-timeout(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:appserver-set-request-timeout", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:appserver-set-keep-alive-timeout(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:appserver-set-keep-alive-timeout", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:appserver-set-session-timeout(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:appserver-set-session-timeout", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:appserver-set-connection-timeout(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:appserver-set-connection-timeout", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:appserver-set-default-time-limit(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:appserver-set-default-time-limit", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:appserver-set-default-query-time-limit(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:appserver-set-default-query-time-limit", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:appserver-set-max-time-limit(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:appserver-set-max-time-limit", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:appserver-set-max-query-time-limit(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:appserver-set-max-query-time-limit", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:appserver-set-pre-commit-trigger-depth(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:appserver-set-pre-commit-trigger-depth", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:appserver-set-pre-commit-trigger-limit(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:appserver-set-pre-commit-trigger-limit", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:appserver-set-collation(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-collation", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-authentication(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-authentication", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-default-user(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedLong})", "trigger":"admin:appserver-set-default-user", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:unsignedLong)"}, {"content":"admin:appserver-set-privilege(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedLong})", "trigger":"admin:appserver-set-privilege", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:unsignedLong)"}, {"content":"admin:appserver-set-concurrent-request-limit(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:appserver-set-concurrent-request-limit", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:appserver-set-file-log-level(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-file-log-level", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-log-errors(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:appserver-set-log-errors", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:appserver-set-debug-allow(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:appserver-set-debug-allow", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:appserver-set-profile-allow(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:appserver-set-profile-allow", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:appserver-set-default-xquery-version(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-default-xquery-version", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-multi-version-concurrency-control(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-multi-version-concurrency-control", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-distribute-timestamps(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-distribute-timestamps", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-output-sgml-character-entities(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-output-sgml-character-entities", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-output-encoding(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-output-encoding", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-error-handler(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-error-handler", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-url-rewriter(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-url-rewriter", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-enabled(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:appserver-set-enabled", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:appserver-set-static-expires(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:appserver-set-static-expires", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:appserver-set-compute-content-length(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:appserver-set-compute-content-length", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:appserver-get-request-blackouts(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-request-blackouts", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-recurring-request-blackout(${1:\\$users as xs:unsignedLong*}, ${2:\\$roles as xs:unsignedLong*}, ${3:\\$days as xs:string*}, ${4:\\$start-time as xs:time?}, ${5:\\$end-time as xs:time?}, ${6:\\$duration as xs:duration?})", "trigger":"admin:appserver-recurring-request-blackout", "description":"($users as xs:unsignedLong*, $roles as xs:unsignedLong*, $days as xs:string*, $start-time as xs:time?, $end-time as xs:time?, $duration as xs:duration?)"}, {"content":"admin:appserver-one-time-request-blackout(${1:\\$users as xs:unsignedLong*}, ${2:\\$roles as xs:unsignedLong*}, ${3:\\$start as xs:dateTime}, ${4:\\$end as xs:dateTime?}, ${5:\\$duration as xs:duration?})", "trigger":"admin:appserver-one-time-request-blackout", "description":"($users as xs:unsignedLong*, $roles as xs:unsignedLong*, $start as xs:dateTime, $end as xs:dateTime?, $duration as xs:duration?)"}, {"content":"admin:appserver-add-request-blackout(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$request-blackouts as element(gr:request-blackout)*})", "trigger":"admin:appserver-add-request-blackout", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $request-blackouts as element(gr:request-blackout)*)"}, {"content":"admin:appserver-delete-request-blackout(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$blackouts as element(gr:request-blackout)*})", "trigger":"admin:appserver-delete-request-blackout", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $blackouts as element(gr:request-blackout)*)"}, {"content":"admin:group-schema(${1:\\$namespace-uri as xs:string}, ${2:\\$schema-location as xs:string})", "trigger":"admin:group-schema", "description":"($namespace-uri as xs:string, $schema-location as xs:string)"}, {"content":"admin:appserver-add-schema(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$schemas as element(gr:schema)*})", "trigger":"admin:appserver-add-schema", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $schemas as element(gr:schema)*)"}, {"content":"admin:appserver-delete-schema(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$schemas as element(gr:schema)*})", "trigger":"admin:appserver-delete-schema", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $schemas as element(gr:schema)*)"}, {"content":"admin:group-namespace(${1:\\$prefix as xs:string}, ${2:\\$namespace-uri as xs:string})", "trigger":"admin:group-namespace", "description":"($prefix as xs:string, $namespace-uri as xs:string)"}, {"content":"admin:appserver-add-namespace(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$namespaces as element(gr:namespace)*})", "trigger":"admin:appserver-add-namespace", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $namespaces as element(gr:namespace)*)"}, {"content":"admin:appserver-delete-namespace(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$namespaces as element(gr:namespace)*})", "trigger":"admin:appserver-delete-namespace", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $namespaces as element(gr:namespace)*)"}, {"content":"admin:appserver-delete(${1:\\$config as element(configuration)}, ${2:\\$appserver-ids as xs:unsignedLong*})", "trigger":"admin:appserver-delete", "description":"($config as element(configuration), $appserver-ids as xs:unsignedLong*)"}, {"content":"admin:http-server-create(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$appserver-name as xs:string}, ${4:\\$root as xs:string}, ${5:\\$port as xs:unsignedLong}, ${6:\\$modules-id as item()}, ${7:\\$database-id as xs:unsignedLong})", "trigger":"admin:http-server-create", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $appserver-name as xs:string, $root as xs:string, $port as xs:unsignedLong, $modules-id as item(), $database-id as xs:unsignedLong)"}, {"content":"admin:xdbc-server-create(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$appserver-name as xs:string}, ${4:\\$root as xs:string}, ${5:\\$port as xs:unsignedLong}, ${6:\\$modules-id as item()}, ${7:\\$database-id as xs:unsignedLong})", "trigger":"admin:xdbc-server-create", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $appserver-name as xs:string, $root as xs:string, $port as xs:unsignedLong, $modules-id as item(), $database-id as xs:unsignedLong)"}, {"content":"admin:webdav-server-create(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$appserver-name as xs:string}, ${4:\\$root as xs:string}, ${5:\\$port as xs:unsignedLong}, ${6:\\$database-id as xs:unsignedLong})", "trigger":"admin:webdav-server-create", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $appserver-name as xs:string, $root as xs:string, $port as xs:unsignedLong, $database-id as xs:unsignedLong)"}, {"content":"admin:appserver-copy(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$target-group-id as xs:unsignedLong?}, ${4:\\$appserver-name as xs:string}, ${5:\\$port as xs:unsignedLong})", "trigger":"admin:appserver-copy", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $target-group-id as xs:unsignedLong?, $appserver-name as xs:string, $port as xs:unsignedLong)"}, {"content":"admin:taskserver-get-name(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:taskserver-get-name", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:taskserver-get-threads(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:taskserver-get-threads", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:taskserver-get-debug-threads(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:taskserver-get-debug-threads", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:taskserver-get-default-time-limit(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:taskserver-get-default-time-limit", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:taskserver-get-max-time-limit(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:taskserver-get-max-time-limit", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:taskserver-get-queue-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:taskserver-get-queue-size", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:taskserver-get-pre-commit-trigger-depth(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:taskserver-get-pre-commit-trigger-depth", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:taskserver-get-post-commit-trigger-depth(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:taskserver-get-post-commit-trigger-depth", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:taskserver-get-pre-commit-trigger-limit(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:taskserver-get-pre-commit-trigger-limit", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:taskserver-get-file-log-level(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:taskserver-get-file-log-level", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:taskserver-get-log-errors(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:taskserver-get-log-errors", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:taskserver-get-debug-allow(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:taskserver-get-debug-allow", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:taskserver-get-profile-allow(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:taskserver-get-profile-allow", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:taskserver-set-threads(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:taskserver-set-threads", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:taskserver-set-debug-threads(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:taskserver-set-debug-threads", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:taskserver-set-default-time-limit(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:taskserver-set-default-time-limit", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:taskserver-set-max-time-limit(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:taskserver-set-max-time-limit", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:taskserver-set-queue-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:taskserver-set-queue-size", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:taskserver-set-pre-commit-trigger-depth(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:taskserver-set-pre-commit-trigger-depth", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:taskserver-set-post-commit-trigger-depth(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:taskserver-set-post-commit-trigger-depth", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:taskserver-set-pre-commit-trigger-limit(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:taskserver-set-pre-commit-trigger-limit", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:taskserver-set-file-log-level(${1:\\$config as element(configuration)}, ${2:\\$taskserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:taskserver-set-file-log-level", "description":"($config as element(configuration), $taskserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:taskserver-set-log-errors(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:taskserver-set-log-errors", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:taskserver-set-debug-allow(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:taskserver-set-debug-allow", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:taskserver-set-profile-allow(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:taskserver-set-profile-allow", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:group-get-host-ids(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-host-ids", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-appserver-ids(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-appserver-ids", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-httpserver-ids(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-httpserver-ids", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-xdbcserver-ids(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-xdbcserver-ids", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-webdavserver-ids(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-webdavserver-ids", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-taskserver-id(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-taskserver-id", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-id(${1:\\$config as element(configuration)}, ${2:\\$group-name as xs:string})", "trigger":"admin:group-get-id", "description":"($config as element(configuration), $group-name as xs:string)"}, {"content":"admin:group-get-name(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-name", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-list-cache-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-list-cache-size", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-list-cache-partitions(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-list-cache-partitions", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-compressed-tree-cache-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-compressed-tree-cache-size", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-compressed-tree-cache-partitions(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-compressed-tree-cache-partitions", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-compressed-tree-read-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-compressed-tree-read-size", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-expanded-tree-cache-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-expanded-tree-cache-size", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-expanded-tree-cache-partitions(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-expanded-tree-cache-partitions", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-smtp-relay(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-smtp-relay", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-smtp-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-smtp-timeout", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-http-user-agent(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-http-user-agent", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-http-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-http-timeout", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-xdqp-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-xdqp-timeout", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-host-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-host-timeout", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-host-initial-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-host-initial-timeout", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-retry-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-retry-timeout", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-module-cache-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-module-cache-timeout", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-system-log-level(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-system-log-level", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-file-log-level(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-file-log-level", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-rotate-log-files(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-rotate-log-files", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-keep-log-files(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-keep-log-files", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-failover-enable(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-failover-enable", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-trace-events-activated(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-trace-events-activated", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-schemas(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-schemas", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-namespaces(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-namespaces", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-trace-events(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-trace-events", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-set-name(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:group-set-name", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:group-set-list-cache-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:group-set-list-cache-size", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:group-set-list-cache-partitions(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:group-set-list-cache-partitions", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:group-set-compressed-tree-cache-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:group-set-compressed-tree-cache-size", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:group-set-compressed-tree-cache-partitions(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:group-set-compressed-tree-cache-partitions", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:group-set-compressed-tree-read-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:group-set-compressed-tree-read-size", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:group-set-expanded-tree-cache-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:group-set-expanded-tree-cache-size", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:group-set-expanded-tree-cache-partitions(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:group-set-expanded-tree-cache-partitions", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:group-set-smtp-relay(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:group-set-smtp-relay", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:group-set-smtp-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:group-set-smtp-timeout", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:group-set-http-user-agent(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:group-set-http-user-agent", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:group-set-http-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:group-set-http-timeout", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:group-set-xdqp-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:group-set-xdqp-timeout", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:group-set-host-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:group-set-host-timeout", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:group-set-host-initial-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:group-set-host-initial-timeout", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:group-set-retry-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:group-set-retry-timeout", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:group-set-module-cache-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:group-set-module-cache-timeout", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:group-set-system-log-level(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:group-set-system-log-level", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:group-set-file-log-level(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:group-set-file-log-level", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:group-set-rotate-log-files(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:group-set-rotate-log-files", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:group-set-keep-log-files(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:group-set-keep-log-files", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:group-set-failover-enable(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:group-set-failover-enable", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:group-set-trace-events-activated(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:group-set-trace-events-activated", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:group-add-schema(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$schemas as element(gr:schema)*})", "trigger":"admin:group-add-schema", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $schemas as element(gr:schema)*)"}, {"content":"admin:group-delete-schema(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$schemas as element(gr:schema)*})", "trigger":"admin:group-delete-schema", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $schemas as element(gr:schema)*)"}, {"content":"admin:group-add-namespace(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$namespaces as element(gr:namespace)*})", "trigger":"admin:group-add-namespace", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $namespaces as element(gr:namespace)*)"}, {"content":"admin:group-delete-namespace(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$namespaces as element(gr:namespace)*})", "trigger":"admin:group-delete-namespace", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $namespaces as element(gr:namespace)*)"}, {"content":"admin:group-trace-event(${1:\\$event-id as xs:string})", "trigger":"admin:group-trace-event", "description":"($event-id as xs:string)"}, {"content":"admin:group-add-trace-event(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$events as element(gr:event)*})", "trigger":"admin:group-add-trace-event", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $events as element(gr:event)*)"}, {"content":"admin:group-delete-trace-event(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$events as element(gr:event)*})", "trigger":"admin:group-delete-trace-event", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $events as element(gr:event)*)"}, {"content":"admin:group-delete(${1:\\$config as element(configuration)}, ${2:\\$group-ids as xs:unsignedLong*})", "trigger":"admin:group-delete", "description":"($config as element(configuration), $group-ids as xs:unsignedLong*)"}, {"content":"admin:group-create(${1:\\$config as element(configuration)}, ${2:\\$group-name as xs:string})", "trigger":"admin:group-create", "description":"($config as element(configuration), $group-name as xs:string)"}, {"content":"admin:group-copy(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$group-name as xs:string})", "trigger":"admin:group-copy", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $group-name as xs:string)"}, {"content":"admin:group-get-audit-enabled(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-audit-enabled", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-set-audit-enabled(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:group-set-audit-enabled", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:group-get-rotate-audit-files(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-rotate-audit-files", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-keep-audit-files(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-keep-audit-files", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-set-rotate-audit-files(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:group-set-rotate-audit-files", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:group-set-keep-audit-files(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:group-set-keep-audit-files", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:group-enable-audit-event-type(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$event-type as xs:string*})", "trigger":"admin:group-enable-audit-event-type", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $event-type as xs:string*)"}, {"content":"admin:group-disable-audit-event-type(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$event-type as xs:string*})", "trigger":"admin:group-disable-audit-event-type", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $event-type as xs:string*)"}, {"content":"admin:group-get-audit-event-type-enabled(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$event-type as xs:string})", "trigger":"admin:group-get-audit-event-type-enabled", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $event-type as xs:string)"}, {"content":"admin:group-set-audit-user-restriction(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$restriction-type as xs:string}, ${4:\\$users as xs:string*})", "trigger":"admin:group-set-audit-user-restriction", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $restriction-type as xs:string, $users as xs:string*)"}, {"content":"admin:group-get-audit-excluded-users(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-audit-excluded-users", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-audit-included-users(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-audit-included-users", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-set-audit-role-restriction(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$restriction-type as xs:string}, ${4:\\$roles as xs:string*})", "trigger":"admin:group-set-audit-role-restriction", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $restriction-type as xs:string, $roles as xs:string*)"}, {"content":"admin:group-get-audit-excluded-roles(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-audit-excluded-roles", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-audit-included-roles(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-audit-included-roles", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-set-audit-uri-restriction(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$restriction-type as xs:string}, ${4:\\$uris as xs:string*})", "trigger":"admin:group-set-audit-uri-restriction", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $restriction-type as xs:string, $uris as xs:string*)"}, {"content":"admin:group-get-audit-excluded-uris(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-audit-excluded-uris", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-audit-included-uris(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-audit-included-uris", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-set-audit-outcome-restriction(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$outcome as xs:string*})", "trigger":"admin:group-set-audit-outcome-restriction", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $outcome as xs:string*)"}, {"content":"admin:group-get-audit-outcome-restriction(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-audit-outcome-restriction", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:mimetypes-add(${1:\\$config as element(configuration)}, ${2:\\$mimetypes as element(mt:mimetype)*})", "trigger":"admin:mimetypes-add", "description":"($config as element(configuration), $mimetypes as element(mt:mimetype)*)"}, {"content":"admin:mimetypes-delete(${1:\\$config as element(configuration)}, ${2:\\$mimetypes as element(mt:mimetype)*})", "trigger":"admin:mimetypes-delete", "description":"($config as element(configuration), $mimetypes as element(mt:mimetype)*)"}, {"content":"admin:mimetypes-get(${1:\\$config as element(configuration)})", "trigger":"admin:mimetypes-get", "description":"($config as element(configuration))"}, {"content":"admin:mimetype(${1:\\$name as xs:string}, ${2:\\$extensions as xs:string}, ${3:\\$format as xs:string})", "trigger":"admin:mimetype", "description":"($name as xs:string, $extensions as xs:string, $format as xs:string)"}, {"content":"admin:database-daily-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-time as xs:time}, ${4:\\$max-backups as xs:unsignedLong}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean})", "trigger":"admin:database-daily-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $start-time as xs:time, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean)"}, {"content":"admin:database-daily-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-time as xs:time}, ${4:\\$max-backups as xs:unsignedLong}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean}, ${8:\\$include-replicas as xs:boolean})", "trigger":"admin:database-daily-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $start-time as xs:time, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean)"}, {"content":"admin:database-daily-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-time as xs:time}, ${4:\\$max-backups as xs:unsignedLong}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean}, ${8:\\$include-replicas as xs:boolean}, ${9:\\$journal-archiving as xs:boolean?})", "trigger":"admin:database-daily-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $start-time as xs:time, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $journal-archiving as xs:boolean?)"}, {"content":"admin:database-daily-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-time as xs:time}, ${4:\\$max-backups as xs:unsignedLong}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean}, ${8:\\$include-replicas as xs:boolean}, ${9:\\$journal-archiving as xs:boolean?}, ${10:\\$journal-archive-path as xs:string?})", "trigger":"admin:database-daily-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $start-time as xs:time, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?)"}, {"content":"admin:database-daily-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-time as xs:time}, ${4:\\$max-backups as xs:unsignedLong}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean}, ${8:\\$include-replicas as xs:boolean}, ${9:\\$journal-archiving as xs:boolean?}, ${10:\\$journal-archive-path as xs:string?}, ${11:\\$lag-limit as xs:unsignedLong?})", "trigger":"admin:database-daily-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $start-time as xs:time, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?, $lag-limit as xs:unsignedLong?)"}, {"content":"admin:database-daily-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-time as xs:time}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean})", "trigger":"admin:database-daily-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $start-time as xs:time, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean)"}, {"content":"admin:database-daily-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-time as xs:time}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean}, ${7:\\$include-replicas as xs:boolean})", "trigger":"admin:database-daily-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $start-time as xs:time, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean)"}, {"content":"admin:database-daily-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-time as xs:time}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean}, ${7:\\$include-replicas as xs:boolean}, ${8:\\$incremental-dir as xs:string?})", "trigger":"admin:database-daily-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $start-time as xs:time, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?)"}, {"content":"admin:database-daily-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-time as xs:time}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean}, ${7:\\$include-replicas as xs:boolean}, ${8:\\$incremental-dir as xs:string?}, ${9:\\$purge-journal-archive as xs:boolean?})", "trigger":"admin:database-daily-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $start-time as xs:time, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?, $purge-journal-archive as xs:boolean?)"}, {"content":"admin:database-daily-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-time as xs:time}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean}, ${7:\\$include-replicas as xs:boolean}, ${8:\\$incremental-dir as xs:string?}, ${9:\\$purge-journal-archive as xs:boolean?}, ${10:\\$journal-archiving as xs:boolean?})", "trigger":"admin:database-daily-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $start-time as xs:time, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?, $purge-journal-archive as xs:boolean?, $journal-archiving as xs:boolean?)"}, {"content":"admin:database-daily-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-time as xs:time}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean}, ${7:\\$include-replicas as xs:boolean}, ${8:\\$incremental-dir as xs:string?}, ${9:\\$purge-journal-archive as xs:boolean?}, ${10:\\$journal-archiving as xs:boolean?}, ${11:\\$journal-archive-path as xs:string?})", "trigger":"admin:database-daily-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $start-time as xs:time, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?, $purge-journal-archive as xs:boolean?, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?)"}, {"content":"admin:database-daily-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-time as xs:time}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean}, ${7:\\$include-replicas as xs:boolean}, ${8:\\$incremental-dir as xs:string?}, ${9:\\$purge-journal-archive as xs:boolean?}, ${10:\\$journal-archiving as xs:boolean?}, ${11:\\$journal-archive-path as xs:string?}, ${12:\\$lag-limit as xs:unsignedLong?})", "trigger":"admin:database-daily-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $start-time as xs:time, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?, $purge-journal-archive as xs:boolean?, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?, $lag-limit as xs:unsignedLong?)"}, {"content":"admin:database-hourly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-minute as xs:nonNegativeInteger}, ${4:\\$max-backups as xs:unsignedLong}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean})", "trigger":"admin:database-hourly-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $start-minute as xs:nonNegativeInteger, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean)"}, {"content":"admin:database-hourly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-minute as xs:nonNegativeInteger}, ${4:\\$max-backups as xs:unsignedLong}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean}, ${8:\\$include-replicas as xs:boolean})", "trigger":"admin:database-hourly-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $start-minute as xs:nonNegativeInteger, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean)"}, {"content":"admin:database-hourly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-minute as xs:nonNegativeInteger}, ${4:\\$max-backups as xs:unsignedLong}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean}, ${8:\\$include-replicas as xs:boolean}, ${9:\\$journal-archiving as xs:boolean?})", "trigger":"admin:database-hourly-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $start-minute as xs:nonNegativeInteger, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $journal-archiving as xs:boolean?)"}, {"content":"admin:database-hourly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-minute as xs:nonNegativeInteger}, ${4:\\$max-backups as xs:unsignedLong}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean}, ${8:\\$include-replicas as xs:boolean}, ${9:\\$journal-archiving as xs:boolean?}, ${10:\\$journal-archive-path as xs:string?})", "trigger":"admin:database-hourly-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $start-minute as xs:nonNegativeInteger, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?)"}, {"content":"admin:database-hourly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-minute as xs:nonNegativeInteger}, ${4:\\$max-backups as xs:unsignedLong}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean}, ${8:\\$include-replicas as xs:boolean}, ${9:\\$journal-archiving as xs:boolean?}, ${10:\\$journal-archive-path as xs:string?}, ${11:\\$lag-limit as xs:unsignedLong?})", "trigger":"admin:database-hourly-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $start-minute as xs:nonNegativeInteger, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?, $lag-limit as xs:unsignedLong?)"}, {"content":"admin:database-hourly-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-minute as xs:nonNegativeInteger}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean})", "trigger":"admin:database-hourly-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $start-minute as xs:nonNegativeInteger, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean)"}, {"content":"admin:database-hourly-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-minute as xs:nonNegativeInteger}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean}, ${7:\\$include-replicas as xs:boolean})", "trigger":"admin:database-hourly-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $start-minute as xs:nonNegativeInteger, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean)"}, {"content":"admin:database-hourly-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-minute as xs:nonNegativeInteger}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean}, ${7:\\$include-replicas as xs:boolean}, ${8:\\$incremental-dir as xs:string?})", "trigger":"admin:database-hourly-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $start-minute as xs:nonNegativeInteger, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?)"}, {"content":"admin:database-hourly-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-minute as xs:nonNegativeInteger}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean}, ${7:\\$include-replicas as xs:boolean}, ${8:\\$incremental-dir as xs:string?}, ${9:\\$purge-journal-archive as xs:boolean?})", "trigger":"admin:database-hourly-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $start-minute as xs:nonNegativeInteger, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?, $purge-journal-archive as xs:boolean?)"}, {"content":"admin:database-hourly-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-minute as xs:nonNegativeInteger}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean}, ${7:\\$include-replicas as xs:boolean}, ${8:\\$incremental-dir as xs:string?}, ${9:\\$purge-journal-archive as xs:boolean?}, ${10:\\$journal-archiving as xs:boolean?})", "trigger":"admin:database-hourly-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $start-minute as xs:nonNegativeInteger, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?, $purge-journal-archive as xs:boolean?, $journal-archiving as xs:boolean?)"}, {"content":"admin:database-hourly-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-minute as xs:nonNegativeInteger}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean}, ${7:\\$include-replicas as xs:boolean}, ${8:\\$incremental-dir as xs:string?}, ${9:\\$purge-journal-archive as xs:boolean?}, ${10:\\$journal-archiving as xs:boolean?}, ${11:\\$journal-archive-path as xs:string?})", "trigger":"admin:database-hourly-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $start-minute as xs:nonNegativeInteger, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?, $purge-journal-archive as xs:boolean?, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?)"}, {"content":"admin:database-hourly-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-minute as xs:nonNegativeInteger}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean}, ${7:\\$include-replicas as xs:boolean}, ${8:\\$incremental-dir as xs:string?}, ${9:\\$purge-journal-archive as xs:boolean?}, ${10:\\$journal-archiving as xs:boolean?}, ${11:\\$journal-archive-path as xs:string?}, ${12:\\$lag-limit as xs:unsignedLong?})", "trigger":"admin:database-hourly-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $start-minute as xs:nonNegativeInteger, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?, $purge-journal-archive as xs:boolean?, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?, $lag-limit as xs:unsignedLong?)"}, {"content":"admin:database-minutely-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$max-backups as xs:unsignedLong}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean})", "trigger":"admin:database-minutely-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean)"}, {"content":"admin:database-minutely-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$max-backups as xs:unsignedLong}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean}, ${7:\\$include-replicas as xs:boolean})", "trigger":"admin:database-minutely-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean)"}, {"content":"admin:database-minutely-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$max-backups as xs:unsignedLong}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean}, ${7:\\$include-replicas as xs:boolean}, ${8:\\$journal-archiving as xs:boolean?})", "trigger":"admin:database-minutely-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $journal-archiving as xs:boolean?)"}, {"content":"admin:database-minutely-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$max-backups as xs:unsignedLong}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean}, ${7:\\$include-replicas as xs:boolean}, ${8:\\$journal-archiving as xs:boolean?}, ${9:\\$journal-archive-path as xs:string?})", "trigger":"admin:database-minutely-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?)"}, {"content":"admin:database-minutely-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$max-backups as xs:unsignedLong}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean}, ${7:\\$include-replicas as xs:boolean}, ${8:\\$journal-archiving as xs:boolean?}, ${9:\\$journal-archive-path as xs:string?}, ${10:\\$lag-limit as xs:unsignedLong?})", "trigger":"admin:database-minutely-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $max-backups as xs:unsignedLong, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?, $lag-limit as xs:unsignedLong?)"}, {"content":"admin:database-minutely-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$backup-security-db as xs:boolean}, ${4:\\$backup-schemas-db as xs:boolean}, ${5:\\$backup-triggers-db as xs:boolean})", "trigger":"admin:database-minutely-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean)"}, {"content":"admin:database-minutely-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$backup-security-db as xs:boolean}, ${4:\\$backup-schemas-db as xs:boolean}, ${5:\\$backup-triggers-db as xs:boolean}, ${6:\\$include-replicas as xs:boolean})", "trigger":"admin:database-minutely-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean)"}, {"content":"admin:database-minutely-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$backup-security-db as xs:boolean}, ${4:\\$backup-schemas-db as xs:boolean}, ${5:\\$backup-triggers-db as xs:boolean}, ${6:\\$include-replicas as xs:boolean}, ${7:\\$incremental-dir as xs:string?})", "trigger":"admin:database-minutely-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?)"}, {"content":"admin:database-minutely-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$backup-security-db as xs:boolean}, ${4:\\$backup-schemas-db as xs:boolean}, ${5:\\$backup-triggers-db as xs:boolean}, ${6:\\$include-replicas as xs:boolean}, ${7:\\$incremental-dir as xs:string?}, ${8:\\$purge-journal-archive as xs:boolean?})", "trigger":"admin:database-minutely-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?, $purge-journal-archive as xs:boolean?)"}, {"content":"admin:database-minutely-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$backup-security-db as xs:boolean}, ${4:\\$backup-schemas-db as xs:boolean}, ${5:\\$backup-triggers-db as xs:boolean}, ${6:\\$include-replicas as xs:boolean}, ${7:\\$incremental-dir as xs:string?}, ${8:\\$purge-journal-archive as xs:boolean?}, ${9:\\$journal-archiving as xs:boolean?})", "trigger":"admin:database-minutely-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?, $purge-journal-archive as xs:boolean?, $journal-archiving as xs:boolean?)"}, {"content":"admin:database-minutely-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$backup-security-db as xs:boolean}, ${4:\\$backup-schemas-db as xs:boolean}, ${5:\\$backup-triggers-db as xs:boolean}, ${6:\\$include-replicas as xs:boolean}, ${7:\\$incremental-dir as xs:string?}, ${8:\\$purge-journal-archive as xs:boolean?}, ${9:\\$journal-archiving as xs:boolean?}, ${10:\\$journal-archive-path as xs:string?})", "trigger":"admin:database-minutely-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?, $purge-journal-archive as xs:boolean?, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?)"}, {"content":"admin:database-minutely-incremental-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$backup-security-db as xs:boolean}, ${4:\\$backup-schemas-db as xs:boolean}, ${5:\\$backup-triggers-db as xs:boolean}, ${6:\\$include-replicas as xs:boolean}, ${7:\\$incremental-dir as xs:string?}, ${8:\\$purge-journal-archive as xs:boolean?}, ${9:\\$journal-archiving as xs:boolean?}, ${10:\\$journal-archive-path as xs:string?}, ${11:\\$lag-limit as xs:unsignedLong?})", "trigger":"admin:database-minutely-incremental-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $backup-security-db as xs:boolean, $backup-schemas-db as xs:boolean, $backup-triggers-db as xs:boolean, $include-replicas as xs:boolean, $incremental-dir as xs:string?, $purge-journal-archive as xs:boolean?, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?, $lag-limit as xs:unsignedLong?)"}, {"content":"admin:forest-hourly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-minute as xs:nonNegativeInteger})", "trigger":"admin:forest-hourly-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $start-minute as xs:nonNegativeInteger)"}, {"content":"admin:forest-minutely-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger})", "trigger":"admin:forest-minutely-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger)"}, {"content":"admin:group-get-scheduled-tasks(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-scheduled-tasks", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-add-scheduled-task(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$scheduled-tasks as element(gr:scheduled-task)*})", "trigger":"admin:group-add-scheduled-task", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $scheduled-tasks as element(gr:scheduled-task)*)"}, {"content":"admin:group-delete-scheduled-task(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$scheduled-tasks as element(gr:scheduled-task)*})", "trigger":"admin:group-delete-scheduled-task", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $scheduled-tasks as element(gr:scheduled-task)*)"}, {"content":"admin:group-one-time-scheduled-task(${1:\\$task-path as xs:string}, ${2:\\$task-root as xs:string}, ${3:\\$task-start as xs:dateTime}, ${4:\\$task-database as xs:unsignedLong}, ${5:\\$task-modules as xs:unsignedLong}, ${6:\\$task-user as xs:unsignedLong}, ${7:\\$task-host as xs:unsignedLong?})", "trigger":"admin:group-one-time-scheduled-task", "description":"($task-path as xs:string, $task-root as xs:string, $task-start as xs:dateTime, $task-database as xs:unsignedLong, $task-modules as xs:unsignedLong, $task-user as xs:unsignedLong, $task-host as xs:unsignedLong?)"}, {"content":"admin:group-one-time-scheduled-task(${1:\\$task-path as xs:string}, ${2:\\$task-root as xs:string}, ${3:\\$task-start as xs:dateTime}, ${4:\\$task-database as xs:unsignedLong}, ${5:\\$task-modules as xs:unsignedLong}, ${6:\\$task-user as xs:unsignedLong}, ${7:\\$task-host as xs:unsignedLong?}, ${8:\\$task-priority as xs:string?})", "trigger":"admin:group-one-time-scheduled-task", "description":"($task-path as xs:string, $task-root as xs:string, $task-start as xs:dateTime, $task-database as xs:unsignedLong, $task-modules as xs:unsignedLong, $task-user as xs:unsignedLong, $task-host as xs:unsignedLong?, $task-priority as xs:string?)"}, {"content":"admin:group-monthly-scheduled-task(${1:\\$task-path as xs:string}, ${2:\\$task-root as xs:string}, ${3:\\$task-period as xs:positiveInteger}, ${4:\\$task-month-day as xs:unsignedLong}, ${5:\\$task-start-time as xs:time}, ${6:\\$task-database as xs:unsignedLong}, ${7:\\$task-modules as xs:unsignedLong}, ${8:\\$task-user as xs:unsignedLong}, ${9:\\$task-host as xs:unsignedLong?})", "trigger":"admin:group-monthly-scheduled-task", "description":"($task-path as xs:string, $task-root as xs:string, $task-period as xs:positiveInteger, $task-month-day as xs:unsignedLong, $task-start-time as xs:time, $task-database as xs:unsignedLong, $task-modules as xs:unsignedLong, $task-user as xs:unsignedLong, $task-host as xs:unsignedLong?)"}, {"content":"admin:group-monthly-scheduled-task(${1:\\$task-path as xs:string}, ${2:\\$task-root as xs:string}, ${3:\\$task-period as xs:positiveInteger}, ${4:\\$task-month-day as xs:unsignedLong}, ${5:\\$task-start-time as xs:time}, ${6:\\$task-database as xs:unsignedLong}, ${7:\\$task-modules as xs:unsignedLong}, ${8:\\$task-user as xs:unsignedLong}, ${9:\\$task-host as xs:unsignedLong?}, ${10:\\$task-priority as xs:string?})", "trigger":"admin:group-monthly-scheduled-task", "description":"($task-path as xs:string, $task-root as xs:string, $task-period as xs:positiveInteger, $task-month-day as xs:unsignedLong, $task-start-time as xs:time, $task-database as xs:unsignedLong, $task-modules as xs:unsignedLong, $task-user as xs:unsignedLong, $task-host as xs:unsignedLong?, $task-priority as xs:string?)"}, {"content":"admin:group-weekly-scheduled-task(${1:\\$task-path as xs:string}, ${2:\\$task-root as xs:string}, ${3:\\$task-period as xs:positiveInteger}, ${4:\\$task-days as xs:string+}, ${5:\\$task-start-time as xs:time}, ${6:\\$task-database as xs:unsignedLong}, ${7:\\$task-modules as xs:unsignedLong}, ${8:\\$task-user as xs:unsignedLong}, ${9:\\$task-host as xs:unsignedLong?})", "trigger":"admin:group-weekly-scheduled-task", "description":"($task-path as xs:string, $task-root as xs:string, $task-period as xs:positiveInteger, $task-days as xs:string+, $task-start-time as xs:time, $task-database as xs:unsignedLong, $task-modules as xs:unsignedLong, $task-user as xs:unsignedLong, $task-host as xs:unsignedLong?)"}, {"content":"admin:group-weekly-scheduled-task(${1:\\$task-path as xs:string}, ${2:\\$task-root as xs:string}, ${3:\\$task-period as xs:positiveInteger}, ${4:\\$task-days as xs:string+}, ${5:\\$task-start-time as xs:time}, ${6:\\$task-database as xs:unsignedLong}, ${7:\\$task-modules as xs:unsignedLong}, ${8:\\$task-user as xs:unsignedLong}, ${9:\\$task-host as xs:unsignedLong?}, ${10:\\$task-priority as xs:string?})", "trigger":"admin:group-weekly-scheduled-task", "description":"($task-path as xs:string, $task-root as xs:string, $task-period as xs:positiveInteger, $task-days as xs:string+, $task-start-time as xs:time, $task-database as xs:unsignedLong, $task-modules as xs:unsignedLong, $task-user as xs:unsignedLong, $task-host as xs:unsignedLong?, $task-priority as xs:string?)"}, {"content":"admin:group-daily-scheduled-task(${1:\\$task-path as xs:string}, ${2:\\$task-root as xs:string}, ${3:\\$task-period as xs:positiveInteger}, ${4:\\$task-start-time as xs:time}, ${5:\\$task-database as xs:unsignedLong}, ${6:\\$task-modules as xs:unsignedLong}, ${7:\\$task-user as xs:unsignedLong}, ${8:\\$task-host as xs:unsignedLong?})", "trigger":"admin:group-daily-scheduled-task", "description":"($task-path as xs:string, $task-root as xs:string, $task-period as xs:positiveInteger, $task-start-time as xs:time, $task-database as xs:unsignedLong, $task-modules as xs:unsignedLong, $task-user as xs:unsignedLong, $task-host as xs:unsignedLong?)"}, {"content":"admin:group-daily-scheduled-task(${1:\\$task-path as xs:string}, ${2:\\$task-root as xs:string}, ${3:\\$task-period as xs:positiveInteger}, ${4:\\$task-start-time as xs:time}, ${5:\\$task-database as xs:unsignedLong}, ${6:\\$task-modules as xs:unsignedLong}, ${7:\\$task-user as xs:unsignedLong}, ${8:\\$task-host as xs:unsignedLong?}, ${9:\\$task-priority as xs:string?})", "trigger":"admin:group-daily-scheduled-task", "description":"($task-path as xs:string, $task-root as xs:string, $task-period as xs:positiveInteger, $task-start-time as xs:time, $task-database as xs:unsignedLong, $task-modules as xs:unsignedLong, $task-user as xs:unsignedLong, $task-host as xs:unsignedLong?, $task-priority as xs:string?)"}, {"content":"admin:group-hourly-scheduled-task(${1:\\$task-path as xs:string}, ${2:\\$task-root as xs:string}, ${3:\\$task-period as xs:positiveInteger}, ${4:\\$task-minute as xs:nonNegativeInteger}, ${5:\\$task-database as xs:unsignedLong}, ${6:\\$task-modules as xs:unsignedLong}, ${7:\\$task-user as xs:unsignedLong}, ${8:\\$task-host as xs:unsignedLong?})", "trigger":"admin:group-hourly-scheduled-task", "description":"($task-path as xs:string, $task-root as xs:string, $task-period as xs:positiveInteger, $task-minute as xs:nonNegativeInteger, $task-database as xs:unsignedLong, $task-modules as xs:unsignedLong, $task-user as xs:unsignedLong, $task-host as xs:unsignedLong?)"}, {"content":"admin:group-hourly-scheduled-task(${1:\\$task-path as xs:string}, ${2:\\$task-root as xs:string}, ${3:\\$task-period as xs:positiveInteger}, ${4:\\$task-minute as xs:nonNegativeInteger}, ${5:\\$task-database as xs:unsignedLong}, ${6:\\$task-modules as xs:unsignedLong}, ${7:\\$task-user as xs:unsignedLong}, ${8:\\$task-host as xs:unsignedLong?}, ${9:\\$task-priority as xs:string?})", "trigger":"admin:group-hourly-scheduled-task", "description":"($task-path as xs:string, $task-root as xs:string, $task-period as xs:positiveInteger, $task-minute as xs:nonNegativeInteger, $task-database as xs:unsignedLong, $task-modules as xs:unsignedLong, $task-user as xs:unsignedLong, $task-host as xs:unsignedLong?, $task-priority as xs:string?)"}, {"content":"admin:group-minutely-scheduled-task(${1:\\$task-path as xs:string}, ${2:\\$task-root as xs:string}, ${3:\\$task-period as xs:positiveInteger}, ${4:\\$task-database as xs:unsignedLong}, ${5:\\$task-modules as xs:unsignedLong}, ${6:\\$task-user as xs:unsignedLong}, ${7:\\$task-host as xs:unsignedLong?})", "trigger":"admin:group-minutely-scheduled-task", "description":"($task-path as xs:string, $task-root as xs:string, $task-period as xs:positiveInteger, $task-database as xs:unsignedLong, $task-modules as xs:unsignedLong, $task-user as xs:unsignedLong, $task-host as xs:unsignedLong?)"}, {"content":"admin:group-minutely-scheduled-task(${1:\\$task-path as xs:string}, ${2:\\$task-root as xs:string}, ${3:\\$task-period as xs:positiveInteger}, ${4:\\$task-database as xs:unsignedLong}, ${5:\\$task-modules as xs:unsignedLong}, ${6:\\$task-user as xs:unsignedLong}, ${7:\\$task-host as xs:unsignedLong?}, ${8:\\$task-priority as xs:string?})", "trigger":"admin:group-minutely-scheduled-task", "description":"($task-path as xs:string, $task-root as xs:string, $task-period as xs:positiveInteger, $task-database as xs:unsignedLong, $task-modules as xs:unsignedLong, $task-user as xs:unsignedLong, $task-host as xs:unsignedLong?, $task-priority as xs:string?)"}, {"content":"admin:appserver-get-ssl-certificate-template(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-ssl-certificate-template", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-ssl-ciphers(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-ssl-ciphers", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-ssl-hostname(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-ssl-hostname", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-set-ssl-certificate-template(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedLong})", "trigger":"admin:appserver-set-ssl-certificate-template", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:unsignedLong)"}, {"content":"admin:appserver-set-ssl-ciphers(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-ssl-ciphers", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-ssl-hostname(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-ssl-hostname", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-get-ssl-allow-sslv3(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-ssl-allow-sslv3", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-ssl-allow-tls(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-ssl-allow-tls", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-ssl-client-certificate-authorities(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-ssl-client-certificate-authorities", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-set-ssl-allow-sslv3(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:appserver-set-ssl-allow-sslv3", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:appserver-set-ssl-allow-tls(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:appserver-set-ssl-allow-tls", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:appserver-set-ssl-client-certificate-authorities(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedLong*})", "trigger":"admin:appserver-set-ssl-client-certificate-authorities", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:unsignedLong*)"}, {"content":"admin:forest-daily-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-time as xs:time})", "trigger":"admin:forest-daily-backup", "description":"($backup-dir as xs:string, $backup-period as xs:positiveInteger, $start-time as xs:time)"}, {"content":"admin:database-set-tf-normalization(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:database-set-tf-normalization", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:database-get-tf-normalization(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-tf-normalization", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:group-get-xdqp-ssl-enabled(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-xdqp-ssl-enabled", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-xdqp-ssl-allow-sslv3(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-xdqp-ssl-allow-sslv3", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-xdqp-ssl-allow-tls(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-xdqp-ssl-allow-tls", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-xdqp-ssl-ciphers(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-xdqp-ssl-ciphers", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-set-xdqp-ssl-enabled(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:group-set-xdqp-ssl-enabled", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:group-set-xdqp-ssl-allow-sslv3(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:group-set-xdqp-ssl-allow-sslv3", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:group-set-xdqp-ssl-allow-tls(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:group-set-xdqp-ssl-allow-tls", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:group-set-xdqp-ssl-ciphers(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:group-set-xdqp-ssl-ciphers", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-get-ssl-require-client-certificate(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-ssl-require-client-certificate", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-set-ssl-require-client-certificate(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:appserver-set-ssl-require-client-certificate", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-exists(${1:\\$config as element(configuration)}, ${2:\\$database-name as xs:string})", "trigger":"admin:database-exists", "description":"($config as element(configuration), $database-name as xs:string)"}, {"content":"admin:forest-exists(${1:\\$config as element(configuration)}, ${2:\\$forest-name as xs:string})", "trigger":"admin:forest-exists", "description":"($config as element(configuration), $forest-name as xs:string)"}, {"content":"admin:forest-get-database(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "trigger":"admin:forest-get-database", "description":"($config as element(configuration), $forest-id as xs:unsignedLong)"}, {"content":"admin:forest-get-replicas(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "trigger":"admin:forest-get-replicas", "description":"($config as element(configuration), $forest-id as xs:unsignedLong)"}, {"content":"admin:forest-add-replica(${1:\\$config as element(configuration)}, ${2:\\$master-id as xs:unsignedLong}, ${3:\\$replica-id as xs:unsignedLong})", "trigger":"admin:forest-add-replica", "description":"($config as element(configuration), $master-id as xs:unsignedLong, $replica-id as xs:unsignedLong)"}, {"content":"admin:forest-remove-replica(${1:\\$config as element(configuration)}, ${2:\\$master-id as xs:unsignedLong}, ${3:\\$replica-id as xs:unsignedLong})", "trigger":"admin:forest-remove-replica", "description":"($config as element(configuration), $master-id as xs:unsignedLong, $replica-id as xs:unsignedLong)"}, {"content":"admin:host-exists(${1:\\$config as element(configuration)}, ${2:\\$host-name as xs:string})", "trigger":"admin:host-exists", "description":"($config as element(configuration), $host-name as xs:string)"}, {"content":"admin:appserver-exists(${1:\\$config as element(configuration)}, ${2:\\$group-ids as xs:unsignedLong*}, ${3:\\$appserver-name as xs:string})", "trigger":"admin:appserver-exists", "description":"($config as element(configuration), $group-ids as xs:unsignedLong*, $appserver-name as xs:string)"}, {"content":"admin:group-exists(${1:\\$config as element(configuration)}, ${2:\\$group-name as xs:string})", "trigger":"admin:group-exists", "description":"($config as element(configuration), $group-name as xs:string)"}, {"content":"admin:database-set-field-value-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:boolean?})", "trigger":"admin:database-set-field-value-positions", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string, $value as xs:boolean?)"}, {"content":"admin:database-set-field-value-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:boolean?})", "trigger":"admin:database-set-field-value-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string, $value as xs:boolean?)"}, {"content":"admin:database-get-field-value-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "trigger":"admin:database-get-field-value-positions", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string)"}, {"content":"admin:database-get-field-value-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "trigger":"admin:database-get-field-value-searches", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string)"}, {"content":"admin:database-set-preload-replica-mapped-data(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-preload-replica-mapped-data", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-get-preload-replica-mapped-data(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-preload-replica-mapped-data", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-foreign-replica(${1:\\$foreign-cluster-id as xs:unsignedLong}, ${2:\\$foreign-database-id as xs:unsignedLong}, ${3:\\$connect-forests-by-name as xs:boolean}, ${4:\\$lag-limit as xs:unsignedInt})", "trigger":"admin:database-foreign-replica", "description":"($foreign-cluster-id as xs:unsignedLong, $foreign-database-id as xs:unsignedLong, $connect-forests-by-name as xs:boolean, $lag-limit as xs:unsignedInt)"}, {"content":"admin:database-foreign-replica(${1:\\$foreign-cluster-id as xs:unsignedLong}, ${2:\\$foreign-database-id as xs:unsignedLong}, ${3:\\$connect-forests-by-name as xs:boolean}, ${4:\\$lag-limit as xs:unsignedInt}, ${5:\\$replication-enabled as xs:boolean})", "trigger":"admin:database-foreign-replica", "description":"($foreign-cluster-id as xs:unsignedLong, $foreign-database-id as xs:unsignedLong, $connect-forests-by-name as xs:boolean, $lag-limit as xs:unsignedInt, $replication-enabled as xs:boolean)"}, {"content":"admin:database-foreign-replica(${1:\\$foreign-cluster-id as xs:unsignedLong}, ${2:\\$foreign-database-id as xs:unsignedLong}, ${3:\\$connect-forests-by-name as xs:boolean}, ${4:\\$lag-limit as xs:unsignedInt}, ${5:\\$replication-enabled as xs:boolean}, ${6:\\$queue-size as xs:unsignedInt})", "trigger":"admin:database-foreign-replica", "description":"($foreign-cluster-id as xs:unsignedLong, $foreign-database-id as xs:unsignedLong, $connect-forests-by-name as xs:boolean, $lag-limit as xs:unsignedInt, $replication-enabled as xs:boolean, $queue-size as xs:unsignedInt)"}, {"content":"admin:database-foreign-replica-get-cluster-id(${1:\\$foreign-replica as element(db:foreign-replica)})", "trigger":"admin:database-foreign-replica-get-cluster-id", "description":"($foreign-replica as element(db:foreign-replica))"}, {"content":"admin:database-foreign-replica-get-database-id(${1:\\$foreign-replica as element(db:foreign-replica)})", "trigger":"admin:database-foreign-replica-get-database-id", "description":"($foreign-replica as element(db:foreign-replica))"}, {"content":"admin:database-foreign-replica-get-connect-forests-by-name(${1:\\$foreign-replica as element(db:foreign-replica)})", "trigger":"admin:database-foreign-replica-get-connect-forests-by-name", "description":"($foreign-replica as element(db:foreign-replica))"}, {"content":"admin:database-foreign-replica-get-lag-limit(${1:\\$foreign-replica as element(db:foreign-replica)})", "trigger":"admin:database-foreign-replica-get-lag-limit", "description":"($foreign-replica as element(db:foreign-replica))"}, {"content":"admin:database-foreign-replica-set-lag-limit(${1:\\$foreign-replica as element(db:foreign-replica)}, ${2:\\$lag-limit as xs:unsignedInt})", "trigger":"admin:database-foreign-replica-set-lag-limit", "description":"($foreign-replica as element(db:foreign-replica), $lag-limit as xs:unsignedInt)"}, {"content":"admin:database-foreign-replica-get-replication-enabled(${1:\\$foreign-replica as element(db:foreign-replica)})", "trigger":"admin:database-foreign-replica-get-replication-enabled", "description":"($foreign-replica as element(db:foreign-replica))"}, {"content":"admin:database-foreign-replica-set-replication-enabled(${1:\\$foreign-replica as element(db:foreign-replica)}, ${2:\\$enabled as xs:boolean})", "trigger":"admin:database-foreign-replica-set-replication-enabled", "description":"($foreign-replica as element(db:foreign-replica), $enabled as xs:boolean)"}, {"content":"admin:database-foreign-master(${1:\\$foreign-cluster-id as xs:unsignedLong}, ${2:\\$foreign-database-id as xs:unsignedLong}, ${3:\\$connect-forests-by-name as xs:boolean})", "trigger":"admin:database-foreign-master", "description":"($foreign-cluster-id as xs:unsignedLong, $foreign-database-id as xs:unsignedLong, $connect-forests-by-name as xs:boolean)"}, {"content":"admin:database-foreign-master-get-cluster-id(${1:\\$foreign-master as element(db:foreign-master)})", "trigger":"admin:database-foreign-master-get-cluster-id", "description":"($foreign-master as element(db:foreign-master))"}, {"content":"admin:database-foreign-master-get-database-id(${1:\\$foreign-master as element(db:foreign-master)})", "trigger":"admin:database-foreign-master-get-database-id", "description":"($foreign-master as element(db:foreign-master))"}, {"content":"admin:database-foreign-master-get-connect-forests-by-name(${1:\\$foreign-master as element(db:foreign-master)})", "trigger":"admin:database-foreign-master-get-connect-forests-by-name", "description":"($foreign-master as element(db:foreign-master))"}, {"content":"admin:database-set-foreign-master(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$foreign-master as element(db:foreign-master)})", "trigger":"admin:database-set-foreign-master", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $foreign-master as element(db:foreign-master))"}, {"content":"admin:database-delete-foreign-master(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-delete-foreign-master", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-foreign-master(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-foreign-master", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-add-foreign-replicas(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$replicas as element(db:foreign-replica)*})", "trigger":"admin:database-add-foreign-replicas", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $replicas as element(db:foreign-replica)*)"}, {"content":"admin:database-set-foreign-replicas(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$replicas as element(db:foreign-replica)*})", "trigger":"admin:database-set-foreign-replicas", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $replicas as element(db:foreign-replica)*)"}, {"content":"admin:database-delete-foreign-replicas(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$foreign-replicas as element(db:foreign-replica)*})", "trigger":"admin:database-delete-foreign-replicas", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $foreign-replicas as element(db:foreign-replica)*)"}, {"content":"admin:database-get-foreign-replicas(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-foreign-replicas", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:forest-foreign-replica(${1:\\$foreign-cluster-id as xs:unsignedLong}, ${2:\\$foreign-database-id as xs:unsignedLong}, ${3:\\$foreign-forest-id as xs:unsignedLong})", "trigger":"admin:forest-foreign-replica", "description":"($foreign-cluster-id as xs:unsignedLong, $foreign-database-id as xs:unsignedLong, $foreign-forest-id as xs:unsignedLong)"}, {"content":"admin:forest-foreign-replica-get-cluster-id(${1:\\$foreign-replica as element(as:foreign-replica)})", "trigger":"admin:forest-foreign-replica-get-cluster-id", "description":"($foreign-replica as element(as:foreign-replica))"}, {"content":"admin:forest-foreign-replica-get-database-id(${1:\\$foreign-replica as element(as:foreign-replica)})", "trigger":"admin:forest-foreign-replica-get-database-id", "description":"($foreign-replica as element(as:foreign-replica))"}, {"content":"admin:forest-foreign-replica-get-forest-id(${1:\\$foreign-replica as element(as:foreign-replica)})", "trigger":"admin:forest-foreign-replica-get-forest-id", "description":"($foreign-replica as element(as:foreign-replica))"}, {"content":"admin:forest-foreign-master(${1:\\$foreign-cluster-id as xs:unsignedLong}, ${2:\\$foreign-database-id as xs:unsignedLong}, ${3:\\$foreign-forest-id as xs:unsignedLong})", "trigger":"admin:forest-foreign-master", "description":"($foreign-cluster-id as xs:unsignedLong, $foreign-database-id as xs:unsignedLong, $foreign-forest-id as xs:unsignedLong)"}, {"content":"admin:forest-foreign-master-get-cluster-id(${1:\\$foreign-master as element(as:foreign-master)})", "trigger":"admin:forest-foreign-master-get-cluster-id", "description":"($foreign-master as element(as:foreign-master))"}, {"content":"admin:forest-foreign-master-get-database-id(${1:\\$foreign-master as element(as:foreign-master)})", "trigger":"admin:forest-foreign-master-get-database-id", "description":"($foreign-master as element(as:foreign-master))"}, {"content":"admin:forest-foreign-master-get-forest-id(${1:\\$foreign-master as element(as:foreign-master)})", "trigger":"admin:forest-foreign-master-get-forest-id", "description":"($foreign-master as element(as:foreign-master))"}, {"content":"admin:forest-set-foreign-master(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$foreign-master as element(as:foreign-master)})", "trigger":"admin:forest-set-foreign-master", "description":"($config as element(configuration), $forest-id as xs:unsignedLong, $foreign-master as element(as:foreign-master))"}, {"content":"admin:forest-delete-foreign-master(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "trigger":"admin:forest-delete-foreign-master", "description":"($config as element(configuration), $forest-id as xs:unsignedLong)"}, {"content":"admin:forest-get-foreign-master(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "trigger":"admin:forest-get-foreign-master", "description":"($config as element(configuration), $forest-id as xs:unsignedLong)"}, {"content":"admin:forest-add-foreign-replicas(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$foreign-replicas as element(as:foreign-replica)*})", "trigger":"admin:forest-add-foreign-replicas", "description":"($config as element(configuration), $forest-id as xs:unsignedLong, $foreign-replicas as element(as:foreign-replica)*)"}, {"content":"admin:forest-set-foreign-replicas(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$foreign-replicas as element(as:foreign-replica)*})", "trigger":"admin:forest-set-foreign-replicas", "description":"($config as element(configuration), $forest-id as xs:unsignedLong, $foreign-replicas as element(as:foreign-replica)*)"}, {"content":"admin:forest-delete-foreign-replicas(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$foreign-replicas as element(as:foreign-replica)*})", "trigger":"admin:forest-delete-foreign-replicas", "description":"($config as element(configuration), $forest-id as xs:unsignedLong, $foreign-replicas as element(as:foreign-replica)*)"}, {"content":"admin:forest-get-foreign-replicas(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "trigger":"admin:forest-get-foreign-replicas", "description":"($config as element(configuration), $forest-id as xs:unsignedLong)"}, {"content":"admin:host-get-foreign-port(${1:\\$config as element(configuration)}, ${2:\\$host-id as xs:unsignedLong})", "trigger":"admin:host-get-foreign-port", "description":"($config as element(configuration), $host-id as xs:unsignedLong)"}, {"content":"admin:host-set-foreign-port(${1:\\$config as element(configuration)}, ${2:\\$host-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:host-set-foreign-port", "description":"($config as element(configuration), $host-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:cluster-get-id(${1:\\$config as element(configuration)})", "trigger":"admin:cluster-get-id", "description":"($config as element(configuration))"}, {"content":"admin:cluster-get-name(${1:\\$config as element(configuration)})", "trigger":"admin:cluster-get-name", "description":"($config as element(configuration))"}, {"content":"admin:cluster-set-name(${1:\\$config as element(configuration)}, ${2:\\$name as xs:string})", "trigger":"admin:cluster-set-name", "description":"($config as element(configuration), $name as xs:string)"}, {"content":"admin:cluster-set-xdqp-ssl-certificate(${1:\\$config as element(configuration)}, ${2:\\$value as xs:string})", "trigger":"admin:cluster-set-xdqp-ssl-certificate", "description":"($config as element(configuration), $value as xs:string)"}, {"content":"admin:cluster-get-xdqp-ssl-certificate(${1:\\$config as element(configuration)})", "trigger":"admin:cluster-get-xdqp-ssl-certificate", "description":"($config as element(configuration))"}, {"content":"admin:cluster-get-xdqp-ssl-private-key(${1:\\$config as element(configuration)})", "trigger":"admin:cluster-get-xdqp-ssl-private-key", "description":"($config as element(configuration))"}, {"content":"admin:cluster-set-xdqp-ssl-private-key(${1:\\$config as element(configuration)}, ${2:\\$value as xs:string})", "trigger":"admin:cluster-set-xdqp-ssl-private-key", "description":"($config as element(configuration), $value as xs:string)"}, {"content":"admin:cluster-set-xdqp-bootstrap-hosts(${1:\\$config as element(configuration)}, ${2:\\$host-ids as xs:unsignedLong*})", "trigger":"admin:cluster-set-xdqp-bootstrap-hosts", "description":"($config as element(configuration), $host-ids as xs:unsignedLong*)"}, {"content":"admin:cluster-get-xdqp-bootstrap-hosts(${1:\\$config as element(configuration)})", "trigger":"admin:cluster-get-xdqp-bootstrap-hosts", "description":"($config as element(configuration))"}, {"content":"admin:foreign-host(${1:\\$host-id as xs:unsignedLong}, ${2:\\$host-name as xs:string}, ${3:\\$connect-port as xs:unsignedInt})", "trigger":"admin:foreign-host", "description":"($host-id as xs:unsignedLong, $host-name as xs:string, $connect-port as xs:unsignedInt)"}, {"content":"admin:foreign-host-get-id(${1:\\$fh as element(cl:foreign-host)})", "trigger":"admin:foreign-host-get-id", "description":"($fh as element(cl:foreign-host))"}, {"content":"admin:foreign-host-get-name(${1:\\$fh as element(cl:foreign-host)})", "trigger":"admin:foreign-host-get-name", "description":"($fh as element(cl:foreign-host))"}, {"content":"admin:foreign-host-get-connect-port(${1:\\$fh as element(cl:foreign-host)})", "trigger":"admin:foreign-host-get-connect-port", "description":"($fh as element(cl:foreign-host))"}, {"content":"admin:foreign-cluster-delete(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong})", "trigger":"admin:foreign-cluster-delete", "description":"($config as element(configuration), $cluster-id as xs:unsignedLong)"}, {"content":"admin:foreign-cluster-replace(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong}, ${3:\\$cluster-name as xs:string}, ${4:\\$xdqp-timeout as xs:unsignedInt?}, ${5:\\$host-timeout as xs:unsignedInt?}, ${6:\\$ssl-certificate as xs:string?}, ${7:\\$xdqp-ssl-enabled as xs:boolean?}, ${8:\\$xdqp-ssl-allow-sslv3 as xs:boolean?}, ${9:\\$xdqp-ssl-allow-tls as xs:boolean?}, ${10:\\$xdqp-ssl-ciphers as xs:string?}, ${11:\\$foreign-bootstrap-hosts as element(cl:foreign-host)*})", "trigger":"admin:foreign-cluster-replace", "description":"($config as element(configuration), $cluster-id as xs:unsignedLong, $cluster-name as xs:string, $xdqp-timeout as xs:unsignedInt?, $host-timeout as xs:unsignedInt?, $ssl-certificate as xs:string?, $xdqp-ssl-enabled as xs:boolean?, $xdqp-ssl-allow-sslv3 as xs:boolean?, $xdqp-ssl-allow-tls as xs:boolean?, $xdqp-ssl-ciphers as xs:string?, $foreign-bootstrap-hosts as element(cl:foreign-host)*)"}, {"content":"admin:foreign-cluster-create(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong}, ${3:\\$cluster-name as xs:string}, ${4:\\$xdqp-timeout as xs:unsignedInt?}, ${5:\\$host-timeout as xs:unsignedInt?}, ${6:\\$ssl-certificate as xs:string?}, ${7:\\$xdqp-ssl-enabled as xs:boolean?}, ${8:\\$xdqp-ssl-allow-sslv3 as xs:boolean?}, ${9:\\$xdqp-ssl-allow-tls as xs:boolean?}, ${10:\\$xdqp-ssl-ciphers as xs:string?}, ${11:\\$foreign-bootstrap-hosts as element(cl:foreign-host)*})", "trigger":"admin:foreign-cluster-create", "description":"($config as element(configuration), $cluster-id as xs:unsignedLong, $cluster-name as xs:string, $xdqp-timeout as xs:unsignedInt?, $host-timeout as xs:unsignedInt?, $ssl-certificate as xs:string?, $xdqp-ssl-enabled as xs:boolean?, $xdqp-ssl-allow-sslv3 as xs:boolean?, $xdqp-ssl-allow-tls as xs:boolean?, $xdqp-ssl-ciphers as xs:string?, $foreign-bootstrap-hosts as element(cl:foreign-host)*)"}, {"content":"admin:cluster-get-foreign-cluster-ids(${1:\\$config as element(configuration)})", "trigger":"admin:cluster-get-foreign-cluster-ids", "description":"($config as element(configuration))"}, {"content":"admin:cluster-get-foreign-cluster-id(${1:\\$config as element(configuration)}, ${2:\\$name as xs:string})", "trigger":"admin:cluster-get-foreign-cluster-id", "description":"($config as element(configuration), $name as xs:string)"}, {"content":"admin:foreign-cluster-get-name(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong})", "trigger":"admin:foreign-cluster-get-name", "description":"($config as element(configuration), $cluster-id as xs:unsignedLong)"}, {"content":"admin:foreign-cluster-set-name(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong}, ${3:\\$cluster-name as xs:string})", "trigger":"admin:foreign-cluster-set-name", "description":"($config as element(configuration), $cluster-id as xs:unsignedLong, $cluster-name as xs:string)"}, {"content":"admin:foreign-cluster-set-xdqp-timeout(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong}, ${3:\\$xdqp-timeout as xs:unsignedInt})", "trigger":"admin:foreign-cluster-set-xdqp-timeout", "description":"($config as element(configuration), $cluster-id as xs:unsignedLong, $xdqp-timeout as xs:unsignedInt)"}, {"content":"admin:foreign-cluster-get-xdqp-timeout(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong})", "trigger":"admin:foreign-cluster-get-xdqp-timeout", "description":"($config as element(configuration), $cluster-id as xs:unsignedLong)"}, {"content":"admin:foreign-cluster-set-host-timeout(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong}, ${3:\\$host-timeout as xs:unsignedInt})", "trigger":"admin:foreign-cluster-set-host-timeout", "description":"($config as element(configuration), $cluster-id as xs:unsignedLong, $host-timeout as xs:unsignedInt)"}, {"content":"admin:foreign-cluster-get-host-timeout(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong})", "trigger":"admin:foreign-cluster-get-host-timeout", "description":"($config as element(configuration), $cluster-id as xs:unsignedLong)"}, {"content":"admin:foreign-cluster-get-ssl-certificate(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong})", "trigger":"admin:foreign-cluster-get-ssl-certificate", "description":"($config as element(configuration), $cluster-id as xs:unsignedLong)"}, {"content":"admin:foreign-cluster-set-ssl-certificate(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong}, ${3:\\$ssl-certificate as xs:string?})", "trigger":"admin:foreign-cluster-set-ssl-certificate", "description":"($config as element(configuration), $cluster-id as xs:unsignedLong, $ssl-certificate as xs:string?)"}, {"content":"admin:foreign-cluster-get-xdqp-ssl-enabled(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong})", "trigger":"admin:foreign-cluster-get-xdqp-ssl-enabled", "description":"($config as element(configuration), $cluster-id as xs:unsignedLong)"}, {"content":"admin:foreign-cluster-set-xdqp-ssl-enabled(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:foreign-cluster-set-xdqp-ssl-enabled", "description":"($config as element(configuration), $cluster-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:foreign-cluster-get-xdqp-ssl-allow-sslv3(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong})", "trigger":"admin:foreign-cluster-get-xdqp-ssl-allow-sslv3", "description":"($config as element(configuration), $cluster-id as xs:unsignedLong)"}, {"content":"admin:foreign-cluster-set-xdqp-ssl-allow-sslv3(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:foreign-cluster-set-xdqp-ssl-allow-sslv3", "description":"($config as element(configuration), $cluster-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:foreign-cluster-get-xdqp-ssl-allow-tls(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong})", "trigger":"admin:foreign-cluster-get-xdqp-ssl-allow-tls", "description":"($config as element(configuration), $cluster-id as xs:unsignedLong)"}, {"content":"admin:foreign-cluster-set-xdqp-ssl-allow-tls(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:foreign-cluster-set-xdqp-ssl-allow-tls", "description":"($config as element(configuration), $cluster-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:foreign-cluster-get-xdqp-ssl-ciphers(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong})", "trigger":"admin:foreign-cluster-get-xdqp-ssl-ciphers", "description":"($config as element(configuration), $cluster-id as xs:unsignedLong)"}, {"content":"admin:foreign-cluster-set-xdqp-ssl-ciphers(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:foreign-cluster-set-xdqp-ssl-ciphers", "description":"($config as element(configuration), $cluster-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:foreign-cluster-get-bootstrap-hosts(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong})", "trigger":"admin:foreign-cluster-get-bootstrap-hosts", "description":"($config as element(configuration), $cluster-id as xs:unsignedLong)"}, {"content":"admin:foreign-cluster-set-bootstrap-hosts(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong}, ${3:\\$bootstrap-hosts as element(cl:foreign-host)*})", "trigger":"admin:foreign-cluster-set-bootstrap-hosts", "description":"($config as element(configuration), $cluster-id as xs:unsignedLong, $bootstrap-hosts as element(cl:foreign-host)*)"}, {"content":"admin:database-get-large-size-threshold(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-large-size-threshold", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:forest-get-fast-data-directory(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "trigger":"admin:forest-get-fast-data-directory", "description":"($config as element(configuration), $forest-id as xs:unsignedLong)"}, {"content":"admin:cluster-get-foreign-replica-databases(${1:\\$config as element(configuration)}, ${2:\\$foreign-cluster-id as xs:unsignedLong}, ${3:\\$database-ids as xs:unsignedLong*})", "trigger":"admin:cluster-get-foreign-replica-databases", "description":"($config as element(configuration), $foreign-cluster-id as xs:unsignedLong, $database-ids as xs:unsignedLong*)"}, {"content":"admin:cluster-get-foreign-master-database(${1:\\$config as element(configuration)}, ${2:\\$foreign-cluster-id as xs:unsignedLong}, ${3:\\$database-ids as xs:unsignedLong*})", "trigger":"admin:cluster-get-foreign-master-database", "description":"($config as element(configuration), $foreign-cluster-id as xs:unsignedLong, $database-ids as xs:unsignedLong*)"}, {"content":"admin:database-get-config-for-foreign-replicas-on-foreign-cluster(${1:\\$config as element(configuration)}, ${2:\\$foreign-cluster-id as xs:unsignedLong})", "trigger":"admin:database-get-config-for-foreign-replicas-on-foreign-cluster", "description":"($config as element(configuration), $foreign-cluster-id as xs:unsignedLong)"}, {"content":"admin:database-get-config-for-foreign-master-on-foreign-cluster(${1:\\$config as element(configuration)}, ${2:\\$foreign-cluster-id as xs:unsignedLong})", "trigger":"admin:database-get-config-for-foreign-master-on-foreign-cluster", "description":"($config as element(configuration), $foreign-cluster-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-output-method(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-output-method", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-output-byte-order-mark(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-output-byte-order-mark", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-output-cdata-section-namespace-uri(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-output-cdata-section-namespace-uri", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-output-cdata-section-localname(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-output-cdata-section-localname", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-output-doctype-public(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-output-doctype-public", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-output-doctype-system(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-output-doctype-system", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-output-escape-uri-attributes(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-output-escape-uri-attributes", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-output-include-content-type(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-output-include-content-type", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-output-indent(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-output-indent", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-output-indent-tabs(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-output-indent-tabs", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-output-indent-untyped(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-output-indent-untyped", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-output-media-type(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-output-media-type", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-output-normalization-form(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-output-normalization-form", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-output-omit-xml-declaration(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-output-omit-xml-declaration", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-output-standalone(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-output-standalone", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-output-undeclare-prefixes(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-output-undeclare-prefixes", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-output-version(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-output-version", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-output-include-default-attributes(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-output-include-default-attributes", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-set-output-method(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-output-method", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-output-byte-order-mark(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-output-byte-order-mark", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-output-cdata-section-namespace-uri(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-output-cdata-section-namespace-uri", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-output-cdata-section-localname(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-output-cdata-section-localname", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-output-doctype-public(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-output-doctype-public", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-output-doctype-system(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-output-doctype-system", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-output-escape-uri-attributes(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-output-escape-uri-attributes", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-output-include-content-type(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-output-include-content-type", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-output-indent(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-output-indent", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-output-indent-tabs(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-output-indent-tabs", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-output-indent-untyped(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-output-indent-untyped", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-output-media-type(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-output-media-type", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-output-normalization-form(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-output-normalization-form", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-output-omit-xml-declaration(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-output-omit-xml-declaration", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-output-standalone(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-output-standalone", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-output-undeclare-prefixes(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-output-undeclare-prefixes", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-output-version(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-output-version", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:appserver-set-output-include-default-attributes(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-output-include-default-attributes", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:database-add-foreign-database(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$foreign-cluster-id as xs:unsignedLong}, ${4:\\$foreign-database-id as xs:unsignedLong})", "trigger":"admin:database-add-foreign-database", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $foreign-cluster-id as xs:unsignedLong, $foreign-database-id as xs:unsignedLong)"}, {"content":"admin:database-delete-foreign-database(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$foreign-cluster-id as xs:unsignedLong}, ${4:\\$foreign-database-id as xs:unsignedLong})", "trigger":"admin:database-delete-foreign-database", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $foreign-cluster-id as xs:unsignedLong, $foreign-database-id as xs:unsignedLong)"}, {"content":"admin:database-path-namespace(${1:\\$prefix as xs:string}, ${2:\\$namespace-uri as xs:string})", "trigger":"admin:database-path-namespace", "description":"($prefix as xs:string, $namespace-uri as xs:string)"}, {"content":"admin:database-get-path-namespaces(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-path-namespaces", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-in-use-path-namespace-prefixes(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-in-use-path-namespace-prefixes", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-add-path-namespace(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$path-namespaces as element(db:path-namespace)*})", "trigger":"admin:database-add-path-namespace", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $path-namespaces as element(db:path-namespace)*)"}, {"content":"admin:database-delete-path-namespace(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$path-namespaces as element(db:path-namespace)*})", "trigger":"admin:database-delete-path-namespace", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $path-namespaces as element(db:path-namespace)*)"}, {"content":"admin:database-range-path-index(${1:\\$database-id as xs:unsignedLong}, ${2:\\$scalar-type as xs:string}, ${3:\\$pathexpr as xs:string}, ${4:\\$collation as xs:string?}, ${5:\\$range-value-positions as xs:boolean}, ${6:\\$invalid-values as xs:string})", "trigger":"admin:database-range-path-index", "description":"($database-id as xs:unsignedLong, $scalar-type as xs:string, $pathexpr as xs:string, $collation as xs:string?, $range-value-positions as xs:boolean, $invalid-values as xs:string)"}, {"content":"admin:database-get-range-path-indexes(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-range-path-indexes", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-add-range-path-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$range-indexes as element(db:range-path-index)*})", "trigger":"admin:database-add-range-path-index", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $range-indexes as element(db:range-path-index)*)"}, {"content":"admin:database-delete-range-path-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$range-indexes as element(db:range-path-index)*})", "trigger":"admin:database-delete-range-path-index", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $range-indexes as element(db:range-path-index)*)"}, {"content":"admin:database-geospatial-path-index(${1:\\$pathexpr as xs:string}, ${2:\\$coordinate-system as xs:string}, ${3:\\$range-value-positions as xs:boolean}, ${4:\\$point-format as xs:string}, ${5:\\$invalid-values as xs:string})", "trigger":"admin:database-geospatial-path-index", "description":"($pathexpr as xs:string, $coordinate-system as xs:string, $range-value-positions as xs:boolean, $point-format as xs:string, $invalid-values as xs:string)"}, {"content":"admin:database-get-geospatial-path-indexes(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-geospatial-path-indexes", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-add-geospatial-path-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$geospatial-path-indexes as element(db:geospatial-path-index)*})", "trigger":"admin:database-add-geospatial-path-index", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $geospatial-path-indexes as element(db:geospatial-path-index)*)"}, {"content":"admin:database-delete-geospatial-path-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$geospatial-path-indexes as element(db:geospatial-path-index)*})", "trigger":"admin:database-delete-geospatial-path-index", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $geospatial-path-indexes as element(db:geospatial-path-index)*)"}, {"content":"admin:group-get-odbcserver-ids(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-odbcserver-ids", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:odbc-server-create(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$appserver-name as xs:string}, ${4:\\$root as xs:string}, ${5:\\$port as xs:unsignedLong}, ${6:\\$modules-id as item()}, ${7:\\$database-id as xs:unsignedLong})", "trigger":"admin:odbc-server-create", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $appserver-name as xs:string, $root as xs:string, $port as xs:unsignedLong, $modules-id as item(), $database-id as xs:unsignedLong)"}, {"content":"admin:cluster-get-ssl-fips-enabled(${1:\\$config as element(configuration)})", "trigger":"admin:cluster-get-ssl-fips-enabled", "description":"($config as element(configuration))"}, {"content":"admin:cluster-set-ssl-fips-enabled(${1:\\$config as element(configuration)}, ${2:\\$flag as xs:boolean})", "trigger":"admin:cluster-set-ssl-fips-enabled", "description":"($config as element(configuration), $flag as xs:boolean)"}, {"content":"admin:database-validate-path-expression(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$pathexpr as xs:string}, ${4:\\$ignore-ns as xs:boolean})", "trigger":"admin:database-validate-path-expression", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $pathexpr as xs:string, $ignore-ns as xs:boolean)"}, {"content":"admin:database-validate-path-namespaces(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$pathexpr as xs:string})", "trigger":"admin:database-validate-path-namespaces", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $pathexpr as xs:string)"}, {"content":"admin:group-get-background-io-limit(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-background-io-limit", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-set-background-io-limit(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$max-megabytes-per-second as xs:unsignedInt})", "trigger":"admin:group-set-background-io-limit", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $max-megabytes-per-second as xs:unsignedInt)"}, {"content":"admin:group-get-s3-domain(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-s3-domain", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-set-s3-domain(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$domain as xs:string})", "trigger":"admin:group-set-s3-domain", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $domain as xs:string)"}, {"content":"admin:group-get-s3-protocol(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-s3-protocol", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-set-s3-protocol(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$protocol as xs:string})", "trigger":"admin:group-set-s3-protocol", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $protocol as xs:string)"}, {"content":"admin:group-get-s3-server-side-encryption(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-s3-server-side-encryption", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-set-s3-server-side-encryption(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$protocol as xs:string})", "trigger":"admin:group-set-s3-server-side-encryption", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $protocol as xs:string)"}, {"content":"admin:group-get-security-database(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-security-database", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-set-security-database(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedLong})", "trigger":"admin:group-set-security-database", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedLong)"}, {"content":"admin:appserver-get-rewrite-resolves-globally(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-rewrite-resolves-globally", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-set-rewrite-resolves-globally(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:appserver-set-rewrite-resolves-globally", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-field-path(${1:\\$field-path as xs:string}, ${2:\\$weight as xs:double})", "trigger":"admin:database-field-path", "description":"($field-path as xs:string, $weight as xs:double)"}, {"content":"admin:database-path-field(${1:\\$field-name as xs:string}, ${2:\\$field-paths as element(db:field-path)+})", "trigger":"admin:database-path-field", "description":"($field-name as xs:string, $field-paths as element(db:field-path)+)"}, {"content":"admin:database-validate-field-paths(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-paths as element(db:field-path)*})", "trigger":"admin:database-validate-field-paths", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-paths as element(db:field-path)*)"}, {"content":"admin:database-validate-path-fields(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$fields as element(db:field)*})", "trigger":"admin:database-validate-path-fields", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $fields as element(db:field)*)"}, {"content":"admin:database-delete-field-paths(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$field-paths as element(db:field-path)*})", "trigger":"admin:database-delete-field-paths", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string, $field-paths as element(db:field-path)*)"}, {"content":"admin:database-add-field-paths(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$field-paths as element(db:field-path)*})", "trigger":"admin:database-add-field-paths", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string, $field-paths as element(db:field-path)*)"}, {"content":"admin:database-get-field-paths(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "trigger":"admin:database-get-field-paths", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string)"}, {"content":"admin:forest-rename(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$new-name as xs:string})", "trigger":"admin:forest-rename", "description":"($config as element(configuration), $forest-id as xs:unsignedLong, $new-name as xs:string)"}, {"content":"admin:database-set-triple-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-triple-index", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-triple-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-triple-positions", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-in-memory-triple-index-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:database-set-in-memory-triple-index-size", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:database-get-triple-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-triple-index", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-triple-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-triple-positions", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-in-memory-triple-index-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-in-memory-triple-index-size", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:group-get-triple-cache-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-triple-cache-size", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-triple-cache-partitions(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-triple-cache-partitions", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-triple-value-cache-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-triple-value-cache-size", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-triple-value-cache-partitions(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-triple-value-cache-partitions", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-set-triple-cache-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:group-set-triple-cache-size", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:group-set-triple-cache-partitions(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:group-set-triple-cache-partitions", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:group-set-triple-value-cache-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:group-set-triple-value-cache-size", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:group-set-triple-value-cache-partitions(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:group-set-triple-value-cache-partitions", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:group-get-triple-cache-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-triple-cache-timeout", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-triple-value-cache-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-triple-value-cache-timeout", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-set-triple-cache-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:group-set-triple-cache-timeout", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:group-set-triple-value-cache-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:group-set-triple-value-cache-timeout", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:appserver-get-using-namespaces(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-using-namespaces", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-module-locations(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-module-locations", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-add-using-namespace(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$namespaces as element(gr:using-namespace)*})", "trigger":"admin:appserver-add-using-namespace", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $namespaces as element(gr:using-namespace)*)"}, {"content":"admin:appserver-delete-using-namespace(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$namespaces as element(gr:using-namespace)*})", "trigger":"admin:appserver-delete-using-namespace", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $namespaces as element(gr:using-namespace)*)"}, {"content":"admin:appserver-add-module-location(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$module-locations as element(gr:module-location)*})", "trigger":"admin:appserver-add-module-location", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $module-locations as element(gr:module-location)*)"}, {"content":"admin:group-get-using-namespaces(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-using-namespaces", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-module-locations(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-module-locations", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:appserver-delete-module-location(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$module-locations as element(gr:module-location)*})", "trigger":"admin:appserver-delete-module-location", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $module-locations as element(gr:module-location)*)"}, {"content":"admin:group-using-namespace(${1:\\$namespace-uri as xs:string})", "trigger":"admin:group-using-namespace", "description":"($namespace-uri as xs:string)"}, {"content":"admin:group-module-location(${1:\\$namespace-uri as xs:string}, ${2:\\$location as xs:string})", "trigger":"admin:group-module-location", "description":"($namespace-uri as xs:string, $location as xs:string)"}, {"content":"admin:group-add-using-namespace(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$namespaces as element(gr:using-namespace)*})", "trigger":"admin:group-add-using-namespace", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $namespaces as element(gr:using-namespace)*)"}, {"content":"admin:group-delete-using-namespace(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$namespaces as element(gr:using-namespace)*})", "trigger":"admin:group-delete-using-namespace", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $namespaces as element(gr:using-namespace)*)"}, {"content":"admin:group-add-module-location(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$module-locations as element(gr:module-location)*})", "trigger":"admin:group-add-module-location", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $module-locations as element(gr:module-location)*)"}, {"content":"admin:group-delete-module-location(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$module-locations as element(gr:module-location)*})", "trigger":"admin:group-delete-module-location", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $module-locations as element(gr:module-location)*)"}, {"content":"admin:database-tokenizer-override(${1:\\$character as xs:string}, ${2:\\$class as xs:string})", "trigger":"admin:database-tokenizer-override", "description":"($character as xs:string, $class as xs:string)"}, {"content":"admin:database-get-field-tokenizer-overrides(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "trigger":"admin:database-get-field-tokenizer-overrides", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string)"}, {"content":"admin:database-add-field-tokenizer-override(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$tokenizer-overrides as element(db:tokenizer-override)*})", "trigger":"admin:database-add-field-tokenizer-override", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string, $tokenizer-overrides as element(db:tokenizer-override)*)"}, {"content":"admin:database-delete-field-tokenizer-override(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$tokenizer-overrides as element(db:tokenizer-override)*})", "trigger":"admin:database-delete-field-tokenizer-override", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-name as xs:string, $tokenizer-overrides as element(db:tokenizer-override)*)"}, {"content":"admin:database-set-rebalancer-enable(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-rebalancer-enable", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-set-rebalancer-throttle(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:database-set-rebalancer-throttle", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:database-get-rebalancer-enable(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-rebalancer-enable", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-get-rebalancer-throttle(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-rebalancer-throttle", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-set-assignment-policy(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$policy as element(db:assignment-policy)})", "trigger":"admin:database-set-assignment-policy", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $policy as element(db:assignment-policy))"}, {"content":"admin:database-get-assignment-policy(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-assignment-policy", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:legacy-assignment-policy()", "trigger":"admin:legacy-assignment-policy", "description":"()"}, {"content":"admin:bucket-assignment-policy()", "trigger":"admin:bucket-assignment-policy", "description":"()"}, {"content":"admin:statistical-assignment-policy()", "trigger":"admin:statistical-assignment-policy", "description":"()"}, {"content":"admin:database-is-forest-retired(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$forest-id as xs:unsignedLong})", "trigger":"admin:database-is-forest-retired", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $forest-id as xs:unsignedLong)"}, {"content":"admin:database-is-forest-employed(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$forest-id as xs:unsignedLong})", "trigger":"admin:database-is-forest-employed", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $forest-id as xs:unsignedLong)"}, {"content":"admin:database-retire-forest(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$forest-id as xs:unsignedLong})", "trigger":"admin:database-retire-forest", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $forest-id as xs:unsignedLong)"}, {"content":"admin:database-employ-forest(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$forest-id as xs:unsignedLong})", "trigger":"admin:database-employ-forest", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $forest-id as xs:unsignedLong)"}, {"content":"admin:database-reorder-forests(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$forest-ids as xs:unsignedLong*})", "trigger":"admin:database-reorder-forests", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $forest-ids as xs:unsignedLong*)"}, {"content":"admin:forest-get-rebalancer-enable(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "trigger":"admin:forest-get-rebalancer-enable", "description":"($config as element(configuration), $forest-id as xs:unsignedLong)"}, {"content":"admin:forest-set-rebalancer-enable(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:forest-set-rebalancer-enable", "description":"($config as element(configuration), $forest-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-get-retired-forests(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-retired-forests", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:range-assignment-policy(${1:\\$partition-key as cts:reference}, ${2:\\$lower-bound-included as xs:boolean})", "trigger":"admin:range-assignment-policy", "description":"($partition-key as cts:reference, $lower-bound-included as xs:boolean)"}, {"content":"admin:database-get-range-policy-partition-key(${1:\\$range-policy as element(db:assignment-policy)})", "trigger":"admin:database-get-range-policy-partition-key", "description":"($range-policy as element(db:assignment-policy))"}, {"content":"admin:forest-get-range-policy-lower-bound(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "trigger":"admin:forest-get-range-policy-lower-bound", "description":"($config as element(configuration), $forest-id as xs:unsignedLong)"}, {"content":"admin:forest-get-range-policy-upper-bound(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "trigger":"admin:forest-get-range-policy-upper-bound", "description":"($config as element(configuration), $forest-id as xs:unsignedLong)"}, {"content":"admin:forest-is-range-policy-range-set(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "trigger":"admin:forest-is-range-policy-range-set", "description":"($config as element(configuration), $forest-id as xs:unsignedLong)"}, {"content":"admin:forest-set-range-policy-range(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$lower-bound as item()?}, ${4:\\$upper-bound as item()?})", "trigger":"admin:forest-set-range-policy-range", "description":"($config as element(configuration), $forest-id as xs:unsignedLong, $lower-bound as item()?, $upper-bound as item()?)"}, {"content":"admin:appserver-get-internal-security(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-internal-security", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-get-external-security(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-external-security", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-set-internal-security(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:appserver-set-internal-security", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:appserver-set-external-security(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string}, ${4:\\$value2 as xs:boolean}, ${5:\\$value3 as xs:string})", "trigger":"admin:appserver-set-external-security", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string, $value2 as xs:boolean, $value3 as xs:string)"}, {"content":"admin:host-get-zone(${1:\\$config as element(configuration)}, ${2:\\$host-id as xs:unsignedLong})", "trigger":"admin:host-get-zone", "description":"($config as element(configuration), $host-id as xs:unsignedLong)"}, {"content":"admin:host-set-zone(${1:\\$config as element(configuration)}, ${2:\\$host-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:host-set-zone", "description":"($config as element(configuration), $host-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:group-set-metering-enabled(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:group-set-metering-enabled", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:group-set-meters-database(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedLong})", "trigger":"admin:group-set-meters-database", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedLong)"}, {"content":"admin:group-set-performance-metering-enabled(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:group-set-performance-metering-enabled", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:group-set-performance-metering-period(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:group-set-performance-metering-period", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:group-set-performance-metering-retain-raw(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:group-set-performance-metering-retain-raw", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:group-set-performance-metering-retain-hourly(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:group-set-performance-metering-retain-hourly", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:group-set-performance-metering-retain-daily(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:group-set-performance-metering-retain-daily", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:database-detach-sub-database(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$subdatabase-id as xs:unsignedLong})", "trigger":"admin:database-detach-sub-database", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $subdatabase-id as xs:unsignedLong)"}, {"content":"admin:database-detach-sub-database(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$subdatabase-id as xs:unsignedLong}, ${4:\\$foreign-cluster-id as xs:unsignedLong})", "trigger":"admin:database-detach-sub-database", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $subdatabase-id as xs:unsignedLong, $foreign-cluster-id as xs:unsignedLong)"}, {"content":"admin:database-attach-sub-database(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$subdatabase-id as xs:unsignedLong})", "trigger":"admin:database-attach-sub-database", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $subdatabase-id as xs:unsignedLong)"}, {"content":"admin:database-attach-sub-database(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$subdatabase-id as xs:unsignedLong}, ${4:\\$foreign-cluster-id as xs:unsignedLong})", "trigger":"admin:database-attach-sub-database", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $subdatabase-id as xs:unsignedLong, $foreign-cluster-id as xs:unsignedLong)"}, {"content":"admin:database-sub-databases(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-sub-databases", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-super-databases(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-super-databases", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:check-range-policy-config(${1:\\$database as node()}, ${2:\\$assignments as node()*})", "trigger":"admin:check-range-policy-config", "description":"($database as node(), $assignments as node()*)"}, {"content":"admin:database-validate-field-path(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-path as element(db:field-path)})", "trigger":"admin:database-validate-field-path", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $field-path as element(db:field-path))"}, {"content":"admin:forest-get-availability(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "trigger":"admin:forest-get-availability", "description":"($config as element(configuration), $forest-id as xs:unsignedLong)"}, {"content":"admin:forest-set-availability(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:forest-set-availability", "description":"($config as element(configuration), $forest-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:group-get-metering-enabled(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-metering-enabled", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-meters-database(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-meters-database", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-performance-metering-enabled(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-performance-metering-enabled", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-performance-metering-period(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-performance-metering-period", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-performance-metering-retain-raw(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-performance-metering-retain-raw", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-performance-metering-retain-hourly(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-performance-metering-retain-hourly", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:group-get-performance-metering-retain-daily(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:group-get-performance-metering-retain-daily", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:database-set-retain-until-backup(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "trigger":"admin:database-set-retain-until-backup", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $value as xs:boolean)"}, {"content":"admin:database-get-retain-until-backup(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-retain-until-backup", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-path-reference(${1:\\$scalar-type as xs:string}, ${2:\\$pathexpr as xs:string}, ${3:\\$collation as xs:string?})", "trigger":"admin:database-path-reference", "description":"($scalar-type as xs:string, $pathexpr as xs:string, $collation as xs:string?)"}, {"content":"admin:database-field-reference(${1:\\$scalar-type as xs:string}, ${2:\\$fieldname as xs:string}, ${3:\\$collation as xs:string?})", "trigger":"admin:database-field-reference", "description":"($scalar-type as xs:string, $fieldname as xs:string, $collation as xs:string?)"}, {"content":"admin:database-element-attribute-reference(${1:\\$scalar-type as xs:string}, ${2:\\$parent-namespace as xs:string?}, ${3:\\$parent-localname as xs:string}, ${4:\\$namespace as xs:string?}, ${5:\\$localname as xs:string}, ${6:\\$collation as xs:string?})", "trigger":"admin:database-element-attribute-reference", "description":"($scalar-type as xs:string, $parent-namespace as xs:string?, $parent-localname as xs:string, $namespace as xs:string?, $localname as xs:string, $collation as xs:string?)"}, {"content":"admin:database-element-reference(${1:\\$scalar-type as xs:string}, ${2:\\$namespace as xs:string?}, ${3:\\$localname as xs:string}, ${4:\\$collation as xs:string?})", "trigger":"admin:database-element-reference", "description":"($scalar-type as xs:string, $namespace as xs:string?, $localname as xs:string, $collation as xs:string?)"}, {"content":"admin:appserver-get-default-inference-size(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-default-inference-size", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-set-default-inference-size(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:appserver-set-default-inference-size", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:taskserver-get-default-inference-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:taskserver-get-default-inference-size", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:taskserver-set-default-inference-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:taskserver-set-default-inference-size", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:appserver-get-max-inference-size(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-max-inference-size", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-set-max-inference-size(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:appserver-set-max-inference-size", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:taskserver-get-max-inference-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "trigger":"admin:taskserver-get-max-inference-size", "description":"($config as element(configuration), $group-id as xs:unsignedLong)"}, {"content":"admin:taskserver-set-max-inference-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "trigger":"admin:taskserver-set-max-inference-size", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:unsignedInt)"}, {"content":"admin:database-ruleset(${1:\\$location as xs:string})", "trigger":"admin:database-ruleset", "description":"($location as xs:string)"}, {"content":"admin:database-add-default-ruleset(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$rulesets as element(db:default-ruleset)*})", "trigger":"admin:database-add-default-ruleset", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $rulesets as element(db:default-ruleset)*)"}, {"content":"admin:database-get-default-rulesets(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-default-rulesets", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-delete-default-ruleset(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$rulesets as element(db:default-ruleset)*})", "trigger":"admin:database-delete-default-ruleset", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $rulesets as element(db:default-ruleset)*)"}, {"content":"admin:database-foreign-replica-get-queue-size(${1:\\$foreign-replica as element(db:foreign-replica)})", "trigger":"admin:database-foreign-replica-get-queue-size", "description":"($foreign-replica as element(db:foreign-replica))"}, {"content":"admin:database-foreign-replica-set-queue-size(${1:\\$foreign-replica as element(db:foreign-replica)}, ${2:\\$value as xs:unsignedInt})", "trigger":"admin:database-foreign-replica-set-queue-size", "description":"($foreign-replica as element(db:foreign-replica), $value as xs:unsignedInt)"}, {"content":"admin:database-backup-get-enabled(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$backup-id as xs:unsignedLong})", "trigger":"admin:database-backup-get-enabled", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $backup-id as xs:unsignedLong)"}, {"content":"admin:database-backup-set-enabled(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$backup-id as xs:unsignedLong}, ${4:\\$enabled as xs:boolean})", "trigger":"admin:database-backup-set-enabled", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $backup-id as xs:unsignedLong, $enabled as xs:boolean)"}, {"content":"admin:database-delete-backup-by-id(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$backup-id as xs:unsignedLong*})", "trigger":"admin:database-delete-backup-by-id", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $backup-id as xs:unsignedLong*)"}, {"content":"admin:forest-backup-get-enabled(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$backup-id as xs:unsignedLong})", "trigger":"admin:forest-backup-get-enabled", "description":"($config as element(configuration), $forest-id as xs:unsignedLong, $backup-id as xs:unsignedLong)"}, {"content":"admin:forest-backup-set-enabled(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$backup-id as xs:unsignedLong}, ${4:\\$enabled as xs:boolean})", "trigger":"admin:forest-backup-set-enabled", "description":"($config as element(configuration), $forest-id as xs:unsignedLong, $backup-id as xs:unsignedLong, $enabled as xs:boolean)"}, {"content":"admin:forest-delete-backup-by-id(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$backup-id as xs:unsignedLong*})", "trigger":"admin:forest-delete-backup-by-id", "description":"($config as element(configuration), $forest-id as xs:unsignedLong, $backup-id as xs:unsignedLong*)"}, {"content":"admin:group-get-scheduled-task(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$task-id as xs:unsignedLong})", "trigger":"admin:group-get-scheduled-task", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $task-id as xs:unsignedLong)"}, {"content":"admin:group-scheduled-task-set-enabled(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$task-id as xs:unsignedLong}, ${4:\\$enabled as xs:boolean})", "trigger":"admin:group-scheduled-task-set-enabled", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $task-id as xs:unsignedLong, $enabled as xs:boolean)"}, {"content":"admin:group-scheduled-task-get-enabled(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$task-id as xs:unsignedLong})", "trigger":"admin:group-scheduled-task-get-enabled", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $task-id as xs:unsignedLong)"}, {"content":"admin:group-delete-scheduled-task-by-id(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$delete-ids as xs:unsignedLong*})", "trigger":"admin:group-delete-scheduled-task-by-id", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $delete-ids as xs:unsignedLong*)"}, {"content":"admin:appserver-get-default-error-format(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-default-error-format", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-set-default-error-format(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-default-error-format", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:cluster-get-effective-version(${1:\\$config as element(configuration)})", "trigger":"admin:cluster-get-effective-version", "description":"($config as element(configuration))"}, {"content":"admin:commit-upgrade(${1:\\$config as element(configuration)})", "trigger":"admin:commit-upgrade", "description":"($config as element(configuration))"}, {"content":"admin:can-commit-upgrade()", "trigger":"admin:can-commit-upgrade", "description":"()"}, {"content":"admin:host-get-mode(${1:\\$config as element(configuration)}, ${2:\\$host-id as xs:unsignedLong})", "trigger":"admin:host-get-mode", "description":"($config as element(configuration), $host-id as xs:unsignedLong)"}, {"content":"admin:host-get-mode-description(${1:\\$config as element(configuration)}, ${2:\\$host-id as xs:unsignedLong})", "trigger":"admin:host-get-mode-description", "description":"($config as element(configuration), $host-id as xs:unsignedLong)"}, {"content":"admin:host-set-mode(${1:\\$config as element(configuration)}, ${2:\\$host-id as xs:unsignedLong}, ${3:\\$mode as xs:string}, ${4:\\$description as xs:string?})", "trigger":"admin:host-set-mode", "description":"($config as element(configuration), $host-id as xs:unsignedLong, $mode as xs:string, $description as xs:string?)"}, {"content":"admin:query-assignment-policy()", "trigger":"admin:query-assignment-policy", "description":"()"}, {"content":"admin:query-assignment-policy(${1:\\$default-partition as xs:unsignedInt})", "trigger":"admin:query-assignment-policy", "description":"($default-partition as xs:unsignedInt)"}, {"content":"admin:forest-get-partition-number(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "trigger":"admin:forest-get-partition-number", "description":"($config as element(configuration), $forest-id as xs:unsignedLong)"}, {"content":"admin:forest-set-partition-number(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt?})", "trigger":"admin:forest-set-partition-number", "description":"($config as element(configuration), $forest-id as xs:unsignedLong, $value as xs:unsignedInt?)"}, {"content":"admin:appserver-get-coordinate-system(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "trigger":"admin:appserver-get-coordinate-system", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong)"}, {"content":"admin:appserver-set-coordinate-system(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:appserver-set-coordinate-system", "description":"($config as element(configuration), $appserver-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:cluster-set-keystore-host-name(${1:\\$config as element(configuration)}, ${2:\\$host-name as xs:string})", "trigger":"admin:cluster-set-keystore-host-name", "description":"($config as element(configuration), $host-name as xs:string)"}, {"content":"admin:cluster-get-keystore-host-name(${1:\\$config as element(configuration)})", "trigger":"admin:cluster-get-keystore-host-name", "description":"($config as element(configuration))"}, {"content":"admin:cluster-set-keystore-port(${1:\\$config as element(configuration)}, ${2:\\$port as xs:unsignedLong})", "trigger":"admin:cluster-set-keystore-port", "description":"($config as element(configuration), $port as xs:unsignedLong)"}, {"content":"admin:cluster-get-keystore-port(${1:\\$config as element(configuration)})", "trigger":"admin:cluster-get-keystore-port", "description":"($config as element(configuration))"}, {"content":"admin:cluster-set-data-encryption-key-id(${1:\\$config as element(configuration)}, ${2:\\$data-encryption-key-id as xs:string})", "trigger":"admin:cluster-set-data-encryption-key-id", "description":"($config as element(configuration), $data-encryption-key-id as xs:string)"}, {"content":"admin:cluster-get-data-encryption-key-id(${1:\\$config as element(configuration)})", "trigger":"admin:cluster-get-data-encryption-key-id", "description":"($config as element(configuration))"}, {"content":"admin:cluster-set-config-encryption-key-id(${1:\\$config as element(configuration)}, ${2:\\$config-encryption-key-id as xs:string})", "trigger":"admin:cluster-set-config-encryption-key-id", "description":"($config as element(configuration), $config-encryption-key-id as xs:string)"}, {"content":"admin:cluster-get-config-encryption-key-id(${1:\\$config as element(configuration)})", "trigger":"admin:cluster-get-config-encryption-key-id", "description":"($config as element(configuration))"}, {"content":"admin:cluster-set-logs-encryption-key-id(${1:\\$logs as element(configuration)}, ${2:\\$logs-encryption-key-id as xs:string})", "trigger":"admin:cluster-set-logs-encryption-key-id", "description":"($logs as element(configuration), $logs-encryption-key-id as xs:string)"}, {"content":"admin:cluster-get-logs-encryption-key-id(${1:\\$config as element(configuration)})", "trigger":"admin:cluster-get-logs-encryption-key-id", "description":"($config as element(configuration))"}, {"content":"admin:cluster-set-data-encryption(${1:\\$config as element(configuration)}, ${2:\\$data-encryption as xs:string})", "trigger":"admin:cluster-set-data-encryption", "description":"($config as element(configuration), $data-encryption as xs:string)"}, {"content":"admin:cluster-get-data-encryption(${1:\\$config as element(configuration)})", "trigger":"admin:cluster-get-data-encryption", "description":"($config as element(configuration))"}, {"content":"admin:cluster-set-config-encryption(${1:\\$config as element(configuration)}, ${2:\\$config-encryption as xs:string})", "trigger":"admin:cluster-set-config-encryption", "description":"($config as element(configuration), $config-encryption as xs:string)"}, {"content":"admin:cluster-get-config-encryption(${1:\\$config as element(configuration)})", "trigger":"admin:cluster-get-config-encryption", "description":"($config as element(configuration))"}, {"content":"admin:cluster-set-logs-encryption(${1:\\$config as element(configuration)}, ${2:\\$logs-encryption as xs:string})", "trigger":"admin:cluster-set-logs-encryption", "description":"($config as element(configuration), $logs-encryption as xs:string)"}, {"content":"admin:cluster-get-logs-encryption(${1:\\$config as element(configuration)})", "trigger":"admin:cluster-get-logs-encryption", "description":"($config as element(configuration))"}, {"content":"admin:database-set-encryption-key-id(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$encryption-key-id as xs:string})", "trigger":"admin:database-set-encryption-key-id", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $encryption-key-id as xs:string)"}, {"content":"admin:database-get-encryption-key-id(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-encryption-key-id", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:database-set-data-encryption(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$data-encryption as xs:string})", "trigger":"admin:database-set-data-encryption", "description":"($config as element(configuration), $database-id as xs:unsignedLong, $data-encryption as xs:string)"}, {"content":"admin:database-get-data-encryption(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "trigger":"admin:database-get-data-encryption", "description":"($config as element(configuration), $database-id as xs:unsignedLong)"}, {"content":"admin:cluster-set-keystore(${1:\\$config as element(configuration)}, ${2:\\$host-name as xs:string?}, ${3:\\$port as xs:unsignedLong?}, ${4:\\$data-encryption as xs:string?}, ${5:\\$data-encryption-key-id as xs:string?}, ${6:\\$config-encryption as xs:string?}, ${7:\\$config-encryption-key-id as xs:string?}, ${8:\\$logs-encryption as xs:string?}, ${9:\\$logs-encryption-key-id as xs:string?}, ${10:\\$client-cert as xs:string?}, ${11:\\$server-cert as xs:string?})", "trigger":"admin:cluster-set-keystore", "description":"($config as element(configuration), $host-name as xs:string?, $port as xs:unsignedLong?, $data-encryption as xs:string?, $data-encryption-key-id as xs:string?, $config-encryption as xs:string?, $config-encryption-key-id as xs:string?, $logs-encryption as xs:string?, $logs-encryption-key-id as xs:string?, $client-cert as xs:string?, $server-cert as xs:string?)"}, {"content":"admin:group-set-telemetry-log-level(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:group-set-telemetry-log-level", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:group-set-telemetry-config(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:group-set-telemetry-config", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:group-set-telemetry-metering(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:group-set-telemetry-metering", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:group-set-telemetry-session-uri(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:group-set-telemetry-session-uri", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:group-set-opsdirector-log-level(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:group-set-opsdirector-log-level", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:group-set-opsdirector-config(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:group-set-opsdirector-config", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:group-set-opsdirector-metering(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:group-set-opsdirector-metering", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:string)"}, {"content":"admin:group-set-opsdirector-session-uri(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "trigger":"admin:group-set-opsdirector-session-uri", "description":"($config as element(configuration), $group-id as xs:unsignedLong, $value as xs:string)"}, {"content":"xdmp:forest-backup(${1:\\$forestID as xs:unsignedLong}, ${2:\\$pathname as xs:string})", "trigger":"xdmp:forest-backup", "description":"($forestID as xs:unsignedLong, $pathname as xs:string)"}, {"content":"xdmp:forest-restore(${1:\\$forestID as xs:unsignedLong}, ${2:\\$pathname as xs:string})", "trigger":"xdmp:forest-restore", "description":"($forestID as xs:unsignedLong, $pathname as xs:string)"}, {"content":"xdmp:forest-clear(${1:\\$forestIDs as xs:unsignedLong*})", "trigger":"xdmp:forest-clear", "description":"($forestIDs as xs:unsignedLong*)"}, {"content":"xdmp:forest-restart(${1:\\$forestIDs as xs:unsignedLong*})", "trigger":"xdmp:forest-restart", "description":"($forestIDs as xs:unsignedLong*)"}, {"content":"xdmp:forest-rollback(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$timestamp as xs:unsignedLong})", "trigger":"xdmp:forest-rollback", "description":"($forestIDs as xs:unsignedLong*, $timestamp as xs:unsignedLong)"}, {"content":"xdmp:database-backup-validate(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string})", "trigger":"xdmp:database-backup-validate", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string)"}, {"content":"xdmp:database-backup-validate(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$include-replicas as xs:boolean?})", "trigger":"xdmp:database-backup-validate", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string, $include-replicas as xs:boolean?)"}, {"content":"xdmp:database-backup-validate(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$include-replicas as xs:boolean?}, ${4:\\$journal-archiving as xs:boolean?})", "trigger":"xdmp:database-backup-validate", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string, $include-replicas as xs:boolean?, $journal-archiving as xs:boolean?)"}, {"content":"xdmp:database-backup-validate(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$include-replicas as xs:boolean?}, ${4:\\$journal-archiving as xs:boolean?}, ${5:\\$journal-archive-path as xs:string?})", "trigger":"xdmp:database-backup-validate", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string, $include-replicas as xs:boolean?, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?)"}, {"content":"xdmp:database-backup-validate(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$include-replicas as xs:boolean?}, ${4:\\$journal-archiving as xs:boolean?}, ${5:\\$journal-archive-path as xs:string?}, ${6:\\$lag-limit as xs:unsignedLong?})", "trigger":"xdmp:database-backup-validate", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string, $include-replicas as xs:boolean?, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?, $lag-limit as xs:unsignedLong?)"}, {"content":"xdmp:database-incremental-backup-validate(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string})", "trigger":"xdmp:database-incremental-backup-validate", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string)"}, {"content":"xdmp:database-incremental-backup-validate(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$include-replicas as xs:boolean?})", "trigger":"xdmp:database-incremental-backup-validate", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string, $include-replicas as xs:boolean?)"}, {"content":"xdmp:database-incremental-backup-validate(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$include-replicas as xs:boolean?}, ${4:\\$incremental-dir as xs:string?})", "trigger":"xdmp:database-incremental-backup-validate", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string, $include-replicas as xs:boolean?, $incremental-dir as xs:string?)"}, {"content":"xdmp:database-incremental-backup-validate(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$include-replicas as xs:boolean?}, ${4:\\$incremental-dir as xs:string?}, ${5:\\$journal-archiving as xs:boolean?})", "trigger":"xdmp:database-incremental-backup-validate", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string, $include-replicas as xs:boolean?, $incremental-dir as xs:string?, $journal-archiving as xs:boolean?)"}, {"content":"xdmp:database-incremental-backup-validate(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$include-replicas as xs:boolean?}, ${4:\\$incremental-dir as xs:string?}, ${5:\\$journal-archiving as xs:boolean?}, ${6:\\$journal-archive-path as xs:string?})", "trigger":"xdmp:database-incremental-backup-validate", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string, $include-replicas as xs:boolean?, $incremental-dir as xs:string?, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?)"}, {"content":"xdmp:database-incremental-backup-validate(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$include-replicas as xs:boolean?}, ${4:\\$incremental-dir as xs:string?}, ${5:\\$journal-archiving as xs:boolean?}, ${6:\\$journal-archive-path as xs:string?}, ${7:\\$lag-limit as xs:unsignedLong?})", "trigger":"xdmp:database-incremental-backup-validate", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string, $include-replicas as xs:boolean?, $incremental-dir as xs:string?, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?, $lag-limit as xs:unsignedLong?)"}, {"content":"xdmp:database-backup(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string})", "trigger":"xdmp:database-backup", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string)"}, {"content":"xdmp:database-backup(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$journal-archiving as xs:boolean?})", "trigger":"xdmp:database-backup", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string, $journal-archiving as xs:boolean?)"}, {"content":"xdmp:database-backup(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$journal-archiving as xs:boolean?}, ${4:\\$journal-archive-path as xs:string?})", "trigger":"xdmp:database-backup", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?)"}, {"content":"xdmp:database-backup(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$journal-archiving as xs:boolean?}, ${4:\\$journal-archive-path as xs:string?}, ${5:\\$lag-limit as xs:unsignedLong?})", "trigger":"xdmp:database-backup", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?, $lag-limit as xs:unsignedLong?)"}, {"content":"xdmp:database-incremental-backup(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string})", "trigger":"xdmp:database-incremental-backup", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string)"}, {"content":"xdmp:database-incremental-backup(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$incremental-dir as xs:string?})", "trigger":"xdmp:database-incremental-backup", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string, $incremental-dir as xs:string?)"}, {"content":"xdmp:database-incremental-backup(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$incremental-dir as xs:string?}, ${4:\\$journal-archiving as xs:boolean?})", "trigger":"xdmp:database-incremental-backup", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string, $incremental-dir as xs:string?, $journal-archiving as xs:boolean?)"}, {"content":"xdmp:database-incremental-backup(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$incremental-dir as xs:string?}, ${4:\\$journal-archiving as xs:boolean?}, ${5:\\$journal-archive-path as xs:string?})", "trigger":"xdmp:database-incremental-backup", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string, $incremental-dir as xs:string?, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?)"}, {"content":"xdmp:database-incremental-backup(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$incremental-dir as xs:string?}, ${4:\\$journal-archiving as xs:boolean?}, ${5:\\$journal-archive-path as xs:string?}, ${6:\\$lag-limit as xs:unsignedLong?})", "trigger":"xdmp:database-incremental-backup", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string, $incremental-dir as xs:string?, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?, $lag-limit as xs:unsignedLong?)"}, {"content":"xdmp:start-journal-archiving(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$journal-archive-path as xs:string})", "trigger":"xdmp:start-journal-archiving", "description":"($forestIDs as xs:unsignedLong*, $journal-archive-path as xs:string)"}, {"content":"xdmp:start-journal-archiving(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$journal-archive-path as xs:string}, ${3:\\$lag-limit as xs:unsignedLong?})", "trigger":"xdmp:start-journal-archiving", "description":"($forestIDs as xs:unsignedLong*, $journal-archive-path as xs:string, $lag-limit as xs:unsignedLong?)"}, {"content":"xdmp:stop-journal-archiving(${1:\\$forestIDs as xs:unsignedLong*})", "trigger":"xdmp:stop-journal-archiving", "description":"($forestIDs as xs:unsignedLong*)"}, {"content":"xdmp:database-backup-status(${1:\\$jobid as xs:unsignedLong*})", "trigger":"xdmp:database-backup-status", "description":"($jobid as xs:unsignedLong*)"}, {"content":"xdmp:database-backup-status(${1:\\$jobid as xs:unsignedLong*}, ${2:\\$hostid as xs:unsignedLong*})", "trigger":"xdmp:database-backup-status", "description":"($jobid as xs:unsignedLong*, $hostid as xs:unsignedLong*)"}, {"content":"xdmp:forest-backup-status(${1:\\$forestid as xs:unsignedLong*})", "trigger":"xdmp:forest-backup-status", "description":"($forestid as xs:unsignedLong*)"}, {"content":"xdmp:database-backup-cancel(${1:\\$jobid as xs:unsignedLong})", "trigger":"xdmp:database-backup-cancel", "description":"($jobid as xs:unsignedLong)"}, {"content":"xdmp:database-restore-validate(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string})", "trigger":"xdmp:database-restore-validate", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string)"}, {"content":"xdmp:database-restore-validate(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$restoreToTime as xs:dateTime?})", "trigger":"xdmp:database-restore-validate", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string, $restoreToTime as xs:dateTime?)"}, {"content":"xdmp:database-restore-validate(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$restoreToTime as xs:dateTime?}, ${4:\\$include-replicas as xs:boolean?})", "trigger":"xdmp:database-restore-validate", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string, $restoreToTime as xs:dateTime?, $include-replicas as xs:boolean?)"}, {"content":"xdmp:database-restore-validate(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$restoreToTime as xs:dateTime?}, ${4:\\$include-replicas as xs:boolean?}, ${5:\\$journal-archiving as xs:boolean?})", "trigger":"xdmp:database-restore-validate", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string, $restoreToTime as xs:dateTime?, $include-replicas as xs:boolean?, $journal-archiving as xs:boolean?)"}, {"content":"xdmp:database-restore-validate(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$restoreToTime as xs:dateTime?}, ${4:\\$include-replicas as xs:boolean?}, ${5:\\$journal-archiving as xs:boolean?}, ${6:\\$journal-archive-path as xs:string?})", "trigger":"xdmp:database-restore-validate", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string, $restoreToTime as xs:dateTime?, $include-replicas as xs:boolean?, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?)"}, {"content":"xdmp:database-restore-validate(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$restoreToTime as xs:dateTime?}, ${4:\\$include-replicas as xs:boolean?}, ${5:\\$journal-archiving as xs:boolean?}, ${6:\\$journal-archive-path as xs:string?}, ${7:\\$incremental-backup as xs:boolean?})", "trigger":"xdmp:database-restore-validate", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string, $restoreToTime as xs:dateTime?, $include-replicas as xs:boolean?, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?, $incremental-backup as xs:boolean?)"}, {"content":"xdmp:database-restore-validate(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$restoreToTime as xs:dateTime?}, ${4:\\$include-replicas as xs:boolean?}, ${5:\\$journal-archiving as xs:boolean?}, ${6:\\$journal-archive-path as xs:string?}, ${7:\\$incremental-backup as xs:boolean?}, ${8:\\$incremental-backup-path as xs:string?})", "trigger":"xdmp:database-restore-validate", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string, $restoreToTime as xs:dateTime?, $include-replicas as xs:boolean?, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?, $incremental-backup as xs:boolean?, $incremental-backup-path as xs:string?)"}, {"content":"xdmp:database-restore(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string})", "trigger":"xdmp:database-restore", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string)"}, {"content":"xdmp:database-restore(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$restoreToTime as xs:dateTime?})", "trigger":"xdmp:database-restore", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string, $restoreToTime as xs:dateTime?)"}, {"content":"xdmp:database-restore(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$restoreToTime as xs:dateTime?}, ${4:\\$journal-archiving as xs:boolean?})", "trigger":"xdmp:database-restore", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string, $restoreToTime as xs:dateTime?, $journal-archiving as xs:boolean?)"}, {"content":"xdmp:database-restore(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$restoreToTime as xs:dateTime?}, ${4:\\$journal-archiving as xs:boolean?}, ${5:\\$journal-archive-path as xs:string?})", "trigger":"xdmp:database-restore", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string, $restoreToTime as xs:dateTime?, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?)"}, {"content":"xdmp:database-restore(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$restoreToTime as xs:dateTime?}, ${4:\\$journal-archiving as xs:boolean?}, ${5:\\$journal-archive-path as xs:string?}, ${6:\\$incremental-backup as xs:boolean?})", "trigger":"xdmp:database-restore", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string, $restoreToTime as xs:dateTime?, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?, $incremental-backup as xs:boolean?)"}, {"content":"xdmp:database-restore(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$restoreToTime as xs:dateTime?}, ${4:\\$journal-archiving as xs:boolean?}, ${5:\\$journal-archive-path as xs:string?}, ${6:\\$incremental-backup as xs:boolean?}, ${7:\\$incremental-backup-path as xs:string?})", "trigger":"xdmp:database-restore", "description":"($forestIDs as xs:unsignedLong*, $pathname as xs:string, $restoreToTime as xs:dateTime?, $journal-archiving as xs:boolean?, $journal-archive-path as xs:string?, $incremental-backup as xs:boolean?, $incremental-backup-path as xs:string?)"}, {"content":"xdmp:database-restore-status(${1:\\$jobid as xs:unsignedLong})", "trigger":"xdmp:database-restore-status", "description":"($jobid as xs:unsignedLong)"}, {"content":"xdmp:database-restore-cancel(${1:\\$jobid as xs:unsignedLong})", "trigger":"xdmp:database-restore-cancel", "description":"($jobid as xs:unsignedLong)"}, {"content":"xdmp:shutdown(${1:\\$hostIDs as xs:unsignedLong*}, ${2:\\$reason as xs:string})", "trigger":"xdmp:shutdown", "description":"($hostIDs as xs:unsignedLong*, $reason as xs:string)"}, {"content":"xdmp:restart(${1:\\$hostIDs as xs:unsignedLong*}, ${2:\\$reason as xs:string})", "trigger":"xdmp:restart", "description":"($hostIDs as xs:unsignedLong*, $reason as xs:string)"}, {"content":"xdmp:filesystem-directory(${1:\\$pathname as xs:string})", "trigger":"xdmp:filesystem-directory", "description":"($pathname as xs:string)"}, {"content":"xdmp:filesystem-directory-create(${1:\\$pathname as xs:string})", "trigger":"xdmp:filesystem-directory-create", "description":"($pathname as xs:string)"}, {"content":"xdmp:filesystem-directory-create(${1:\\$pathname as xs:string}, ${2:\\$options as element()?|map:map?})", "trigger":"xdmp:filesystem-directory-create", "description":"($pathname as xs:string, $options as element()?|map:map?)"}, {"content":"xdmp:filesystem-file(${1:\\$pathname as xs:string})", "trigger":"xdmp:filesystem-file", "description":"($pathname as xs:string)"}, {"content":"xdmp:filesystem-is-file-encrypted(${1:\\$pathname as xs:string})", "trigger":"xdmp:filesystem-is-file-encrypted", "description":"($pathname as xs:string)"}, {"content":"xdmp:filesystem-filepath(${1:\\$pathname as xs:string})", "trigger":"xdmp:filesystem-filepath", "description":"($pathname as xs:string)"}, {"content":"xdmp:filesystem-file-length(${1:\\$pathname as xs:string})", "trigger":"xdmp:filesystem-file-length", "description":"($pathname as xs:string)"}, {"content":"xdmp:filesystem-file-exists(${1:\\$pathname as xs:string})", "trigger":"xdmp:filesystem-file-exists", "description":"($pathname as xs:string)"}, {"content":"xdmp:filesystem-file-exists(${1:\\$pathname as xs:string}, ${2:\\$host as xs:unsignedLong?})", "trigger":"xdmp:filesystem-file-exists", "description":"($pathname as xs:string, $host as xs:unsignedLong?)"}, {"content":"xdmp:castable-as(${1:\\$namespace-uri as xs:string}, ${2:\\$local-name as xs:string}, ${3:\\$item as item()?})", "trigger":"xdmp:castable-as", "description":"($namespace-uri as xs:string, $local-name as xs:string, $item as item()?)"}, {"content":"xdmp:merge-cancel(${1:\\$forest-ID as xs:unsignedLong}, ${2:\\$merge-ID as xs:unsignedLong})", "trigger":"xdmp:merge-cancel", "description":"($forest-ID as xs:unsignedLong, $merge-ID as xs:unsignedLong)"}, {"content":"xdmp:request-cancel(${1:\\$hostID as xs:unsignedLong}, ${2:\\$serverID as xs:unsignedLong}, ${3:\\$requestID as xs:unsignedLong})", "trigger":"xdmp:request-cancel", "description":"($hostID as xs:unsignedLong, $serverID as xs:unsignedLong, $requestID as xs:unsignedLong)"}, {"content":"xdmp:database-backup-purge(${1:\\$dir as xs:string}, ${2:\\$keep-num-backups as xs:unsignedInt})", "trigger":"xdmp:database-backup-purge", "description":"($dir as xs:string, $keep-num-backups as xs:unsignedInt)"}, {"content":"xdmp:database-backup-purge(${1:\\$dir as xs:string}, ${2:\\$keep-num-backups as xs:unsignedInt}, ${3:\\$incremental-dir as xs:string})", "trigger":"xdmp:database-backup-purge", "description":"($dir as xs:string, $keep-num-backups as xs:unsignedInt, $incremental-dir as xs:string)"}, {"content":"xdmp:database-journal-archive-purge(${1:\\$dir as xs:string})", "trigger":"xdmp:database-journal-archive-purge", "description":"($dir as xs:string)"}, {"content":"xdmp:database-journal-archive-purge(${1:\\$dir as xs:string}, ${2:\\$incremental-dir as xs:string})", "trigger":"xdmp:database-journal-archive-purge", "description":"($dir as xs:string, $incremental-dir as xs:string)"}, {"content":"xdmp:database-journal-archive-purge(${1:\\$dir as xs:string}, ${2:\\$incremental-dir as xs:string}, ${3:\\$journal-archive-path as xs:string})", "trigger":"xdmp:database-journal-archive-purge", "description":"($dir as xs:string, $incremental-dir as xs:string, $journal-archive-path as xs:string)"}, {"content":"xdmp:get-orphaned-binaries(${1:\\$id as xs:unsignedLong})", "trigger":"xdmp:get-orphaned-binaries", "description":"($id as xs:unsignedLong)"}, {"content":"xdmp:remove-orphaned-binary(${1:\\$forestID as xs:unsignedLong}, ${2:\\$binaryID as xs:unsignedLong})", "trigger":"xdmp:remove-orphaned-binary", "description":"($forestID as xs:unsignedLong, $binaryID as xs:unsignedLong)"}, {"content":"alert:make-config(${1:\\$uri as xs:string}, ${2:\\$name as xs:string}, ${3:\\$description as xs:string}, ${4:\\$options as element(alert:options)})", "trigger":"alert:make-config", "description":"($uri as xs:string, $name as xs:string, $description as xs:string, $options as element(alert:options))"}, {"content":"alert:config-insert(${1:\\$config as element(alert:config)})", "trigger":"alert:config-insert", "description":"($config as element(alert:config))"}, {"content":"alert:config-get(${1:\\$uri as xs:string})", "trigger":"alert:config-get", "description":"($uri as xs:string)"}, {"content":"alert:config-delete(${1:\\$uri as xs:string})", "trigger":"alert:config-delete", "description":"($uri as xs:string)"}, {"content":"alert:config-get-id(${1:\\$config as element(alert:config)})", "trigger":"alert:config-get-id", "description":"($config as element(alert:config))"}, {"content":"alert:config-set-uri(${1:\\$config as element(alert:config)}, ${2:\\$uri as xs:string})", "trigger":"alert:config-set-uri", "description":"($config as element(alert:config), $uri as xs:string)"}, {"content":"alert:config-get-uri(${1:\\$config as element(alert:config)})", "trigger":"alert:config-get-uri", "description":"($config as element(alert:config))"}, {"content":"alert:config-get-name(${1:\\$config as element(alert:config)})", "trigger":"alert:config-get-name", "description":"($config as element(alert:config))"}, {"content":"alert:config-set-name(${1:\\$config as element(alert:config)}, ${2:\\$name as xs:string})", "trigger":"alert:config-set-name", "description":"($config as element(alert:config), $name as xs:string)"}, {"content":"alert:config-get-description(${1:\\$config as element(alert:config)})", "trigger":"alert:config-get-description", "description":"($config as element(alert:config))"}, {"content":"alert:config-set-description(${1:\\$config as element(alert:config)}, ${2:\\$description as xs:string})", "trigger":"alert:config-set-description", "description":"($config as element(alert:config), $description as xs:string)"}, {"content":"alert:config-get-trigger-ids(${1:\\$config as element(alert:config)})", "trigger":"alert:config-get-trigger-ids", "description":"($config as element(alert:config))"}, {"content":"alert:config-set-trigger-ids(${1:\\$config as element(alert:config)}, ${2:\\$ids as xs:unsignedLong*})", "trigger":"alert:config-set-trigger-ids", "description":"($config as element(alert:config), $ids as xs:unsignedLong*)"}, {"content":"alert:config-get-cpf-domain-ids(${1:\\$config as element(alert:config)})", "trigger":"alert:config-get-cpf-domain-ids", "description":"($config as element(alert:config))"}, {"content":"alert:config-get-cpf-domain-names(${1:\\$config as element(alert:config)})", "trigger":"alert:config-get-cpf-domain-names", "description":"($config as element(alert:config))"}, {"content":"alert:config-set-cpf-domain-names(${1:\\$config as element(alert:config)}, ${2:\\$names as xs:string*})", "trigger":"alert:config-set-cpf-domain-names", "description":"($config as element(alert:config), $names as xs:string*)"}, {"content":"alert:config-set-cpf-domain-ids(${1:\\$config as element(alert:config)}, ${2:\\$ids as xs:unsignedLong*})", "trigger":"alert:config-set-cpf-domain-ids", "description":"($config as element(alert:config), $ids as xs:unsignedLong*)"}, {"content":"alert:config-get-options(${1:\\$config as element(alert:config)})", "trigger":"alert:config-get-options", "description":"($config as element(alert:config))"}, {"content":"alert:config-set-options(${1:\\$config as element(alert:config)}, ${2:\\$options as element(alert:options)})", "trigger":"alert:config-set-options", "description":"($config as element(alert:config), $options as element(alert:options))"}, {"content":"alert:create-triggers(${1:\\$uri as xs:string}, ${2:\\$events as element(trgr:data-event)*})", "trigger":"alert:create-triggers", "description":"($uri as xs:string, $events as element(trgr:data-event)*)"}, {"content":"alert:remove-triggers(${1:\\$uri as xs:string})", "trigger":"alert:remove-triggers", "description":"($uri as xs:string)"}, {"content":"alert:find-matching-rules(${1:\\$config-uri as xs:string}, ${2:\\$doc as node()})", "trigger":"alert:find-matching-rules", "description":"($config-uri as xs:string, $doc as node())"}, {"content":"alert:invoke-matching-actions(${1:\\$config-uri as xs:string}, ${2:\\$doc as node()}, ${3:\\$options as node()})", "trigger":"alert:invoke-matching-actions", "description":"($config-uri as xs:string, $doc as node(), $options as node())"}, {"content":"alert:spawn-matching-actions(${1:\\$config-uri as xs:string}, ${2:\\$doc as node()}, ${3:\\$options as node()})", "trigger":"alert:spawn-matching-actions", "description":"($config-uri as xs:string, $doc as node(), $options as node())"}, {"content":"alert:make-rule(${1:\\$name as xs:string}, ${2:\\$description as xs:string}, ${3:\\$user-id as xs:unsignedLong}, ${4:\\$query as cts:query}, ${5:\\$action as xs:string}, ${6:\\$options as element(alert:options)})", "trigger":"alert:make-rule", "description":"($name as xs:string, $description as xs:string, $user-id as xs:unsignedLong, $query as cts:query, $action as xs:string, $options as element(alert:options))"}, {"content":"alert:rule-insert(${1:\\$collection-uri as xs:string}, ${2:\\$rule as element(alert:rule)})", "trigger":"alert:rule-insert", "description":"($collection-uri as xs:string, $rule as element(alert:rule))"}, {"content":"alert:rule-remove(${1:\\$collection-uri as xs:string}, ${2:\\$id as xs:unsignedLong})", "trigger":"alert:rule-remove", "description":"($collection-uri as xs:string, $id as xs:unsignedLong)"}, {"content":"alert:get-all-rules(${1:\\$collection-uri as xs:string}, ${2:\\$query as cts:query})", "trigger":"alert:get-all-rules", "description":"($collection-uri as xs:string, $query as cts:query)"}, {"content":"alert:get-my-rules(${1:\\$collection-uri as xs:string}, ${2:\\$query as cts:query})", "trigger":"alert:get-my-rules", "description":"($collection-uri as xs:string, $query as cts:query)"}, {"content":"alert:rule-id-query(${1:\\$ids as xs:unsignedLong*})", "trigger":"alert:rule-id-query", "description":"($ids as xs:unsignedLong*)"}, {"content":"alert:rule-name-query(${1:\\$names as xs:string*})", "trigger":"alert:rule-name-query", "description":"($names as xs:string*)"}, {"content":"alert:rule-user-id-query(${1:\\$user-ids as xs:unsignedLong*})", "trigger":"alert:rule-user-id-query", "description":"($user-ids as xs:unsignedLong*)"}, {"content":"alert:rule-action-query(${1:\\$actions as xs:string*})", "trigger":"alert:rule-action-query", "description":"($actions as xs:string*)"}, {"content":"alert:rule-get-id(${1:\\$rule as element(alert:rule)})", "trigger":"alert:rule-get-id", "description":"($rule as element(alert:rule))"}, {"content":"alert:rule-get-user-id(${1:\\$rule as element(alert:rule)})", "trigger":"alert:rule-get-user-id", "description":"($rule as element(alert:rule))"}, {"content":"alert:rule-set-user-id(${1:\\$rule as element(alert:rule)}, ${2:\\$user-id as xs:unsignedLong})", "trigger":"alert:rule-set-user-id", "description":"($rule as element(alert:rule), $user-id as xs:unsignedLong)"}, {"content":"alert:rule-get-action(${1:\\$rule as element(alert:rule)})", "trigger":"alert:rule-get-action", "description":"($rule as element(alert:rule))"}, {"content":"alert:rule-set-action(${1:\\$rule as element(alert:rule)}, ${2:\\$action as xs:string})", "trigger":"alert:rule-set-action", "description":"($rule as element(alert:rule), $action as xs:string)"}, {"content":"alert:rule-get-name(${1:\\$rule as element(alert:rule)})", "trigger":"alert:rule-get-name", "description":"($rule as element(alert:rule))"}, {"content":"alert:rule-set-name(${1:\\$rule as element(alert:rule)}, ${2:\\$name as xs:string})", "trigger":"alert:rule-set-name", "description":"($rule as element(alert:rule), $name as xs:string)"}, {"content":"alert:rule-get-description(${1:\\$rule as element(alert:rule)})", "trigger":"alert:rule-get-description", "description":"($rule as element(alert:rule))"}, {"content":"alert:rule-set-description(${1:\\$rule as element(alert:rule)}, ${2:\\$description as xs:string})", "trigger":"alert:rule-set-description", "description":"($rule as element(alert:rule), $description as xs:string)"}, {"content":"alert:rule-get-query(${1:\\$rule as element(alert:rule)})", "trigger":"alert:rule-get-query", "description":"($rule as element(alert:rule))"}, {"content":"alert:rule-set-query(${1:\\$rule as element(alert:rule)}, ${2:\\$query as cts:query})", "trigger":"alert:rule-set-query", "description":"($rule as element(alert:rule), $query as cts:query)"}, {"content":"alert:rule-get-options(${1:\\$rule as element(alert:rule)})", "trigger":"alert:rule-get-options", "description":"($rule as element(alert:rule))"}, {"content":"alert:rule-set-options(${1:\\$rule as element(alert:rule)}, ${2:\\$options as element(alert:options)})", "trigger":"alert:rule-set-options", "description":"($rule as element(alert:rule), $options as element(alert:options))"}, {"content":"alert:action-get-name(${1:\\$action as element(alert:action)})", "trigger":"alert:action-get-name", "description":"($action as element(alert:action))"}, {"content":"alert:action-set-name(${1:\\$action as element(alert:action)}, ${2:\\$name as xs:string})", "trigger":"alert:action-set-name", "description":"($action as element(alert:action), $name as xs:string)"}, {"content":"alert:action-get-description(${1:\\$action as element(alert:action)})", "trigger":"alert:action-get-description", "description":"($action as element(alert:action))"}, {"content":"alert:action-set-description(${1:\\$action as element(alert:action)}, ${2:\\$description as xs:string})", "trigger":"alert:action-set-description", "description":"($action as element(alert:action), $description as xs:string)"}, {"content":"alert:action-get-module-db(${1:\\$action as element(alert:action)})", "trigger":"alert:action-get-module-db", "description":"($action as element(alert:action))"}, {"content":"alert:action-set-module-db(${1:\\$action as element(alert:action)}, ${2:\\$module-db as xs:unsignedLong})", "trigger":"alert:action-set-module-db", "description":"($action as element(alert:action), $module-db as xs:unsignedLong)"}, {"content":"alert:action-get-module-root(${1:\\$action as element(alert:action)})", "trigger":"alert:action-get-module-root", "description":"($action as element(alert:action))"}, {"content":"alert:action-set-module-root(${1:\\$action as element(alert:action)}, ${2:\\$module-root as xs:string})", "trigger":"alert:action-set-module-root", "description":"($action as element(alert:action), $module-root as xs:string)"}, {"content":"alert:action-get-module(${1:\\$action as element(alert:action)})", "trigger":"alert:action-get-module", "description":"($action as element(alert:action))"}, {"content":"alert:action-set-module(${1:\\$action as element(alert:action)}, ${2:\\$module as xs:string})", "trigger":"alert:action-set-module", "description":"($action as element(alert:action), $module as xs:string)"}, {"content":"alert:action-get-options(${1:\\$action as element(alert:action)})", "trigger":"alert:action-get-options", "description":"($action as element(alert:action))"}, {"content":"alert:action-set-options(${1:\\$action as element(alert:action)}, ${2:\\$options as element(alert:options)})", "trigger":"alert:action-set-options", "description":"($action as element(alert:action), $options as element(alert:options))"}, {"content":"alert:make-action(${1:\\$name as xs:string}, ${2:\\$description as xs:string}, ${3:\\$module-db as xs:unsignedLong}, ${4:\\$module-root as xs:string}, ${5:\\$module as xs:string}, ${6:\\$options as element(alert:options)})", "trigger":"alert:make-action", "description":"($name as xs:string, $description as xs:string, $module-db as xs:unsignedLong, $module-root as xs:string, $module as xs:string, $options as element(alert:options))"}, {"content":"alert:make-log-action()", "trigger":"alert:make-log-action", "description":"()"}, {"content":"alert:action-insert(${1:\\$collection-uri as xs:string}, ${2:\\$action as element(alert:action)})", "trigger":"alert:action-insert", "description":"($collection-uri as xs:string, $action as element(alert:action))"}, {"content":"alert:action-remove(${1:\\$collection-uri as xs:string}, ${2:\\$name as xs:string})", "trigger":"alert:action-remove", "description":"($collection-uri as xs:string, $name as xs:string)"}, {"content":"alert:get-actions(${1:\\$collection-uri as xs:string}, ${2:\\$names as xs:string*})", "trigger":"alert:get-actions", "description":"($collection-uri as xs:string, $names as xs:string*)"}, {"content":"xdmp:word-convert(${1:\\$doc as node()}, ${2:\\$filename as xs:string})", "trigger":"xdmp:word-convert", "description":"($doc as node(), $filename as xs:string)"}, {"content":"xdmp:word-convert(${1:\\$doc as node()}, ${2:\\$filename as xs:string}, ${3:\\$options as (element()|map:map)?})", "trigger":"xdmp:word-convert", "description":"($doc as node(), $filename as xs:string, $options as (element()|map:map)?)"}, {"content":"xdmp:excel-convert(${1:\\$doc as node()}, ${2:\\$filename as xs:string})", "trigger":"xdmp:excel-convert", "description":"($doc as node(), $filename as xs:string)"}, {"content":"xdmp:excel-convert(${1:\\$doc as node()}, ${2:\\$filename as xs:string}, ${3:\\$options as (element()|map:map)?})", "trigger":"xdmp:excel-convert", "description":"($doc as node(), $filename as xs:string, $options as (element()|map:map)?)"}, {"content":"xdmp:powerpoint-convert(${1:\\$doc as node()}, ${2:\\$filename as xs:string})", "trigger":"xdmp:powerpoint-convert", "description":"($doc as node(), $filename as xs:string)"}, {"content":"xdmp:powerpoint-convert(${1:\\$doc as node()}, ${2:\\$filename as xs:string}, ${3:\\$options as (element()|map:map)?})", "trigger":"xdmp:powerpoint-convert", "description":"($doc as node(), $filename as xs:string, $options as (element()|map:map)?)"}, {"content":"fn:resolve-uri(${1:\\$relative as xs:string?})", "trigger":"fn:resolve-uri", "description":"($relative as xs:string?)"}, {"content":"fn:resolve-uri(${1:\\$relative as xs:string?}, ${2:\\$base as xs:string})", "trigger":"fn:resolve-uri", "description":"($relative as xs:string?, $base as xs:string)"}, {"content":"xdmp:resolve-uri(${1:\\$relative as xs:string?})", "trigger":"xdmp:resolve-uri", "description":"($relative as xs:string?)"}, {"content":"xdmp:resolve-uri(${1:\\$relative as xs:string?}, ${2:\\$base as xs:string})", "trigger":"xdmp:resolve-uri", "description":"($relative as xs:string?, $base as xs:string)"}, {"content":"sem:resolve-iri(${1:\\$relative as xs:string})", "trigger":"sem:resolve-iri", "description":"($relative as xs:string)"}, {"content":"sem:resolve-iri(${1:\\$relative as xs:string}, ${2:\\$base as xs:string})", "trigger":"sem:resolve-iri", "description":"($relative as xs:string, $base as xs:string)"}, {"content":"xdmp:url-encode(${1:\\$plaintext as xs:string})", "trigger":"xdmp:url-encode", "description":"($plaintext as xs:string)"}, {"content":"xdmp:url-encode(${1:\\$plaintext as xs:string}, ${2:\\$noSpacePlus as xs:boolean?})", "trigger":"xdmp:url-encode", "description":"($plaintext as xs:string, $noSpacePlus as xs:boolean?)"}, {"content":"xdmp:url-decode(${1:\\$encoded as xs:string})", "trigger":"xdmp:url-decode", "description":"($encoded as xs:string)"}, {"content":"xdmp:login(${1:\\$name as xs:string})", "trigger":"xdmp:login", "description":"($name as xs:string)"}, {"content":"xdmp:login(${1:\\$name as xs:string}, ${2:\\$password as xs:string?})", "trigger":"xdmp:login", "description":"($name as xs:string, $password as xs:string?)"}, {"content":"xdmp:login(${1:\\$name as xs:string}, ${2:\\$password as xs:string?}, ${3:\\$set-session as xs:boolean?})", "trigger":"xdmp:login", "description":"($name as xs:string, $password as xs:string?, $set-session as xs:boolean?)"}, {"content":"xdmp:login(${1:\\$name as xs:string}, ${2:\\$password as xs:string?}, ${3:\\$set-session as xs:boolean?}, ${4:\\$role-names as xs:string*})", "trigger":"xdmp:login", "description":"($name as xs:string, $password as xs:string?, $set-session as xs:boolean?, $role-names as xs:string*)"}, {"content":"xdmp:gss-server-negotiate(${1:\\$inputToken as xs:string})", "trigger":"xdmp:gss-server-negotiate", "description":"($inputToken as xs:string)"}, {"content":"xdmp:logout()", "trigger":"xdmp:logout", "description":"()"}, {"content":"xdmp:get-request-field-names()", "trigger":"xdmp:get-request-field-names", "description":"()"}, {"content":"xdmp:get-request-field(${1:\\$name as xs:string})", "trigger":"xdmp:get-request-field", "description":"($name as xs:string)"}, {"content":"xdmp:get-request-field(${1:\\$name as xs:string}, ${2:\\$default as xs:string?})", "trigger":"xdmp:get-request-field", "description":"($name as xs:string, $default as xs:string?)"}, {"content":"xdmp:get-request-field-filename(${1:\\$field-name as xs:string})", "trigger":"xdmp:get-request-field-filename", "description":"($field-name as xs:string)"}, {"content":"xdmp:get-request-field-content-type(${1:\\$field-name as xs:string})", "trigger":"xdmp:get-request-field-content-type", "description":"($field-name as xs:string)"}, {"content":"xdmp:get-request-header-names()", "trigger":"xdmp:get-request-header-names", "description":"()"}, {"content":"xdmp:get-request-header(${1:\\$name as xs:string})", "trigger":"xdmp:get-request-header", "description":"($name as xs:string)"}, {"content":"xdmp:get-request-header(${1:\\$name as xs:string}, ${2:\\$default as xs:string?})", "trigger":"xdmp:get-request-header", "description":"($name as xs:string, $default as xs:string?)"}, {"content":"xdmp:get-request-username()", "trigger":"xdmp:get-request-username", "description":"()"}, {"content":"xdmp:get-request-method()", "trigger":"xdmp:get-request-method", "description":"()"}, {"content":"xdmp:get-request-path()", "trigger":"xdmp:get-request-path", "description":"()"}, {"content":"xdmp:get-invoked-path()", "trigger":"xdmp:get-invoked-path", "description":"()"}, {"content":"xdmp:get-request-url()", "trigger":"xdmp:get-request-url", "description":"()"}, {"content":"xdmp:get-original-url()", "trigger":"xdmp:get-original-url", "description":"()"}, {"content":"xdmp:get-request-error-format()", "trigger":"xdmp:get-request-error-format", "description":"()"}, {"content":"xdmp:get-request-port()", "trigger":"xdmp:get-request-port", "description":"()"}, {"content":"xdmp:get-session-field-names()", "trigger":"xdmp:get-session-field-names", "description":"()"}, {"content":"xdmp:get-session-field(${1:\\$name as xs:string})", "trigger":"xdmp:get-session-field", "description":"($name as xs:string)"}, {"content":"xdmp:get-session-field(${1:\\$name as xs:string}, ${2:\\$default as item()*})", "trigger":"xdmp:get-session-field", "description":"($name as xs:string, $default as item()*)"}, {"content":"xdmp:set-session-field(${1:\\$name as xs:string}, ${2:\\$value as item()*})", "trigger":"xdmp:set-session-field", "description":"($name as xs:string, $value as item()*)"}, {"content":"xdmp:get-server-field-names()", "trigger":"xdmp:get-server-field-names", "description":"()"}, {"content":"xdmp:get-server-field(${1:\\$name as xs:string})", "trigger":"xdmp:get-server-field", "description":"($name as xs:string)"}, {"content":"xdmp:get-server-field(${1:\\$name as xs:string}, ${2:\\$default as item()*})", "trigger":"xdmp:get-server-field", "description":"($name as xs:string, $default as item()*)"}, {"content":"xdmp:set-server-field(${1:\\$name as xs:string}, ${2:\\$value as item()*})", "trigger":"xdmp:set-server-field", "description":"($name as xs:string, $value as item()*)"}, {"content":"xdmp:set-server-field-privilege(${1:\\$name as xs:string}, ${2:\\$privilege as xs:string?})", "trigger":"xdmp:set-server-field-privilege", "description":"($name as xs:string, $privilege as xs:string?)"}, {"content":"xdmp:redirect-response(${1:\\$name as xs:string})", "trigger":"xdmp:redirect-response", "description":"($name as xs:string)"}, {"content":"xdmp:set-response-code(${1:\\$code as xs:integer}, ${2:\\$message as xs:string})", "trigger":"xdmp:set-response-code", "description":"($code as xs:integer, $message as xs:string)"}, {"content":"xdmp:get-response-code()", "trigger":"xdmp:get-response-code", "description":"()"}, {"content":"xdmp:set-response-content-type(${1:\\$name as xs:string})", "trigger":"xdmp:set-response-content-type", "description":"($name as xs:string)"}, {"content":"xdmp:set-response-encoding(${1:\\$encoding as xs:string})", "trigger":"xdmp:set-response-encoding", "description":"($encoding as xs:string)"}, {"content":"xdmp:get-response-encoding()", "trigger":"xdmp:get-response-encoding", "description":"()"}, {"content":"xdmp:set-request-time-limit(${1:\\$time-limit as xs:unsignedInt})", "trigger":"xdmp:set-request-time-limit", "description":"($time-limit as xs:unsignedInt)"}, {"content":"xdmp:set-request-time-limit(${1:\\$time-limit as xs:unsignedInt}, ${2:\\$hostID as xs:unsignedLong?})", "trigger":"xdmp:set-request-time-limit", "description":"($time-limit as xs:unsignedInt, $hostID as xs:unsignedLong?)"}, {"content":"xdmp:set-request-time-limit(${1:\\$time-limit as xs:unsignedInt}, ${2:\\$hostID as xs:unsignedLong?}, ${3:\\$serverID as xs:unsignedLong?})", "trigger":"xdmp:set-request-time-limit", "description":"($time-limit as xs:unsignedInt, $hostID as xs:unsignedLong?, $serverID as xs:unsignedLong?)"}, {"content":"xdmp:set-request-time-limit(${1:\\$time-limit as xs:unsignedInt}, ${2:\\$hostID as xs:unsignedLong?}, ${3:\\$serverID as xs:unsignedLong?}, ${4:\\$requestID as xs:unsignedLong?})", "trigger":"xdmp:set-request-time-limit", "description":"($time-limit as xs:unsignedInt, $hostID as xs:unsignedLong?, $serverID as xs:unsignedLong?, $requestID as xs:unsignedLong?)"}, {"content":"xdmp:add-response-header(${1:\\$name as xs:string}, ${2:\\$value as xs:string})", "trigger":"xdmp:add-response-header", "description":"($name as xs:string, $value as xs:string)"}, {"content":"xdmp:uri-is-file(${1:\\$uri as xs:string?})", "trigger":"xdmp:uri-is-file", "description":"($uri as xs:string?)"}, {"content":"xdmp:get-request-client-address()", "trigger":"xdmp:get-request-client-address", "description":"()"}, {"content":"xdmp:get-request-protocol()", "trigger":"xdmp:get-request-protocol", "description":"()"}, {"content":"xdmp:get-request-client-certificate()", "trigger":"xdmp:get-request-client-certificate", "description":"()"}, {"content":"xdmp:get-request-body()", "trigger":"xdmp:get-request-body", "description":"()"}, {"content":"xdmp:get-request-body(${1:\\$format as xs:string?})", "trigger":"xdmp:get-request-body", "description":"($format as xs:string?)"}, {"content":"xdmp:get-url-rewriter-path()", "trigger":"xdmp:get-url-rewriter-path", "description":"()"}, {"content":"fn:true()", "trigger":"fn:true", "description":"()"}, {"content":"fn:false()", "trigger":"fn:false", "description":"()"}, {"content":"fn:not(${1:\\$arg as item()*})", "trigger":"fn:not", "description":"($arg as item()*)"}, {"content":"cts:train(${1:\\$training-nodes as node()*}, ${2:\\$labels as element(cts:label)*})", "trigger":"cts:train", "description":"($training-nodes as node()*, $labels as element(cts:label)*)"}, {"content":"cts:train(${1:\\$training-nodes as node()*}, ${2:\\$labels as element(cts:label)*}, ${3:\\$options as (element()|map:map)?})", "trigger":"cts:train", "description":"($training-nodes as node()*, $labels as element(cts:label)*, $options as (element()|map:map)?)"}, {"content":"cts:classify(${1:\\$data-nodes as node()*}, ${2:\\$classifier as element(cts:classifier)})", "trigger":"cts:classify", "description":"($data-nodes as node()*, $classifier as element(cts:classifier))"}, {"content":"cts:classify(${1:\\$data-nodes as node()*}, ${2:\\$classifier as element(cts:classifier)}, ${3:\\$options as (element()|map:map)?})", "trigger":"cts:classify", "description":"($data-nodes as node()*, $classifier as element(cts:classifier), $options as (element()|map:map)?)"}, {"content":"cts:classify(${1:\\$data-nodes as node()*}, ${2:\\$classifier as element(cts:classifier)}, ${3:\\$options as (element()|map:map)?}, ${4:\\$training-nodes as node()*})", "trigger":"cts:classify", "description":"($data-nodes as node()*, $classifier as element(cts:classifier), $options as (element()|map:map)?, $training-nodes as node()*)"}, {"content":"cts:thresholds(${1:\\$computed-labels as element(cts:label)*}, ${2:\\$known-labels as element(cts:label)*})", "trigger":"cts:thresholds", "description":"($computed-labels as element(cts:label)*, $known-labels as element(cts:label)*)"}, {"content":"cts:thresholds(${1:\\$computed-labels as element(cts:label)*}, ${2:\\$known-labels as element(cts:label)*}, ${3:\\$recall-weight as xs:double?})", "trigger":"cts:thresholds", "description":"($computed-labels as element(cts:label)*, $known-labels as element(cts:label)*, $recall-weight as xs:double?)"}, {"content":"cts:cluster(${1:\\$nodes as node()*})", "trigger":"cts:cluster", "description":"($nodes as node()*)"}, {"content":"cts:cluster(${1:\\$nodes as node()*}, ${2:\\$options as (element()|map:map)?})", "trigger":"cts:cluster", "description":"($nodes as node()*, $options as (element()|map:map)?)"}, {"content":"fn:position()", "trigger":"fn:position", "description":"()"}, {"content":"fn:last()", "trigger":"fn:last", "description":"()"}, {"content":"fn:current-dateTime()", "trigger":"fn:current-dateTime", "description":"()"}, {"content":"fn:current-date()", "trigger":"fn:current-date", "description":"()"}, {"content":"fn:current-time()", "trigger":"fn:current-time", "description":"()"}, {"content":"fn:implicit-timezone()", "trigger":"fn:implicit-timezone", "description":"()"}, {"content":"fn:default-collation()", "trigger":"fn:default-collation", "description":"()"}, {"content":"fn:static-base-uri()", "trigger":"fn:static-base-uri", "description":"()"}, {"content":"cvt:basepath(${1:\\$uri as xs:string})", "trigger":"cvt:basepath", "description":"($uri as xs:string)"}, {"content":"cvt:basename(${1:\\$uri as xs:string})", "trigger":"cvt:basename", "description":"($uri as xs:string)"}, {"content":"cvt:destination-uri(${1:\\$uri as xs:string}, ${2:\\$extension as xs:string})", "trigger":"cvt:destination-uri", "description":"($uri as xs:string, $extension as xs:string)"}, {"content":"cvt:part-uri(${1:\\$uri as xs:string}, ${2:\\$part as xs:string})", "trigger":"cvt:part-uri", "description":"($uri as xs:string, $part as xs:string)"}, {"content":"cvt:save-converted-documents(${1:\\$source-uri as xs:string}, ${2:\\$destination-uri as xs:string}, ${3:\\$manifest as element()}, ${4:\\$docs as document-node()*})", "trigger":"cvt:save-converted-documents", "description":"($source-uri as xs:string, $destination-uri as xs:string, $manifest as element(), $docs as document-node()*)"}, {"content":"cvt:save-converted-documents(${1:\\$source-uri as xs:string}, ${2:\\$destination-uri as xs:string}, ${3:\\$manifest as element()}, ${4:\\$docs as document-node()*}, ${5:\\$destination-collections as xs:string*})", "trigger":"cvt:save-converted-documents", "description":"($source-uri as xs:string, $destination-uri as xs:string, $manifest as element(), $docs as document-node()*, $destination-collections as xs:string*)"}, {"content":"cpf:success(${1:\\$docid as xs:string}, ${2:\\$transition as element(*, p:transition)?}, ${3:\\$override-state as xs:anyURI?})", "trigger":"cpf:success", "description":"($docid as xs:string, $transition as element(*, p:transition)?, $override-state as xs:anyURI?)"}, {"content":"cpf:failure(${1:\\$docid as xs:string}, ${2:\\$transition as element(*, p:transition)?}, ${3:\\$exception as node()?}, ${4:\\$override-state as xs:anyURI?})", "trigger":"cpf:failure", "description":"($docid as xs:string, $transition as element(*, p:transition)?, $exception as node()?, $override-state as xs:anyURI?)"}, {"content":"cpf:check-transition(${1:\\$docid as xs:string}, ${2:\\$transition as element(*, p:transition)?})", "trigger":"cpf:check-transition", "description":"($docid as xs:string, $transition as element(*, p:transition)?)"}, {"content":"cpf:document-get-state(${1:\\$doc as xs:string})", "trigger":"cpf:document-get-state", "description":"($doc as xs:string)"}, {"content":"cpf:document-set-state(${1:\\$doc as xs:string}, ${2:\\$state as xs:anyURI})", "trigger":"cpf:document-set-state", "description":"($doc as xs:string, $state as xs:anyURI)"}, {"content":"cpf:document-get-processing-status(${1:\\$doc as xs:string})", "trigger":"cpf:document-get-processing-status", "description":"($doc as xs:string)"}, {"content":"cpf:document-set-processing-status(${1:\\$doc as xs:string}, ${2:\\$processing-status as xs:string})", "trigger":"cpf:document-set-processing-status", "description":"($doc as xs:string, $processing-status as xs:string)"}, {"content":"cpf:document-get-last-updated(${1:\\$doc as xs:string})", "trigger":"cpf:document-get-last-updated", "description":"($doc as xs:string)"}, {"content":"cpf:document-set-last-updated(${1:\\$doc as xs:string}, ${2:\\$last-updated as xs:dateTime})", "trigger":"cpf:document-set-last-updated", "description":"($doc as xs:string, $last-updated as xs:dateTime)"}, {"content":"cpf:document-get-error(${1:\\$doc as xs:string})", "trigger":"cpf:document-get-error", "description":"($doc as xs:string)"}, {"content":"cpf:document-set-error(${1:\\$doc as xs:string}, ${2:\\$error as node()?})", "trigger":"cpf:document-set-error", "description":"($doc as xs:string, $error as node()?)"}, {"content":"xdmp:crypt(${1:\\$password as xs:string}, ${2:\\$salt as xs:string})", "trigger":"xdmp:crypt", "description":"($password as xs:string, $salt as xs:string)"}, {"content":"xdmp:crypt2(${1:\\$password as xs:string})", "trigger":"xdmp:crypt2", "description":"($password as xs:string)"}, {"content":"css:get(${1:\\$doc as xs:string})", "trigger":"css:get", "description":"($doc as xs:string)"}, {"content":"css:convert(${1:\\$css as xs:string}, ${2:\\$options as element()?})", "trigger":"css:convert", "description":"($css as xs:string, $options as element()?)"}, {"content":"cdict:get-languages()", "trigger":"cdict:get-languages", "description":"()"}, {"content":"cdict:dictionary-delete(${1:\\$lang as xs:string})", "trigger":"cdict:dictionary-delete", "description":"($lang as xs:string)"}, {"content":"cdict:dictionary-read(${1:\\$lang as xs:string})", "trigger":"cdict:dictionary-read", "description":"($lang as xs:string)"}, {"content":"cdict:dictionary-write(${1:\\$lang as xs:string}, ${2:\\$dict as element(cdict:dictionary)})", "trigger":"cdict:dictionary-write", "description":"($lang as xs:string, $dict as element(cdict:dictionary))"}, {"content":"clang:lexer(${1:\\$variant as xs:string}, ${2:\\$normalization as xs:string?})", "trigger":"clang:lexer", "description":"($variant as xs:string, $normalization as xs:string?)"}, {"content":"clang:lexer(${1:\\$variant as xs:string}, ${2:\\$normalization as xs:string?}, ${3:\\$args as item()*})", "trigger":"clang:lexer", "description":"($variant as xs:string, $normalization as xs:string?, $args as item()*)"}, {"content":"clang:lexer(${1:\\$variant as xs:string}, ${2:\\$normalization as xs:string?}, ${3:\\$args as item()*}, ${4:\\$library as xs:string})", "trigger":"clang:lexer", "description":"($variant as xs:string, $normalization as xs:string?, $args as item()*, $library as xs:string)"}, {"content":"clang:stemmer(${1:\\$variant as xs:string}, ${2:\\$normalization as xs:string?})", "trigger":"clang:stemmer", "description":"($variant as xs:string, $normalization as xs:string?)"}, {"content":"clang:stemmer(${1:\\$variant as xs:string}, ${2:\\$normalization as xs:string?}, ${3:\\$args as item()*})", "trigger":"clang:stemmer", "description":"($variant as xs:string, $normalization as xs:string?, $args as item()*)"}, {"content":"clang:stemmer(${1:\\$variant as xs:string}, ${2:\\$normalization as xs:string?}, ${3:\\$args as item()*}, ${4:\\$library as xs:string})", "trigger":"clang:stemmer", "description":"($variant as xs:string, $normalization as xs:string?, $args as item()*, $library as xs:string)"}, {"content":"clang:user-language-plugin(${1:\\$library as xs:string?}, ${2:\\$lexer as element(lang:lexer)?}, ${3:\\$stemmer as element(lang:stemmer)?})", "trigger":"clang:user-language-plugin", "description":"($library as xs:string?, $lexer as element(lang:lexer)?, $stemmer as element(lang:stemmer)?)"}, {"content":"clang:user-language(${1:\\$lang as xs:string}, ${2:\\$plugin as element(lang:plugin)})", "trigger":"clang:user-language", "description":"($lang as xs:string, $plugin as element(lang:plugin))"}, {"content":"clang:user-language(${1:\\$lang as xs:string}, ${2:\\$plugin as element(lang:plugin)}, ${3:\\$tokenType as xs:string})", "trigger":"clang:user-language", "description":"($lang as xs:string, $plugin as element(lang:plugin), $tokenType as xs:string)"}, {"content":"clang:update-user-language(${1:\\$config as element(lang:user-languages)}, ${2:\\$$user-lang as element(lang:user-language)})", "trigger":"clang:update-user-language", "description":"($config as element(lang:user-languages), $$user-lang as element(lang:user-language))"}, {"content":"clang:delete-user-language(${1:\\$config as element(lang:user-languages)}, ${2:\\$$lang as xs:string})", "trigger":"clang:delete-user-language", "description":"($config as element(lang:user-languages), $$lang as xs:string)"}, {"content":"clang:language-config-read(${1:\\$config as element(lang:user-languages)})", "trigger":"clang:language-config-read", "description":"($config as element(lang:user-languages))"}, {"content":"clang:language-config-delete()", "trigger":"clang:language-config-delete", "description":"()"}, {"content":"clang:language-config-write(${1:\\$config as element(lang:user-languages)})", "trigger":"clang:language-config-write", "description":"($config as element(lang:user-languages))"}, {"content":"dbg:invoke(${1:\\$uri as xs:string})", "trigger":"dbg:invoke", "description":"($uri as xs:string)"}, {"content":"dbg:invoke(${1:\\$uri as xs:string}, ${2:\\$vars as item()*})", "trigger":"dbg:invoke", "description":"($uri as xs:string, $vars as item()*)"}, {"content":"dbg:invoke(${1:\\$uri as xs:string}, ${2:\\$vars as item()*}, ${3:\\$options as (element()|map:map)?})", "trigger":"dbg:invoke", "description":"($uri as xs:string, $vars as item()*, $options as (element()|map:map)?)"}, {"content":"dbg:eval(${1:\\$xquery as xs:string})", "trigger":"dbg:eval", "description":"($xquery as xs:string)"}, {"content":"dbg:eval(${1:\\$xquery as xs:string}, ${2:\\$vars as item()*})", "trigger":"dbg:eval", "description":"($xquery as xs:string, $vars as item()*)"}, {"content":"dbg:eval(${1:\\$xquery as xs:string}, ${2:\\$vars as item()*}, ${3:\\$options as (element()|map:map)?})", "trigger":"dbg:eval", "description":"($xquery as xs:string, $vars as item()*, $options as (element()|map:map)?)"}, {"content":"dbg:attach(${1:\\$request-id as xs:unsignedLong})", "trigger":"dbg:attach", "description":"($request-id as xs:unsignedLong)"}, {"content":"dbg:detach(${1:\\$request-id as xs:unsignedLong})", "trigger":"dbg:detach", "description":"($request-id as xs:unsignedLong)"}, {"content":"dbg:connect(${1:\\$server as xs:unsignedLong})", "trigger":"dbg:connect", "description":"($server as xs:unsignedLong)"}, {"content":"dbg:connected()", "trigger":"dbg:connected", "description":"()"}, {"content":"dbg:disconnect(${1:\\$server as xs:unsignedLong})", "trigger":"dbg:disconnect", "description":"($server as xs:unsignedLong)"}, {"content":"dbg:status(${1:\\$request-id as xs:unsignedLong*})", "trigger":"dbg:status", "description":"($request-id as xs:unsignedLong*)"}, {"content":"dbg:stopped()", "trigger":"dbg:stopped", "description":"()"}, {"content":"dbg:stopped(${1:\\$server as xs:unsignedLong})", "trigger":"dbg:stopped", "description":"($server as xs:unsignedLong)"}, {"content":"dbg:attached()", "trigger":"dbg:attached", "description":"()"}, {"content":"dbg:attached(${1:\\$server as xs:unsignedLong})", "trigger":"dbg:attached", "description":"($server as xs:unsignedLong)"}, {"content":"dbg:stack(${1:\\$request as xs:unsignedLong})", "trigger":"dbg:stack", "description":"($request as xs:unsignedLong)"}, {"content":"dbg:out(${1:\\$request as xs:unsignedLong})", "trigger":"dbg:out", "description":"($request as xs:unsignedLong)"}, {"content":"dbg:finish(${1:\\$request as xs:unsignedLong})", "trigger":"dbg:finish", "description":"($request as xs:unsignedLong)"}, {"content":"dbg:step(${1:\\$request as xs:unsignedLong})", "trigger":"dbg:step", "description":"($request as xs:unsignedLong)"}, {"content":"dbg:next(${1:\\$request as xs:unsignedLong})", "trigger":"dbg:next", "description":"($request as xs:unsignedLong)"}, {"content":"dbg:continue(${1:\\$request as xs:unsignedLong})", "trigger":"dbg:continue", "description":"($request as xs:unsignedLong)"}, {"content":"dbg:wait(${1:\\$request-id as xs:unsignedLong*}, ${2:\\$timeout as xs:unsignedLong})", "trigger":"dbg:wait", "description":"($request-id as xs:unsignedLong*, $timeout as xs:unsignedLong)"}, {"content":"dbg:break(${1:\\$request as xs:unsignedLong})", "trigger":"dbg:break", "description":"($request as xs:unsignedLong)"}, {"content":"dbg:break(${1:\\$request as xs:unsignedLong}, ${2:\\$expression as xs:unsignedLong})", "trigger":"dbg:break", "description":"($request as xs:unsignedLong, $expression as xs:unsignedLong)"}, {"content":"dbg:clear(${1:\\$request as xs:unsignedLong}, ${2:\\$expression as xs:unsignedLong})", "trigger":"dbg:clear", "description":"($request as xs:unsignedLong, $expression as xs:unsignedLong)"}, {"content":"dbg:breakpoints(${1:\\$request as xs:unsignedLong})", "trigger":"dbg:breakpoints", "description":"($request as xs:unsignedLong)"}, {"content":"dbg:stop()", "trigger":"dbg:stop", "description":"()"}, {"content":"dbg:value(${1:\\$request as xs:unsignedLong})", "trigger":"dbg:value", "description":"($request as xs:unsignedLong)"}, {"content":"dbg:value(${1:\\$request as xs:unsignedLong}, ${2:\\$expr as xs:string})", "trigger":"dbg:value", "description":"($request as xs:unsignedLong, $expr as xs:string)"}, {"content":"dbg:line(${1:\\$request as xs:unsignedLong}, ${2:\\$uri as xs:string}, ${3:\\$line as xs:unsignedInt})", "trigger":"dbg:line", "description":"($request as xs:unsignedLong, $uri as xs:string, $line as xs:unsignedInt)"}, {"content":"dbg:function(${1:\\$request as xs:unsignedLong}, ${2:\\$uri as xs:string}, ${3:\\$function as xs:QName})", "trigger":"dbg:function", "description":"($request as xs:unsignedLong, $uri as xs:string, $function as xs:QName)"}, {"content":"dbg:expr(${1:\\$request as xs:unsignedLong}, ${2:\\$expression as xs:unsignedLong})", "trigger":"dbg:expr", "description":"($request as xs:unsignedLong, $expression as xs:unsignedLong)"}, {"content":"dls:document-history(${1:\\$uri as xs:string})", "trigger":"dls:document-history", "description":"($uri as xs:string)"}, {"content":"dls:document-manage(${1:\\$uri as xs:string}, ${2:\\$deep as xs:boolean})", "trigger":"dls:document-manage", "description":"($uri as xs:string, $deep as xs:boolean)"}, {"content":"dls:document-manage(${1:\\$uri as xs:string}, ${2:\\$deep as xs:boolean}, ${3:\\$annotation as item()*})", "trigger":"dls:document-manage", "description":"($uri as xs:string, $deep as xs:boolean, $annotation as item()*)"}, {"content":"dls:document-unmanage(${1:\\$uri as xs:string}, ${2:\\$deep as xs:boolean}, ${3:\\$remove-versions as xs:boolean})", "trigger":"dls:document-unmanage", "description":"($uri as xs:string, $deep as xs:boolean, $remove-versions as xs:boolean)"}, {"content":"dls:document-checkout(${1:\\$uri as xs:string}, ${2:\\$deep as xs:boolean})", "trigger":"dls:document-checkout", "description":"($uri as xs:string, $deep as xs:boolean)"}, {"content":"dls:document-checkout(${1:\\$uri as xs:string}, ${2:\\$deep as xs:boolean}, ${3:\\$annotation as item()?})", "trigger":"dls:document-checkout", "description":"($uri as xs:string, $deep as xs:boolean, $annotation as item()?)"}, {"content":"dls:document-checkout(${1:\\$uri as xs:string}, ${2:\\$deep as xs:boolean}, ${3:\\$annotation as item()?}, ${4:\\$timeout as xs:unsignedLong?})", "trigger":"dls:document-checkout", "description":"($uri as xs:string, $deep as xs:boolean, $annotation as item()?, $timeout as xs:unsignedLong?)"}, {"content":"dls:document-checkin(${1:\\$uri as xs:string}, ${2:\\$deep as xs:boolean})", "trigger":"dls:document-checkin", "description":"($uri as xs:string, $deep as xs:boolean)"}, {"content":"dls:document-version-as-of(${1:\\$uri as xs:string}, ${2:\\$as-of as xs:dateTime})", "trigger":"dls:document-version-as-of", "description":"($uri as xs:string, $as-of as xs:dateTime)"}, {"content":"dls:document-version(${1:\\$uri as xs:string}, ${2:\\$version-number as xs:unsignedInt})", "trigger":"dls:document-version", "description":"($uri as xs:string, $version-number as xs:unsignedInt)"}, {"content":"dls:document-version-uris(${1:\\$uri as xs:string})", "trigger":"dls:document-version-uris", "description":"($uri as xs:string)"}, {"content":"dls:document-version-delete(${1:\\$uri as xs:string}, ${2:\\$version as xs:integer}, ${3:\\$retain-history as xs:boolean})", "trigger":"dls:document-version-delete", "description":"($uri as xs:string, $version as xs:integer, $retain-history as xs:boolean)"}, {"content":"dls:document-versions-query(${1:\\$uri as xs:string})", "trigger":"dls:document-versions-query", "description":"($uri as xs:string)"}, {"content":"dls:document-version-uri(${1:\\$document-uri as xs:string}, ${2:\\$version as xs:integer})", "trigger":"dls:document-version-uri", "description":"($document-uri as xs:string, $version as xs:integer)"}, {"content":"dls:document-delete(${1:\\$uri as xs:string}, ${2:\\$keep-old-versions as xs:boolean}, ${3:\\$retain-history as xs:boolean})", "trigger":"dls:document-delete", "description":"($uri as xs:string, $keep-old-versions as xs:boolean, $retain-history as xs:boolean)"}, {"content":"dls:document-is-managed(${1:\\$uri as xs:string})", "trigger":"dls:document-is-managed", "description":"($uri as xs:string)"}, {"content":"dls:retention-rule(${1:\\$name as xs:string}, ${2:\\$comment as item()*}, ${3:\\$num-versions as xs:unsignedInt?}, ${4:\\$duration as xs:duration?}, ${5:\\$document-query-text as xs:string?}, ${6:\\$document-query as cts:query?})", "trigger":"dls:retention-rule", "description":"($name as xs:string, $comment as item()*, $num-versions as xs:unsignedInt?, $duration as xs:duration?, $document-query-text as xs:string?, $document-query as cts:query?)"}, {"content":"dls:retention-rule-insert(${1:\\$rules as element(dls:retention-rule)*})", "trigger":"dls:retention-rule-insert", "description":"($rules as element(dls:retention-rule)*)"}, {"content":"dls:retention-rules(${1:\\$names as xs:string*})", "trigger":"dls:retention-rules", "description":"($names as xs:string*)"}, {"content":"dls:retention-rule-remove(${1:\\$names as xs:string*})", "trigger":"dls:retention-rule-remove", "description":"($names as xs:string*)"}, {"content":"dls:document-retention-rules(${1:\\$uri as xs:string})", "trigger":"dls:document-retention-rules", "description":"($uri as xs:string)"}, {"content":"dls:purge(${1:\\$delete as xs:boolean}, ${2:\\$retain-history as xs:boolean})", "trigger":"dls:purge", "description":"($delete as xs:boolean, $retain-history as xs:boolean)"}, {"content":"dls:document-purge(${1:\\$uri as xs:string}, ${2:\\$delete as xs:boolean}, ${3:\\$retain-history as xs:boolean})", "trigger":"dls:document-purge", "description":"($uri as xs:string, $delete as xs:boolean, $retain-history as xs:boolean)"}, {"content":"dls:as-of-query(${1:\\$when as xs:dateTime})", "trigger":"dls:as-of-query", "description":"($when as xs:dateTime)"}, {"content":"dls:author-query(${1:\\$author as xs:unsignedLong})", "trigger":"dls:author-query", "description":"($author as xs:unsignedLong)"}, {"content":"dls:document-version-query(${1:\\$version as xs:unsignedLong})", "trigger":"dls:document-version-query", "description":"($version as xs:unsignedLong)"}, {"content":"dls:documents-query()", "trigger":"dls:documents-query", "description":"()"}, {"content":"dls:link-expand(${1:\\$context as node()}, ${2:\\$ref as element(xi:include)}, ${3:\\$restriction as cts:query?})", "trigger":"dls:link-expand", "description":"($context as node(), $ref as element(xi:include), $restriction as cts:query?)"}, {"content":"dls:link-references(${1:\\$node as node()}, ${2:\\$restriction as cts:query?})", "trigger":"dls:link-references", "description":"($node as node(), $restriction as cts:query?)"}, {"content":"dls:node-expand(${1:\\$node as node()}, ${2:\\$restriction as cts:query?})", "trigger":"dls:node-expand", "description":"($node as node(), $restriction as cts:query?)"}, {"content":"dls:document-add-collections(${1:\\$uri as xs:string}, ${2:\\$collections as xs:string*})", "trigger":"dls:document-add-collections", "description":"($uri as xs:string, $collections as xs:string*)"}, {"content":"dls:document-add-permissions(${1:\\$uri as xs:string}, ${2:\\$permissions as item()*})", "trigger":"dls:document-add-permissions", "description":"($uri as xs:string, $permissions as item()*)"}, {"content":"dls:document-get-permissions(${1:\\$uri as xs:string})", "trigger":"dls:document-get-permissions", "description":"($uri as xs:string)"}, {"content":"dls:document-add-properties(${1:\\$uri as xs:string}, ${2:\\$properties as element()*})", "trigger":"dls:document-add-properties", "description":"($uri as xs:string, $properties as element()*)"}, {"content":"dls:document-set-collections(${1:\\$uri as xs:string}, ${2:\\$collections as xs:string*})", "trigger":"dls:document-set-collections", "description":"($uri as xs:string, $collections as xs:string*)"}, {"content":"dls:document-set-permissions(${1:\\$uri as xs:string}, ${2:\\$permissions as item()*})", "trigger":"dls:document-set-permissions", "description":"($uri as xs:string, $permissions as item()*)"}, {"content":"dls:document-set-properties(${1:\\$uri as xs:string}, ${2:\\$properties as element()*})", "trigger":"dls:document-set-properties", "description":"($uri as xs:string, $properties as element()*)"}, {"content":"dls:document-set-property(${1:\\$uri as xs:string}, ${2:\\$property as element()})", "trigger":"dls:document-set-property", "description":"($uri as xs:string, $property as element())"}, {"content":"dls:document-set-quality(${1:\\$uri as xs:string}, ${2:\\$quality as xs:int})", "trigger":"dls:document-set-quality", "description":"($uri as xs:string, $quality as xs:int)"}, {"content":"dls:document-remove-collections(${1:\\$uri as xs:string}, ${2:\\$collections as xs:string*})", "trigger":"dls:document-remove-collections", "description":"($uri as xs:string, $collections as xs:string*)"}, {"content":"dls:document-remove-permissions(${1:\\$uri as xs:string}, ${2:\\$permissions as item()*})", "trigger":"dls:document-remove-permissions", "description":"($uri as xs:string, $permissions as item()*)"}, {"content":"dls:document-remove-properties(${1:\\$uri as xs:string}, ${2:\\$property-names as xs:QName*})", "trigger":"dls:document-remove-properties", "description":"($uri as xs:string, $property-names as xs:QName*)"}, {"content":"dls:document-update(${1:\\$uri as xs:string}, ${2:\\$doc as node()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean})", "trigger":"dls:document-update", "description":"($uri as xs:string, $doc as node(), $annotation as item()*, $retain-history as xs:boolean)"}, {"content":"dls:document-update(${1:\\$uri as xs:string}, ${2:\\$doc as node()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean}, ${5:\\$permissions as item()*})", "trigger":"dls:document-update", "description":"($uri as xs:string, $doc as node(), $annotation as item()*, $retain-history as xs:boolean, $permissions as item()*)"}, {"content":"dls:document-update(${1:\\$uri as xs:string}, ${2:\\$doc as node()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean}, ${5:\\$permissions as item()*}, ${6:\\$collections as xs:string*})", "trigger":"dls:document-update", "description":"($uri as xs:string, $doc as node(), $annotation as item()*, $retain-history as xs:boolean, $permissions as item()*, $collections as xs:string*)"}, {"content":"dls:document-update(${1:\\$uri as xs:string}, ${2:\\$doc as node()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean}, ${5:\\$permissions as item()*}, ${6:\\$collections as xs:string*}, ${7:\\$quality as xs:integer?})", "trigger":"dls:document-update", "description":"($uri as xs:string, $doc as node(), $annotation as item()*, $retain-history as xs:boolean, $permissions as item()*, $collections as xs:string*, $quality as xs:integer?)"}, {"content":"dls:document-update(${1:\\$uri as xs:string}, ${2:\\$doc as node()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean}, ${5:\\$permissions as item()*}, ${6:\\$collections as xs:string*}, ${7:\\$quality as xs:integer?}, ${8:\\$forest-ids as xs:unsignedLong*})", "trigger":"dls:document-update", "description":"($uri as xs:string, $doc as node(), $annotation as item()*, $retain-history as xs:boolean, $permissions as item()*, $collections as xs:string*, $quality as xs:integer?, $forest-ids as xs:unsignedLong*)"}, {"content":"dls:break-checkout(${1:\\$uri as xs:string}, ${2:\\$deep as xs:boolean})", "trigger":"dls:break-checkout", "description":"($uri as xs:string, $deep as xs:boolean)"}, {"content":"dls:document-extract-part(${1:\\$new-uri as xs:string}, ${2:\\$element as element()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean})", "trigger":"dls:document-extract-part", "description":"($new-uri as xs:string, $element as element(), $annotation as item()*, $retain-history as xs:boolean)"}, {"content":"dls:document-extract-part(${1:\\$new-uri as xs:string}, ${2:\\$element as element()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean}, ${5:\\$permissions as item()*})", "trigger":"dls:document-extract-part", "description":"($new-uri as xs:string, $element as element(), $annotation as item()*, $retain-history as xs:boolean, $permissions as item()*)"}, {"content":"dls:document-extract-part(${1:\\$new-uri as xs:string}, ${2:\\$element as element()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean}, ${5:\\$permissions as item()*}, ${6:\\$collections as xs:string*})", "trigger":"dls:document-extract-part", "description":"($new-uri as xs:string, $element as element(), $annotation as item()*, $retain-history as xs:boolean, $permissions as item()*, $collections as xs:string*)"}, {"content":"dls:document-extract-part(${1:\\$new-uri as xs:string}, ${2:\\$element as element()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean}, ${5:\\$permissions as item()*}, ${6:\\$collections as xs:string*}, ${7:\\$quality as xs:integer?})", "trigger":"dls:document-extract-part", "description":"($new-uri as xs:string, $element as element(), $annotation as item()*, $retain-history as xs:boolean, $permissions as item()*, $collections as xs:string*, $quality as xs:integer?)"}, {"content":"dls:document-extract-part(${1:\\$new-uri as xs:string}, ${2:\\$element as element()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean}, ${5:\\$permissions as item()*}, ${6:\\$collections as xs:string*}, ${7:\\$quality as xs:integer?}, ${8:\\$forest-ids as xs:unsignedLong*})", "trigger":"dls:document-extract-part", "description":"($new-uri as xs:string, $element as element(), $annotation as item()*, $retain-history as xs:boolean, $permissions as item()*, $collections as xs:string*, $quality as xs:integer?, $forest-ids as xs:unsignedLong*)"}, {"content":"dls:document-checkout-status(${1:\\$uri as xs:string})", "trigger":"dls:document-checkout-status", "description":"($uri as xs:string)"}, {"content":"dls:document-include-query(${1:\\$uri as xs:string})", "trigger":"dls:document-include-query", "description":"($uri as xs:string)"}, {"content":"dls:document-insert-and-manage(${1:\\$uri as xs:string}, ${2:\\$deep as xs:boolean}, ${3:\\$doc as node()})", "trigger":"dls:document-insert-and-manage", "description":"($uri as xs:string, $deep as xs:boolean, $doc as node())"}, {"content":"dls:document-insert-and-manage(${1:\\$uri as xs:string}, ${2:\\$deep as xs:boolean}, ${3:\\$doc as node()}, ${4:\\$annotation as item()*})", "trigger":"dls:document-insert-and-manage", "description":"($uri as xs:string, $deep as xs:boolean, $doc as node(), $annotation as item()*)"}, {"content":"dls:document-insert-and-manage(${1:\\$uri as xs:string}, ${2:\\$deep as xs:boolean}, ${3:\\$doc as node()}, ${4:\\$annotation as item()*}, ${5:\\$permissions as item()*})", "trigger":"dls:document-insert-and-manage", "description":"($uri as xs:string, $deep as xs:boolean, $doc as node(), $annotation as item()*, $permissions as item()*)"}, {"content":"dls:document-insert-and-manage(${1:\\$uri as xs:string}, ${2:\\$deep as xs:boolean}, ${3:\\$doc as node()}, ${4:\\$annotation as item()*}, ${5:\\$permissions as item()*}, ${6:\\$collections as xs:string*})", "trigger":"dls:document-insert-and-manage", "description":"($uri as xs:string, $deep as xs:boolean, $doc as node(), $annotation as item()*, $permissions as item()*, $collections as xs:string*)"}, {"content":"dls:document-insert-and-manage(${1:\\$uri as xs:string}, ${2:\\$deep as xs:boolean}, ${3:\\$doc as node()}, ${4:\\$annotation as item()*}, ${5:\\$permissions as item()*}, ${6:\\$collections as xs:string*}, ${7:\\$quality as xs:integer?})", "trigger":"dls:document-insert-and-manage", "description":"($uri as xs:string, $deep as xs:boolean, $doc as node(), $annotation as item()*, $permissions as item()*, $collections as xs:string*, $quality as xs:integer?)"}, {"content":"dls:document-insert-and-manage(${1:\\$uri as xs:string}, ${2:\\$deep as xs:boolean}, ${3:\\$doc as node()}, ${4:\\$annotation as item()*}, ${5:\\$permissions as item()*}, ${6:\\$collections as xs:string*}, ${7:\\$quality as xs:integer?}, ${8:\\$forest-ids as xs:unsignedLong*})", "trigger":"dls:document-insert-and-manage", "description":"($uri as xs:string, $deep as xs:boolean, $doc as node(), $annotation as item()*, $permissions as item()*, $collections as xs:string*, $quality as xs:integer?, $forest-ids as xs:unsignedLong*)"}, {"content":"dls:document-checkout-update-checkin(${1:\\$uri as xs:string}, ${2:\\$doc as node()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean})", "trigger":"dls:document-checkout-update-checkin", "description":"($uri as xs:string, $doc as node(), $annotation as item()*, $retain-history as xs:boolean)"}, {"content":"dls:document-checkout-update-checkin(${1:\\$uri as xs:string}, ${2:\\$doc as node()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean}, ${5:\\$permissions as item()*})", "trigger":"dls:document-checkout-update-checkin", "description":"($uri as xs:string, $doc as node(), $annotation as item()*, $retain-history as xs:boolean, $permissions as item()*)"}, {"content":"dls:document-checkout-update-checkin(${1:\\$uri as xs:string}, ${2:\\$doc as node()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean}, ${5:\\$permissions as item()*}, ${6:\\$collections as xs:string*})", "trigger":"dls:document-checkout-update-checkin", "description":"($uri as xs:string, $doc as node(), $annotation as item()*, $retain-history as xs:boolean, $permissions as item()*, $collections as xs:string*)"}, {"content":"dls:document-checkout-update-checkin(${1:\\$uri as xs:string}, ${2:\\$doc as node()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean}, ${5:\\$permissions as item()*}, ${6:\\$collections as xs:string*}, ${7:\\$quality as xs:integer?})", "trigger":"dls:document-checkout-update-checkin", "description":"($uri as xs:string, $doc as node(), $annotation as item()*, $retain-history as xs:boolean, $permissions as item()*, $collections as xs:string*, $quality as xs:integer?)"}, {"content":"dls:document-checkout-update-checkin(${1:\\$uri as xs:string}, ${2:\\$doc as node()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean}, ${5:\\$permissions as item()*}, ${6:\\$collections as xs:string*}, ${7:\\$quality as xs:integer?}, ${8:\\$forest-ids as xs:unsignedLong*})", "trigger":"dls:document-checkout-update-checkin", "description":"($uri as xs:string, $doc as node(), $annotation as item()*, $retain-history as xs:boolean, $permissions as item()*, $collections as xs:string*, $quality as xs:integer?, $forest-ids as xs:unsignedLong*)"}, {"content":"dls:start-upgrade()", "trigger":"dls:start-upgrade", "description":"()"}, {"content":"dls:validate-all-documents(${1:\\$verbose as xs:boolean})", "trigger":"dls:validate-all-documents", "description":"($verbose as xs:boolean)"}, {"content":"dls:latest-validation-results()", "trigger":"dls:latest-validation-results", "description":"()"}, {"content":"dls:set-upgrade-status(${1:\\$promote as xs:boolean})", "trigger":"dls:set-upgrade-status", "description":"($promote as xs:boolean)"}, {"content":"dls:update-validation-results(${1:\\$results as element(dls:validation-results)})", "trigger":"dls:update-validation-results", "description":"($results as element(dls:validation-results))"}, {"content":"dbk:convert(${1:\\$doc as node()?}, ${2:\\$options as element()?})", "trigger":"dbk:convert", "description":"($doc as node()?, $options as element()?)"}, {"content":"dom:create(${1:\\$name as xs:string}, ${2:\\$description as xs:string}, ${3:\\$scope as element(dom:domain-scope)}, ${4:\\$context as element(dom:evaluation-context)}, ${5:\\$pipelines as xs:unsignedLong*}, ${6:\\$permissions as item()*})", "trigger":"dom:create", "description":"($name as xs:string, $description as xs:string, $scope as element(dom:domain-scope), $context as element(dom:evaluation-context), $pipelines as xs:unsignedLong*, $permissions as item()*)"}, {"content":"dom:remove(${1:\\$domain-name as xs:string})", "trigger":"dom:remove", "description":"($domain-name as xs:string)"}, {"content":"dom:get(${1:\\$domain-name as xs:string})", "trigger":"dom:get", "description":"($domain-name as xs:string)"}, {"content":"dom:set-name(${1:\\$domain-name as xs:string}, ${2:\\$new-name as xs:string})", "trigger":"dom:set-name", "description":"($domain-name as xs:string, $new-name as xs:string)"}, {"content":"dom:set-description(${1:\\$domain-name as xs:string}, ${2:\\$description as xs:string})", "trigger":"dom:set-description", "description":"($domain-name as xs:string, $description as xs:string)"}, {"content":"dom:set-domain-scope(${1:\\$domain-name as xs:string}, ${2:\\$scope as element(dom:domain-scope)})", "trigger":"dom:set-domain-scope", "description":"($domain-name as xs:string, $scope as element(dom:domain-scope))"}, {"content":"dom:set-evaluation-context(${1:\\$domain-name as xs:string}, ${2:\\$context as element(dom:evaluation-context)})", "trigger":"dom:set-evaluation-context", "description":"($domain-name as xs:string, $context as element(dom:evaluation-context))"}, {"content":"dom:set-permissions(${1:\\$domain-name as xs:string}, ${2:\\$permissions as item()*})", "trigger":"dom:set-permissions", "description":"($domain-name as xs:string, $permissions as item()*)"}, {"content":"dom:add-permissions(${1:\\$domain-name as xs:string}, ${2:\\$permissions as item()*})", "trigger":"dom:add-permissions", "description":"($domain-name as xs:string, $permissions as item()*)"}, {"content":"dom:remove-permissions(${1:\\$domain-name as xs:string}, ${2:\\$permissions as item()*})", "trigger":"dom:remove-permissions", "description":"($domain-name as xs:string, $permissions as item()*)"}, {"content":"dom:add-pipeline(${1:\\$domain-name as xs:string}, ${2:\\$pipeline-id as xs:unsignedLong})", "trigger":"dom:add-pipeline", "description":"($domain-name as xs:string, $pipeline-id as xs:unsignedLong)"}, {"content":"dom:set-pipelines(${1:\\$domain-name as xs:string}, ${2:\\$pipelines as xs:unsignedLong*})", "trigger":"dom:set-pipelines", "description":"($domain-name as xs:string, $pipelines as xs:unsignedLong*)"}, {"content":"dom:remove-pipeline(${1:\\$domain-name as xs:string}, ${2:\\$pipeline-id as xs:unsignedLong})", "trigger":"dom:remove-pipeline", "description":"($domain-name as xs:string, $pipeline-id as xs:unsignedLong)"}, {"content":"dom:collection()", "trigger":"dom:collection", "description":"()"}, {"content":"dom:domains()", "trigger":"dom:domains", "description":"()"}, {"content":"dom:domain-scope(${1:\\$document-scope as xs:string}, ${2:\\$uri as xs:string}, ${3:\\$depth as xs:string?})", "trigger":"dom:domain-scope", "description":"($document-scope as xs:string, $uri as xs:string, $depth as xs:string?)"}, {"content":"dom:evaluation-context(${1:\\$database as xs:unsignedLong}, ${2:\\$root as xs:string})", "trigger":"dom:evaluation-context", "description":"($database as xs:unsignedLong, $root as xs:string)"}, {"content":"dom:configuration-set-evaluation-context(${1:\\$context as element(dom:evaluation-context)})", "trigger":"dom:configuration-set-evaluation-context", "description":"($context as element(dom:evaluation-context))"}, {"content":"dom:configuration-set-restart-user(${1:\\$restart-user as xs:string})", "trigger":"dom:configuration-set-restart-user", "description":"($restart-user as xs:string)"}, {"content":"dom:configuration-set-default-domain(${1:\\$domain-id as xs:unsignedLong})", "trigger":"dom:configuration-set-default-domain", "description":"($domain-id as xs:unsignedLong)"}, {"content":"dom:configuration-set-permissions(${1:\\$permissions as item()*})", "trigger":"dom:configuration-set-permissions", "description":"($permissions as item()*)"}, {"content":"dom:configuration-create(${1:\\$restart-user as xs:string}, ${2:\\$evaluation-context as element(dom:evaluation-context)}, ${3:\\$default-domain as xs:unsignedLong}, ${4:\\$permissions as element(sec:permission)*})", "trigger":"dom:configuration-create", "description":"($restart-user as xs:string, $evaluation-context as element(dom:evaluation-context), $default-domain as xs:unsignedLong, $permissions as element(sec:permission)*)"}, {"content":"dom:configuration-get()", "trigger":"dom:configuration-get", "description":"()"}, {"content":"fn:years-from-duration(${1:\\$arg as xs:duration?})", "trigger":"fn:years-from-duration", "description":"($arg as xs:duration?)"}, {"content":"fn:months-from-duration(${1:\\$arg as xs:duration?})", "trigger":"fn:months-from-duration", "description":"($arg as xs:duration?)"}, {"content":"fn:days-from-duration(${1:\\$arg as xs:duration?})", "trigger":"fn:days-from-duration", "description":"($arg as xs:duration?)"}, {"content":"fn:hours-from-duration(${1:\\$arg as xs:duration?})", "trigger":"fn:hours-from-duration", "description":"($arg as xs:duration?)"}, {"content":"fn:minutes-from-duration(${1:\\$arg as xs:duration?})", "trigger":"fn:minutes-from-duration", "description":"($arg as xs:duration?)"}, {"content":"fn:seconds-from-duration(${1:\\$arg as xs:duration?})", "trigger":"fn:seconds-from-duration", "description":"($arg as xs:duration?)"}, {"content":"fn:year-from-dateTime(${1:\\$arg as xs:dateTime?})", "trigger":"fn:year-from-dateTime", "description":"($arg as xs:dateTime?)"}, {"content":"fn:month-from-dateTime(${1:\\$arg as xs:dateTime?})", "trigger":"fn:month-from-dateTime", "description":"($arg as xs:dateTime?)"}, {"content":"fn:day-from-dateTime(${1:\\$arg as xs:dateTime?})", "trigger":"fn:day-from-dateTime", "description":"($arg as xs:dateTime?)"}, {"content":"fn:hours-from-dateTime(${1:\\$arg as xs:dateTime?})", "trigger":"fn:hours-from-dateTime", "description":"($arg as xs:dateTime?)"}, {"content":"fn:minutes-from-dateTime(${1:\\$arg as xs:dateTime?})", "trigger":"fn:minutes-from-dateTime", "description":"($arg as xs:dateTime?)"}, {"content":"fn:seconds-from-dateTime(${1:\\$arg as xs:dateTime?})", "trigger":"fn:seconds-from-dateTime", "description":"($arg as xs:dateTime?)"}, {"content":"fn:timezone-from-dateTime(${1:\\$arg as xs:dateTime?})", "trigger":"fn:timezone-from-dateTime", "description":"($arg as xs:dateTime?)"}, {"content":"fn:year-from-date(${1:\\$arg as xs:date?})", "trigger":"fn:year-from-date", "description":"($arg as xs:date?)"}, {"content":"fn:month-from-date(${1:\\$arg as xs:date?})", "trigger":"fn:month-from-date", "description":"($arg as xs:date?)"}, {"content":"fn:day-from-date(${1:\\$arg as xs:date?})", "trigger":"fn:day-from-date", "description":"($arg as xs:date?)"}, {"content":"xdmp:quarter-from-date(${1:\\$arg as xs:date?})", "trigger":"xdmp:quarter-from-date", "description":"($arg as xs:date?)"}, {"content":"xdmp:week-from-date(${1:\\$arg as xs:date?})", "trigger":"xdmp:week-from-date", "description":"($arg as xs:date?)"}, {"content":"xdmp:yearday-from-date(${1:\\$arg as xs:date?})", "trigger":"xdmp:yearday-from-date", "description":"($arg as xs:date?)"}, {"content":"xdmp:weekday-from-date(${1:\\$arg as xs:date?})", "trigger":"xdmp:weekday-from-date", "description":"($arg as xs:date?)"}, {"content":"fn:timezone-from-date(${1:\\$arg as xs:date?})", "trigger":"fn:timezone-from-date", "description":"($arg as xs:date?)"}, {"content":"fn:hours-from-time(${1:\\$arg as xs:time?})", "trigger":"fn:hours-from-time", "description":"($arg as xs:time?)"}, {"content":"fn:minutes-from-time(${1:\\$arg as xs:time?})", "trigger":"fn:minutes-from-time", "description":"($arg as xs:time?)"}, {"content":"fn:seconds-from-time(${1:\\$arg as xs:time?})", "trigger":"fn:seconds-from-time", "description":"($arg as xs:time?)"}, {"content":"fn:timezone-from-time(${1:\\$arg as xs:time?})", "trigger":"fn:timezone-from-time", "description":"($arg as xs:time?)"}, {"content":"fn:adjust-dateTime-to-timezone(${1:\\$arg as xs:dateTime?})", "trigger":"fn:adjust-dateTime-to-timezone", "description":"($arg as xs:dateTime?)"}, {"content":"fn:adjust-dateTime-to-timezone(${1:\\$arg as xs:dateTime?}, ${2:\\$timezone as xs:dayTimeDuration?})", "trigger":"fn:adjust-dateTime-to-timezone", "description":"($arg as xs:dateTime?, $timezone as xs:dayTimeDuration?)"}, {"content":"fn:adjust-date-to-timezone(${1:\\$arg as xs:date?})", "trigger":"fn:adjust-date-to-timezone", "description":"($arg as xs:date?)"}, {"content":"fn:adjust-date-to-timezone(${1:\\$arg as xs:date?}, ${2:\\$timezone as xs:dayTimeDuration?})", "trigger":"fn:adjust-date-to-timezone", "description":"($arg as xs:date?, $timezone as xs:dayTimeDuration?)"}, {"content":"fn:adjust-time-to-timezone(${1:\\$arg as xs:time?})", "trigger":"fn:adjust-time-to-timezone", "description":"($arg as xs:time?)"}, {"content":"fn:adjust-time-to-timezone(${1:\\$arg as xs:time?}, ${2:\\$timezone as xs:dayTimeDuration?})", "trigger":"fn:adjust-time-to-timezone", "description":"($arg as xs:time?, $timezone as xs:dayTimeDuration?)"}, {"content":"fn:subtract-dateTimes-yielding-yearMonthDuration(${1:\\$srcval1 as xs:dateTime}, ${2:\\$srcval1 as xs:dateTime})", "trigger":"fn:subtract-dateTimes-yielding-yearMonthDuration", "description":"($srcval1 as xs:dateTime, $srcval1 as xs:dateTime)"}, {"content":"fn:subtract-dateTimes-yielding-dayTimeDuration(${1:\\$srcval1 as xs:dateTime}, ${2:\\$srcval1 as xs:dateTime})", "trigger":"fn:subtract-dateTimes-yielding-dayTimeDuration", "description":"($srcval1 as xs:dateTime, $srcval1 as xs:dateTime)"}, {"content":"sql:datepart(${1:\\$datepart as xs:string?}, ${2:\\$date as xs:genericDateTimeArg})", "trigger":"sql:datepart", "description":"($datepart as xs:string?, $date as xs:genericDateTimeArg)"}, {"content":"sql:datediff(${1:\\$datepart as xs:string}, ${2:\\$startdate as item()}, ${3:\\$enddate as item()})", "trigger":"sql:datediff", "description":"($datepart as xs:string, $startdate as item(), $enddate as item())"}, {"content":"sql:dateadd(${1:\\$datepart as xs:string}, ${2:\\$number as xs:integer}, ${3:\\$date as item()})", "trigger":"sql:dateadd", "description":"($datepart as xs:string, $number as xs:integer, $date as item())"}, {"content":"ec2:describe-images(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string})", "trigger":"ec2:describe-images", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string)"}, {"content":"ec2:describe-images(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$image-ids as xs:string*})", "trigger":"ec2:describe-images", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $image-ids as xs:string*)"}, {"content":"ec2:describe-images(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$image-ids as xs:string*}, ${5:\\$executable-by as xs:string*})", "trigger":"ec2:describe-images", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $image-ids as xs:string*, $executable-by as xs:string*)"}, {"content":"ec2:describe-images(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$image-ids as xs:string*}, ${5:\\$executable-by as xs:string*}, ${6:\\$owners as xs:string*})", "trigger":"ec2:describe-images", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $image-ids as xs:string*, $executable-by as xs:string*, $owners as xs:string*)"}, {"content":"ec2:describe-availability-zones(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string})", "trigger":"ec2:describe-availability-zones", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string)"}, {"content":"ec2:describe-availability-zones(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$zone-name as xs:string*})", "trigger":"ec2:describe-availability-zones", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $zone-name as xs:string*)"}, {"content":"ec2:describe-regions(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string})", "trigger":"ec2:describe-regions", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string)"}, {"content":"ec2:describe-regions(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$region-names as xs:string*})", "trigger":"ec2:describe-regions", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $region-names as xs:string*)"}, {"content":"ec2:attach-volume(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$volume-id as xs:string}, ${5:\\$instance-id as xs:string}, ${6:\\$device as xs:string})", "trigger":"ec2:attach-volume", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $volume-id as xs:string, $instance-id as xs:string, $device as xs:string)"}, {"content":"ec2:create-snapshot(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$volume-id as xs:string})", "trigger":"ec2:create-snapshot", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $volume-id as xs:string)"}, {"content":"ec2:create-snapshot(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$volume-id as xs:string}, ${5:\\$description as xs:string?})", "trigger":"ec2:create-snapshot", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $volume-id as xs:string, $description as xs:string?)"}, {"content":"ec2:create-volume(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$availability-zone as xs:string}, ${5:\\$size as xs:integer})", "trigger":"ec2:create-volume", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $availability-zone as xs:string, $size as xs:integer)"}, {"content":"ec2:create-volume-from-snapshot(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$availability-zone as xs:string}, ${5:\\$snapshot-id as xs:string})", "trigger":"ec2:create-volume-from-snapshot", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $availability-zone as xs:string, $snapshot-id as xs:string)"}, {"content":"ec2:create-volume-from-snapshot(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$availability-zone as xs:string}, ${5:\\$snapshot-id as xs:string}, ${6:\\$size as xs:integer?})", "trigger":"ec2:create-volume-from-snapshot", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $availability-zone as xs:string, $snapshot-id as xs:string, $size as xs:integer?)"}, {"content":"ec2:delete-snapshot(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$snapshot-id as xs:string})", "trigger":"ec2:delete-snapshot", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $snapshot-id as xs:string)"}, {"content":"ec2:delete-volume(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$volume-id as xs:string})", "trigger":"ec2:delete-volume", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $volume-id as xs:string)"}, {"content":"ec2:describe-snapshot-create-volume-permission(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$snapshot-ids as xs:string*})", "trigger":"ec2:describe-snapshot-create-volume-permission", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $snapshot-ids as xs:string*)"}, {"content":"ec2:describe-snapshots(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string})", "trigger":"ec2:describe-snapshots", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string)"}, {"content":"ec2:describe-snapshots(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$snapshot-ids as xs:string*})", "trigger":"ec2:describe-snapshots", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $snapshot-ids as xs:string*)"}, {"content":"ec2:describe-snapshots(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$snapshot-ids as xs:string*}, ${5:\\$owners as xs:string*})", "trigger":"ec2:describe-snapshots", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $snapshot-ids as xs:string*, $owners as xs:string*)"}, {"content":"ec2:describe-snapshots(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$snapshot-ids as xs:string*}, ${5:\\$owners as xs:string*}, ${6:\\$restorable-bys as xs:string*})", "trigger":"ec2:describe-snapshots", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $snapshot-ids as xs:string*, $owners as xs:string*, $restorable-bys as xs:string*)"}, {"content":"ec2:describe-volumes(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string})", "trigger":"ec2:describe-volumes", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string)"}, {"content":"ec2:describe-volumes(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$volume-ids as xs:string*})", "trigger":"ec2:describe-volumes", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $volume-ids as xs:string*)"}, {"content":"ec2:detach-volume(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$volume-id as xs:string})", "trigger":"ec2:detach-volume", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $volume-id as xs:string)"}, {"content":"ec2:detach-volume(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$volume-id as xs:string}, ${5:\\$instance-id as xs:string?})", "trigger":"ec2:detach-volume", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $volume-id as xs:string, $instance-id as xs:string?)"}, {"content":"ec2:detach-volume(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$volume-id as xs:string}, ${5:\\$instance-id as xs:string?}, ${6:\\$device as xs:string?})", "trigger":"ec2:detach-volume", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $volume-id as xs:string, $instance-id as xs:string?, $device as xs:string?)"}, {"content":"ec2:detach-volume(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$volume-id as xs:string}, ${5:\\$instance-id as xs:string?}, ${6:\\$device as xs:string?}, ${7:\\$force as xs:boolean?})", "trigger":"ec2:detach-volume", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $volume-id as xs:string, $instance-id as xs:string?, $device as xs:string?, $force as xs:boolean?)"}, {"content":"ec2:add-snapshot-create-volume-permission-users(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$snapshot-ids as xs:string*}, ${5:\\$user-ids as xs:string*})", "trigger":"ec2:add-snapshot-create-volume-permission-users", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $snapshot-ids as xs:string*, $user-ids as xs:string*)"}, {"content":"ec2:add-snapshot-create-volume-permission-groups(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$snapshot-ids as xs:string*}, ${5:\\$user-groups as xs:string*})", "trigger":"ec2:add-snapshot-create-volume-permission-groups", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $snapshot-ids as xs:string*, $user-groups as xs:string*)"}, {"content":"ec2:remove-snapshot-create-volume-permission-users(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$snapshot-ids as xs:string*}, ${5:\\$user-ids as xs:string*})", "trigger":"ec2:remove-snapshot-create-volume-permission-users", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $snapshot-ids as xs:string*, $user-ids as xs:string*)"}, {"content":"ec2:remove-snapshot-create-volume-permission-groups(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$snapshot-ids as xs:string*}, ${5:\\$user-groups as xs:string*})", "trigger":"ec2:remove-snapshot-create-volume-permission-groups", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $snapshot-ids as xs:string*, $user-groups as xs:string*)"}, {"content":"ec2:reset-snapshot-create-volume-permission(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$snapshot-ids as xs:string*})", "trigger":"ec2:reset-snapshot-create-volume-permission", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $snapshot-ids as xs:string*)"}, {"content":"ec2:allocate-address(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string})", "trigger":"ec2:allocate-address", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string)"}, {"content":"ec2:associate-address(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$public-ip as xs:string}, ${5:\\$instance-id as xs:string})", "trigger":"ec2:associate-address", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $public-ip as xs:string, $instance-id as xs:string)"}, {"content":"ec2:describe-addresses(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string})", "trigger":"ec2:describe-addresses", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string)"}, {"content":"ec2:describe-addresses(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$public-ips as xs:string*})", "trigger":"ec2:describe-addresses", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $public-ips as xs:string*)"}, {"content":"ec2:disassociate-address(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$public-ip as xs:string})", "trigger":"ec2:disassociate-address", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $public-ip as xs:string)"}, {"content":"ec2:release-address(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$public-ip as xs:string})", "trigger":"ec2:release-address", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $public-ip as xs:string)"}, {"content":"ec2:get-console-output(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-id as xs:string})", "trigger":"ec2:get-console-output", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $instance-id as xs:string)"}, {"content":"ec2:describe-instance-block-device-mapping(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string})", "trigger":"ec2:describe-instance-block-device-mapping", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $instance-ids as xs:string)"}, {"content":"ec2:describe-instance-disable-api-termination(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string})", "trigger":"ec2:describe-instance-disable-api-termination", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $instance-ids as xs:string)"}, {"content":"ec2:describe-instance-initiated-shutdown-behavior(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string})", "trigger":"ec2:describe-instance-initiated-shutdown-behavior", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $instance-ids as xs:string)"}, {"content":"ec2:describe-instance-kernel(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string})", "trigger":"ec2:describe-instance-kernel", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $instance-ids as xs:string)"}, {"content":"ec2:describe-instance-ramdisk(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string})", "trigger":"ec2:describe-instance-ramdisk", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $instance-ids as xs:string)"}, {"content":"ec2:describe-instance-root-device-name(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string})", "trigger":"ec2:describe-instance-root-device-name", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $instance-ids as xs:string)"}, {"content":"ec2:describe-instance-type(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string})", "trigger":"ec2:describe-instance-type", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $instance-ids as xs:string)"}, {"content":"ec2:describe-instance-user-data(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string})", "trigger":"ec2:describe-instance-user-data", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $instance-ids as xs:string)"}, {"content":"ec2:describe-instances(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string})", "trigger":"ec2:describe-instances", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string)"}, {"content":"ec2:describe-instances(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string*})", "trigger":"ec2:describe-instances", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $instance-ids as xs:string*)"}, {"content":"ec2:modify-instance-block-device-mapping(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-id as xs:string}, ${5:\\$value as xs:string})", "trigger":"ec2:modify-instance-block-device-mapping", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $instance-id as xs:string, $value as xs:string)"}, {"content":"ec2:modify-instance-disable-api-termination(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-id as xs:string}, ${5:\\$value as xs:boolean})", "trigger":"ec2:modify-instance-disable-api-termination", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $instance-id as xs:string, $value as xs:boolean)"}, {"content":"ec2:modify-instance-initiated-shutdown-behavior(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-id as xs:string}, ${5:\\$value as xs:string})", "trigger":"ec2:modify-instance-initiated-shutdown-behavior", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $instance-id as xs:string, $value as xs:string)"}, {"content":"ec2:modify-instance-kernel(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-id as xs:string}, ${5:\\$value as xs:string})", "trigger":"ec2:modify-instance-kernel", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $instance-id as xs:string, $value as xs:string)"}, {"content":"ec2:modify-instance-ramdisk(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-id as xs:string}, ${5:\\$value as xs:string})", "trigger":"ec2:modify-instance-ramdisk", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $instance-id as xs:string, $value as xs:string)"}, {"content":"ec2:modify-instance-root-device-name(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-id as xs:string}, ${5:\\$value as xs:string})", "trigger":"ec2:modify-instance-root-device-name", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $instance-id as xs:string, $value as xs:string)"}, {"content":"ec2:modify-instance-type(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-id as xs:string}, ${5:\\$value as xs:string})", "trigger":"ec2:modify-instance-type", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $instance-id as xs:string, $value as xs:string)"}, {"content":"ec2:modify-instance-user-data(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-id as xs:string}, ${5:\\$value as xs:string})", "trigger":"ec2:modify-instance-user-data", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $instance-id as xs:string, $value as xs:string)"}, {"content":"ec2:reboot-instances(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string+})", "trigger":"ec2:reboot-instances", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $instance-ids as xs:string+)"}, {"content":"ec2:reset-instance-kernel(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string*})", "trigger":"ec2:reset-instance-kernel", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $instance-ids as xs:string*)"}, {"content":"ec2:reset-instance-ramdisk(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string*})", "trigger":"ec2:reset-instance-ramdisk", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $instance-ids as xs:string*)"}, {"content":"ec2:run-instances(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$image-id as xs:string}, ${5:\\$min-count as xs:integer}, ${6:\\$max-count as xs:integer}, ${7:\\$instance-type as xs:string?}, ${8:\\$key-pair as xs:string?}, ${9:\\$security-group as xs:string*}, ${10:\\$instance-options as xs:string*})", "trigger":"ec2:run-instances", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $image-id as xs:string, $min-count as xs:integer, $max-count as xs:integer, $instance-type as xs:string?, $key-pair as xs:string?, $security-group as xs:string*, $instance-options as xs:string*)"}, {"content":"ec2:start-instances(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string+})", "trigger":"ec2:start-instances", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $instance-ids as xs:string+)"}, {"content":"ec2:stop-instances(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string+}, ${5:\\$force as xs:boolean})", "trigger":"ec2:stop-instances", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $instance-ids as xs:string+, $force as xs:boolean)"}, {"content":"ec2:terminate-instances(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string+})", "trigger":"ec2:terminate-instances", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $instance-ids as xs:string+)"}, {"content":"ec2:create-key-pair(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$key-name as xs:string})", "trigger":"ec2:create-key-pair", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $key-name as xs:string)"}, {"content":"ec2:delete-key-pair(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$key-name as xs:string})", "trigger":"ec2:delete-key-pair", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $key-name as xs:string)"}, {"content":"ec2:describe-key-pairs(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string})", "trigger":"ec2:describe-key-pairs", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string)"}, {"content":"ec2:describe-key-pairs(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$key-names as xs:string*})", "trigger":"ec2:describe-key-pairs", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $key-names as xs:string*)"}, {"content":"ec2:monitor-instances(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string+})", "trigger":"ec2:monitor-instances", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $instance-ids as xs:string+)"}, {"content":"ec2:unmonitor-instances(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string+})", "trigger":"ec2:unmonitor-instances", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $instance-ids as xs:string+)"}, {"content":"ec2:authorize-group-ingress(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$group-name as xs:string}, ${5:\\$source-group-owner-id as xs:string}, ${6:\\$source-group-name as xs:string})", "trigger":"ec2:authorize-group-ingress", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $group-name as xs:string, $source-group-owner-id as xs:string, $source-group-name as xs:string)"}, {"content":"ec2:authorize-icmp-ingress(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$group-name as xs:string}, ${5:\\$icmp-type as xs:integer}, ${6:\\$icmp-code as xs:integer}, ${7:\\$cidr-ip as xs:string})", "trigger":"ec2:authorize-icmp-ingress", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $group-name as xs:string, $icmp-type as xs:integer, $icmp-code as xs:integer, $cidr-ip as xs:string)"}, {"content":"ec2:authorize-tcp-ingress(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$group-name as xs:string}, ${5:\\$port-range as xs:integer+}, ${6:\\$cidr-ip as xs:string})", "trigger":"ec2:authorize-tcp-ingress", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $group-name as xs:string, $port-range as xs:integer+, $cidr-ip as xs:string)"}, {"content":"ec2:authorize-udp-ingress(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$group-name as xs:string}, ${5:\\$port-range as xs:integer+}, ${6:\\$cidr-ip as xs:string})", "trigger":"ec2:authorize-udp-ingress", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $group-name as xs:string, $port-range as xs:integer+, $cidr-ip as xs:string)"}, {"content":"ec2:create-security-group(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$group-name as xs:string}, ${5:\\$group-description as xs:string})", "trigger":"ec2:create-security-group", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $group-name as xs:string, $group-description as xs:string)"}, {"content":"ec2:delete-security-group(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$group-name as xs:string})", "trigger":"ec2:delete-security-group", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $group-name as xs:string)"}, {"content":"ec2:describe-security-groups(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string})", "trigger":"ec2:describe-security-groups", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string)"}, {"content":"ec2:describe-security-groups(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$group-names as xs:string*})", "trigger":"ec2:describe-security-groups", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $group-names as xs:string*)"}, {"content":"ec2:revoke-group-ingress(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$group-name as xs:string}, ${5:\\$source-group-owner-id as xs:string}, ${6:\\$source-group-name as xs:string})", "trigger":"ec2:revoke-group-ingress", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $group-name as xs:string, $source-group-owner-id as xs:string, $source-group-name as xs:string)"}, {"content":"ec2:revoke-icmp-ingress(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$group-name as xs:string}, ${5:\\$icmp-type as xs:integer}, ${6:\\$icmp-code as xs:integer}, ${7:\\$cidr-ip as xs:string})", "trigger":"ec2:revoke-icmp-ingress", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $group-name as xs:string, $icmp-type as xs:integer, $icmp-code as xs:integer, $cidr-ip as xs:string)"}, {"content":"ec2:revoke-tcp-ingress(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$group-name as xs:string}, ${5:\\$port-range as xs:integer+}, ${6:\\$cidr-ip as xs:string})", "trigger":"ec2:revoke-tcp-ingress", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $group-name as xs:string, $port-range as xs:integer+, $cidr-ip as xs:string)"}, {"content":"ec2:revoke-udp-ingress(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$group-name as xs:string}, ${5:\\$port-range as xs:integer+}, ${6:\\$cidr-ip as xs:string})", "trigger":"ec2:revoke-udp-ingress", "description":"($access-key as xs:string, $secret-key as xs:string, $ec2-region as xs:string, $group-name as xs:string, $port-range as xs:integer+, $cidr-ip as xs:string)"}, {"content":"fn:error()", "trigger":"fn:error", "description":"()"}, {"content":"fn:error(${1:\\$error as xs:QName?})", "trigger":"fn:error", "description":"($error as xs:QName?)"}, {"content":"fn:error(${1:\\$error as xs:QName?}, ${2:\\$description as xs:string})", "trigger":"fn:error", "description":"($error as xs:QName?, $description as xs:string)"}, {"content":"fn:error(${1:\\$error as xs:QName?}, ${2:\\$description as xs:string}, ${3:\\$data as item()*})", "trigger":"fn:error", "description":"($error as xs:QName?, $description as xs:string, $data as item()*)"}, {"content":"xdmp:eval(${1:\\$xquery as xs:string})", "trigger":"xdmp:eval", "description":"($xquery as xs:string)"}, {"content":"xdmp:eval(${1:\\$xquery as xs:string}, ${2:\\$vars as item()*})", "trigger":"xdmp:eval", "description":"($xquery as xs:string, $vars as item()*)"}, {"content":"xdmp:eval(${1:\\$xquery as xs:string}, ${2:\\$vars as item()*}, ${3:\\$options as (element()|map:map)?})", "trigger":"xdmp:eval", "description":"($xquery as xs:string, $vars as item()*, $options as (element()|map:map)?)"}, {"content":"xdmp:xquery-eval()", "trigger":"xdmp:xquery-eval", "description":"()"}, {"content":"xdmp:xquery-eval(${1:\\$vars as Object})", "trigger":"xdmp:xquery-eval", "description":"($vars as Object)"}, {"content":"xdmp:xquery-eval(${1:\\$vars as Object}, ${2:\\$options as (element()|map:map)?})", "trigger":"xdmp:xquery-eval", "description":"($vars as Object, $options as (element()|map:map)?)"}, {"content":"xdmp:javascript-eval(${1:\\$javascript as xs:string})", "trigger":"xdmp:javascript-eval", "description":"($javascript as xs:string)"}, {"content":"xdmp:javascript-eval(${1:\\$javascript as xs:string}, ${2:\\$vars as item()*})", "trigger":"xdmp:javascript-eval", "description":"($javascript as xs:string, $vars as item()*)"}, {"content":"xdmp:javascript-eval(${1:\\$javascript as xs:string}, ${2:\\$vars as item()*}, ${3:\\$options as node()?})", "trigger":"xdmp:javascript-eval", "description":"($javascript as xs:string, $vars as item()*, $options as node()?)"}, {"content":"xdmp:eval-in(${1:\\$xquery as xs:string}, ${2:\\$ID as xs:unsignedLong*})", "trigger":"xdmp:eval-in", "description":"($xquery as xs:string, $ID as xs:unsignedLong*)"}, {"content":"xdmp:eval-in(${1:\\$xquery as xs:string}, ${2:\\$ID as xs:unsignedLong*}, ${3:\\$vars as item()*})", "trigger":"xdmp:eval-in", "description":"($xquery as xs:string, $ID as xs:unsignedLong*, $vars as item()*)"}, {"content":"xdmp:eval-in(${1:\\$xquery as xs:string}, ${2:\\$ID as xs:unsignedLong*}, ${3:\\$vars as item()*}, ${4:\\$modules as xs:unsignedLong?})", "trigger":"xdmp:eval-in", "description":"($xquery as xs:string, $ID as xs:unsignedLong*, $vars as item()*, $modules as xs:unsignedLong?)"}, {"content":"xdmp:eval-in(${1:\\$xquery as xs:string}, ${2:\\$ID as xs:unsignedLong*}, ${3:\\$vars as item()*}, ${4:\\$modules as xs:unsignedLong?}, ${5:\\$root as xs:string?})", "trigger":"xdmp:eval-in", "description":"($xquery as xs:string, $ID as xs:unsignedLong*, $vars as item()*, $modules as xs:unsignedLong?, $root as xs:string?)"}, {"content":"xdmp:invoke(${1:\\$path as xs:string})", "trigger":"xdmp:invoke", "description":"($path as xs:string)"}, {"content":"xdmp:invoke(${1:\\$path as xs:string}, ${2:\\$vars as item()*})", "trigger":"xdmp:invoke", "description":"($path as xs:string, $vars as item()*)"}, {"content":"xdmp:invoke(${1:\\$path as xs:string}, ${2:\\$vars as item()*}, ${3:\\$options as (element()|map:map)?})", "trigger":"xdmp:invoke", "description":"($path as xs:string, $vars as item()*, $options as (element()|map:map)?)"}, {"content":"xdmp:invoke-function(${1:\\$path as function() as item()*})", "trigger":"xdmp:invoke-function", "description":"($path as function() as item()*)"}, {"content":"xdmp:invoke-function(${1:\\$path as function() as item()*}, ${2:\\$options as (element()|map:map)?})", "trigger":"xdmp:invoke-function", "description":"($path as function() as item()*, $options as (element()|map:map)?)"}, {"content":"xdmp:invoke-function(${1:\\$jsFunc as function()})", "trigger":"xdmp:invoke-function", "description":"($jsFunc as function())"}, {"content":"xdmp:invoke-function(${1:\\$jsFunc as function()}, ${2:\\$options as (element()|map:map)?})", "trigger":"xdmp:invoke-function", "description":"($jsFunc as function(), $options as (element()|map:map)?)"}, {"content":"xdmp:invoke-in(${1:\\$uri as xs:string}, ${2:\\$ID as xs:unsignedLong*})", "trigger":"xdmp:invoke-in", "description":"($uri as xs:string, $ID as xs:unsignedLong*)"}, {"content":"xdmp:invoke-in(${1:\\$uri as xs:string}, ${2:\\$ID as xs:unsignedLong*}, ${3:\\$vars as item()*})", "trigger":"xdmp:invoke-in", "description":"($uri as xs:string, $ID as xs:unsignedLong*, $vars as item()*)"}, {"content":"xdmp:invoke-in(${1:\\$uri as xs:string}, ${2:\\$ID as xs:unsignedLong*}, ${3:\\$vars as item()*}, ${4:\\$modules as xs:unsignedLong?})", "trigger":"xdmp:invoke-in", "description":"($uri as xs:string, $ID as xs:unsignedLong*, $vars as item()*, $modules as xs:unsignedLong?)"}, {"content":"xdmp:invoke-in(${1:\\$uri as xs:string}, ${2:\\$ID as xs:unsignedLong*}, ${3:\\$vars as item()*}, ${4:\\$modules as xs:unsignedLong?}, ${5:\\$root as xs:string?})", "trigger":"xdmp:invoke-in", "description":"($uri as xs:string, $ID as xs:unsignedLong*, $vars as item()*, $modules as xs:unsignedLong?, $root as xs:string?)"}, {"content":"xdmp:value(${1:\\$expr as xs:string})", "trigger":"xdmp:value", "description":"($expr as xs:string)"}, {"content":"xdmp:value(${1:\\$expr as xs:string}, ${2:\\$map as map:map})", "trigger":"xdmp:value", "description":"($expr as xs:string, $map as map:map)"}, {"content":"xdmp:unpath(${1:\\$expr as xs:string})", "trigger":"xdmp:unpath", "description":"($expr as xs:string)"}, {"content":"xdmp:unpath(${1:\\$expr as xs:string}, ${2:\\$map as map:map})", "trigger":"xdmp:unpath", "description":"($expr as xs:string, $map as map:map)"}, {"content":"xdmp:xslt-invoke(${1:\\$path as xs:string})", "trigger":"xdmp:xslt-invoke", "description":"($path as xs:string)"}, {"content":"xdmp:xslt-invoke(${1:\\$path as xs:string}, ${2:\\$input as node()?})", "trigger":"xdmp:xslt-invoke", "description":"($path as xs:string, $input as node()?)"}, {"content":"xdmp:xslt-invoke(${1:\\$path as xs:string}, ${2:\\$input as node()?}, ${3:\\$params as map:map?})", "trigger":"xdmp:xslt-invoke", "description":"($path as xs:string, $input as node()?, $params as map:map?)"}, {"content":"xdmp:xslt-invoke(${1:\\$path as xs:string}, ${2:\\$input as node()?}, ${3:\\$params as map:map?}, ${4:\\$options as (element()|map:map)?})", "trigger":"xdmp:xslt-invoke", "description":"($path as xs:string, $input as node()?, $params as map:map?, $options as (element()|map:map)?)"}, {"content":"xdmp:xslt-eval(${1:\\$stylesheet as node()})", "trigger":"xdmp:xslt-eval", "description":"($stylesheet as node())"}, {"content":"xdmp:xslt-eval(${1:\\$stylesheet as node()}, ${2:\\$input as node()?})", "trigger":"xdmp:xslt-eval", "description":"($stylesheet as node(), $input as node()?)"}, {"content":"xdmp:xslt-eval(${1:\\$stylesheet as node()}, ${2:\\$input as node()?}, ${3:\\$params as map:map?})", "trigger":"xdmp:xslt-eval", "description":"($stylesheet as node(), $input as node()?, $params as map:map?)"}, {"content":"xdmp:xslt-eval(${1:\\$stylesheet as node()}, ${2:\\$input as node()?}, ${3:\\$params as map:map?}, ${4:\\$options as (element()|map:map)?})", "trigger":"xdmp:xslt-eval", "description":"($stylesheet as node(), $input as node()?, $params as map:map?, $options as (element()|map:map)?)"}, {"content":"xdmp:spawn(${1:\\$path as xs:string})", "trigger":"xdmp:spawn", "description":"($path as xs:string)"}, {"content":"xdmp:spawn(${1:\\$path as xs:string}, ${2:\\$vars as item()*})", "trigger":"xdmp:spawn", "description":"($path as xs:string, $vars as item()*)"}, {"content":"xdmp:spawn(${1:\\$path as xs:string}, ${2:\\$vars as item()*}, ${3:\\$options as (element()|map:map)?})", "trigger":"xdmp:spawn", "description":"($path as xs:string, $vars as item()*, $options as (element()|map:map)?)"}, {"content":"xdmp:spawn-function(${1:\\$function as function() as item()*})", "trigger":"xdmp:spawn-function", "description":"($function as function() as item()*)"}, {"content":"xdmp:spawn-function(${1:\\$function as function() as item()*}, ${2:\\$options as (element()|map:map)?})", "trigger":"xdmp:spawn-function", "description":"($function as function() as item()*, $options as (element()|map:map)?)"}, {"content":"xdmp:spawn-in(${1:\\$path as xs:string}, ${2:\\$ID as xs:unsignedLong})", "trigger":"xdmp:spawn-in", "description":"($path as xs:string, $ID as xs:unsignedLong)"}, {"content":"xdmp:spawn-in(${1:\\$path as xs:string}, ${2:\\$ID as xs:unsignedLong}, ${3:\\$vars as item()*})", "trigger":"xdmp:spawn-in", "description":"($path as xs:string, $ID as xs:unsignedLong, $vars as item()*)"}, {"content":"xdmp:spawn-in(${1:\\$path as xs:string}, ${2:\\$ID as xs:unsignedLong}, ${3:\\$vars as item()*}, ${4:\\$modules as xs:unsignedLong?})", "trigger":"xdmp:spawn-in", "description":"($path as xs:string, $ID as xs:unsignedLong, $vars as item()*, $modules as xs:unsignedLong?)"}, {"content":"xdmp:spawn-in(${1:\\$path as xs:string}, ${2:\\$ID as xs:unsignedLong}, ${3:\\$vars as item()*}, ${4:\\$modules as xs:unsignedLong?}, ${5:\\$root as xs:string?})", "trigger":"xdmp:spawn-in", "description":"($path as xs:string, $ID as xs:unsignedLong, $vars as item()*, $modules as xs:unsignedLong?, $root as xs:string?)"}, {"content":"excel:clean(${1:\\$uri as xs:string}, ${2:\\$doc as node()?})", "trigger":"excel:clean", "description":"($uri as xs:string, $doc as node()?)"}, {"content":"exsl:node-set(${1:\\$value as item()*})", "trigger":"exsl:node-set", "description":"($value as item()*)"}, {"content":"exsl:object-type(${1:\\$value as item()*})", "trigger":"exsl:object-type", "description":"($value as item()*)"}, {"content":"xdmp:strftime(${1:\\$format as xs:string}, ${2:\\$value as xs:dateTime})", "trigger":"xdmp:strftime", "description":"($format as xs:string, $value as xs:dateTime)"}, {"content":"xdmp:exists(${1:\\$expression as item()*})", "trigger":"xdmp:exists", "description":"($expression as item()*)"}, {"content":"cts:exists(${1:\\$query as cts:query?})", "trigger":"cts:exists", "description":"($query as cts:query?)"}, {"content":"cts:exists(${1:\\$query as cts:query?}, ${2:\\$options as (cts:order|xs:string)*})", "trigger":"cts:exists", "description":"($query as cts:query?, $options as (cts:order|xs:string)*)"}, {"content":"cts:exists(${1:\\$query as cts:query?}, ${2:\\$options as (cts:order|xs:string)*}, ${3:\\$quality-weight as xs:double?})", "trigger":"cts:exists", "description":"($query as cts:query?, $options as (cts:order|xs:string)*, $quality-weight as xs:double?)"}, {"content":"cts:exists(${1:\\$query as cts:query?}, ${2:\\$options as (cts:order|xs:string)*}, ${3:\\$quality-weight as xs:double?}, ${4:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:exists", "description":"($query as cts:query?, $options as (cts:order|xs:string)*, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"xdmp:estimate(${1:\\$expression as item()*})", "trigger":"xdmp:estimate", "description":"($expression as item()*)"}, {"content":"xdmp:estimate(${1:\\$expression as item()*}, ${2:\\$maximum as xs:double?})", "trigger":"xdmp:estimate", "description":"($expression as item()*, $maximum as xs:double?)"}, {"content":"cts:estimate(${1:\\$query as cts:query?})", "trigger":"cts:estimate", "description":"($query as cts:query?)"}, {"content":"cts:estimate(${1:\\$query as cts:query?}, ${2:\\$options as (cts:order|xs:string)*})", "trigger":"cts:estimate", "description":"($query as cts:query?, $options as (cts:order|xs:string)*)"}, {"content":"cts:estimate(${1:\\$query as cts:query?}, ${2:\\$options as (cts:order|xs:string)*}, ${3:\\$quality-weight as xs:double?})", "trigger":"cts:estimate", "description":"($query as cts:query?, $options as (cts:order|xs:string)*, $quality-weight as xs:double?)"}, {"content":"cts:estimate(${1:\\$query as cts:query?}, ${2:\\$options as (cts:order|xs:string)*}, ${3:\\$quality-weight as xs:double?}, ${4:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:estimate", "description":"($query as cts:query?, $options as (cts:order|xs:string)*, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:estimate(${1:\\$query as cts:query?}, ${2:\\$options as (cts:order|xs:string)*}, ${3:\\$quality-weight as xs:double?}, ${4:\\$forest-ids as xs:unsignedLong*}, ${5:\\$maximum as xs:double?})", "trigger":"cts:estimate", "description":"($query as cts:query?, $options as (cts:order|xs:string)*, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*, $maximum as xs:double?)"}, {"content":"xdmp:plan(${1:\\$expression as item()*})", "trigger":"xdmp:plan", "description":"($expression as item()*)"}, {"content":"xdmp:plan(${1:\\$expression as item()*}, ${2:\\$maximum as xs:double?})", "trigger":"xdmp:plan", "description":"($expression as item()*, $maximum as xs:double?)"}, {"content":"cts:plan(${1:\\$query as cts:query?})", "trigger":"cts:plan", "description":"($query as cts:query?)"}, {"content":"cts:plan(${1:\\$query as cts:query?}, ${2:\\$options as (cts:order|xs:string)*})", "trigger":"cts:plan", "description":"($query as cts:query?, $options as (cts:order|xs:string)*)"}, {"content":"cts:plan(${1:\\$query as cts:query?}, ${2:\\$options as (cts:order|xs:string)*}, ${3:\\$quality-weight as xs:double?})", "trigger":"cts:plan", "description":"($query as cts:query?, $options as (cts:order|xs:string)*, $quality-weight as xs:double?)"}, {"content":"cts:plan(${1:\\$query as cts:query?}, ${2:\\$options as (cts:order|xs:string)*}, ${3:\\$quality-weight as xs:double?}, ${4:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:plan", "description":"($query as cts:query?, $options as (cts:order|xs:string)*, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:plan(${1:\\$query as cts:query?}, ${2:\\$options as (cts:order|xs:string)*}, ${3:\\$quality-weight as xs:double?}, ${4:\\$forest-ids as xs:unsignedLong*}, ${5:\\$maximum as xs:double?})", "trigger":"cts:plan", "description":"($query as cts:query?, $options as (cts:order|xs:string)*, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*, $maximum as xs:double?)"}, {"content":"xdmp:plannable(${1:\\$expression as item()*})", "trigger":"xdmp:plannable", "description":"($expression as item()*)"}, {"content":"xdmp:version()", "trigger":"xdmp:version", "description":"()"}, {"content":"xdmp:cluster-effective-version()", "trigger":"xdmp:cluster-effective-version", "description":"()"}, {"content":"xdmp:cluster-version-at-least(${1:\\$version as xs:unsignedInt})", "trigger":"xdmp:cluster-version-at-least", "description":"($version as xs:unsignedInt)"}, {"content":"xdmp:cluster-data-encryption-at-rest()", "trigger":"xdmp:cluster-data-encryption-at-rest", "description":"()"}, {"content":"xdmp:cluster-config-encryption-at-rest()", "trigger":"xdmp:cluster-config-encryption-at-rest", "description":"()"}, {"content":"xdmp:cluster-logs-encryption-at-rest()", "trigger":"xdmp:cluster-logs-encryption-at-rest", "description":"()"}, {"content":"xdmp:cluster-data-encryption-key-id()", "trigger":"xdmp:cluster-data-encryption-key-id", "description":"()"}, {"content":"xdmp:cluster-config-encryption-key-id()", "trigger":"xdmp:cluster-config-encryption-key-id", "description":"()"}, {"content":"xdmp:cluster-logs-encryption-key-id()", "trigger":"xdmp:cluster-logs-encryption-key-id", "description":"()"}, {"content":"xdmp:xquery-version()", "trigger":"xdmp:xquery-version", "description":"()"}, {"content":"xdmp:platform()", "trigger":"xdmp:platform", "description":"()"}, {"content":"xdmp:architecture()", "trigger":"xdmp:architecture", "description":"()"}, {"content":"xdmp:path(${1:\\$node as node()})", "trigger":"xdmp:path", "description":"($node as node())"}, {"content":"xdmp:path(${1:\\$node as node()}, ${2:\\$include-document as xs:boolean?})", "trigger":"xdmp:path", "description":"($node as node(), $include-document as xs:boolean?)"}, {"content":"xdmp:describe(${1:\\$item as item()*})", "trigger":"xdmp:describe", "description":"($item as item()*)"}, {"content":"xdmp:describe(${1:\\$item as item()*}, ${2:\\$max-sequence-length as xs:unsignedInt?})", "trigger":"xdmp:describe", "description":"($item as item()*, $max-sequence-length as xs:unsignedInt?)"}, {"content":"xdmp:describe(${1:\\$item as item()*}, ${2:\\$max-sequence-length as xs:unsignedInt?}, ${3:\\$max-item-length as xs:unsignedInt?})", "trigger":"xdmp:describe", "description":"($item as item()*, $max-sequence-length as xs:unsignedInt?, $max-item-length as xs:unsignedInt?)"}, {"content":"xdmp:hash32(${1:\\$string as xs:string})", "trigger":"xdmp:hash32", "description":"($string as xs:string)"}, {"content":"xdmp:hash64(${1:\\$string as xs:string})", "trigger":"xdmp:hash64", "description":"($string as xs:string)"}, {"content":"xdmp:step64(${1:\\$initial as xs:unsignedLong}, ${2:\\$step as xs:unsignedLong})", "trigger":"xdmp:step64", "description":"($initial as xs:unsignedLong, $step as xs:unsignedLong)"}, {"content":"xdmp:add64(${1:\\$x as xs:unsignedLong}, ${2:\\$y as xs:unsignedLong})", "trigger":"xdmp:add64", "description":"($x as xs:unsignedLong, $y as xs:unsignedLong)"}, {"content":"xdmp:and64(${1:\\$x as xs:unsignedLong}, ${2:\\$y as xs:unsignedLong})", "trigger":"xdmp:and64", "description":"($x as xs:unsignedLong, $y as xs:unsignedLong)"}, {"content":"xdmp:mul64(${1:\\$x as xs:unsignedLong}, ${2:\\$y as xs:unsignedLong})", "trigger":"xdmp:mul64", "description":"($x as xs:unsignedLong, $y as xs:unsignedLong)"}, {"content":"xdmp:not64(${1:\\$x as xs:unsignedLong})", "trigger":"xdmp:not64", "description":"($x as xs:unsignedLong)"}, {"content":"xdmp:or64(${1:\\$x as xs:unsignedLong}, ${2:\\$y as xs:unsignedLong})", "trigger":"xdmp:or64", "description":"($x as xs:unsignedLong, $y as xs:unsignedLong)"}, {"content":"xdmp:xor64(${1:\\$x as xs:unsignedLong}, ${2:\\$y as xs:unsignedLong})", "trigger":"xdmp:xor64", "description":"($x as xs:unsignedLong, $y as xs:unsignedLong)"}, {"content":"xdmp:lshift64(${1:\\$x as xs:unsignedLong}, ${2:\\$y as xs:integer})", "trigger":"xdmp:lshift64", "description":"($x as xs:unsignedLong, $y as xs:integer)"}, {"content":"xdmp:rshift64(${1:\\$x as xs:unsignedLong}, ${2:\\$y as xs:integer})", "trigger":"xdmp:rshift64", "description":"($x as xs:unsignedLong, $y as xs:integer)"}, {"content":"xdmp:random()", "trigger":"xdmp:random", "description":"()"}, {"content":"xdmp:random(${1:\\$max as xs:unsignedLong})", "trigger":"xdmp:random", "description":"($max as xs:unsignedLong)"}, {"content":"xdmp:hex-to-integer(${1:\\$hex as xs:string})", "trigger":"xdmp:hex-to-integer", "description":"($hex as xs:string)"}, {"content":"xdmp:integer-to-hex(${1:\\$val as xs:integer})", "trigger":"xdmp:integer-to-hex", "description":"($val as xs:integer)"}, {"content":"xdmp:octal-to-integer(${1:\\$octal as xs:string})", "trigger":"xdmp:octal-to-integer", "description":"($octal as xs:string)"}, {"content":"xdmp:integer-to-octal(${1:\\$val as xs:integer})", "trigger":"xdmp:integer-to-octal", "description":"($val as xs:integer)"}, {"content":"xdmp:request-timestamp()", "trigger":"xdmp:request-timestamp", "description":"()"}, {"content":"xdmp:security-database()", "trigger":"xdmp:security-database", "description":"()"}, {"content":"xdmp:security-database(${1:\\$database-id as xs:unsignedLong})", "trigger":"xdmp:security-database", "description":"($database-id as xs:unsignedLong)"}, {"content":"xdmp:schema-database()", "trigger":"xdmp:schema-database", "description":"()"}, {"content":"xdmp:schema-database(${1:\\$database-id as xs:unsignedLong})", "trigger":"xdmp:schema-database", "description":"($database-id as xs:unsignedLong)"}, {"content":"xdmp:modules-database()", "trigger":"xdmp:modules-database", "description":"()"}, {"content":"xdmp:triggers-database()", "trigger":"xdmp:triggers-database", "description":"()"}, {"content":"xdmp:triggers-database(${1:\\$database-id as xs:unsignedLong})", "trigger":"xdmp:triggers-database", "description":"($database-id as xs:unsignedLong)"}, {"content":"xdmp:quote(${1:\\$arg as item()*})", "trigger":"xdmp:quote", "description":"($arg as item()*)"}, {"content":"xdmp:quote(${1:\\$arg as item()*}, ${2:\\$options as (element()|map:map)?})", "trigger":"xdmp:quote", "description":"($arg as item()*, $options as (element()|map:map)?)"}, {"content":"xdmp:unquote(${1:\\$arg as xs:string})", "trigger":"xdmp:unquote", "description":"($arg as xs:string)"}, {"content":"xdmp:unquote(${1:\\$arg as xs:string}, ${2:\\$default-namespace as xs:string?})", "trigger":"xdmp:unquote", "description":"($arg as xs:string, $default-namespace as xs:string?)"}, {"content":"xdmp:unquote(${1:\\$arg as xs:string}, ${2:\\$default-namespace as xs:string?}, ${3:\\$options as xs:string*})", "trigger":"xdmp:unquote", "description":"($arg as xs:string, $default-namespace as xs:string?, $options as xs:string*)"}, {"content":"xdmp:log(${1:\\$msg as item()*})", "trigger":"xdmp:log", "description":"($msg as item()*)"}, {"content":"xdmp:log(${1:\\$msg as item()*}, ${2:\\$level as xs:string?})", "trigger":"xdmp:log", "description":"($msg as item()*, $level as xs:string?)"}, {"content":"xdmp:log-level()", "trigger":"xdmp:log-level", "description":"()"}, {"content":"xdmp:trace-enabled(${1:\\$name as xs:string})", "trigger":"xdmp:trace-enabled", "description":"($name as xs:string)"}, {"content":"xdmp:query-meters()", "trigger":"xdmp:query-meters", "description":"()"}, {"content":"xdmp:elapsed-time()", "trigger":"xdmp:elapsed-time", "description":"()"}, {"content":"xdmp:query-trace(${1:\\$enabled as xs:boolean})", "trigger":"xdmp:query-trace", "description":"($enabled as xs:boolean)"}, {"content":"xdmp:database-path-namespaces()", "trigger":"xdmp:database-path-namespaces", "description":"()"}, {"content":"xdmp:database-path-namespaces(${1:\\$dbid as xs:unsignedLong})", "trigger":"xdmp:database-path-namespaces", "description":"($dbid as xs:unsignedLong)"}, {"content":"xdmp:node-uri(${1:\\$node as node()})", "trigger":"xdmp:node-uri", "description":"($node as node())"}, {"content":"xdmp:node-database(${1:\\$node as node()})", "trigger":"xdmp:node-database", "description":"($node as node())"}, {"content":"xdmp:product-edition()", "trigger":"xdmp:product-edition", "description":"()"}, {"content":"xdmp:product-environment()", "trigger":"xdmp:product-environment", "description":"()"}, {"content":"xdmp:document-locks()", "trigger":"xdmp:document-locks", "description":"()"}, {"content":"xdmp:document-locks(${1:\\$uri as xs:string*})", "trigger":"xdmp:document-locks", "description":"($uri as xs:string*)"}, {"content":"xdmp:document-properties()", "trigger":"xdmp:document-properties", "description":"()"}, {"content":"xdmp:document-properties(${1:\\$uri as xs:string*})", "trigger":"xdmp:document-properties", "description":"($uri as xs:string*)"}, {"content":"xdmp:document-get-quality(${1:\\$uri as xs:string})", "trigger":"xdmp:document-get-quality", "description":"($uri as xs:string)"}, {"content":"xdmp:document-timestamp(${1:\\$uri as xs:string})", "trigger":"xdmp:document-timestamp", "description":"($uri as xs:string)"}, {"content":"xdmp:document-forest(${1:\\$uri as xs:string})", "trigger":"xdmp:document-forest", "description":"($uri as xs:string)"}, {"content":"xdmp:document-forest(${1:\\$uri as xs:string}, ${2:\\$forest-ids as xs:unsignedLong*})", "trigger":"xdmp:document-forest", "description":"($uri as xs:string, $forest-ids as xs:unsignedLong*)"}, {"content":"xdmp:forest(${1:\\$name as xs:string})", "trigger":"xdmp:forest", "description":"($name as xs:string)"}, {"content":"xdmp:database()", "trigger":"xdmp:database", "description":"()"}, {"content":"xdmp:database(${1:\\$name as xs:string})", "trigger":"xdmp:database", "description":"($name as xs:string)"}, {"content":"xdmp:database-forests(${1:\\$database-id as xs:unsignedLong})", "trigger":"xdmp:database-forests", "description":"($database-id as xs:unsignedLong)"}, {"content":"xdmp:database-forests(${1:\\$database-id as xs:unsignedLong}, ${2:\\$include-replicas as xs:boolean})", "trigger":"xdmp:database-forests", "description":"($database-id as xs:unsignedLong, $include-replicas as xs:boolean)"}, {"content":"xdmp:forest-open-replica(${1:\\$forestIDs as xs:unsignedLong*})", "trigger":"xdmp:forest-open-replica", "description":"($forestIDs as xs:unsignedLong*)"}, {"content":"xdmp:forest-updates-allowed(${1:\\$forest-id as xs:unsignedLong})", "trigger":"xdmp:forest-updates-allowed", "description":"($forest-id as xs:unsignedLong)"}, {"content":"xdmp:database-name(${1:\\$database-id as xs:unsignedLong})", "trigger":"xdmp:database-name", "description":"($database-id as xs:unsignedLong)"}, {"content":"xdmp:database-is-replica(${1:\\$database-id as xs:unsignedLong})", "trigger":"xdmp:database-is-replica", "description":"($database-id as xs:unsignedLong)"}, {"content":"xdmp:database-nonblocking-timestamp(${1:\\$database-id as xs:unsignedLong})", "trigger":"xdmp:database-nonblocking-timestamp", "description":"($database-id as xs:unsignedLong)"}, {"content":"xdmp:database-global-nonblocking-timestamp(${1:\\$database-id as xs:unsignedLong})", "trigger":"xdmp:database-global-nonblocking-timestamp", "description":"($database-id as xs:unsignedLong)"}, {"content":"xdmp:database-is-forest-retired(${1:\\$database-id as xs:unsignedLong}, ${2:\\$forest-id as xs:unsignedLong})", "trigger":"xdmp:database-is-forest-retired", "description":"($database-id as xs:unsignedLong, $forest-id as xs:unsignedLong)"}, {"content":"xdmp:database-assignment-policy(${1:\\$database-id as xs:unsignedLong})", "trigger":"xdmp:database-assignment-policy", "description":"($database-id as xs:unsignedLong)"}, {"content":"xdmp:group-get-audit-event-type-enabled(${1:\\$group-id as xs:unsignedLong}, ${2:\\$event-type as xs:unsignedLong})", "trigger":"xdmp:group-get-audit-event-type-enabled", "description":"($group-id as xs:unsignedLong, $event-type as xs:unsignedLong)"}, {"content":"xdmp:database-is-rebalancer-enable(${1:\\$database-id as xs:unsignedLong})", "trigger":"xdmp:database-is-rebalancer-enable", "description":"($database-id as xs:unsignedLong)"}, {"content":"xdmp:database-encryption-key-id(${1:\\$database-id as xs:unsignedLong})", "trigger":"xdmp:database-encryption-key-id", "description":"($database-id as xs:unsignedLong)"}, {"content":"xdmp:database-encryption-at-rest(${1:\\$database-id as xs:unsignedLong})", "trigger":"xdmp:database-encryption-at-rest", "description":"($database-id as xs:unsignedLong)"}, {"content":"xdmp:server-name(${1:\\$id as xs:unsignedLong})", "trigger":"xdmp:server-name", "description":"($id as xs:unsignedLong)"}, {"content":"xdmp:server-group(${1:\\$id as xs:unsignedLong})", "trigger":"xdmp:server-group", "description":"($id as xs:unsignedLong)"}, {"content":"xdmp:server-port(${1:\\$id as xs:unsignedLong})", "trigger":"xdmp:server-port", "description":"($id as xs:unsignedLong)"}, {"content":"xdmp:server-ssl-certificate-template(${1:\\$id as xs:unsignedLong})", "trigger":"xdmp:server-ssl-certificate-template", "description":"($id as xs:unsignedLong)"}, {"content":"xdmp:server-database(${1:\\$id as xs:unsignedLong})", "trigger":"xdmp:server-database", "description":"($id as xs:unsignedLong)"}, {"content":"xdmp:server-modules-database(${1:\\$id as xs:unsignedLong})", "trigger":"xdmp:server-modules-database", "description":"($id as xs:unsignedLong)"}, {"content":"xdmp:server-collation(${1:\\$id as xs:unsignedLong})", "trigger":"xdmp:server-collation", "description":"($id as xs:unsignedLong)"}, {"content":"xdmp:server-root(${1:\\$id as xs:unsignedLong})", "trigger":"xdmp:server-root", "description":"($id as xs:unsignedLong)"}, {"content":"xdmp:server-default-xquery-version(${1:\\$id as xs:unsignedLong})", "trigger":"xdmp:server-default-xquery-version", "description":"($id as xs:unsignedLong)"}, {"content":"xdmp:forest-name(${1:\\$forest-id as xs:unsignedLong})", "trigger":"xdmp:forest-name", "description":"($forest-id as xs:unsignedLong)"}, {"content":"xdmp:forest-host(${1:\\$id as xs:unsignedLong})", "trigger":"xdmp:forest-host", "description":"($id as xs:unsignedLong)"}, {"content":"xdmp:databases()", "trigger":"xdmp:databases", "description":"()"}, {"content":"xdmp:forests()", "trigger":"xdmp:forests", "description":"()"}, {"content":"xdmp:forest-databases(${1:\\$forest as xs:unsignedLong})", "trigger":"xdmp:forest-databases", "description":"($forest as xs:unsignedLong)"}, {"content":"xdmp:document-get(${1:\\$location as xs:string})", "trigger":"xdmp:document-get", "description":"($location as xs:string)"}, {"content":"xdmp:document-get(${1:\\$location as xs:string}, ${2:\\$options as (element()|map:map)?})", "trigger":"xdmp:document-get", "description":"($location as xs:string, $options as (element()|map:map)?)"}, {"content":"xdmp:get(${1:\\$path as xs:string})", "trigger":"xdmp:get", "description":"($path as xs:string)"}, {"content":"xdmp:get(${1:\\$path as xs:string}, ${2:\\$default-namespace as xs:string?})", "trigger":"xdmp:get", "description":"($path as xs:string, $default-namespace as xs:string?)"}, {"content":"xdmp:get(${1:\\$path as xs:string}, ${2:\\$default-namespace as xs:string?}, ${3:\\$options as xs:string*})", "trigger":"xdmp:get", "description":"($path as xs:string, $default-namespace as xs:string?, $options as xs:string*)"}, {"content":"xdmp:directory(${1:\\$uri as xs:string*})", "trigger":"xdmp:directory", "description":"($uri as xs:string*)"}, {"content":"xdmp:directory(${1:\\$uri as xs:string*}, ${2:\\$depth as xs:string?})", "trigger":"xdmp:directory", "description":"($uri as xs:string*, $depth as xs:string?)"}, {"content":"xdmp:directory-properties(${1:\\$uri as xs:string*})", "trigger":"xdmp:directory-properties", "description":"($uri as xs:string*)"}, {"content":"xdmp:directory-properties(${1:\\$uri as xs:string*}, ${2:\\$depth as xs:string?})", "trigger":"xdmp:directory-properties", "description":"($uri as xs:string*, $depth as xs:string?)"}, {"content":"xdmp:collection-properties()", "trigger":"xdmp:collection-properties", "description":"()"}, {"content":"xdmp:collection-properties(${1:\\$uri as xs:string*})", "trigger":"xdmp:collection-properties", "description":"($uri as xs:string*)"}, {"content":"xdmp:directory-locks(${1:\\$uri as xs:string*})", "trigger":"xdmp:directory-locks", "description":"($uri as xs:string*)"}, {"content":"xdmp:directory-locks(${1:\\$uri as xs:string*}, ${2:\\$depth as xs:string?})", "trigger":"xdmp:directory-locks", "description":"($uri as xs:string*, $depth as xs:string?)"}, {"content":"xdmp:collection-locks()", "trigger":"xdmp:collection-locks", "description":"()"}, {"content":"xdmp:collection-locks(${1:\\$uri as xs:string*})", "trigger":"xdmp:collection-locks", "description":"($uri as xs:string*)"}, {"content":"xdmp:uri-content-type(${1:\\$uri as xs:string})", "trigger":"xdmp:uri-content-type", "description":"($uri as xs:string)"}, {"content":"xdmp:uri-format(${1:\\$uri as xs:string})", "trigger":"xdmp:uri-format", "description":"($uri as xs:string)"}, {"content":"xdmp:document-get-properties(${1:\\$uri as xs:string}, ${2:\\$property as xs:QName})", "trigger":"xdmp:document-get-properties", "description":"($uri as xs:string, $property as xs:QName)"}, {"content":"xdmp:access(${1:\\$uri as xs:string}, ${2:\\$action as xs:string})", "trigger":"xdmp:access", "description":"($uri as xs:string, $action as xs:string)"}, {"content":"xdmp:http-get(${1:\\$uri as xs:string})", "trigger":"xdmp:http-get", "description":"($uri as xs:string)"}, {"content":"xdmp:http-get(${1:\\$uri as xs:string}, ${2:\\$options as (element()|map:map)?})", "trigger":"xdmp:http-get", "description":"($uri as xs:string, $options as (element()|map:map)?)"}, {"content":"xdmp:http-head(${1:\\$uri as xs:string})", "trigger":"xdmp:http-head", "description":"($uri as xs:string)"}, {"content":"xdmp:http-head(${1:\\$uri as xs:string}, ${2:\\$options as (element()|map:map)?})", "trigger":"xdmp:http-head", "description":"($uri as xs:string, $options as (element()|map:map)?)"}, {"content":"xdmp:http-options(${1:\\$uri as xs:string})", "trigger":"xdmp:http-options", "description":"($uri as xs:string)"}, {"content":"xdmp:http-options(${1:\\$uri as xs:string}, ${2:\\$options as (element()|map:map)?})", "trigger":"xdmp:http-options", "description":"($uri as xs:string, $options as (element()|map:map)?)"}, {"content":"xdmp:http-delete(${1:\\$uri as xs:string})", "trigger":"xdmp:http-delete", "description":"($uri as xs:string)"}, {"content":"xdmp:http-delete(${1:\\$uri as xs:string}, ${2:\\$options as (element()|map:map)?})", "trigger":"xdmp:http-delete", "description":"($uri as xs:string, $options as (element()|map:map)?)"}, {"content":"xdmp:http-post(${1:\\$uri as xs:string})", "trigger":"xdmp:http-post", "description":"($uri as xs:string)"}, {"content":"xdmp:http-post(${1:\\$uri as xs:string}, ${2:\\$options as (element()|map:map)?})", "trigger":"xdmp:http-post", "description":"($uri as xs:string, $options as (element()|map:map)?)"}, {"content":"xdmp:http-post(${1:\\$uri as xs:string}, ${2:\\$options as (element()|map:map)?}, ${3:\\$data as node()?})", "trigger":"xdmp:http-post", "description":"($uri as xs:string, $options as (element()|map:map)?, $data as node()?)"}, {"content":"xdmp:http-put(${1:\\$uri as xs:string})", "trigger":"xdmp:http-put", "description":"($uri as xs:string)"}, {"content":"xdmp:http-put(${1:\\$uri as xs:string}, ${2:\\$options as (element()|map:map)?})", "trigger":"xdmp:http-put", "description":"($uri as xs:string, $options as (element()|map:map)?)"}, {"content":"xdmp:http-put(${1:\\$uri as xs:string}, ${2:\\$options as (element()|map:map)?}, ${3:\\$data as node()?})", "trigger":"xdmp:http-put", "description":"($uri as xs:string, $options as (element()|map:map)?, $data as node()?)"}, {"content":"xdmp:base64-encode(${1:\\$plaintext as xs:string})", "trigger":"xdmp:base64-encode", "description":"($plaintext as xs:string)"}, {"content":"xdmp:base64-decode(${1:\\$encoded as xs:string})", "trigger":"xdmp:base64-decode", "description":"($encoded as xs:string)"}, {"content":"xdmp:subbinary(${1:\\$source as binary()}, ${2:\\$starting-location as xs:double})", "trigger":"xdmp:subbinary", "description":"($source as binary(), $starting-location as xs:double)"}, {"content":"xdmp:subbinary(${1:\\$source as binary()}, ${2:\\$starting-location as xs:double}, ${3:\\$length as xs:double})", "trigger":"xdmp:subbinary", "description":"($source as binary(), $starting-location as xs:double, $length as xs:double)"}, {"content":"xdmp:external-binary(${1:\\$path as xs:string})", "trigger":"xdmp:external-binary", "description":"($path as xs:string)"}, {"content":"xdmp:external-binary(${1:\\$path as xs:string}, ${2:\\$starting-location as xs:double})", "trigger":"xdmp:external-binary", "description":"($path as xs:string, $starting-location as xs:double)"}, {"content":"xdmp:external-binary(${1:\\$path as xs:string}, ${2:\\$starting-location as xs:double}, ${3:\\$length as xs:double})", "trigger":"xdmp:external-binary", "description":"($path as xs:string, $starting-location as xs:double, $length as xs:double)"}, {"content":"xdmp:binary-size()", "trigger":"xdmp:binary-size", "description":"()"}, {"content":"xdmp:binary-size(${1:\\$source as binary()?})", "trigger":"xdmp:binary-size", "description":"($source as binary()?)"}, {"content":"xdmp:binary-is-external(${1:\\$source as binary()})", "trigger":"xdmp:binary-is-external", "description":"($source as binary())"}, {"content":"xdmp:binary-is-small(${1:\\$source as binary()})", "trigger":"xdmp:binary-is-small", "description":"($source as binary())"}, {"content":"xdmp:binary-is-large(${1:\\$source as binary()})", "trigger":"xdmp:binary-is-large", "description":"($source as binary())"}, {"content":"xdmp:external-binary-path(${1:\\$source as binary()})", "trigger":"xdmp:external-binary-path", "description":"($source as binary())"}, {"content":"xdmp:trace(${1:\\$name as xs:string}, ${2:\\$value as item()*})", "trigger":"xdmp:trace", "description":"($name as xs:string, $value as item()*)"}, {"content":"xdmp:set(${1:\\$variable as item()*}, ${2:\\$expr as item()*})", "trigger":"xdmp:set", "description":"($variable as item()*, $expr as item()*)"}, {"content":"xdmp:host()", "trigger":"xdmp:host", "description":"()"}, {"content":"xdmp:host(${1:\\$name as xs:string})", "trigger":"xdmp:host", "description":"($name as xs:string)"}, {"content":"xdmp:host-name()", "trigger":"xdmp:host-name", "description":"()"}, {"content":"xdmp:host-name(${1:\\$ID as xs:unsignedLong})", "trigger":"xdmp:host-name", "description":"($ID as xs:unsignedLong)"}, {"content":"xdmp:host-group()", "trigger":"xdmp:host-group", "description":"()"}, {"content":"xdmp:host-group(${1:\\$ID as xs:unsignedLong})", "trigger":"xdmp:host-group", "description":"($ID as xs:unsignedLong)"}, {"content":"xdmp:software-version()", "trigger":"xdmp:software-version", "description":"()"}, {"content":"xdmp:effective-version()", "trigger":"xdmp:effective-version", "description":"()"}, {"content":"xdmp:host-mode()", "trigger":"xdmp:host-mode", "description":"()"}, {"content":"xdmp:host-mode-description()", "trigger":"xdmp:host-mode-description", "description":"()"}, {"content":"xdmp:host-mode-description(${1:\\$ID as xs:unsignedLong})", "trigger":"xdmp:host-mode-description", "description":"($ID as xs:unsignedLong)"}, {"content":"xdmp:hosts()", "trigger":"xdmp:hosts", "description":"()"}, {"content":"xdmp:bootstrap-hosts()", "trigger":"xdmp:bootstrap-hosts", "description":"()"}, {"content":"xdmp:cluster()", "trigger":"xdmp:cluster", "description":"()"}, {"content":"xdmp:cluster(${1:\\$name as xs:string})", "trigger":"xdmp:cluster", "description":"($name as xs:string)"}, {"content":"xdmp:cluster-name()", "trigger":"xdmp:cluster-name", "description":"()"}, {"content":"xdmp:cluster-name(${1:\\$id as xs:unsignedLong})", "trigger":"xdmp:cluster-name", "description":"($id as xs:unsignedLong)"}, {"content":"xdmp:foreign-clusters()", "trigger":"xdmp:foreign-clusters", "description":"()"}, {"content":"xdmp:server()", "trigger":"xdmp:server", "description":"()"}, {"content":"xdmp:server(${1:\\$name as xs:string})", "trigger":"xdmp:server", "description":"($name as xs:string)"}, {"content":"xdmp:server(${1:\\$name as xs:string}, ${2:\\$group as xs:unsignedLong})", "trigger":"xdmp:server", "description":"($name as xs:string, $group as xs:unsignedLong)"}, {"content":"xdmp:servers()", "trigger":"xdmp:servers", "description":"()"}, {"content":"xdmp:groups()", "trigger":"xdmp:groups", "description":"()"}, {"content":"xdmp:group()", "trigger":"xdmp:group", "description":"()"}, {"content":"xdmp:group(${1:\\$name as xs:string})", "trigger":"xdmp:group", "description":"($name as xs:string)"}, {"content":"xdmp:group-name()", "trigger":"xdmp:group-name", "description":"()"}, {"content":"xdmp:group-name(${1:\\$groupID as xs:unsignedLong})", "trigger":"xdmp:group-name", "description":"($groupID as xs:unsignedLong)"}, {"content":"xdmp:group-hosts()", "trigger":"xdmp:group-hosts", "description":"()"}, {"content":"xdmp:group-hosts(${1:\\$groupID as xs:unsignedLong})", "trigger":"xdmp:group-hosts", "description":"($groupID as xs:unsignedLong)"}, {"content":"xdmp:group-servers()", "trigger":"xdmp:group-servers", "description":"()"}, {"content":"xdmp:group-servers(${1:\\$groupID as xs:unsignedLong})", "trigger":"xdmp:group-servers", "description":"($groupID as xs:unsignedLong)"}, {"content":"xdmp:request()", "trigger":"xdmp:request", "description":"()"}, {"content":"xdmp:modules-root()", "trigger":"xdmp:modules-root", "description":"()"}, {"content":"xdmp:diacritic-less(${1:\\$string as xs:string})", "trigger":"xdmp:diacritic-less", "description":"($string as xs:string)"}, {"content":"xdmp:collation-canonical-uri(${1:\\$collation-uri as xs:string})", "trigger":"xdmp:collation-canonical-uri", "description":"($collation-uri as xs:string)"}, {"content":"map:map()", "trigger":"map:map", "description":"()"}, {"content":"map:map(${1:\\$map as element(map:map)})", "trigger":"map:map", "description":"($map as element(map:map))"}, {"content":"map:new()", "trigger":"map:new", "description":"()"}, {"content":"map:new(${1:\\$maps as map:map*})", "trigger":"map:new", "description":"($maps as map:map*)"}, {"content":"map:entry(${1:\\$key as xs:string}, ${2:\\$value as item()*})", "trigger":"map:entry", "description":"($key as xs:string, $value as item()*)"}, {"content":"map:put(${1:\\$map as map:map}, ${2:\\$key as xs:string}, ${3:\\$value as item()*})", "trigger":"map:put", "description":"($map as map:map, $key as xs:string, $value as item()*)"}, {"content":"map:with(${1:\\$map as map:map}, ${2:\\$key as xs:string}, ${3:\\$value as item()*})", "trigger":"map:with", "description":"($map as map:map, $key as xs:string, $value as item()*)"}, {"content":"map:get(${1:\\$map as map:map}, ${2:\\$key as xs:string})", "trigger":"map:get", "description":"($map as map:map, $key as xs:string)"}, {"content":"map:contains(${1:\\$map as map:map}, ${2:\\$key as xs:string})", "trigger":"map:contains", "description":"($map as map:map, $key as xs:string)"}, {"content":"map:keys(${1:\\$map as map:map})", "trigger":"map:keys", "description":"($map as map:map)"}, {"content":"map:clear(${1:\\$map as map:map})", "trigger":"map:clear", "description":"($map as map:map)"}, {"content":"map:count(${1:\\$map as map:map})", "trigger":"map:count", "description":"($map as map:map)"}, {"content":"map:delete(${1:\\$map as map:map}, ${2:\\$key as xs:string})", "trigger":"map:delete", "description":"($map as map:map, $key as xs:string)"}, {"content":"sem:binding()", "trigger":"sem:binding", "description":"()"}, {"content":"sem:binding(${1:\\$map as element(json:object)})", "trigger":"sem:binding", "description":"($map as element(json:object))"}, {"content":"json:object()", "trigger":"json:object", "description":"()"}, {"content":"json:object(${1:\\$map as element(json:object)})", "trigger":"json:object", "description":"($map as element(json:object))"}, {"content":"json:object-define()", "trigger":"json:object-define", "description":"()"}, {"content":"json:object-define(${1:\\$keys as xs:string*})", "trigger":"json:object-define", "description":"($keys as xs:string*)"}, {"content":"json:array()", "trigger":"json:array", "description":"()"}, {"content":"json:array(${1:\\$array as element(json:array)})", "trigger":"json:array", "description":"($array as element(json:array))"}, {"content":"json:to-array()", "trigger":"json:to-array", "description":"()"}, {"content":"json:to-array(${1:\\$items as item()*})", "trigger":"json:to-array", "description":"($items as item()*)"}, {"content":"json:to-array(${1:\\$items as item()*}, ${2:\\$limit as xs:double?})", "trigger":"json:to-array", "description":"($items as item()*, $limit as xs:double?)"}, {"content":"json:to-array(${1:\\$items as item()*}, ${2:\\$limit as xs:double?}, ${3:\\$zero as item()?})", "trigger":"json:to-array", "description":"($items as item()*, $limit as xs:double?, $zero as item()?)"}, {"content":"json:array-values(${1:\\$array as json:array})", "trigger":"json:array-values", "description":"($array as json:array)"}, {"content":"json:array-values(${1:\\$array as json:array}, ${2:\\$flatten as xs:boolean?})", "trigger":"json:array-values", "description":"($array as json:array, $flatten as xs:boolean?)"}, {"content":"xdmp:arrayValues(${1:\\$Array as json:array})", "trigger":"xdmp:arrayValues", "description":"($Array as json:array)"}, {"content":"xdmp:arrayValues(${1:\\$Array as json:array}, ${2:\\$flatten as Boolean})", "trigger":"xdmp:arrayValues", "description":"($Array as json:array, $flatten as Boolean)"}, {"content":"json:array-size(${1:\\$array as json:array?})", "trigger":"json:array-size", "description":"($array as json:array?)"}, {"content":"json:set-item-at(${1:\\$array as json:array}, ${2:\\$pos as xs:double}, ${3:\\$value as item()*})", "trigger":"json:set-item-at", "description":"($array as json:array, $pos as xs:double, $value as item()*)"}, {"content":"json:array-resize(${1:\\$array as json:array}, ${2:\\$newSize as xs:unsignedLong})", "trigger":"json:array-resize", "description":"($array as json:array, $newSize as xs:unsignedLong)"}, {"content":"json:array-resize(${1:\\$array as json:array}, ${2:\\$newSize as xs:unsignedLong}, ${3:\\$zero as item()?})", "trigger":"json:array-resize", "description":"($array as json:array, $newSize as xs:unsignedLong, $zero as item()?)"}, {"content":"json:array-push(${1:\\$array as json:array}, ${2:\\$item as item()*})", "trigger":"json:array-push", "description":"($array as json:array, $item as item()*)"}, {"content":"json:array-with(${1:\\$array as json:array}, ${2:\\$item as item()*})", "trigger":"json:array-with", "description":"($array as json:array, $item as item()*)"}, {"content":"json:array-pop(${1:\\$array as json:array})", "trigger":"json:array-pop", "description":"($array as json:array)"}, {"content":"json:subarray(${1:\\$array as json:array}, ${2:\\$startingLoc as xs:double})", "trigger":"json:subarray", "description":"($array as json:array, $startingLoc as xs:double)"}, {"content":"json:subarray(${1:\\$array as json:array}, ${2:\\$startingLoc as xs:double}, ${3:\\$length as xs:double})", "trigger":"json:subarray", "description":"($array as json:array, $startingLoc as xs:double, $length as xs:double)"}, {"content":"json:null()", "trigger":"json:null", "description":"()"}, {"content":"xdmp:sleep(${1:\\$msec as xs:unsignedInt})", "trigger":"xdmp:sleep", "description":"($msec as xs:unsignedInt)"}, {"content":"xdmp:with-namespaces(${1:\\$nsbindings as (xs:string*|map:map)}, ${2:\\$expr as item()*})", "trigger":"xdmp:with-namespaces", "description":"($nsbindings as (xs:string*|map:map), $expr as item()*)"}, {"content":"xdmp:element-content-type(${1:\\$element as element()})", "trigger":"xdmp:element-content-type", "description":"($element as element())"}, {"content":"xdmp:pretty-print(${1:\\$xquery as xs:string})", "trigger":"xdmp:pretty-print", "description":"($xquery as xs:string)"}, {"content":"xdmp:key-from-QName(${1:\\$name as xs:QName})", "trigger":"xdmp:key-from-QName", "description":"($name as xs:QName)"}, {"content":"xdmp:QName-from-key(${1:\\$key as xs:string})", "trigger":"xdmp:QName-from-key", "description":"($key as xs:string)"}, {"content":"xdmp:multipart-encode(${1:\\$separator as xs:string}, ${2:\\$manifest as element()}, ${3:\\$content as node()*})", "trigger":"xdmp:multipart-encode", "description":"($separator as xs:string, $manifest as element(), $content as node()*)"}, {"content":"xdmp:multipart-decode(${1:\\$separator as xs:string}, ${2:\\$data as binary()})", "trigger":"xdmp:multipart-decode", "description":"($separator as xs:string, $data as binary())"}, {"content":"xdmp:multipart-decode(${1:\\$separator as xs:string}, ${2:\\$data as binary()}, ${3:\\$options as element()})", "trigger":"xdmp:multipart-decode", "description":"($separator as xs:string, $data as binary(), $options as element())"}, {"content":"xdmp:encoding-language-detect(${1:\\$document as node()})", "trigger":"xdmp:encoding-language-detect", "description":"($document as node())"}, {"content":"xdmp:binary-decode(${1:\\$encoded as node()}, ${2:\\$encoding-name as xs:string})", "trigger":"xdmp:binary-decode", "description":"($encoded as node(), $encoding-name as xs:string)"}, {"content":"xdmp:host-forests(${1:\\$ID as xs:unsignedLong})", "trigger":"xdmp:host-forests", "description":"($ID as xs:unsignedLong)"}, {"content":"xdmp:validate(${1:\\$node as node()})", "trigger":"xdmp:validate", "description":"($node as node())"}, {"content":"xdmp:validate(${1:\\$node as node()}, ${2:\\$mode as xs:string})", "trigger":"xdmp:validate", "description":"($node as node(), $mode as xs:string)"}, {"content":"xdmp:validate(${1:\\$node as node()}, ${2:\\$mode as xs:string}, ${3:\\$typeName as xs:QName})", "trigger":"xdmp:validate", "description":"($node as node(), $mode as xs:string, $typeName as xs:QName)"}, {"content":"xdmp:timestamp-to-wallclock(${1:\\$timestamp as xs:unsignedLong})", "trigger":"xdmp:timestamp-to-wallclock", "description":"($timestamp as xs:unsignedLong)"}, {"content":"xdmp:wallclock-to-timestamp(${1:\\$timestamp as xs:dateTime})", "trigger":"xdmp:wallclock-to-timestamp", "description":"($timestamp as xs:dateTime)"}, {"content":"xdmp:configuration-timestamp()", "trigger":"xdmp:configuration-timestamp", "description":"()"}, {"content":"xdmp:configuration-timestamp(${1:\\$name as xs:string})", "trigger":"xdmp:configuration-timestamp", "description":"($name as xs:string)"}, {"content":"xdmp:eager(${1:\\$arg as item()*})", "trigger":"xdmp:eager", "description":"($arg as item()*)"}, {"content":"xdmp:lazy(${1:\\$arg as item()*})", "trigger":"xdmp:lazy", "description":"($arg as item()*)"}, {"content":"xdmp:caller-dialect()", "trigger":"xdmp:caller-dialect", "description":"()"}, {"content":"xdmp:ldap-search(${1:\\$query as xs:string})", "trigger":"xdmp:ldap-search", "description":"($query as xs:string)"}, {"content":"xdmp:ldap-search(${1:\\$query as xs:string}, ${2:\\$options as (element()|map:map)?})", "trigger":"xdmp:ldap-search", "description":"($query as xs:string, $options as (element()|map:map)?)"}, {"content":"xdmp:ldap-lookup(${1:\\$DN as xs:string})", "trigger":"xdmp:ldap-lookup", "description":"($DN as xs:string)"}, {"content":"xdmp:ldap-lookup(${1:\\$DN as xs:string}, ${2:\\$options as (element()|map:map)?})", "trigger":"xdmp:ldap-lookup", "description":"($DN as xs:string, $options as (element()|map:map)?)"}, {"content":"flexrep:binary-chunk-uris(${1:\\$ts as xs:dateTime})", "trigger":"flexrep:binary-chunk-uris", "description":"($ts as xs:dateTime)"}, {"content":"flexrep:configuration-domain-ids()", "trigger":"flexrep:configuration-domain-ids", "description":"()"}, {"content":"flexrep:configuration-create(${1:\\$domain-id as xs:unsignedLong})", "trigger":"flexrep:configuration-create", "description":"($domain-id as xs:unsignedLong)"}, {"content":"flexrep:configuration-create(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$alerting-uri as xs:string?})", "trigger":"flexrep:configuration-create", "description":"($domain-id as xs:unsignedLong, $alerting-uri as xs:string?)"}, {"content":"flexrep:configuration-insert(${1:\\$cfg as element(flexrep:configuration)})", "trigger":"flexrep:configuration-insert", "description":"($cfg as element(flexrep:configuration))"}, {"content":"flexrep:configuration-get(${1:\\$domain-id as xs:unsignedLong})", "trigger":"flexrep:configuration-get", "description":"($domain-id as xs:unsignedLong)"}, {"content":"flexrep:configuration-get(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$assert as xs:boolean})", "trigger":"flexrep:configuration-get", "description":"($domain-id as xs:unsignedLong, $assert as xs:boolean)"}, {"content":"flexrep:configuration-delete(${1:\\$domain-id as xs:unsignedLong})", "trigger":"flexrep:configuration-delete", "description":"($domain-id as xs:unsignedLong)"}, {"content":"flexrep:target-create(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$name as xs:string}, ${3:\\$urls as xs:string*}, ${4:\\$retry-seconds-min as xs:unsignedInt?}, ${5:\\$retry-seconds-max as xs:unsignedInt?}, ${6:\\$documents-per-batch as xs:unsignedInt?}, ${7:\\$enabled as xs:boolean?}, ${8:\\$http-options as element(flexrep:http-options)?}, ${9:\\$replicate-cpf as xs:boolean?}, ${10:\\$filter-module as xs:string?}, ${11:\\$filter-options as element(flexrep:filter-options)?})", "trigger":"flexrep:target-create", "description":"($cfg as element(flexrep:configuration), $name as xs:string, $urls as xs:string*, $retry-seconds-min as xs:unsignedInt?, $retry-seconds-max as xs:unsignedInt?, $documents-per-batch as xs:unsignedInt?, $enabled as xs:boolean?, $http-options as element(flexrep:http-options)?, $replicate-cpf as xs:boolean?, $filter-module as xs:string?, $filter-options as element(flexrep:filter-options)?)"}, {"content":"flexrep:target-create(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$name as xs:string}, ${3:\\$urls as xs:string*}, ${4:\\$retry-seconds-min as xs:unsignedInt?}, ${5:\\$retry-seconds-max as xs:unsignedInt?}, ${6:\\$documents-per-batch as xs:unsignedInt?}, ${7:\\$enabled as xs:boolean?}, ${8:\\$http-options as element(flexrep:http-options)?}, ${9:\\$replicate-cpf as xs:boolean?}, ${10:\\$filter-module as xs:string?}, ${11:\\$filter-options as element(flexrep:filter-options)?}, ${12:\\$user-id as xs:unsignedLong?})", "trigger":"flexrep:target-create", "description":"($cfg as element(flexrep:configuration), $name as xs:string, $urls as xs:string*, $retry-seconds-min as xs:unsignedInt?, $retry-seconds-max as xs:unsignedInt?, $documents-per-batch as xs:unsignedInt?, $enabled as xs:boolean?, $http-options as element(flexrep:http-options)?, $replicate-cpf as xs:boolean?, $filter-module as xs:string?, $filter-options as element(flexrep:filter-options)?, $user-id as xs:unsignedLong?)"}, {"content":"flexrep:target-create(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$name as xs:string}, ${3:\\$urls as xs:string*}, ${4:\\$retry-seconds-min as xs:unsignedInt?}, ${5:\\$retry-seconds-max as xs:unsignedInt?}, ${6:\\$documents-per-batch as xs:unsignedInt?}, ${7:\\$enabled as xs:boolean?}, ${8:\\$http-options as element(flexrep:http-options)?}, ${9:\\$replicate-cpf as xs:boolean?}, ${10:\\$filter-module as xs:string?}, ${11:\\$filter-options as element(flexrep:filter-options)?}, ${12:\\$user-id as xs:unsignedLong?}, ${13:\\$immediate-push as xs:boolean})", "trigger":"flexrep:target-create", "description":"($cfg as element(flexrep:configuration), $name as xs:string, $urls as xs:string*, $retry-seconds-min as xs:unsignedInt?, $retry-seconds-max as xs:unsignedInt?, $documents-per-batch as xs:unsignedInt?, $enabled as xs:boolean?, $http-options as element(flexrep:http-options)?, $replicate-cpf as xs:boolean?, $filter-module as xs:string?, $filter-options as element(flexrep:filter-options)?, $user-id as xs:unsignedLong?, $immediate-push as xs:boolean)"}, {"content":"flexrep:target-delete(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong})", "trigger":"flexrep:target-delete", "description":"($cfg as element(flexrep:configuration), $target-id as xs:unsignedLong)"}, {"content":"flexrep:configuration-targets(${1:\\$cfg as element(flexrep:configuration)})", "trigger":"flexrep:configuration-targets", "description":"($cfg as element(flexrep:configuration))"}, {"content":"flexrep:configuration-target(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong})", "trigger":"flexrep:configuration-target", "description":"($cfg as element(flexrep:configuration), $target-id as xs:unsignedLong)"}, {"content":"flexrep:configuration-target(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$assert as xs:boolean})", "trigger":"flexrep:configuration-target", "description":"($cfg as element(flexrep:configuration), $target-id as xs:unsignedLong, $assert as xs:boolean)"}, {"content":"flexrep:configuration-target-get-id(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-name as xs:string})", "trigger":"flexrep:configuration-target-get-id", "description":"($cfg as element(flexrep:configuration), $target-name as xs:string)"}, {"content":"flexrep:configuration-target-get-name(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong})", "trigger":"flexrep:configuration-target-get-name", "description":"($cfg as element(flexrep:configuration), $target-id as xs:unsignedLong)"}, {"content":"flexrep:configuration-target-get-urls(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong})", "trigger":"flexrep:configuration-target-get-urls", "description":"($cfg as element(flexrep:configuration), $target-id as xs:unsignedLong)"}, {"content":"flexrep:configuration-target-get-retry-seconds-min(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong})", "trigger":"flexrep:configuration-target-get-retry-seconds-min", "description":"($cfg as element(flexrep:configuration), $target-id as xs:unsignedLong)"}, {"content":"flexrep:configuration-target-get-documents-per-batch(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong})", "trigger":"flexrep:configuration-target-get-documents-per-batch", "description":"($cfg as element(flexrep:configuration), $target-id as xs:unsignedLong)"}, {"content":"flexrep:configuration-target-get-enabled(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong})", "trigger":"flexrep:configuration-target-get-enabled", "description":"($cfg as element(flexrep:configuration), $target-id as xs:unsignedLong)"}, {"content":"flexrep:configuration-target-get-replicate-cpf(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong})", "trigger":"flexrep:configuration-target-get-replicate-cpf", "description":"($cfg as element(flexrep:configuration), $target-id as xs:unsignedLong)"}, {"content":"flexrep:configuration-target-get-http-options(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong})", "trigger":"flexrep:configuration-target-get-http-options", "description":"($cfg as element(flexrep:configuration), $target-id as xs:unsignedLong)"}, {"content":"flexrep:configuration-target-get-filter-module(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong})", "trigger":"flexrep:configuration-target-get-filter-module", "description":"($cfg as element(flexrep:configuration), $target-id as xs:unsignedLong)"}, {"content":"flexrep:configuration-target-get-filter-options(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong})", "trigger":"flexrep:configuration-target-get-filter-options", "description":"($cfg as element(flexrep:configuration), $target-id as xs:unsignedLong)"}, {"content":"flexrep:configuration-target-set-name(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$name as xs:string})", "trigger":"flexrep:configuration-target-set-name", "description":"($cfg as element(flexrep:configuration), $target-id as xs:unsignedLong, $name as xs:string)"}, {"content":"flexrep:configuration-target-set-urls(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$urls as xs:string*})", "trigger":"flexrep:configuration-target-set-urls", "description":"($cfg as element(flexrep:configuration), $target-id as xs:unsignedLong, $urls as xs:string*)"}, {"content":"flexrep:configuration-target-set-retry-seconds-min(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$val as xs:integer})", "trigger":"flexrep:configuration-target-set-retry-seconds-min", "description":"($cfg as element(flexrep:configuration), $target-id as xs:unsignedLong, $val as xs:integer)"}, {"content":"flexrep:configuration-target-get-retry-seconds-max(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong})", "trigger":"flexrep:configuration-target-get-retry-seconds-max", "description":"($cfg as element(flexrep:configuration), $target-id as xs:unsignedLong)"}, {"content":"flexrep:configuration-target-set-documents-per-batch(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$val as xs:integer})", "trigger":"flexrep:configuration-target-set-documents-per-batch", "description":"($cfg as element(flexrep:configuration), $target-id as xs:unsignedLong, $val as xs:integer)"}, {"content":"flexrep:configuration-target-set-enabled(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$val as xs:boolean})", "trigger":"flexrep:configuration-target-set-enabled", "description":"($cfg as element(flexrep:configuration), $target-id as xs:unsignedLong, $val as xs:boolean)"}, {"content":"flexrep:configuration-target-set-replicate-cpf(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$val as xs:boolean})", "trigger":"flexrep:configuration-target-set-replicate-cpf", "description":"($cfg as element(flexrep:configuration), $target-id as xs:unsignedLong, $val as xs:boolean)"}, {"content":"flexrep:configuration-target-set-http-options(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$val as element(flexrep:http-options)})", "trigger":"flexrep:configuration-target-set-http-options", "description":"($cfg as element(flexrep:configuration), $target-id as xs:unsignedLong, $val as element(flexrep:http-options))"}, {"content":"flexrep:configuration-target-set-filter-module(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$uri as xs:string})", "trigger":"flexrep:configuration-target-set-filter-module", "description":"($cfg as element(flexrep:configuration), $target-id as xs:unsignedLong, $uri as xs:string)"}, {"content":"flexrep:configuration-target-set-filter-options(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$val as element(flexrep:filter-options)})", "trigger":"flexrep:configuration-target-set-filter-options", "description":"($cfg as element(flexrep:configuration), $target-id as xs:unsignedLong, $val as element(flexrep:filter-options))"}, {"content":"flexrep:pull-create(${1:\\$name as xs:string}, ${2:\\$domain-id as xs:unsignedLong}, ${3:\\$target-id as xs:unsignedLong}, ${4:\\$urls as xs:string+}, ${5:\\$http-options as element(flexrep:http-options)?})", "trigger":"flexrep:pull-create", "description":"($name as xs:string, $domain-id as xs:unsignedLong, $target-id as xs:unsignedLong, $urls as xs:string+, $http-options as element(flexrep:http-options)?)"}, {"content":"flexrep:pull-insert(${1:\\$pull as element(flexrep:pull)})", "trigger":"flexrep:pull-insert", "description":"($pull as element(flexrep:pull))"}, {"content":"flexrep:pull-delete(${1:\\$domain-id as xs:unsignedLong})", "trigger":"flexrep:pull-delete", "description":"($domain-id as xs:unsignedLong)"}, {"content":"flexrep:pull-delete(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$target-id as xs:unsignedLong})", "trigger":"flexrep:pull-delete", "description":"($domain-id as xs:unsignedLong, $target-id as xs:unsignedLong)"}, {"content":"flexrep:pull-get(${1:\\$domain-id as xs:unsignedLong})", "trigger":"flexrep:pull-get", "description":"($domain-id as xs:unsignedLong)"}, {"content":"flexrep:pull-get(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$assert as xs:boolean})", "trigger":"flexrep:pull-get", "description":"($domain-id as xs:unsignedLong, $assert as xs:boolean)"}, {"content":"flexrep:pull-get-all()", "trigger":"flexrep:pull-get-all", "description":"()"}, {"content":"flexrep:pull-get-domain-id(${1:\\$pull as element(flexrep:pull)})", "trigger":"flexrep:pull-get-domain-id", "description":"($pull as element(flexrep:pull))"}, {"content":"flexrep:pull-get-target-id(${1:\\$pull as element(flexrep:pull)})", "trigger":"flexrep:pull-get-target-id", "description":"($pull as element(flexrep:pull))"}, {"content":"flexrep:pull-get-urls(${1:\\$pull as element(flexrep:pull)})", "trigger":"flexrep:pull-get-urls", "description":"($pull as element(flexrep:pull))"}, {"content":"flexrep:pull-get-http-options(${1:\\$pull as element(flexrep:pull)})", "trigger":"flexrep:pull-get-http-options", "description":"($pull as element(flexrep:pull))"}, {"content":"flexrep:pull-set-urls(${1:\\$pull as element(flexrep:pull)}, ${2:\\$urls as xs:string+})", "trigger":"flexrep:pull-set-urls", "description":"($pull as element(flexrep:pull), $urls as xs:string+)"}, {"content":"flexrep:pull-set-http-options(${1:\\$pull as element(flexrep:pull)}, ${2:\\$http-options as element(flexrep:http-options)})", "trigger":"flexrep:pull-set-http-options", "description":"($pull as element(flexrep:pull), $http-options as element(flexrep:http-options))"}, {"content":"flexrep:configure-database(${1:\\$config as element(configuration)}, ${2:\\$dbid as xs:unsignedLong})", "trigger":"flexrep:configure-database", "description":"($config as element(configuration), $dbid as xs:unsignedLong)"}, {"content":"flexrep:apply(${1:\\$update as element(flexrep:update)}, ${2:\\$content as document-node()?})", "trigger":"flexrep:apply", "description":"($update as element(flexrep:update), $content as document-node()?)"}, {"content":"flexrep:delete(${1:\\$delete as element(flexrep:delete)})", "trigger":"flexrep:delete", "description":"($delete as element(flexrep:delete))"}, {"content":"flexrep:poll(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$start as xs:integer?}, ${4:\\$size as xs:integer?}, ${5:\\$forest-ids as xs:unsignedLong*})", "trigger":"flexrep:poll", "description":"($domain-id as xs:unsignedLong, $target-id as xs:unsignedLong, $start as xs:integer?, $size as xs:integer?, $forest-ids as xs:unsignedLong*)"}, {"content":"flexrep:process(${1:\\$domain-id as xs:unsignedLong})", "trigger":"flexrep:process", "description":"($domain-id as xs:unsignedLong)"}, {"content":"flexrep:process(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$size as xs:unsignedInt?})", "trigger":"flexrep:process", "description":"($domain-id as xs:unsignedLong, $size as xs:unsignedInt?)"}, {"content":"flexrep:process(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$size as xs:unsignedInt?}, ${3:\\$targets as xs:unsignedLong*})", "trigger":"flexrep:process", "description":"($domain-id as xs:unsignedLong, $size as xs:unsignedInt?, $targets as xs:unsignedLong*)"}, {"content":"flexrep:process(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$size as xs:unsignedInt?}, ${3:\\$targets as xs:unsignedLong*}, ${4:\\$forest-ids as xs:unsignedLong*})", "trigger":"flexrep:process", "description":"($domain-id as xs:unsignedLong, $size as xs:unsignedInt?, $targets as xs:unsignedLong*, $forest-ids as xs:unsignedLong*)"}, {"content":"flexrep:process(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$size as xs:unsignedInt?}, ${3:\\$targets as xs:unsignedLong*}, ${4:\\$forest-ids as xs:unsignedLong*}, ${5:\\$uris as xs:string*})", "trigger":"flexrep:process", "description":"($domain-id as xs:unsignedLong, $size as xs:unsignedInt?, $targets as xs:unsignedLong*, $forest-ids as xs:unsignedLong*, $uris as xs:string*)"}, {"content":"flexrep:do-pull(${1:\\$pull as element(flexrep:pull)})", "trigger":"flexrep:do-pull", "description":"($pull as element(flexrep:pull))"}, {"content":"flexrep:domain-status(${1:\\$domain-id as xs:unsignedLong})", "trigger":"flexrep:domain-status", "description":"($domain-id as xs:unsignedLong)"}, {"content":"flexrep:domain-status(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$with-targets as xs:boolean})", "trigger":"flexrep:domain-status", "description":"($domain-id as xs:unsignedLong, $with-targets as xs:boolean)"}, {"content":"flexrep:domain-status(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$with-targets as xs:boolean}, ${3:\\$terse as xs:boolean})", "trigger":"flexrep:domain-status", "description":"($domain-id as xs:unsignedLong, $with-targets as xs:boolean, $terse as xs:boolean)"}, {"content":"flexrep:target-status(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$target-ids as xs:unsignedLong*})", "trigger":"flexrep:target-status", "description":"($domain-id as xs:unsignedLong, $target-ids as xs:unsignedLong*)"}, {"content":"flexrep:remote-target-status(${1:\\$pull as element(flexrep:pull)})", "trigger":"flexrep:remote-target-status", "description":"($pull as element(flexrep:pull))"}, {"content":"flexrep:document-status(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$uri as xs:string})", "trigger":"flexrep:document-status", "description":"($domain-id as xs:unsignedLong, $uri as xs:string)"}, {"content":"flexrep:pull-get-id(${1:\\$pull as element(flexrep:pull)})", "trigger":"flexrep:pull-get-id", "description":"($pull as element(flexrep:pull))"}, {"content":"flexrep:pull-get-name(${1:\\$pull as element(flexrep:pull)})", "trigger":"flexrep:pull-get-name", "description":"($pull as element(flexrep:pull))"}, {"content":"flexrep:pull-set-name(${1:\\$pull as element(flexrep:pull)}, ${2:\\$name as xs:string})", "trigger":"flexrep:pull-set-name", "description":"($pull as element(flexrep:pull), $name as xs:string)"}, {"content":"flexrep:pull-set-domain-id(${1:\\$pull as element(flexrep:pull)}, ${2:\\$domain-id as xs:unsignedLong})", "trigger":"flexrep:pull-set-domain-id", "description":"($pull as element(flexrep:pull), $domain-id as xs:unsignedLong)"}, {"content":"flexrep:pull-set-target-id(${1:\\$pull as element(flexrep:pull)}, ${2:\\$target-id as xs:unsignedLong})", "trigger":"flexrep:pull-set-target-id", "description":"($pull as element(flexrep:pull), $target-id as xs:unsignedLong)"}, {"content":"flexrep:configuration-get-id(${1:\\$cfg as element(flexrep:configuration)})", "trigger":"flexrep:configuration-get-id", "description":"($cfg as element(flexrep:configuration))"}, {"content":"flexrep:configuration-get-domain-name(${1:\\$cfg as element(flexrep:configuration)})", "trigger":"flexrep:configuration-get-domain-name", "description":"($cfg as element(flexrep:configuration))"}, {"content":"flexrep:domain-target-statuses()", "trigger":"flexrep:domain-target-statuses", "description":"()"}, {"content":"flexrep:target-error-documents(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$target-ids as xs:unsignedLong*})", "trigger":"flexrep:target-error-documents", "description":"($domain-id as xs:unsignedLong, $target-ids as xs:unsignedLong*)"}, {"content":"flexrep:domain-target-reset(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$target-ids as xs:unsignedLong*})", "trigger":"flexrep:domain-target-reset", "description":"($domain-id as xs:unsignedLong, $target-ids as xs:unsignedLong*)"}, {"content":"flexrep:domain-target-reset(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$target-ids as xs:unsignedLong*}, ${3:\\$errors-only as xs:boolean})", "trigger":"flexrep:domain-target-reset", "description":"($domain-id as xs:unsignedLong, $target-ids as xs:unsignedLong*, $errors-only as xs:boolean)"}, {"content":"flexrep:document-reset(${1:\\$uri as xs:string}, ${2:\\$domain-id as xs:unsignedLong})", "trigger":"flexrep:document-reset", "description":"($uri as xs:string, $domain-id as xs:unsignedLong)"}, {"content":"flexrep:document-reset(${1:\\$uri as xs:string}, ${2:\\$domain-id as xs:unsignedLong}, ${3:\\$target-ids as xs:unsignedLong*})", "trigger":"flexrep:document-reset", "description":"($uri as xs:string, $domain-id as xs:unsignedLong, $target-ids as xs:unsignedLong*)"}, {"content":"flexrep:configuration-target-set-retry-seconds-max(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$val as xs:integer})", "trigger":"flexrep:configuration-target-set-retry-seconds-max", "description":"($cfg as element(flexrep:configuration), $target-id as xs:unsignedLong, $val as xs:integer)"}, {"content":"flexrep:validate-url(${1:\\$url as xs:string})", "trigger":"flexrep:validate-url", "description":"($url as xs:string)"}, {"content":"flexrep:apply-encoded-updates(${1:\\$dts as element(flexrep:domain-target-status)}, ${2:\\$boundary as xs:string}, ${3:\\$data as binary()})", "trigger":"flexrep:apply-encoded-updates", "description":"($dts as element(flexrep:domain-target-status), $boundary as xs:string, $data as binary())"}, {"content":"flexrep:replicate(${1:\\$uri as xs:string}, ${2:\\$label as xs:string}, ${3:\\$cfg as element(flexrep:configuration)}, ${4:\\$domain as element(dom:domain)}, ${5:\\$doc-status as element(flexrep:document-status)}, ${6:\\$is-delete as xs:boolean}, ${7:\\$is-retry as xs:boolean})", "trigger":"flexrep:replicate", "description":"($uri as xs:string, $label as xs:string, $cfg as element(flexrep:configuration), $domain as element(dom:domain), $doc-status as element(flexrep:document-status), $is-delete as xs:boolean, $is-retry as xs:boolean)"}, {"content":"flexrep:multipart-encode(${1:\\$boundary as xs:string}, ${2:\\$parts as node()*})", "trigger":"flexrep:multipart-encode", "description":"($boundary as xs:string, $parts as node()*)"}, {"content":"flexrep:ack-apply(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$acks as element(flexrep:ack)*})", "trigger":"flexrep:ack-apply", "description":"($domain-id as xs:unsignedLong, $target-id as xs:unsignedLong, $acks as element(flexrep:ack)*)"}, {"content":"flexrep:validate-name(${1:\\$name as xs:string})", "trigger":"flexrep:validate-name", "description":"($name as xs:string)"}, {"content":"flexrep:pull-get-by-id(${1:\\$pull-id as xs:unsignedLong})", "trigger":"flexrep:pull-get-by-id", "description":"($pull-id as xs:unsignedLong)"}, {"content":"flexrep:pull-get-by-id(${1:\\$pull-id as xs:unsignedLong}, ${2:\\$assert as xs:boolean})", "trigger":"flexrep:pull-get-by-id", "description":"($pull-id as xs:unsignedLong, $assert as xs:boolean)"}, {"content":"flexrep:push-local-forest(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$max-spawn as xs:unsignedLong})", "trigger":"flexrep:push-local-forest", "description":"($domain-id as xs:unsignedLong, $forest-id as xs:unsignedLong, $max-spawn as xs:unsignedLong)"}, {"content":"flexrep:push-local-forests()", "trigger":"flexrep:push-local-forests", "description":"()"}, {"content":"flexrep:database-needs-configuration(${1:\\$config as element(configuration)}, ${2:\\$dbid as xs:unsignedLong})", "trigger":"flexrep:database-needs-configuration", "description":"($config as element(configuration), $dbid as xs:unsignedLong)"}, {"content":"flexrep:push-forest-binaries(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$forest-id as xs:unsignedLong}, ${4:\\$max-spawn as xs:unsignedLong})", "trigger":"flexrep:push-forest-binaries", "description":"($domain-id as xs:unsignedLong, $target-id as xs:unsignedLong, $forest-id as xs:unsignedLong, $max-spawn as xs:unsignedLong)"}, {"content":"flexrep:push-binary(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$forest-id as xs:unsignedLong}, ${4:\\$key as xs:unsignedLong})", "trigger":"flexrep:push-binary", "description":"($domain-id as xs:unsignedLong, $target-id as xs:unsignedLong, $forest-id as xs:unsignedLong, $key as xs:unsignedLong)"}, {"content":"flexrep:push-binary-chunk(${1:\\$status-doc as document-node()}, ${2:\\$use-server-field as xs:boolean})", "trigger":"flexrep:push-binary-chunk", "description":"($status-doc as document-node(), $use-server-field as xs:boolean)"}, {"content":"flexrep:push-binary-docs(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$forest-id as xs:unsignedLong}, ${4:\\$map as map:map})", "trigger":"flexrep:push-binary-docs", "description":"($domain-id as xs:unsignedLong, $target-id as xs:unsignedLong, $forest-id as xs:unsignedLong, $map as map:map)"}, {"content":"flexrep:apply-binary-chunk(${1:\\$key as xs:string}, ${2:\\$offset as xs:string}, ${3:\\$bn as node()}, ${4:\\$forests as xs:string*})", "trigger":"flexrep:apply-binary-chunk", "description":"($key as xs:string, $offset as xs:string, $bn as node(), $forests as xs:string*)"}, {"content":"flexrep:apply-binary-join(${1:\\$key as xs:string}, ${2:\\$forests as xs:string*})", "trigger":"flexrep:apply-binary-join", "description":"($key as xs:string, $forests as xs:string*)"}, {"content":"flexrep:apply-binary-gc(${1:\\$key as xs:string})", "trigger":"flexrep:apply-binary-gc", "description":"($key as xs:string)"}, {"content":"flexrep:push-binaries(${1:\\$domain-id as xs:unsignedLong})", "trigger":"flexrep:push-binaries", "description":"($domain-id as xs:unsignedLong)"}, {"content":"flexrep:poll-binary-chunk()", "trigger":"flexrep:poll-binary-chunk", "description":"()"}, {"content":"flexrep:get-update-binarydoc-uri(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$key as xs:unsignedLong})", "trigger":"flexrep:get-update-binarydoc-uri", "description":"($domain-id as xs:unsignedLong, $target-id as xs:unsignedLong, $key as xs:unsignedLong)"}, {"content":"flexrep:pull-binaries(${1:\\$pull as element(flexrep:pull)}, ${2:\\$max-spawn as xs:unsignedLong})", "trigger":"flexrep:pull-binaries", "description":"($pull as element(flexrep:pull), $max-spawn as xs:unsignedLong)"}, {"content":"flexrep:pull-binary-chunk(${1:\\$pull as element(flexrep:pull)})", "trigger":"flexrep:pull-binary-chunk", "description":"($pull as element(flexrep:pull))"}, {"content":"flexrep:ack-binary-chunk-apply(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$key as xs:unsignedLong}, ${4:\\$offset as xs:unsignedLong}, ${5:\\$subsize as xs:unsignedLong})", "trigger":"flexrep:ack-binary-chunk-apply", "description":"($domain-id as xs:unsignedLong, $target-id as xs:unsignedLong, $key as xs:unsignedLong, $offset as xs:unsignedLong, $subsize as xs:unsignedLong)"}, {"content":"flexrep:target-binary-push-status-documents(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$target-ids as xs:unsignedLong*})", "trigger":"flexrep:target-binary-push-status-documents", "description":"($domain-id as xs:unsignedLong, $target-ids as xs:unsignedLong*)"}, {"content":"flexrep:target-binary-push-status-document(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$uri as xs:string})", "trigger":"flexrep:target-binary-push-status-document", "description":"($domain-id as xs:unsignedLong, $target-id as xs:unsignedLong, $uri as xs:string)"}, {"content":"flexrep:_binary-push-status-uri(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$key as xs:unsignedLong})", "trigger":"flexrep:_binary-push-status-uri", "description":"($domain-id as xs:unsignedLong, $target-id as xs:unsignedLong, $key as xs:unsignedLong)"}, {"content":"flexrep:coalesce-domain-statuses(${1:\\$domain-id as xs:unsignedLong})", "trigger":"flexrep:coalesce-domain-statuses", "description":"($domain-id as xs:unsignedLong)"}, {"content":"flexrep:pull-check-duplicate(${1:\\$pull as element(flexrep:pull)})", "trigger":"flexrep:pull-check-duplicate", "description":"($pull as element(flexrep:pull))"}, {"content":"flexrep:configuration-set-alerting-uri(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$uri as xs:string?})", "trigger":"flexrep:configuration-set-alerting-uri", "description":"($cfg as element(flexrep:configuration), $uri as xs:string?)"}, {"content":"flexrep:configuration-get-alerting-uri(${1:\\$cfg as element(flexrep:configuration)})", "trigger":"flexrep:configuration-get-alerting-uri", "description":"($cfg as element(flexrep:configuration))"}, {"content":"flexrep:domain-alerting-uri(${1:\\$domain-id as xs:unsignedLong})", "trigger":"flexrep:domain-alerting-uri", "description":"($domain-id as xs:unsignedLong)"}, {"content":"flexrep:push-local-forest-target(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$forest-id as xs:unsignedLong}, ${4:\\$max-spawn as xs:unsignedLong})", "trigger":"flexrep:push-local-forest-target", "description":"($domain-id as xs:unsignedLong, $target-id as xs:unsignedLong, $forest-id as xs:unsignedLong, $max-spawn as xs:unsignedLong)"}, {"content":"flexrep:get-domain-name(${1:\\$domain-id as xs:unsignedLong})", "trigger":"flexrep:get-domain-name", "description":"($domain-id as xs:unsignedLong)"}, {"content":"flexrep:get-target-name(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$target-id as xs:unsignedLong})", "trigger":"flexrep:get-target-name", "description":"($domain-id as xs:unsignedLong, $target-id as xs:unsignedLong)"}, {"content":"flexrep:configuration-target-get-user-id(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong})", "trigger":"flexrep:configuration-target-get-user-id", "description":"($cfg as element(flexrep:configuration), $target-id as xs:unsignedLong)"}, {"content":"flexrep:configuration-target-get-immediate-push(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong})", "trigger":"flexrep:configuration-target-get-immediate-push", "description":"($cfg as element(flexrep:configuration), $target-id as xs:unsignedLong)"}, {"content":"flexrep:configuration-target-set-user-id(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$user-id as xs:unsignedLong?})", "trigger":"flexrep:configuration-target-set-user-id", "description":"($cfg as element(flexrep:configuration), $target-id as xs:unsignedLong, $user-id as xs:unsignedLong?)"}, {"content":"flexrep:configuration-target-set-immediate-push(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$immediate-push as xs:boolean})", "trigger":"flexrep:configuration-target-set-immediate-push", "description":"($cfg as element(flexrep:configuration), $target-id as xs:unsignedLong, $immediate-push as xs:boolean)"}, {"content":"flexrep:pull-set-enabled(${1:\\$pull as element(flexrep:pull)}, ${2:\\$flag as xs:boolean})", "trigger":"flexrep:pull-set-enabled", "description":"($pull as element(flexrep:pull), $flag as xs:boolean)"}, {"content":"flexrep:pull-get-enabled(${1:\\$pull as element(flexrep:pull)})", "trigger":"flexrep:pull-get-enabled", "description":"($pull as element(flexrep:pull))"}, {"content":"flexrep:configuration-target-get-external-user(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong})", "trigger":"flexrep:configuration-target-get-external-user", "description":"($cfg as element(flexrep:configuration), $target-id as xs:unsignedLong)"}, {"content":"flexrep:inbound-filter-create(${1:\\$filter-module as xs:string}, ${2:\\$filter-options as element(flexrep:filter-options)?})", "trigger":"flexrep:inbound-filter-create", "description":"($filter-module as xs:string, $filter-options as element(flexrep:filter-options)?)"}, {"content":"flexrep:inbound-filter-insert(${1:\\$filter as element(flexrep:inbound-filter)})", "trigger":"flexrep:inbound-filter-insert", "description":"($filter as element(flexrep:inbound-filter))"}, {"content":"flexrep:inbound-filter-delete()", "trigger":"flexrep:inbound-filter-delete", "description":"()"}, {"content":"flexrep:inbound-filter-get()", "trigger":"flexrep:inbound-filter-get", "description":"()"}, {"content":"flexrep:create-appserver(${1:\\$cfg as element(configuration)}, ${2:\\$group as xs:unsignedLong}, ${3:\\$name as xs:string}, ${4:\\$port as xs:unsignedLong}, ${5:\\$db as xs:unsignedLong})", "trigger":"flexrep:create-appserver", "description":"($cfg as element(configuration), $group as xs:unsignedLong, $name as xs:string, $port as xs:unsignedLong, $db as xs:unsignedLong)"}, {"content":"flexrep:upgrade-appserver(${1:\\$cfg as element(configuration)}, ${2:\\$ids as xs:unsignedLong*})", "trigger":"flexrep:upgrade-appserver", "description":"($cfg as element(configuration), $ids as xs:unsignedLong*)"}, {"content":"fn:format-dateTime(${1:\\$value as xs:dateTime}, ${2:\\$picture as xs:string})", "trigger":"fn:format-dateTime", "description":"($value as xs:dateTime, $picture as xs:string)"}, {"content":"fn:format-dateTime(${1:\\$value as xs:dateTime}, ${2:\\$picture as xs:string}, ${3:\\$language as xs:string})", "trigger":"fn:format-dateTime", "description":"($value as xs:dateTime, $picture as xs:string, $language as xs:string)"}, {"content":"fn:format-dateTime(${1:\\$value as xs:dateTime}, ${2:\\$picture as xs:string}, ${3:\\$language as xs:string}, ${4:\\$calendar as xs:string})", "trigger":"fn:format-dateTime", "description":"($value as xs:dateTime, $picture as xs:string, $language as xs:string, $calendar as xs:string)"}, {"content":"fn:format-dateTime(${1:\\$value as xs:dateTime}, ${2:\\$picture as xs:string}, ${3:\\$language as xs:string}, ${4:\\$calendar as xs:string}, ${5:\\$country as xs:string})", "trigger":"fn:format-dateTime", "description":"($value as xs:dateTime, $picture as xs:string, $language as xs:string, $calendar as xs:string, $country as xs:string)"}, {"content":"fn:format-date(${1:\\$value as xs:date}, ${2:\\$picture as xs:string})", "trigger":"fn:format-date", "description":"($value as xs:date, $picture as xs:string)"}, {"content":"fn:format-date(${1:\\$value as xs:date}, ${2:\\$picture as xs:string}, ${3:\\$language as xs:string})", "trigger":"fn:format-date", "description":"($value as xs:date, $picture as xs:string, $language as xs:string)"}, {"content":"fn:format-date(${1:\\$value as xs:date}, ${2:\\$picture as xs:string}, ${3:\\$language as xs:string}, ${4:\\$calendar as xs:string})", "trigger":"fn:format-date", "description":"($value as xs:date, $picture as xs:string, $language as xs:string, $calendar as xs:string)"}, {"content":"fn:format-date(${1:\\$value as xs:date}, ${2:\\$picture as xs:string}, ${3:\\$language as xs:string}, ${4:\\$calendar as xs:string}, ${5:\\$country as xs:string})", "trigger":"fn:format-date", "description":"($value as xs:date, $picture as xs:string, $language as xs:string, $calendar as xs:string, $country as xs:string)"}, {"content":"fn:format-time(${1:\\$value as xs:time}, ${2:\\$picture as xs:string})", "trigger":"fn:format-time", "description":"($value as xs:time, $picture as xs:string)"}, {"content":"fn:format-time(${1:\\$value as xs:time}, ${2:\\$picture as xs:string}, ${3:\\$language as xs:string})", "trigger":"fn:format-time", "description":"($value as xs:time, $picture as xs:string, $language as xs:string)"}, {"content":"fn:format-time(${1:\\$value as xs:time}, ${2:\\$picture as xs:string}, ${3:\\$language as xs:string}, ${4:\\$calendar as xs:string})", "trigger":"fn:format-time", "description":"($value as xs:time, $picture as xs:string, $language as xs:string, $calendar as xs:string)"}, {"content":"fn:format-time(${1:\\$value as xs:time}, ${2:\\$picture as xs:string}, ${3:\\$language as xs:string}, ${4:\\$calendar as xs:string}, ${5:\\$country as xs:string})", "trigger":"fn:format-time", "description":"($value as xs:time, $picture as xs:string, $language as xs:string, $calendar as xs:string, $country as xs:string)"}, {"content":"xdmp:parse-dateTime(${1:\\$picture as xs:string}, ${2:\\$value as xs:string})", "trigger":"xdmp:parse-dateTime", "description":"($picture as xs:string, $value as xs:string)"}, {"content":"xdmp:parse-dateTime(${1:\\$picture as xs:string}, ${2:\\$value as xs:string}, ${3:\\$language as xs:string?})", "trigger":"xdmp:parse-dateTime", "description":"($picture as xs:string, $value as xs:string, $language as xs:string?)"}, {"content":"xdmp:parse-dateTime(${1:\\$picture as xs:string}, ${2:\\$value as xs:string}, ${3:\\$language as xs:string?}, ${4:\\$calendar as xs:string?})", "trigger":"xdmp:parse-dateTime", "description":"($picture as xs:string, $value as xs:string, $language as xs:string?, $calendar as xs:string?)"}, {"content":"xdmp:parse-dateTime(${1:\\$picture as xs:string}, ${2:\\$value as xs:string}, ${3:\\$language as xs:string?}, ${4:\\$calendar as xs:string?}, ${5:\\$country as xs:string?})", "trigger":"xdmp:parse-dateTime", "description":"($picture as xs:string, $value as xs:string, $language as xs:string?, $calendar as xs:string?, $country as xs:string?)"}, {"content":"xdmp:parse-yymmdd(${1:\\$picture as xs:string}, ${2:\\$value as xs:string})", "trigger":"xdmp:parse-yymmdd", "description":"($picture as xs:string, $value as xs:string)"}, {"content":"xdmp:parse-yymmdd(${1:\\$picture as xs:string}, ${2:\\$value as xs:string}, ${3:\\$language as xs:string?})", "trigger":"xdmp:parse-yymmdd", "description":"($picture as xs:string, $value as xs:string, $language as xs:string?)"}, {"content":"xdmp:parse-yymmdd(${1:\\$picture as xs:string}, ${2:\\$value as xs:string}, ${3:\\$language as xs:string?}, ${4:\\$calendar as xs:string?})", "trigger":"xdmp:parse-yymmdd", "description":"($picture as xs:string, $value as xs:string, $language as xs:string?, $calendar as xs:string?)"}, {"content":"xdmp:parse-yymmdd(${1:\\$picture as xs:string}, ${2:\\$value as xs:string}, ${3:\\$language as xs:string?}, ${4:\\$calendar as xs:string?}, ${5:\\$country as xs:string?})", "trigger":"xdmp:parse-yymmdd", "description":"($picture as xs:string, $value as xs:string, $language as xs:string?, $calendar as xs:string?, $country as xs:string?)"}, {"content":"fn:format-number(${1:\\$value as xs:double}, ${2:\\$picture as xs:string})", "trigger":"fn:format-number", "description":"($value as xs:double, $picture as xs:string)"}, {"content":"fn:format-number(${1:\\$value as xs:double}, ${2:\\$picture as xs:string}, ${3:\\$decimal-format-name as xs:string})", "trigger":"fn:format-number", "description":"($value as xs:double, $picture as xs:string, $decimal-format-name as xs:string)"}, {"content":"xdmp:format-number(${1:\\$value as xs:numeric*})", "trigger":"xdmp:format-number", "description":"($value as xs:numeric*)"}, {"content":"xdmp:format-number(${1:\\$value as xs:numeric*}, ${2:\\$picture as xs:string?})", "trigger":"xdmp:format-number", "description":"($value as xs:numeric*, $picture as xs:string?)"}, {"content":"xdmp:format-number(${1:\\$value as xs:numeric*}, ${2:\\$picture as xs:string?}, ${3:\\$language as xs:string?})", "trigger":"xdmp:format-number", "description":"($value as xs:numeric*, $picture as xs:string?, $language as xs:string?)"}, {"content":"xdmp:format-number(${1:\\$value as xs:numeric*}, ${2:\\$picture as xs:string?}, ${3:\\$language as xs:string?}, ${4:\\$letter-value as xs:string?})", "trigger":"xdmp:format-number", "description":"($value as xs:numeric*, $picture as xs:string?, $language as xs:string?, $letter-value as xs:string?)"}, {"content":"xdmp:format-number(${1:\\$value as xs:numeric*}, ${2:\\$picture as xs:string?}, ${3:\\$language as xs:string?}, ${4:\\$letter-value as xs:string?}, ${5:\\$ordchar as xs:string?})", "trigger":"xdmp:format-number", "description":"($value as xs:numeric*, $picture as xs:string?, $language as xs:string?, $letter-value as xs:string?, $ordchar as xs:string?)"}, {"content":"xdmp:format-number(${1:\\$value as xs:numeric*}, ${2:\\$picture as xs:string?}, ${3:\\$language as xs:string?}, ${4:\\$letter-value as xs:string?}, ${5:\\$ordchar as xs:string?}, ${6:\\$zero-padding as xs:string?})", "trigger":"xdmp:format-number", "description":"($value as xs:numeric*, $picture as xs:string?, $language as xs:string?, $letter-value as xs:string?, $ordchar as xs:string?, $zero-padding as xs:string?)"}, {"content":"xdmp:format-number(${1:\\$value as xs:numeric*}, ${2:\\$picture as xs:string?}, ${3:\\$language as xs:string?}, ${4:\\$letter-value as xs:string?}, ${5:\\$ordchar as xs:string?}, ${6:\\$zero-padding as xs:string?}, ${7:\\$grouping-separator as xs:string?})", "trigger":"xdmp:format-number", "description":"($value as xs:numeric*, $picture as xs:string?, $language as xs:string?, $letter-value as xs:string?, $ordchar as xs:string?, $zero-padding as xs:string?, $grouping-separator as xs:string?)"}, {"content":"xdmp:format-number(${1:\\$value as xs:numeric*}, ${2:\\$picture as xs:string?}, ${3:\\$language as xs:string?}, ${4:\\$letter-value as xs:string?}, ${5:\\$ordchar as xs:string?}, ${6:\\$zero-padding as xs:string?}, ${7:\\$grouping-separator as xs:string?}, ${8:\\$grouping-size as xs:integer?})", "trigger":"xdmp:format-number", "description":"($value as xs:numeric*, $picture as xs:string?, $language as xs:string?, $letter-value as xs:string?, $ordchar as xs:string?, $zero-padding as xs:string?, $grouping-separator as xs:string?, $grouping-size as xs:integer?)"}, {"content":"xdmp:month-name-from-date(${1:\\$arg as xs:date?})", "trigger":"xdmp:month-name-from-date", "description":"($arg as xs:date?)"}, {"content":"xdmp:dayname-from-date(${1:\\$arg as xs:date?})", "trigger":"xdmp:dayname-from-date", "description":"($arg as xs:date?)"}, {"content":"xdmp:function-name(${1:\\$function as xdmp:function})", "trigger":"xdmp:function-name", "description":"($function as xdmp:function)"}, {"content":"fn:function-name(${1:\\$function as function(*)})", "trigger":"fn:function-name", "description":"($function as function(*))"}, {"content":"xdmp:function-module(${1:\\$function as xdmp:function})", "trigger":"xdmp:function-module", "description":"($function as xdmp:function)"}, {"content":"fn:function-arity(${1:\\$function as function(*)})", "trigger":"fn:function-arity", "description":"($function as function(*))"}, {"content":"xdmp:function-signature(${1:\\$function as function(*)})", "trigger":"xdmp:function-signature", "description":"($function as function(*))"}, {"content":"xdmp:function-parameter-name(${1:\\$function as function(*)}, ${2:\\$position as xs:integer})", "trigger":"xdmp:function-parameter-name", "description":"($function as function(*), $position as xs:integer)"}, {"content":"xdmp:function-parameter-type(${1:\\$function as function(*)}, ${2:\\$position as xs:integer})", "trigger":"xdmp:function-parameter-type", "description":"($function as function(*), $position as xs:integer)"}, {"content":"xdmp:function-return-type(${1:\\$function as function(*)})", "trigger":"xdmp:function-return-type", "description":"($function as function(*))"}, {"content":"xdmp:function(${1:\\$function as xs:QName?})", "trigger":"xdmp:function", "description":"($function as xs:QName?)"}, {"content":"xdmp:function(${1:\\$function as xs:QName?}, ${2:\\$module-path as xs:string?})", "trigger":"xdmp:function", "description":"($function as xs:QName?, $module-path as xs:string?)"}, {"content":"fn:function-lookup(${1:\\$name as xs:QName}, ${2:\\$arity as xs:integer})", "trigger":"fn:function-lookup", "description":"($name as xs:QName, $arity as xs:integer)"}, {"content":"xdmp:apply(${1:\\$function as xdmp:function})", "trigger":"xdmp:apply", "description":"($function as xdmp:function)"}, {"content":"xdmp:apply(${1:\\$function as xdmp:function}, ${2:\\$params-1-to-N as item()*})", "trigger":"xdmp:apply", "description":"($function as xdmp:function, $params-1-to-N as item()*)"}, {"content":"fn:head()", "trigger":"fn:head", "description":"()"}, {"content":"fn:tail(${1:\\$seq as item()*})", "trigger":"fn:tail", "description":"($seq as item()*)"}, {"content":"fn:map(${1:\\$function as function(item()) as item()*}, ${2:\\$seq as item()*})", "trigger":"fn:map", "description":"($function as function(item()) as item()*, $seq as item()*)"}, {"content":"fn:filter(${1:\\$function as function(item()) as xs:boolean}, ${2:\\$seq as item()*})", "trigger":"fn:filter", "description":"($function as function(item()) as xs:boolean, $seq as item()*)"}, {"content":"fn:fold-left(${1:\\$function as function(item()*, item()) as item()*}, ${2:\\$zero as item()*}, ${3:\\$seq as item()*})", "trigger":"fn:fold-left", "description":"($function as function(item()*, item()) as item()*, $zero as item()*, $seq as item()*)"}, {"content":"fn:fold-right(${1:\\$function as function(item(), item()*) as item()*}, ${2:\\$zero as item()*}, ${3:\\$seq as item()*})", "trigger":"fn:fold-right", "description":"($function as function(item(), item()*) as item()*, $zero as item()*, $seq as item()*)"}, {"content":"fn:map-pairs(${1:\\$function as function(item(), item()) as item()*}, ${2:\\$seq1 as item()*}, ${3:\\$seq2 as item()*})", "trigger":"fn:map-pairs", "description":"($function as function(item(), item()) as item()*, $seq1 as item()*, $seq2 as item()*)"}, {"content":"xdmp:functions()", "trigger":"xdmp:functions", "description":"()"}, {"content":"xdmp:annotation(${1:\\$function as function(*)}, ${2:\\$name as xs:QName})", "trigger":"xdmp:annotation", "description":"($function as function(*), $name as xs:QName)"}, {"content":"geojson:point(${1:\\$point as object-node()})", "trigger":"geojson:point", "description":"($point as object-node())"}, {"content":"geojson:multi-point(${1:\\$multi-point as object-node()})", "trigger":"geojson:multi-point", "description":"($multi-point as object-node())"}, {"content":"geojson:box(${1:\\$box as object-node()})", "trigger":"geojson:box", "description":"($box as object-node())"}, {"content":"geojson:circle(${1:\\$radius as xs:double}, ${2:\\$center as object-node()})", "trigger":"geojson:circle", "description":"($radius as xs:double, $center as object-node())"}, {"content":"geojson:linestring(${1:\\$linestring as object-node()})", "trigger":"geojson:linestring", "description":"($linestring as object-node())"}, {"content":"geojson:multi-linestring(${1:\\$multi-linestring as object-node()})", "trigger":"geojson:multi-linestring", "description":"($multi-linestring as object-node())"}, {"content":"geojson:polygon(${1:\\$polygon-or-points as object-node()+})", "trigger":"geojson:polygon", "description":"($polygon-or-points as object-node()+)"}, {"content":"geojson:interior-polygon(${1:\\$polygon as object-node()})", "trigger":"geojson:interior-polygon", "description":"($polygon as object-node())"}, {"content":"geojson:complex-polygon(${1:\\$complex-polygon as node()})", "trigger":"geojson:complex-polygon", "description":"($complex-polygon as node())"}, {"content":"geojson:geospatial-query(${1:\\$regions as cts:region*})", "trigger":"geojson:geospatial-query", "description":"($regions as cts:region*)"}, {"content":"geojson:geospatial-query(${1:\\$regions as cts:region*}, ${2:\\$options as xs:string*})", "trigger":"geojson:geospatial-query", "description":"($regions as cts:region*, $options as xs:string*)"}, {"content":"geojson:geospatial-query(${1:\\$regions as cts:region*}, ${2:\\$options as xs:string*}, ${3:\\$weight as xs:double?})", "trigger":"geojson:geospatial-query", "description":"($regions as cts:region*, $options as xs:string*, $weight as xs:double?)"}, {"content":"geojson:geospatial-query-from-nodes(${1:\\$regions as node()*})", "trigger":"geojson:geospatial-query-from-nodes", "description":"($regions as node()*)"}, {"content":"geojson:geospatial-query-from-nodes(${1:\\$regions as node()*}, ${2:\\$options as xs:string*})", "trigger":"geojson:geospatial-query-from-nodes", "description":"($regions as node()*, $options as xs:string*)"}, {"content":"geojson:geospatial-query-from-nodes(${1:\\$regions as node()*}, ${2:\\$options as xs:string*}, ${3:\\$weight as xs:double?})", "trigger":"geojson:geospatial-query-from-nodes", "description":"($regions as node()*, $options as xs:string*, $weight as xs:double?)"}, {"content":"geojson:parse-geojson(${1:\\$geojson as object-node()*})", "trigger":"geojson:parse-geojson", "description":"($geojson as object-node()*)"}, {"content":"geojson:to-geojson(${1:\\$regions as cts:region*})", "trigger":"geojson:to-geojson", "description":"($regions as cts:region*)"}, {"content":"georss:point(${1:\\$point as element(georss:point)})", "trigger":"georss:point", "description":"($point as element(georss:point))"}, {"content":"georss:circle(${1:\\$radius as xs:double}, ${2:\\$center as element(georss:point)})", "trigger":"georss:circle", "description":"($radius as xs:double, $center as element(georss:point))"}, {"content":"georss:linestring(${1:\\$linestring as element(georss:line)})", "trigger":"georss:linestring", "description":"($linestring as element(georss:line))"}, {"content":"georss:polygon(${1:\\$polygon-or-points as element()+})", "trigger":"georss:polygon", "description":"($polygon-or-points as element()+)"}, {"content":"georss:complex-polygon(${1:\\$complex-polygon as node()})", "trigger":"georss:complex-polygon", "description":"($complex-polygon as node())"}, {"content":"georss:geospatial-query(${1:\\$regions as cts:region*})", "trigger":"georss:geospatial-query", "description":"($regions as cts:region*)"}, {"content":"georss:geospatial-query(${1:\\$regions as cts:region*}, ${2:\\$options as xs:string*})", "trigger":"georss:geospatial-query", "description":"($regions as cts:region*, $options as xs:string*)"}, {"content":"georss:geospatial-query(${1:\\$regions as cts:region*}, ${2:\\$options as xs:string*}, ${3:\\$weight as xs:double?})", "trigger":"georss:geospatial-query", "description":"($regions as cts:region*, $options as xs:string*, $weight as xs:double?)"}, {"content":"georss:parse-georss(${1:\\$georss as element()*})", "trigger":"georss:parse-georss", "description":"($georss as element()*)"}, {"content":"georss:to-georss(${1:\\$regions as cts:region*})", "trigger":"georss:to-georss", "description":"($regions as cts:region*)"}, {"content":"geo:point(${1:\\$point as node()})", "trigger":"geo:point", "description":"($point as node())"}, {"content":"geo:box(${1:\\$box as node()})", "trigger":"geo:box", "description":"($box as node())"}, {"content":"geo:circle(${1:\\$radius as xs:double}, ${2:\\$center as node()})", "trigger":"geo:circle", "description":"($radius as xs:double, $center as node())"}, {"content":"geo:linestring(${1:\\$linestring as node()})", "trigger":"geo:linestring", "description":"($linestring as node())"}, {"content":"geo:polygon(${1:\\$polygon-or-points as node()+})", "trigger":"geo:polygon", "description":"($polygon-or-points as node()+)"}, {"content":"geo:interior-polygon(${1:\\$polygon as node()})", "trigger":"geo:interior-polygon", "description":"($polygon as node())"}, {"content":"geo:complex-polygon(${1:\\$complex-polygon as node()})", "trigger":"geo:complex-polygon", "description":"($complex-polygon as node())"}, {"content":"geo:geospatial-query(${1:\\$regions as cts:region*})", "trigger":"geo:geospatial-query", "description":"($regions as cts:region*)"}, {"content":"geo:geospatial-query(${1:\\$regions as cts:region*}, ${2:\\$options as xs:string*})", "trigger":"geo:geospatial-query", "description":"($regions as cts:region*, $options as xs:string*)"}, {"content":"geo:geospatial-query(${1:\\$regions as cts:region*}, ${2:\\$options as xs:string*}, ${3:\\$weight as xs:double?})", "trigger":"geo:geospatial-query", "description":"($regions as cts:region*, $options as xs:string*, $weight as xs:double?)"}, {"content":"geo:geospatial-query-from-elements(${1:\\$regions as element()*})", "trigger":"geo:geospatial-query-from-elements", "description":"($regions as element()*)"}, {"content":"geo:geospatial-query-from-elements(${1:\\$regions as element()*}, ${2:\\$options as xs:string*})", "trigger":"geo:geospatial-query-from-elements", "description":"($regions as element()*, $options as xs:string*)"}, {"content":"geo:geospatial-query-from-elements(${1:\\$regions as element()*}, ${2:\\$options as xs:string*}, ${3:\\$weight as xs:double?})", "trigger":"geo:geospatial-query-from-elements", "description":"($regions as element()*, $options as xs:string*, $weight as xs:double?)"}, {"content":"geo:geospatial-query-from-nodes()", "trigger":"geo:geospatial-query-from-nodes", "description":"()"}, {"content":"cts:point(${1:\\$latitude as xs:float}, ${2:\\$longitude as xs:float})", "trigger":"cts:point", "description":"($latitude as xs:float, $longitude as xs:float)"}, {"content":"cts:point-latitude(${1:\\$point as cts:point})", "trigger":"cts:point-latitude", "description":"($point as cts:point)"}, {"content":"cts:point-longitude(${1:\\$point as cts:point})", "trigger":"cts:point-longitude", "description":"($point as cts:point)"}, {"content":"cts:box(${1:\\$south as xs:float}, ${2:\\$west as xs:float}, ${3:\\$north as xs:float}, ${4:\\$east as xs:float})", "trigger":"cts:box", "description":"($south as xs:float, $west as xs:float, $north as xs:float, $east as xs:float)"}, {"content":"cts:box-south(${1:\\$box as cts:box})", "trigger":"cts:box-south", "description":"($box as cts:box)"}, {"content":"cts:box-west(${1:\\$box as cts:box})", "trigger":"cts:box-west", "description":"($box as cts:box)"}, {"content":"cts:box-north(${1:\\$box as cts:box})", "trigger":"cts:box-north", "description":"($box as cts:box)"}, {"content":"cts:box-east(${1:\\$box as cts:box})", "trigger":"cts:box-east", "description":"($box as cts:box)"}, {"content":"cts:circle(${1:\\$radius as xs:double}, ${2:\\$center as cts:point})", "trigger":"cts:circle", "description":"($radius as xs:double, $center as cts:point)"}, {"content":"cts:circle-radius(${1:\\$circle as cts:circle})", "trigger":"cts:circle-radius", "description":"($circle as cts:circle)"}, {"content":"cts:circle-center(${1:\\$circle as cts:circle})", "trigger":"cts:circle-center", "description":"($circle as cts:circle)"}, {"content":"cts:polygon(${1:\\$vertices as cts:point*})", "trigger":"cts:polygon", "description":"($vertices as cts:point*)"}, {"content":"cts:polygon-vertices(${1:\\$polygon as cts:polygon})", "trigger":"cts:polygon-vertices", "description":"($polygon as cts:polygon)"}, {"content":"cts:linestring(${1:\\$vertices as cts:point*})", "trigger":"cts:linestring", "description":"($vertices as cts:point*)"}, {"content":"cts:linestring-vertices(${1:\\$linestring as cts:linestring})", "trigger":"cts:linestring-vertices", "description":"($linestring as cts:linestring)"}, {"content":"cts:complex-polygon(${1:\\$outer as cts:polygon}, ${2:\\$inner as cts:polygon*})", "trigger":"cts:complex-polygon", "description":"($outer as cts:polygon, $inner as cts:polygon*)"}, {"content":"cts:complex-polygon-outer(${1:\\$complexPolygon as cts:complex-polygon})", "trigger":"cts:complex-polygon-outer", "description":"($complexPolygon as cts:complex-polygon)"}, {"content":"cts:complex-polygon-inner(${1:\\$complexPolygon as cts:complex-polygon})", "trigger":"cts:complex-polygon-inner", "description":"($complexPolygon as cts:complex-polygon)"}, {"content":"cts:element-geospatial-query(${1:\\$element-name as xs:QName*}, ${2:\\$regions as cts:region*})", "trigger":"cts:element-geospatial-query", "description":"($element-name as xs:QName*, $regions as cts:region*)"}, {"content":"cts:element-geospatial-query(${1:\\$element-name as xs:QName*}, ${2:\\$regions as cts:region*}, ${3:\\$options as xs:string*})", "trigger":"cts:element-geospatial-query", "description":"($element-name as xs:QName*, $regions as cts:region*, $options as xs:string*)"}, {"content":"cts:element-geospatial-query(${1:\\$element-name as xs:QName*}, ${2:\\$regions as cts:region*}, ${3:\\$options as xs:string*}, ${4:\\$weight as xs:double?})", "trigger":"cts:element-geospatial-query", "description":"($element-name as xs:QName*, $regions as cts:region*, $options as xs:string*, $weight as xs:double?)"}, {"content":"cts:element-geospatial-query-element-name(${1:\\$query as cts:element-geospatial-query})", "trigger":"cts:element-geospatial-query-element-name", "description":"($query as cts:element-geospatial-query)"}, {"content":"cts:element-geospatial-query-region(${1:\\$query as cts:element-geospatial-query})", "trigger":"cts:element-geospatial-query-region", "description":"($query as cts:element-geospatial-query)"}, {"content":"cts:element-geospatial-query-options(${1:\\$query as cts:element-geospatial-query})", "trigger":"cts:element-geospatial-query-options", "description":"($query as cts:element-geospatial-query)"}, {"content":"cts:element-geospatial-query-weight(${1:\\$query as cts:element-geospatial-query})", "trigger":"cts:element-geospatial-query-weight", "description":"($query as cts:element-geospatial-query)"}, {"content":"cts:json-property-geospatial-query(${1:\\$property-name as xs:string*}, ${2:\\$regions as cts:region*})", "trigger":"cts:json-property-geospatial-query", "description":"($property-name as xs:string*, $regions as cts:region*)"}, {"content":"cts:json-property-geospatial-query(${1:\\$property-name as xs:string*}, ${2:\\$regions as cts:region*}, ${3:\\$options as xs:string*})", "trigger":"cts:json-property-geospatial-query", "description":"($property-name as xs:string*, $regions as cts:region*, $options as xs:string*)"}, {"content":"cts:json-property-geospatial-query(${1:\\$property-name as xs:string*}, ${2:\\$regions as cts:region*}, ${3:\\$options as xs:string*}, ${4:\\$weight as xs:double?})", "trigger":"cts:json-property-geospatial-query", "description":"($property-name as xs:string*, $regions as cts:region*, $options as xs:string*, $weight as xs:double?)"}, {"content":"cts:json-property-geospatial-query-property-name(${1:\\$query as cts:json-property-geospatial-query})", "trigger":"cts:json-property-geospatial-query-property-name", "description":"($query as cts:json-property-geospatial-query)"}, {"content":"cts:json-property-geospatial-query-region(${1:\\$query as cts:json-property-geospatial-query})", "trigger":"cts:json-property-geospatial-query-region", "description":"($query as cts:json-property-geospatial-query)"}, {"content":"cts:json-property-geospatial-query-options(${1:\\$query as cts:json-property-geospatial-query})", "trigger":"cts:json-property-geospatial-query-options", "description":"($query as cts:json-property-geospatial-query)"}, {"content":"cts:json-property-geospatial-query-weight(${1:\\$query as cts:json-property-geospatial-query})", "trigger":"cts:json-property-geospatial-query-weight", "description":"($query as cts:json-property-geospatial-query)"}, {"content":"cts:element-child-geospatial-query(${1:\\$parent-element-name as xs:QName*}, ${2:\\$child-element-names as xs:QName*}, ${3:\\$regions as cts:region*})", "trigger":"cts:element-child-geospatial-query", "description":"($parent-element-name as xs:QName*, $child-element-names as xs:QName*, $regions as cts:region*)"}, {"content":"cts:element-child-geospatial-query(${1:\\$parent-element-name as xs:QName*}, ${2:\\$child-element-names as xs:QName*}, ${3:\\$regions as cts:region*}, ${4:\\$options as xs:string*})", "trigger":"cts:element-child-geospatial-query", "description":"($parent-element-name as xs:QName*, $child-element-names as xs:QName*, $regions as cts:region*, $options as xs:string*)"}, {"content":"cts:element-child-geospatial-query(${1:\\$parent-element-name as xs:QName*}, ${2:\\$child-element-names as xs:QName*}, ${3:\\$regions as cts:region*}, ${4:\\$options as xs:string*}, ${5:\\$weight as xs:double?})", "trigger":"cts:element-child-geospatial-query", "description":"($parent-element-name as xs:QName*, $child-element-names as xs:QName*, $regions as cts:region*, $options as xs:string*, $weight as xs:double?)"}, {"content":"cts:element-child-geospatial-query-element-name(${1:\\$query as cts:element-child-geospatial-query})", "trigger":"cts:element-child-geospatial-query-element-name", "description":"($query as cts:element-child-geospatial-query)"}, {"content":"cts:element-child-geospatial-query-child-name(${1:\\$query as cts:element-child-geospatial-query})", "trigger":"cts:element-child-geospatial-query-child-name", "description":"($query as cts:element-child-geospatial-query)"}, {"content":"cts:element-child-geospatial-query-region(${1:\\$query as cts:element-child-geospatial-query})", "trigger":"cts:element-child-geospatial-query-region", "description":"($query as cts:element-child-geospatial-query)"}, {"content":"cts:element-child-geospatial-query-options(${1:\\$query as cts:element-child-geospatial-query})", "trigger":"cts:element-child-geospatial-query-options", "description":"($query as cts:element-child-geospatial-query)"}, {"content":"cts:element-child-geospatial-query-weight(${1:\\$query as cts:element-child-geospatial-query})", "trigger":"cts:element-child-geospatial-query-weight", "description":"($query as cts:element-child-geospatial-query)"}, {"content":"cts:json-property-child-geospatial-query(${1:\\$parent-property-name as xs:string*}, ${2:\\$child-property-names as xs:string*}, ${3:\\$regions as cts:region*})", "trigger":"cts:json-property-child-geospatial-query", "description":"($parent-property-name as xs:string*, $child-property-names as xs:string*, $regions as cts:region*)"}, {"content":"cts:json-property-child-geospatial-query(${1:\\$parent-property-name as xs:string*}, ${2:\\$child-property-names as xs:string*}, ${3:\\$regions as cts:region*}, ${4:\\$options as xs:string*})", "trigger":"cts:json-property-child-geospatial-query", "description":"($parent-property-name as xs:string*, $child-property-names as xs:string*, $regions as cts:region*, $options as xs:string*)"}, {"content":"cts:json-property-child-geospatial-query(${1:\\$parent-property-name as xs:string*}, ${2:\\$child-property-names as xs:string*}, ${3:\\$regions as cts:region*}, ${4:\\$options as xs:string*}, ${5:\\$weight as xs:double?})", "trigger":"cts:json-property-child-geospatial-query", "description":"($parent-property-name as xs:string*, $child-property-names as xs:string*, $regions as cts:region*, $options as xs:string*, $weight as xs:double?)"}, {"content":"cts:json-property-child-geospatial-query-property-name(${1:\\$query as cts:json-property-child-geospatial-query})", "trigger":"cts:json-property-child-geospatial-query-property-name", "description":"($query as cts:json-property-child-geospatial-query)"}, {"content":"cts:json-property-child-geospatial-query-child-name(${1:\\$query as cts:json-property-child-geospatial-query})", "trigger":"cts:json-property-child-geospatial-query-child-name", "description":"($query as cts:json-property-child-geospatial-query)"}, {"content":"cts:json-property-child-geospatial-query-region(${1:\\$query as cts:json-property-child-geospatial-query})", "trigger":"cts:json-property-child-geospatial-query-region", "description":"($query as cts:json-property-child-geospatial-query)"}, {"content":"cts:json-property-child-geospatial-query-options(${1:\\$query as cts:json-property-child-geospatial-query})", "trigger":"cts:json-property-child-geospatial-query-options", "description":"($query as cts:json-property-child-geospatial-query)"}, {"content":"cts:json-property-child-geospatial-query-weight(${1:\\$query as cts:json-property-child-geospatial-query})", "trigger":"cts:json-property-child-geospatial-query-weight", "description":"($query as cts:json-property-child-geospatial-query)"}, {"content":"cts:element-pair-geospatial-query(${1:\\$element-name as xs:QName*}, ${2:\\$latitude-element-names as xs:QName*}, ${3:\\$longitude-element-names as xs:QName*}, ${4:\\$regions as cts:region*})", "trigger":"cts:element-pair-geospatial-query", "description":"($element-name as xs:QName*, $latitude-element-names as xs:QName*, $longitude-element-names as xs:QName*, $regions as cts:region*)"}, {"content":"cts:element-pair-geospatial-query(${1:\\$element-name as xs:QName*}, ${2:\\$latitude-element-names as xs:QName*}, ${3:\\$longitude-element-names as xs:QName*}, ${4:\\$regions as cts:region*}, ${5:\\$options as xs:string*})", "trigger":"cts:element-pair-geospatial-query", "description":"($element-name as xs:QName*, $latitude-element-names as xs:QName*, $longitude-element-names as xs:QName*, $regions as cts:region*, $options as xs:string*)"}, {"content":"cts:element-pair-geospatial-query(${1:\\$element-name as xs:QName*}, ${2:\\$latitude-element-names as xs:QName*}, ${3:\\$longitude-element-names as xs:QName*}, ${4:\\$regions as cts:region*}, ${5:\\$options as xs:string*}, ${6:\\$weight as xs:double?})", "trigger":"cts:element-pair-geospatial-query", "description":"($element-name as xs:QName*, $latitude-element-names as xs:QName*, $longitude-element-names as xs:QName*, $regions as cts:region*, $options as xs:string*, $weight as xs:double?)"}, {"content":"cts:element-pair-geospatial-query-element-name(${1:\\$query as cts:element-pair-geospatial-query})", "trigger":"cts:element-pair-geospatial-query-element-name", "description":"($query as cts:element-pair-geospatial-query)"}, {"content":"cts:element-pair-geospatial-query-latitude-name(${1:\\$query as cts:element-pair-geospatial-query})", "trigger":"cts:element-pair-geospatial-query-latitude-name", "description":"($query as cts:element-pair-geospatial-query)"}, {"content":"cts:element-pair-geospatial-query-longitude-name(${1:\\$query as cts:element-pair-geospatial-query})", "trigger":"cts:element-pair-geospatial-query-longitude-name", "description":"($query as cts:element-pair-geospatial-query)"}, {"content":"cts:element-pair-geospatial-query-region(${1:\\$query as cts:element-pair-geospatial-query})", "trigger":"cts:element-pair-geospatial-query-region", "description":"($query as cts:element-pair-geospatial-query)"}, {"content":"cts:element-pair-geospatial-query-options(${1:\\$query as cts:element-pair-geospatial-query})", "trigger":"cts:element-pair-geospatial-query-options", "description":"($query as cts:element-pair-geospatial-query)"}, {"content":"cts:element-pair-geospatial-query-weight(${1:\\$query as cts:element-pair-geospatial-query})", "trigger":"cts:element-pair-geospatial-query-weight", "description":"($query as cts:element-pair-geospatial-query)"}, {"content":"cts:json-property-pair-geospatial-query(${1:\\$property-name as xs:string*}, ${2:\\$latitude-property-names as xs:string*}, ${3:\\$longitude-property-names as xs:string*}, ${4:\\$regions as cts:region*})", "trigger":"cts:json-property-pair-geospatial-query", "description":"($property-name as xs:string*, $latitude-property-names as xs:string*, $longitude-property-names as xs:string*, $regions as cts:region*)"}, {"content":"cts:json-property-pair-geospatial-query(${1:\\$property-name as xs:string*}, ${2:\\$latitude-property-names as xs:string*}, ${3:\\$longitude-property-names as xs:string*}, ${4:\\$regions as cts:region*}, ${5:\\$options as xs:string*})", "trigger":"cts:json-property-pair-geospatial-query", "description":"($property-name as xs:string*, $latitude-property-names as xs:string*, $longitude-property-names as xs:string*, $regions as cts:region*, $options as xs:string*)"}, {"content":"cts:json-property-pair-geospatial-query(${1:\\$property-name as xs:string*}, ${2:\\$latitude-property-names as xs:string*}, ${3:\\$longitude-property-names as xs:string*}, ${4:\\$regions as cts:region*}, ${5:\\$options as xs:string*}, ${6:\\$weight as xs:double?})", "trigger":"cts:json-property-pair-geospatial-query", "description":"($property-name as xs:string*, $latitude-property-names as xs:string*, $longitude-property-names as xs:string*, $regions as cts:region*, $options as xs:string*, $weight as xs:double?)"}, {"content":"cts:json-property-pair-geospatial-query-property-name(${1:\\$query as cts:json-property-pair-geospatial-query})", "trigger":"cts:json-property-pair-geospatial-query-property-name", "description":"($query as cts:json-property-pair-geospatial-query)"}, {"content":"cts:json-property-pair-geospatial-query-latitude-name(${1:\\$query as cts:json-property-pair-geospatial-query})", "trigger":"cts:json-property-pair-geospatial-query-latitude-name", "description":"($query as cts:json-property-pair-geospatial-query)"}, {"content":"cts:json-property-pair-geospatial-query-longitude-name(${1:\\$query as cts:json-property-pair-geospatial-query})", "trigger":"cts:json-property-pair-geospatial-query-longitude-name", "description":"($query as cts:json-property-pair-geospatial-query)"}, {"content":"cts:json-property-pair-geospatial-query-region(${1:\\$query as cts:json-property-pair-geospatial-query})", "trigger":"cts:json-property-pair-geospatial-query-region", "description":"($query as cts:json-property-pair-geospatial-query)"}, {"content":"cts:json-property-pair-geospatial-query-options(${1:\\$query as cts:json-property-pair-geospatial-query})", "trigger":"cts:json-property-pair-geospatial-query-options", "description":"($query as cts:json-property-pair-geospatial-query)"}, {"content":"cts:json-property-pair-geospatial-query-weight(${1:\\$query as cts:json-property-pair-geospatial-query})", "trigger":"cts:json-property-pair-geospatial-query-weight", "description":"($query as cts:json-property-pair-geospatial-query)"}, {"content":"cts:element-attribute-pair-geospatial-query(${1:\\$element-name as xs:QName*}, ${2:\\$latitude-attribute-names as xs:QName*}, ${3:\\$longitude-attribute-names as xs:QName*}, ${4:\\$regions as cts:region*})", "trigger":"cts:element-attribute-pair-geospatial-query", "description":"($element-name as xs:QName*, $latitude-attribute-names as xs:QName*, $longitude-attribute-names as xs:QName*, $regions as cts:region*)"}, {"content":"cts:element-attribute-pair-geospatial-query(${1:\\$element-name as xs:QName*}, ${2:\\$latitude-attribute-names as xs:QName*}, ${3:\\$longitude-attribute-names as xs:QName*}, ${4:\\$regions as cts:region*}, ${5:\\$options as xs:string*})", "trigger":"cts:element-attribute-pair-geospatial-query", "description":"($element-name as xs:QName*, $latitude-attribute-names as xs:QName*, $longitude-attribute-names as xs:QName*, $regions as cts:region*, $options as xs:string*)"}, {"content":"cts:element-attribute-pair-geospatial-query(${1:\\$element-name as xs:QName*}, ${2:\\$latitude-attribute-names as xs:QName*}, ${3:\\$longitude-attribute-names as xs:QName*}, ${4:\\$regions as cts:region*}, ${5:\\$options as xs:string*}, ${6:\\$weight as xs:double?})", "trigger":"cts:element-attribute-pair-geospatial-query", "description":"($element-name as xs:QName*, $latitude-attribute-names as xs:QName*, $longitude-attribute-names as xs:QName*, $regions as cts:region*, $options as xs:string*, $weight as xs:double?)"}, {"content":"cts:element-attribute-pair-geospatial-query-element-name(${1:\\$query as cts:element-attribute-pair-geospatial-query})", "trigger":"cts:element-attribute-pair-geospatial-query-element-name", "description":"($query as cts:element-attribute-pair-geospatial-query)"}, {"content":"cts:element-attribute-pair-geospatial-query-latitude-name(${1:\\$query as cts:element-attribute-pair-geospatial-query})", "trigger":"cts:element-attribute-pair-geospatial-query-latitude-name", "description":"($query as cts:element-attribute-pair-geospatial-query)"}, {"content":"cts:element-attribute-pair-geospatial-query-longitude-name(${1:\\$query as cts:element-attribute-pair-geospatial-query})", "trigger":"cts:element-attribute-pair-geospatial-query-longitude-name", "description":"($query as cts:element-attribute-pair-geospatial-query)"}, {"content":"cts:element-attribute-pair-geospatial-query-region(${1:\\$query as cts:element-attribute-pair-geospatial-query})", "trigger":"cts:element-attribute-pair-geospatial-query-region", "description":"($query as cts:element-attribute-pair-geospatial-query)"}, {"content":"cts:element-attribute-pair-geospatial-query-options(${1:\\$query as cts:element-attribute-pair-geospatial-query})", "trigger":"cts:element-attribute-pair-geospatial-query-options", "description":"($query as cts:element-attribute-pair-geospatial-query)"}, {"content":"cts:element-attribute-pair-geospatial-query-weight(${1:\\$query as cts:element-attribute-pair-geospatial-query})", "trigger":"cts:element-attribute-pair-geospatial-query-weight", "description":"($query as cts:element-attribute-pair-geospatial-query)"}, {"content":"cts:path-geospatial-query(${1:\\$path-expression as xs:string*}, ${2:\\$regions as cts:region*})", "trigger":"cts:path-geospatial-query", "description":"($path-expression as xs:string*, $regions as cts:region*)"}, {"content":"cts:path-geospatial-query(${1:\\$path-expression as xs:string*}, ${2:\\$regions as cts:region*}, ${3:\\$options as xs:string*})", "trigger":"cts:path-geospatial-query", "description":"($path-expression as xs:string*, $regions as cts:region*, $options as xs:string*)"}, {"content":"cts:path-geospatial-query(${1:\\$path-expression as xs:string*}, ${2:\\$regions as cts:region*}, ${3:\\$options as xs:string*}, ${4:\\$weight as xs:double?})", "trigger":"cts:path-geospatial-query", "description":"($path-expression as xs:string*, $regions as cts:region*, $options as xs:string*, $weight as xs:double?)"}, {"content":"cts:path-geospatial-query-region(${1:\\$query as cts:path-geospatial-query})", "trigger":"cts:path-geospatial-query-region", "description":"($query as cts:path-geospatial-query)"}, {"content":"cts:path-geospatial-query-options(${1:\\$query as cts:path-geospatial-query})", "trigger":"cts:path-geospatial-query-options", "description":"($query as cts:path-geospatial-query)"}, {"content":"cts:path-geospatial-query-weight(${1:\\$query as cts:path-geospatial-query})", "trigger":"cts:path-geospatial-query-weight", "description":"($query as cts:path-geospatial-query)"}, {"content":"cts:path-geospatial-query-path-expression(${1:\\$query as cts:path-geospatial-query})", "trigger":"cts:path-geospatial-query-path-expression", "description":"($query as cts:path-geospatial-query)"}, {"content":"cts:geospatial-region-query-reference(${1:\\$query as cts:geospatial-region-query})", "trigger":"cts:geospatial-region-query-reference", "description":"($query as cts:geospatial-region-query)"}, {"content":"cts:geospatial-region-query-operation(${1:\\$query as cts:geospatial-region-query})", "trigger":"cts:geospatial-region-query-operation", "description":"($query as cts:geospatial-region-query)"}, {"content":"cts:geospatial-region-query-region(${1:\\$query as cts:geospatial-region-query})", "trigger":"cts:geospatial-region-query-region", "description":"($query as cts:geospatial-region-query)"}, {"content":"cts:geospatial-region-query-options(${1:\\$query as cts:geospatial-region-query})", "trigger":"cts:geospatial-region-query-options", "description":"($query as cts:geospatial-region-query)"}, {"content":"cts:geospatial-region-query-weight(${1:\\$query as cts:geospatial-region-query})", "trigger":"cts:geospatial-region-query-weight", "description":"($query as cts:geospatial-region-query)"}, {"content":"cts:element-geospatial-boxes(${1:\\$element-names as xs:QName*})", "trigger":"cts:element-geospatial-boxes", "description":"($element-names as xs:QName*)"}, {"content":"cts:element-geospatial-boxes(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-bounds as xs:double*})", "trigger":"cts:element-geospatial-boxes", "description":"($element-names as xs:QName*, $latitude-bounds as xs:double*)"}, {"content":"cts:element-geospatial-boxes(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-bounds as xs:double*}, ${3:\\$longitude-bounds as xs:double*})", "trigger":"cts:element-geospatial-boxes", "description":"($element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*)"}, {"content":"cts:element-geospatial-boxes(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-bounds as xs:double*}, ${3:\\$longitude-bounds as xs:double*}, ${4:\\$options as xs:string*})", "trigger":"cts:element-geospatial-boxes", "description":"($element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*)"}, {"content":"cts:element-geospatial-boxes(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-bounds as xs:double*}, ${3:\\$longitude-bounds as xs:double*}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?})", "trigger":"cts:element-geospatial-boxes", "description":"($element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:element-geospatial-boxes(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-bounds as xs:double*}, ${3:\\$longitude-bounds as xs:double*}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?})", "trigger":"cts:element-geospatial-boxes", "description":"($element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:element-geospatial-boxes(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-bounds as xs:double*}, ${3:\\$longitude-bounds as xs:double*}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?}, ${7:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:element-geospatial-boxes", "description":"($element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:element-child-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$child-element-names as xs:QName*})", "trigger":"cts:element-child-geospatial-boxes", "description":"($parent-element-names as xs:QName*, $child-element-names as xs:QName*)"}, {"content":"cts:element-child-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$child-element-names as xs:QName*}, ${3:\\$latitude-bounds as xs:double*})", "trigger":"cts:element-child-geospatial-boxes", "description":"($parent-element-names as xs:QName*, $child-element-names as xs:QName*, $latitude-bounds as xs:double*)"}, {"content":"cts:element-child-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$child-element-names as xs:QName*}, ${3:\\$latitude-bounds as xs:double*}, ${4:\\$longitude-bounds as xs:double*})", "trigger":"cts:element-child-geospatial-boxes", "description":"($parent-element-names as xs:QName*, $child-element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*)"}, {"content":"cts:element-child-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$child-element-names as xs:QName*}, ${3:\\$latitude-bounds as xs:double*}, ${4:\\$longitude-bounds as xs:double*}, ${5:\\$options as xs:string*})", "trigger":"cts:element-child-geospatial-boxes", "description":"($parent-element-names as xs:QName*, $child-element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*)"}, {"content":"cts:element-child-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$child-element-names as xs:QName*}, ${3:\\$latitude-bounds as xs:double*}, ${4:\\$longitude-bounds as xs:double*}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?})", "trigger":"cts:element-child-geospatial-boxes", "description":"($parent-element-names as xs:QName*, $child-element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:element-child-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$child-element-names as xs:QName*}, ${3:\\$latitude-bounds as xs:double*}, ${4:\\$longitude-bounds as xs:double*}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$quality-weight as xs:double?})", "trigger":"cts:element-child-geospatial-boxes", "description":"($parent-element-names as xs:QName*, $child-element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:element-child-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$child-element-names as xs:QName*}, ${3:\\$latitude-bounds as xs:double*}, ${4:\\$longitude-bounds as xs:double*}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$quality-weight as xs:double?}, ${8:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:element-child-geospatial-boxes", "description":"($parent-element-names as xs:QName*, $child-element-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:element-pair-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*})", "trigger":"cts:element-pair-geospatial-boxes", "description":"($parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*)"}, {"content":"cts:element-pair-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$latitude-bounds as xs:double*})", "trigger":"cts:element-pair-geospatial-boxes", "description":"($parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*)"}, {"content":"cts:element-pair-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$latitude-bounds as xs:double*}, ${5:\\$longitude-bounds as xs:double*})", "trigger":"cts:element-pair-geospatial-boxes", "description":"($parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*)"}, {"content":"cts:element-pair-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$latitude-bounds as xs:double*}, ${5:\\$longitude-bounds as xs:double*}, ${6:\\$options as xs:string*})", "trigger":"cts:element-pair-geospatial-boxes", "description":"($parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*)"}, {"content":"cts:element-pair-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$latitude-bounds as xs:double*}, ${5:\\$longitude-bounds as xs:double*}, ${6:\\$options as xs:string*}, ${7:\\$query as cts:query?})", "trigger":"cts:element-pair-geospatial-boxes", "description":"($parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:element-pair-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$latitude-bounds as xs:double*}, ${5:\\$longitude-bounds as xs:double*}, ${6:\\$options as xs:string*}, ${7:\\$query as cts:query?}, ${8:\\$quality-weight as xs:double?})", "trigger":"cts:element-pair-geospatial-boxes", "description":"($parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:element-pair-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$latitude-bounds as xs:double*}, ${5:\\$longitude-bounds as xs:double*}, ${6:\\$options as xs:string*}, ${7:\\$query as cts:query?}, ${8:\\$quality-weight as xs:double?}, ${9:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:element-pair-geospatial-boxes", "description":"($parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:element-attribute-pair-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*})", "trigger":"cts:element-attribute-pair-geospatial-boxes", "description":"($parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*)"}, {"content":"cts:element-attribute-pair-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$latitude-bounds as xs:double*})", "trigger":"cts:element-attribute-pair-geospatial-boxes", "description":"($parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*)"}, {"content":"cts:element-attribute-pair-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$latitude-bounds as xs:double*}, ${5:\\$longitude-bounds as xs:double*})", "trigger":"cts:element-attribute-pair-geospatial-boxes", "description":"($parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*)"}, {"content":"cts:element-attribute-pair-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$latitude-bounds as xs:double*}, ${5:\\$longitude-bounds as xs:double*}, ${6:\\$options as xs:string*})", "trigger":"cts:element-attribute-pair-geospatial-boxes", "description":"($parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*)"}, {"content":"cts:element-attribute-pair-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$latitude-bounds as xs:double*}, ${5:\\$longitude-bounds as xs:double*}, ${6:\\$options as xs:string*}, ${7:\\$query as cts:query?})", "trigger":"cts:element-attribute-pair-geospatial-boxes", "description":"($parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:element-attribute-pair-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$latitude-bounds as xs:double*}, ${5:\\$longitude-bounds as xs:double*}, ${6:\\$options as xs:string*}, ${7:\\$query as cts:query?}, ${8:\\$quality-weight as xs:double?})", "trigger":"cts:element-attribute-pair-geospatial-boxes", "description":"($parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:element-attribute-pair-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$latitude-bounds as xs:double*}, ${5:\\$longitude-bounds as xs:double*}, ${6:\\$options as xs:string*}, ${7:\\$query as cts:query?}, ${8:\\$quality-weight as xs:double?}, ${9:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:element-attribute-pair-geospatial-boxes", "description":"($parent-element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:geospatial-boxes(${1:\\$geo-indexes as cts:reference*})", "trigger":"cts:geospatial-boxes", "description":"($geo-indexes as cts:reference*)"}, {"content":"cts:geospatial-boxes(${1:\\$geo-indexes as cts:reference*}, ${2:\\$latitude-bounds as xs:double*})", "trigger":"cts:geospatial-boxes", "description":"($geo-indexes as cts:reference*, $latitude-bounds as xs:double*)"}, {"content":"cts:geospatial-boxes(${1:\\$geo-indexes as cts:reference*}, ${2:\\$latitude-bounds as xs:double*}, ${3:\\$longitude-bounds as xs:double*})", "trigger":"cts:geospatial-boxes", "description":"($geo-indexes as cts:reference*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*)"}, {"content":"cts:geospatial-boxes(${1:\\$geo-indexes as cts:reference*}, ${2:\\$latitude-bounds as xs:double*}, ${3:\\$longitude-bounds as xs:double*}, ${4:\\$options as xs:string*})", "trigger":"cts:geospatial-boxes", "description":"($geo-indexes as cts:reference*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*)"}, {"content":"cts:geospatial-boxes(${1:\\$geo-indexes as cts:reference*}, ${2:\\$latitude-bounds as xs:double*}, ${3:\\$longitude-bounds as xs:double*}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?})", "trigger":"cts:geospatial-boxes", "description":"($geo-indexes as cts:reference*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:geospatial-boxes(${1:\\$geo-indexes as cts:reference*}, ${2:\\$latitude-bounds as xs:double*}, ${3:\\$longitude-bounds as xs:double*}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?})", "trigger":"cts:geospatial-boxes", "description":"($geo-indexes as cts:reference*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:geospatial-boxes(${1:\\$geo-indexes as cts:reference*}, ${2:\\$latitude-bounds as xs:double*}, ${3:\\$longitude-bounds as xs:double*}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?}, ${7:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:geospatial-boxes", "description":"($geo-indexes as cts:reference*, $latitude-bounds as xs:double*, $longitude-bounds as xs:double*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:element-geospatial-values(${1:\\$element-names as xs:QName*})", "trigger":"cts:element-geospatial-values", "description":"($element-names as xs:QName*)"}, {"content":"cts:element-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$start as cts:point?})", "trigger":"cts:element-geospatial-values", "description":"($element-names as xs:QName*, $start as cts:point?)"}, {"content":"cts:element-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$start as cts:point?}, ${3:\\$options as xs:string*})", "trigger":"cts:element-geospatial-values", "description":"($element-names as xs:QName*, $start as cts:point?, $options as xs:string*)"}, {"content":"cts:element-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$start as cts:point?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "trigger":"cts:element-geospatial-values", "description":"($element-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:element-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$start as cts:point?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "trigger":"cts:element-geospatial-values", "description":"($element-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:element-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$start as cts:point?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:element-geospatial-values", "description":"($element-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:element-child-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$child-names as xs:QName*})", "trigger":"cts:element-child-geospatial-values", "description":"($element-names as xs:QName*, $child-names as xs:QName*)"}, {"content":"cts:element-child-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$child-names as xs:QName*}, ${3:\\$start as cts:point?})", "trigger":"cts:element-child-geospatial-values", "description":"($element-names as xs:QName*, $child-names as xs:QName*, $start as cts:point?)"}, {"content":"cts:element-child-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$child-names as xs:QName*}, ${3:\\$start as cts:point?}, ${4:\\$options as xs:string*})", "trigger":"cts:element-child-geospatial-values", "description":"($element-names as xs:QName*, $child-names as xs:QName*, $start as cts:point?, $options as xs:string*)"}, {"content":"cts:element-child-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$child-names as xs:QName*}, ${3:\\$start as cts:point?}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?})", "trigger":"cts:element-child-geospatial-values", "description":"($element-names as xs:QName*, $child-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:element-child-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$child-names as xs:QName*}, ${3:\\$start as cts:point?}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?})", "trigger":"cts:element-child-geospatial-values", "description":"($element-names as xs:QName*, $child-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:element-child-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$child-names as xs:QName*}, ${3:\\$start as cts:point?}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?}, ${7:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:element-child-geospatial-values", "description":"($element-names as xs:QName*, $child-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:element-pair-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*})", "trigger":"cts:element-pair-geospatial-values", "description":"($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*)"}, {"content":"cts:element-pair-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$start as cts:point?})", "trigger":"cts:element-pair-geospatial-values", "description":"($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?)"}, {"content":"cts:element-pair-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$start as cts:point?}, ${5:\\$options as xs:string*})", "trigger":"cts:element-pair-geospatial-values", "description":"($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?, $options as xs:string*)"}, {"content":"cts:element-pair-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$start as cts:point?}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?})", "trigger":"cts:element-pair-geospatial-values", "description":"($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:element-pair-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$start as cts:point?}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$quality-weight as xs:double?})", "trigger":"cts:element-pair-geospatial-values", "description":"($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:element-pair-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$start as cts:point?}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$quality-weight as xs:double?}, ${8:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:element-pair-geospatial-values", "description":"($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:element-attribute-pair-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*})", "trigger":"cts:element-attribute-pair-geospatial-values", "description":"($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*)"}, {"content":"cts:element-attribute-pair-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$start as cts:point?})", "trigger":"cts:element-attribute-pair-geospatial-values", "description":"($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?)"}, {"content":"cts:element-attribute-pair-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$start as cts:point?}, ${5:\\$options as xs:string*})", "trigger":"cts:element-attribute-pair-geospatial-values", "description":"($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?, $options as xs:string*)"}, {"content":"cts:element-attribute-pair-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$start as cts:point?}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?})", "trigger":"cts:element-attribute-pair-geospatial-values", "description":"($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:element-attribute-pair-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$start as cts:point?}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$quality-weight as xs:double?})", "trigger":"cts:element-attribute-pair-geospatial-values", "description":"($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:element-attribute-pair-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$start as cts:point?}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$quality-weight as xs:double?}, ${8:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:element-attribute-pair-geospatial-values", "description":"($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $start as cts:point?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:element-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:anyAtomicType})", "trigger":"cts:element-geospatial-value-match", "description":"($element-names as xs:QName*, $pattern as xs:anyAtomicType)"}, {"content":"cts:element-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*})", "trigger":"cts:element-geospatial-value-match", "description":"($element-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*)"}, {"content":"cts:element-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "trigger":"cts:element-geospatial-value-match", "description":"($element-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:element-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "trigger":"cts:element-geospatial-value-match", "description":"($element-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:element-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:element-geospatial-value-match", "description":"($element-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:element-child-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$child-names as xs:QName*}, ${3:\\$pattern as xs:anyAtomicType})", "trigger":"cts:element-child-geospatial-value-match", "description":"($element-names as xs:QName*, $child-names as xs:QName*, $pattern as xs:anyAtomicType)"}, {"content":"cts:element-child-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$child-names as xs:QName*}, ${3:\\$pattern as xs:anyAtomicType}, ${4:\\$options as xs:string*})", "trigger":"cts:element-child-geospatial-value-match", "description":"($element-names as xs:QName*, $child-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*)"}, {"content":"cts:element-child-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$child-names as xs:QName*}, ${3:\\$pattern as xs:anyAtomicType}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?})", "trigger":"cts:element-child-geospatial-value-match", "description":"($element-names as xs:QName*, $child-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:element-child-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$child-names as xs:QName*}, ${3:\\$pattern as xs:anyAtomicType}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?})", "trigger":"cts:element-child-geospatial-value-match", "description":"($element-names as xs:QName*, $child-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:element-child-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$child-names as xs:QName*}, ${3:\\$pattern as xs:anyAtomicType}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?}, ${7:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:element-child-geospatial-value-match", "description":"($element-names as xs:QName*, $child-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:element-pair-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$pattern as xs:anyAtomicType})", "trigger":"cts:element-pair-geospatial-value-match", "description":"($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType)"}, {"content":"cts:element-pair-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$pattern as xs:anyAtomicType}, ${5:\\$options as xs:string*})", "trigger":"cts:element-pair-geospatial-value-match", "description":"($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*)"}, {"content":"cts:element-pair-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$pattern as xs:anyAtomicType}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?})", "trigger":"cts:element-pair-geospatial-value-match", "description":"($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:element-pair-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$pattern as xs:anyAtomicType}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$quality-weight as xs:double?})", "trigger":"cts:element-pair-geospatial-value-match", "description":"($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:element-pair-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$pattern as xs:anyAtomicType}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$quality-weight as xs:double?}, ${8:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:element-pair-geospatial-value-match", "description":"($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:element-attribute-pair-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$pattern as xs:anyAtomicType})", "trigger":"cts:element-attribute-pair-geospatial-value-match", "description":"($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType)"}, {"content":"cts:element-attribute-pair-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$pattern as xs:anyAtomicType}, ${5:\\$options as xs:string*})", "trigger":"cts:element-attribute-pair-geospatial-value-match", "description":"($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*)"}, {"content":"cts:element-attribute-pair-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$pattern as xs:anyAtomicType}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?})", "trigger":"cts:element-attribute-pair-geospatial-value-match", "description":"($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:element-attribute-pair-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$pattern as xs:anyAtomicType}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$quality-weight as xs:double?})", "trigger":"cts:element-attribute-pair-geospatial-value-match", "description":"($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:element-attribute-pair-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$pattern as xs:anyAtomicType}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$quality-weight as xs:double?}, ${8:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:element-attribute-pair-geospatial-value-match", "description":"($element-names as xs:QName*, $latitude-names as xs:QName*, $longitude-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:element-value-geospatial-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$geo-element-name as xs:QName})", "trigger":"cts:element-value-geospatial-co-occurrences", "description":"($element-name-1 as xs:QName, $geo-element-name as xs:QName)"}, {"content":"cts:element-value-geospatial-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$geo-element-name as xs:QName}, ${3:\\$coord-child-name-1 as xs:QName?})", "trigger":"cts:element-value-geospatial-co-occurrences", "description":"($element-name-1 as xs:QName, $geo-element-name as xs:QName, $coord-child-name-1 as xs:QName?)"}, {"content":"cts:element-value-geospatial-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$geo-element-name as xs:QName}, ${3:\\$coord-child-name-1 as xs:QName?}, ${4:\\$coord-child-name-2 as xs:QName?})", "trigger":"cts:element-value-geospatial-co-occurrences", "description":"($element-name-1 as xs:QName, $geo-element-name as xs:QName, $coord-child-name-1 as xs:QName?, $coord-child-name-2 as xs:QName?)"}, {"content":"cts:element-value-geospatial-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$geo-element-name as xs:QName}, ${3:\\$coord-child-name-1 as xs:QName?}, ${4:\\$coord-child-name-2 as xs:QName?}, ${5:\\$options as xs:string*})", "trigger":"cts:element-value-geospatial-co-occurrences", "description":"($element-name-1 as xs:QName, $geo-element-name as xs:QName, $coord-child-name-1 as xs:QName?, $coord-child-name-2 as xs:QName?, $options as xs:string*)"}, {"content":"cts:element-value-geospatial-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$geo-element-name as xs:QName}, ${3:\\$coord-child-name-1 as xs:QName?}, ${4:\\$coord-child-name-2 as xs:QName?}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?})", "trigger":"cts:element-value-geospatial-co-occurrences", "description":"($element-name-1 as xs:QName, $geo-element-name as xs:QName, $coord-child-name-1 as xs:QName?, $coord-child-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:element-value-geospatial-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$geo-element-name as xs:QName}, ${3:\\$coord-child-name-1 as xs:QName?}, ${4:\\$coord-child-name-2 as xs:QName?}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$quality-weight as xs:double?})", "trigger":"cts:element-value-geospatial-co-occurrences", "description":"($element-name-1 as xs:QName, $geo-element-name as xs:QName, $coord-child-name-1 as xs:QName?, $coord-child-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:element-value-geospatial-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$geo-element-name as xs:QName}, ${3:\\$coord-child-name-1 as xs:QName?}, ${4:\\$coord-child-name-2 as xs:QName?}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$quality-weight as xs:double?}, ${8:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:element-value-geospatial-co-occurrences", "description":"($element-name-1 as xs:QName, $geo-element-name as xs:QName, $coord-child-name-1 as xs:QName?, $coord-child-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:element-attribute-value-geospatial-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$attribute-name-1 as xs:QName?}, ${3:\\$geo-element-name as xs:QName})", "trigger":"cts:element-attribute-value-geospatial-co-occurrences", "description":"($element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $geo-element-name as xs:QName)"}, {"content":"cts:element-attribute-value-geospatial-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$attribute-name-1 as xs:QName?}, ${3:\\$geo-element-name as xs:QName}, ${4:\\$child-name-1 as xs:QName?})", "trigger":"cts:element-attribute-value-geospatial-co-occurrences", "description":"($element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $geo-element-name as xs:QName, $child-name-1 as xs:QName?)"}, {"content":"cts:element-attribute-value-geospatial-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$attribute-name-1 as xs:QName?}, ${3:\\$geo-element-name as xs:QName}, ${4:\\$child-name-1 as xs:QName?}, ${5:\\$child-name-2 as xs:QName?})", "trigger":"cts:element-attribute-value-geospatial-co-occurrences", "description":"($element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $geo-element-name as xs:QName, $child-name-1 as xs:QName?, $child-name-2 as xs:QName?)"}, {"content":"cts:element-attribute-value-geospatial-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$attribute-name-1 as xs:QName?}, ${3:\\$geo-element-name as xs:QName}, ${4:\\$child-name-1 as xs:QName?}, ${5:\\$child-name-2 as xs:QName?}, ${6:\\$options as xs:string*})", "trigger":"cts:element-attribute-value-geospatial-co-occurrences", "description":"($element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $geo-element-name as xs:QName, $child-name-1 as xs:QName?, $child-name-2 as xs:QName?, $options as xs:string*)"}, {"content":"cts:element-attribute-value-geospatial-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$attribute-name-1 as xs:QName?}, ${3:\\$geo-element-name as xs:QName}, ${4:\\$child-name-1 as xs:QName?}, ${5:\\$child-name-2 as xs:QName?}, ${6:\\$options as xs:string*}, ${7:\\$query as cts:query?})", "trigger":"cts:element-attribute-value-geospatial-co-occurrences", "description":"($element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $geo-element-name as xs:QName, $child-name-1 as xs:QName?, $child-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:element-attribute-value-geospatial-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$attribute-name-1 as xs:QName?}, ${3:\\$geo-element-name as xs:QName}, ${4:\\$child-name-1 as xs:QName?}, ${5:\\$child-name-2 as xs:QName?}, ${6:\\$options as xs:string*}, ${7:\\$query as cts:query?}, ${8:\\$quality-weight as xs:double?})", "trigger":"cts:element-attribute-value-geospatial-co-occurrences", "description":"($element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $geo-element-name as xs:QName, $child-name-1 as xs:QName?, $child-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:element-attribute-value-geospatial-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$attribute-name-1 as xs:QName?}, ${3:\\$geo-element-name as xs:QName}, ${4:\\$child-name-1 as xs:QName?}, ${5:\\$child-name-2 as xs:QName?}, ${6:\\$options as xs:string*}, ${7:\\$query as cts:query?}, ${8:\\$quality-weight as xs:double?}, ${9:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:element-attribute-value-geospatial-co-occurrences", "description":"($element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $geo-element-name as xs:QName, $child-name-1 as xs:QName?, $child-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:geospatial-co-occurrences(${1:\\$geo-element-name-1 as xs:QName}, ${2:\\$child-1-name-1 as xs:QName?}, ${3:\\$child-1-name-2 as xs:QName?}, ${4:\\$geo-element-name-2 as xs:QName})", "trigger":"cts:geospatial-co-occurrences", "description":"($geo-element-name-1 as xs:QName, $child-1-name-1 as xs:QName?, $child-1-name-2 as xs:QName?, $geo-element-name-2 as xs:QName)"}, {"content":"cts:geospatial-co-occurrences(${1:\\$geo-element-name-1 as xs:QName}, ${2:\\$child-1-name-1 as xs:QName?}, ${3:\\$child-1-name-2 as xs:QName?}, ${4:\\$geo-element-name-2 as xs:QName}, ${5:\\$child-2-name-1 as xs:QName?})", "trigger":"cts:geospatial-co-occurrences", "description":"($geo-element-name-1 as xs:QName, $child-1-name-1 as xs:QName?, $child-1-name-2 as xs:QName?, $geo-element-name-2 as xs:QName, $child-2-name-1 as xs:QName?)"}, {"content":"cts:geospatial-co-occurrences(${1:\\$geo-element-name-1 as xs:QName}, ${2:\\$child-1-name-1 as xs:QName?}, ${3:\\$child-1-name-2 as xs:QName?}, ${4:\\$geo-element-name-2 as xs:QName}, ${5:\\$child-2-name-1 as xs:QName?}, ${6:\\$child-2-name-2 as xs:QName?})", "trigger":"cts:geospatial-co-occurrences", "description":"($geo-element-name-1 as xs:QName, $child-1-name-1 as xs:QName?, $child-1-name-2 as xs:QName?, $geo-element-name-2 as xs:QName, $child-2-name-1 as xs:QName?, $child-2-name-2 as xs:QName?)"}, {"content":"cts:geospatial-co-occurrences(${1:\\$geo-element-name-1 as xs:QName}, ${2:\\$child-1-name-1 as xs:QName?}, ${3:\\$child-1-name-2 as xs:QName?}, ${4:\\$geo-element-name-2 as xs:QName}, ${5:\\$child-2-name-1 as xs:QName?}, ${6:\\$child-2-name-2 as xs:QName?}, ${7:\\$options as xs:string*})", "trigger":"cts:geospatial-co-occurrences", "description":"($geo-element-name-1 as xs:QName, $child-1-name-1 as xs:QName?, $child-1-name-2 as xs:QName?, $geo-element-name-2 as xs:QName, $child-2-name-1 as xs:QName?, $child-2-name-2 as xs:QName?, $options as xs:string*)"}, {"content":"cts:geospatial-co-occurrences(${1:\\$geo-element-name-1 as xs:QName}, ${2:\\$child-1-name-1 as xs:QName?}, ${3:\\$child-1-name-2 as xs:QName?}, ${4:\\$geo-element-name-2 as xs:QName}, ${5:\\$child-2-name-1 as xs:QName?}, ${6:\\$child-2-name-2 as xs:QName?}, ${7:\\$options as xs:string*}, ${8:\\$query as cts:query?})", "trigger":"cts:geospatial-co-occurrences", "description":"($geo-element-name-1 as xs:QName, $child-1-name-1 as xs:QName?, $child-1-name-2 as xs:QName?, $geo-element-name-2 as xs:QName, $child-2-name-1 as xs:QName?, $child-2-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:geospatial-co-occurrences(${1:\\$geo-element-name-1 as xs:QName}, ${2:\\$child-1-name-1 as xs:QName?}, ${3:\\$child-1-name-2 as xs:QName?}, ${4:\\$geo-element-name-2 as xs:QName}, ${5:\\$child-2-name-1 as xs:QName?}, ${6:\\$child-2-name-2 as xs:QName?}, ${7:\\$options as xs:string*}, ${8:\\$query as cts:query?}, ${9:\\$quality-weight as xs:double?})", "trigger":"cts:geospatial-co-occurrences", "description":"($geo-element-name-1 as xs:QName, $child-1-name-1 as xs:QName?, $child-1-name-2 as xs:QName?, $geo-element-name-2 as xs:QName, $child-2-name-1 as xs:QName?, $child-2-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:geospatial-co-occurrences(${1:\\$geo-element-name-1 as xs:QName}, ${2:\\$child-1-name-1 as xs:QName?}, ${3:\\$child-1-name-2 as xs:QName?}, ${4:\\$geo-element-name-2 as xs:QName}, ${5:\\$child-2-name-1 as xs:QName?}, ${6:\\$child-2-name-2 as xs:QName?}, ${7:\\$options as xs:string*}, ${8:\\$query as cts:query?}, ${9:\\$quality-weight as xs:double?}, ${10:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:geospatial-co-occurrences", "description":"($geo-element-name-1 as xs:QName, $child-1-name-1 as xs:QName?, $child-1-name-2 as xs:QName?, $geo-element-name-2 as xs:QName, $child-2-name-1 as xs:QName?, $child-2-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:geospatial-region-query(${1:\\$geospatial-region-reference as cts:reference*}, ${2:\\$operation as xs:string}, ${3:\\$regions as cts:region*})", "trigger":"cts:geospatial-region-query", "description":"($geospatial-region-reference as cts:reference*, $operation as xs:string, $regions as cts:region*)"}, {"content":"cts:geospatial-region-query(${1:\\$geospatial-region-reference as cts:reference*}, ${2:\\$operation as xs:string}, ${3:\\$regions as cts:region*}, ${4:\\$options as xs:string*})", "trigger":"cts:geospatial-region-query", "description":"($geospatial-region-reference as cts:reference*, $operation as xs:string, $regions as cts:region*, $options as xs:string*)"}, {"content":"cts:geospatial-region-query(${1:\\$geospatial-region-reference as cts:reference*}, ${2:\\$operation as xs:string}, ${3:\\$regions as cts:region*}, ${4:\\$options as xs:string*}, ${5:\\$weight as xs:double?})", "trigger":"cts:geospatial-region-query", "description":"($geospatial-region-reference as cts:reference*, $operation as xs:string, $regions as cts:region*, $options as xs:string*, $weight as xs:double?)"}, {"content":"cts:distance()", "trigger":"cts:distance", "description":"()"}, {"content":"geo:distance(${1:\\$p1 as cts:point}, ${2:\\$p2 as cts:point})", "trigger":"geo:distance", "description":"($p1 as cts:point, $p2 as cts:point)"}, {"content":"geo:distance(${1:\\$p1 as cts:point}, ${2:\\$p2 as cts:point}, ${3:\\$options as xs:string*})", "trigger":"geo:distance", "description":"($p1 as cts:point, $p2 as cts:point, $options as xs:string*)"}, {"content":"cts:shortest-distance()", "trigger":"cts:shortest-distance", "description":"()"}, {"content":"geo:shortest-distance(${1:\\$p1 as cts:point}, ${2:\\$region as cts:region+})", "trigger":"geo:shortest-distance", "description":"($p1 as cts:point, $region as cts:region+)"}, {"content":"geo:shortest-distance(${1:\\$p1 as cts:point}, ${2:\\$region as cts:region+}, ${3:\\$options as xs:string*})", "trigger":"geo:shortest-distance", "description":"($p1 as cts:point, $region as cts:region+, $options as xs:string*)"}, {"content":"cts:bearing()", "trigger":"cts:bearing", "description":"()"}, {"content":"geo:bearing(${1:\\$p1 as cts:point}, ${2:\\$p2 as cts:point})", "trigger":"geo:bearing", "description":"($p1 as cts:point, $p2 as cts:point)"}, {"content":"geo:bearing(${1:\\$p1 as cts:point}, ${2:\\$p2 as cts:point}, ${3:\\$options as xs:string*})", "trigger":"geo:bearing", "description":"($p1 as cts:point, $p2 as cts:point, $options as xs:string*)"}, {"content":"cts:destination()", "trigger":"cts:destination", "description":"()"}, {"content":"geo:destination(${1:\\$p as cts:point}, ${2:\\$bearing as xs:double}, ${3:\\$distance as xs:double})", "trigger":"geo:destination", "description":"($p as cts:point, $bearing as xs:double, $distance as xs:double)"}, {"content":"geo:destination(${1:\\$p as cts:point}, ${2:\\$bearing as xs:double}, ${3:\\$distance as xs:double}, ${4:\\$options as xs:string*})", "trigger":"geo:destination", "description":"($p as cts:point, $bearing as xs:double, $distance as xs:double, $options as xs:string*)"}, {"content":"cts:arc-intersection()", "trigger":"cts:arc-intersection", "description":"()"}, {"content":"geo:arc-intersection(${1:\\$p1 as cts:point}, ${2:\\$p2 as cts:point}, ${3:\\$q1 as cts:point}, ${4:\\$q2 as cts:point})", "trigger":"geo:arc-intersection", "description":"($p1 as cts:point, $p2 as cts:point, $q1 as cts:point, $q2 as cts:point)"}, {"content":"geo:arc-intersection(${1:\\$p1 as cts:point}, ${2:\\$p2 as cts:point}, ${3:\\$q1 as cts:point}, ${4:\\$q2 as cts:point}, ${5:\\$options as xs:string*})", "trigger":"geo:arc-intersection", "description":"($p1 as cts:point, $p2 as cts:point, $q1 as cts:point, $q2 as cts:point, $options as xs:string*)"}, {"content":"cts:box-intersects()", "trigger":"cts:box-intersects", "description":"()"}, {"content":"geo:box-intersects(${1:\\$box as cts:box}, ${2:\\$region as cts:region*})", "trigger":"geo:box-intersects", "description":"($box as cts:box, $region as cts:region*)"}, {"content":"geo:box-intersects(${1:\\$box as cts:box}, ${2:\\$region as cts:region*}, ${3:\\$options as xs:string*})", "trigger":"geo:box-intersects", "description":"($box as cts:box, $region as cts:region*, $options as xs:string*)"}, {"content":"cts:circle-intersects()", "trigger":"cts:circle-intersects", "description":"()"}, {"content":"geo:circle-intersects(${1:\\$circle as cts:circle}, ${2:\\$region as cts:region*})", "trigger":"geo:circle-intersects", "description":"($circle as cts:circle, $region as cts:region*)"}, {"content":"geo:circle-intersects(${1:\\$circle as cts:circle}, ${2:\\$region as cts:region*}, ${3:\\$options as xs:string*})", "trigger":"geo:circle-intersects", "description":"($circle as cts:circle, $region as cts:region*, $options as xs:string*)"}, {"content":"cts:polygon-intersects()", "trigger":"cts:polygon-intersects", "description":"()"}, {"content":"geo:polygon-intersects(${1:\\$polygon as cts:polygon}, ${2:\\$region as cts:region*})", "trigger":"geo:polygon-intersects", "description":"($polygon as cts:polygon, $region as cts:region*)"}, {"content":"geo:polygon-intersects(${1:\\$polygon as cts:polygon}, ${2:\\$region as cts:region*}, ${3:\\$options as xs:string*})", "trigger":"geo:polygon-intersects", "description":"($polygon as cts:polygon, $region as cts:region*, $options as xs:string*)"}, {"content":"cts:polygon-contains()", "trigger":"cts:polygon-contains", "description":"()"}, {"content":"geo:polygon-contains(${1:\\$polygon as cts:polygon}, ${2:\\$region as cts:region*})", "trigger":"geo:polygon-contains", "description":"($polygon as cts:polygon, $region as cts:region*)"}, {"content":"geo:polygon-contains(${1:\\$polygon as cts:polygon}, ${2:\\$region as cts:region*}, ${3:\\$options as xs:string*})", "trigger":"geo:polygon-contains", "description":"($polygon as cts:polygon, $region as cts:region*, $options as xs:string*)"}, {"content":"cts:complex-polygon-intersects()", "trigger":"cts:complex-polygon-intersects", "description":"()"}, {"content":"geo:complex-polygon-intersects(${1:\\$complex-polygon as cts:complex-polygon}, ${2:\\$region as cts:region*})", "trigger":"geo:complex-polygon-intersects", "description":"($complex-polygon as cts:complex-polygon, $region as cts:region*)"}, {"content":"geo:complex-polygon-intersects(${1:\\$complex-polygon as cts:complex-polygon}, ${2:\\$region as cts:region*}, ${3:\\$options as xs:string*})", "trigger":"geo:complex-polygon-intersects", "description":"($complex-polygon as cts:complex-polygon, $region as cts:region*, $options as xs:string*)"}, {"content":"cts:complex-polygon-contains()", "trigger":"cts:complex-polygon-contains", "description":"()"}, {"content":"geo:complex-polygon-contains(${1:\\$complex-polygon as cts:complex-polygon}, ${2:\\$region as cts:region*})", "trigger":"geo:complex-polygon-contains", "description":"($complex-polygon as cts:complex-polygon, $region as cts:region*)"}, {"content":"geo:complex-polygon-contains(${1:\\$complex-polygon as cts:complex-polygon}, ${2:\\$region as cts:region*}, ${3:\\$options as xs:string*})", "trigger":"geo:complex-polygon-contains", "description":"($complex-polygon as cts:complex-polygon, $region as cts:region*, $options as xs:string*)"}, {"content":"cts:region-intersects()", "trigger":"cts:region-intersects", "description":"()"}, {"content":"geo:region-intersects(${1:\\$target as cts:region}, ${2:\\$region as cts:region*})", "trigger":"geo:region-intersects", "description":"($target as cts:region, $region as cts:region*)"}, {"content":"geo:region-intersects(${1:\\$target as cts:region}, ${2:\\$region as cts:region*}, ${3:\\$options as xs:string*})", "trigger":"geo:region-intersects", "description":"($target as cts:region, $region as cts:region*, $options as xs:string*)"}, {"content":"cts:region-contains()", "trigger":"cts:region-contains", "description":"()"}, {"content":"geo:region-contains(${1:\\$region as cts:region}, ${2:\\$region as cts:region*})", "trigger":"geo:region-contains", "description":"($region as cts:region, $region as cts:region*)"}, {"content":"geo:region-contains(${1:\\$region as cts:region}, ${2:\\$region as cts:region*}, ${3:\\$options as xs:string*})", "trigger":"geo:region-contains", "description":"($region as cts:region, $region as cts:region*, $options as xs:string*)"}, {"content":"cts:bounding-boxes()", "trigger":"cts:bounding-boxes", "description":"()"}, {"content":"geo:bounding-boxes(${1:\\$region as cts:region})", "trigger":"geo:bounding-boxes", "description":"($region as cts:region)"}, {"content":"geo:bounding-boxes(${1:\\$region as cts:region}, ${2:\\$options as xs:string*})", "trigger":"geo:bounding-boxes", "description":"($region as cts:region, $options as xs:string*)"}, {"content":"cts:parse-wkt()", "trigger":"cts:parse-wkt", "description":"()"}, {"content":"geo:parse-wkt(${1:\\$wkt as xs:string*})", "trigger":"geo:parse-wkt", "description":"($wkt as xs:string*)"}, {"content":"cts:to-wkt()", "trigger":"cts:to-wkt", "description":"()"}, {"content":"geo:to-wkt(${1:\\$wkt as cts:region*})", "trigger":"geo:to-wkt", "description":"($wkt as cts:region*)"}, {"content":"geo:validate-wkt(${1:\\$wkt as xs:string})", "trigger":"geo:validate-wkt", "description":"($wkt as xs:string)"}, {"content":"geo:parse-wkb(${1:\\$wkb as binary()})", "trigger":"geo:parse-wkb", "description":"($wkb as binary())"}, {"content":"geo:to-wkb(${1:\\$wkb as cts:region*})", "trigger":"geo:to-wkb", "description":"($wkb as cts:region*)"}, {"content":"geo:validate-wkb(${1:\\$wkb as binary()})", "trigger":"geo:validate-wkb", "description":"($wkb as binary())"}, {"content":"cts:geospatial-element-reference(${1:\\$element as xs:QName})", "trigger":"cts:geospatial-element-reference", "description":"($element as xs:QName)"}, {"content":"cts:geospatial-element-reference(${1:\\$element as xs:QName}, ${2:\\$options as xs:string*})", "trigger":"cts:geospatial-element-reference", "description":"($element as xs:QName, $options as xs:string*)"}, {"content":"cts:geospatial-json-property-reference(${1:\\$property as xs:string})", "trigger":"cts:geospatial-json-property-reference", "description":"($property as xs:string)"}, {"content":"cts:geospatial-json-property-reference(${1:\\$property as xs:string}, ${2:\\$options as xs:string*})", "trigger":"cts:geospatial-json-property-reference", "description":"($property as xs:string, $options as xs:string*)"}, {"content":"cts:geospatial-element-child-reference(${1:\\$element as xs:QName}, ${2:\\$child as xs:QName})", "trigger":"cts:geospatial-element-child-reference", "description":"($element as xs:QName, $child as xs:QName)"}, {"content":"cts:geospatial-element-child-reference(${1:\\$element as xs:QName}, ${2:\\$child as xs:QName}, ${3:\\$options as xs:string*})", "trigger":"cts:geospatial-element-child-reference", "description":"($element as xs:QName, $child as xs:QName, $options as xs:string*)"}, {"content":"cts:geospatial-json-property-child-reference(${1:\\$property as xs:string}, ${2:\\$child as xs:string})", "trigger":"cts:geospatial-json-property-child-reference", "description":"($property as xs:string, $child as xs:string)"}, {"content":"cts:geospatial-json-property-child-reference(${1:\\$property as xs:string}, ${2:\\$child as xs:string}, ${3:\\$options as xs:string*})", "trigger":"cts:geospatial-json-property-child-reference", "description":"($property as xs:string, $child as xs:string, $options as xs:string*)"}, {"content":"cts:geospatial-element-pair-reference(${1:\\$element as xs:QName}, ${2:\\$lat as xs:QName}, ${3:\\$long as xs:QName})", "trigger":"cts:geospatial-element-pair-reference", "description":"($element as xs:QName, $lat as xs:QName, $long as xs:QName)"}, {"content":"cts:geospatial-element-pair-reference(${1:\\$element as xs:QName}, ${2:\\$lat as xs:QName}, ${3:\\$long as xs:QName}, ${4:\\$options as xs:string*})", "trigger":"cts:geospatial-element-pair-reference", "description":"($element as xs:QName, $lat as xs:QName, $long as xs:QName, $options as xs:string*)"}, {"content":"cts:geospatial-json-property-pair-reference(${1:\\$property as xs:string}, ${2:\\$lat as xs:string}, ${3:\\$long as xs:string})", "trigger":"cts:geospatial-json-property-pair-reference", "description":"($property as xs:string, $lat as xs:string, $long as xs:string)"}, {"content":"cts:geospatial-json-property-pair-reference(${1:\\$property as xs:string}, ${2:\\$lat as xs:string}, ${3:\\$long as xs:string}, ${4:\\$options as xs:string*})", "trigger":"cts:geospatial-json-property-pair-reference", "description":"($property as xs:string, $lat as xs:string, $long as xs:string, $options as xs:string*)"}, {"content":"cts:geospatial-attribute-pair-reference(${1:\\$element as xs:QName}, ${2:\\$lat as xs:QName}, ${3:\\$long as xs:QName})", "trigger":"cts:geospatial-attribute-pair-reference", "description":"($element as xs:QName, $lat as xs:QName, $long as xs:QName)"}, {"content":"cts:geospatial-attribute-pair-reference(${1:\\$element as xs:QName}, ${2:\\$lat as xs:QName}, ${3:\\$long as xs:QName}, ${4:\\$options as xs:string*})", "trigger":"cts:geospatial-attribute-pair-reference", "description":"($element as xs:QName, $lat as xs:QName, $long as xs:QName, $options as xs:string*)"}, {"content":"cts:geospatial-path-reference(${1:\\$path-expression as xs:string})", "trigger":"cts:geospatial-path-reference", "description":"($path-expression as xs:string)"}, {"content":"cts:geospatial-path-reference(${1:\\$path-expression as xs:string}, ${2:\\$options as xs:string*})", "trigger":"cts:geospatial-path-reference", "description":"($path-expression as xs:string, $options as xs:string*)"}, {"content":"cts:geospatial-path-reference(${1:\\$path-expression as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$map as map:map})", "trigger":"cts:geospatial-path-reference", "description":"($path-expression as xs:string, $options as xs:string*, $map as map:map)"}, {"content":"cts:geospatial-region-path-reference(${1:\\$path-expression as xs:string})", "trigger":"cts:geospatial-region-path-reference", "description":"($path-expression as xs:string)"}, {"content":"cts:geospatial-region-path-reference(${1:\\$path-expression as xs:string}, ${2:\\$options as xs:string*})", "trigger":"cts:geospatial-region-path-reference", "description":"($path-expression as xs:string, $options as xs:string*)"}, {"content":"cts:geospatial-region-path-reference(${1:\\$path-expression as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$namespaces as map:map})", "trigger":"cts:geospatial-region-path-reference", "description":"($path-expression as xs:string, $options as xs:string*, $namespaces as map:map)"}, {"content":"cts:approx-center()", "trigger":"cts:approx-center", "description":"()"}, {"content":"geo:approx-center(${1:\\$region as cts:region})", "trigger":"geo:approx-center", "description":"($region as cts:region)"}, {"content":"geo:approx-center(${1:\\$region as cts:region}, ${2:\\$options as xs:string*})", "trigger":"geo:approx-center", "description":"($region as cts:region, $options as xs:string*)"}, {"content":"geo:coordinate-system-canonical(${1:\\$name as xs:string})", "trigger":"geo:coordinate-system-canonical", "description":"($name as xs:string)"}, {"content":"geo:coordinate-system-canonical(${1:\\$name as xs:string}, ${2:\\$precision as xs:string})", "trigger":"geo:coordinate-system-canonical", "description":"($name as xs:string, $precision as xs:string)"}, {"content":"geo:default-coordinate-system()", "trigger":"geo:default-coordinate-system", "description":"()"}, {"content":"geo:region-affine-transform(${1:\\$region as cts:region}, ${2:\\$transform as map:map*})", "trigger":"geo:region-affine-transform", "description":"($region as cts:region, $transform as map:map*)"}, {"content":"geo:region-affine-transform(${1:\\$region as cts:region}, ${2:\\$transform as map:map*}, ${3:\\$options as xs:string*})", "trigger":"geo:region-affine-transform", "description":"($region as cts:region, $transform as map:map*, $options as xs:string*)"}, {"content":"geo:count-vertices(${1:\\$region as cts:region})", "trigger":"geo:count-vertices", "description":"($region as cts:region)"}, {"content":"geo:count-distinct-vertices(${1:\\$region as cts:region})", "trigger":"geo:count-distinct-vertices", "description":"($region as cts:region)"}, {"content":"geo:count-distinct-vertices(${1:\\$region as cts:region}, ${2:\\$options as xs:string*})", "trigger":"geo:count-distinct-vertices", "description":"($region as cts:region, $options as xs:string*)"}, {"content":"geo:region-clean(${1:\\$region as cts:region})", "trigger":"geo:region-clean", "description":"($region as cts:region)"}, {"content":"geo:region-clean(${1:\\$region as cts:region}, ${2:\\$options as xs:string*})", "trigger":"geo:region-clean", "description":"($region as cts:region, $options as xs:string*)"}, {"content":"geo:interior-point(${1:\\$region as cts:region})", "trigger":"geo:interior-point", "description":"($region as cts:region)"}, {"content":"geo:interior-point(${1:\\$region as cts:region}, ${2:\\$options as xs:string*})", "trigger":"geo:interior-point", "description":"($region as cts:region, $options as xs:string*)"}, {"content":"geo:distance-convert(${1:\\$distance as xs:double}, ${2:\\$unit1 as xs:string}, ${3:\\$unit2 as xs:string})", "trigger":"geo:distance-convert", "description":"($distance as xs:double, $unit1 as xs:string, $unit2 as xs:string)"}, {"content":"geo:remove-duplicate-vertices(${1:\\$region as cts:region})", "trigger":"geo:remove-duplicate-vertices", "description":"($region as cts:region)"}, {"content":"geo:remove-duplicate-vertices(${1:\\$region as cts:region}, ${2:\\$options as xs:string*})", "trigger":"geo:remove-duplicate-vertices", "description":"($region as cts:region, $options as xs:string*)"}, {"content":"geo:region-approximate(${1:\\$region as cts:region}, ${2:\\$threshold as xs:double})", "trigger":"geo:region-approximate", "description":"($region as cts:region, $threshold as xs:double)"}, {"content":"geo:region-approximate(${1:\\$region as cts:region}, ${2:\\$threshold as xs:double}, ${3:\\$options as xs:string*})", "trigger":"geo:region-approximate", "description":"($region as cts:region, $threshold as xs:double, $options as xs:string*)"}, {"content":"geo:circle-polygon(${1:\\$circle as cts:circle}, ${2:\\$arc-tolerance as xs:double})", "trigger":"geo:circle-polygon", "description":"($circle as cts:circle, $arc-tolerance as xs:double)"}, {"content":"geo:circle-polygon(${1:\\$circle as cts:circle}, ${2:\\$arc-tolerance as xs:double}, ${3:\\$options as xs:string*})", "trigger":"geo:circle-polygon", "description":"($circle as cts:circle, $arc-tolerance as xs:double, $options as xs:string*)"}, {"content":"geo:ellipse-polygon(${1:\\$center as cts:point}, ${2:\\$semi-major-axis as xs:double}, ${3:\\$semi-minor-axis as xs:double}, ${4:\\$azimuth as xs:double}, ${5:\\$arc-tolerance as xs:double})", "trigger":"geo:ellipse-polygon", "description":"($center as cts:point, $semi-major-axis as xs:double, $semi-minor-axis as xs:double, $azimuth as xs:double, $arc-tolerance as xs:double)"}, {"content":"geo:ellipse-polygon(${1:\\$center as cts:point}, ${2:\\$semi-major-axis as xs:double}, ${3:\\$semi-minor-axis as xs:double}, ${4:\\$azimuth as xs:double}, ${5:\\$arc-tolerance as xs:double}, ${6:\\$options as xs:string*})", "trigger":"geo:ellipse-polygon", "description":"($center as cts:point, $semi-major-axis as xs:double, $semi-minor-axis as xs:double, $azimuth as xs:double, $arc-tolerance as xs:double, $options as xs:string*)"}, {"content":"geo:geohash-encode(${1:\\$region as cts:region})", "trigger":"geo:geohash-encode", "description":"($region as cts:region)"}, {"content":"geo:geohash-encode(${1:\\$region as cts:region}, ${2:\\$geohash-precision as xs:integer?})", "trigger":"geo:geohash-encode", "description":"($region as cts:region, $geohash-precision as xs:integer?)"}, {"content":"geo:geohash-encode(${1:\\$region as cts:region}, ${2:\\$geohash-precision as xs:integer?}, ${3:\\$options as xs:string*})", "trigger":"geo:geohash-encode", "description":"($region as cts:region, $geohash-precision as xs:integer?, $options as xs:string*)"}, {"content":"geo:geohash-decode(${1:\\$hash as xs:string})", "trigger":"geo:geohash-decode", "description":"($hash as xs:string)"}, {"content":"geo:geohash-decode-point(${1:\\$hash as xs:string})", "trigger":"geo:geohash-decode-point", "description":"($hash as xs:string)"}, {"content":"geo:geohash-neighbors(${1:\\$hash as xs:string})", "trigger":"geo:geohash-neighbors", "description":"($hash as xs:string)"}, {"content":"geo:geohash-precision-dimensions(${1:\\$precision as xs:integer})", "trigger":"geo:geohash-precision-dimensions", "description":"($precision as xs:integer)"}, {"content":"geo:geohash-subhashes(${1:\\$hash as xs:string}, ${2:\\$which as xs:string})", "trigger":"geo:geohash-subhashes", "description":"($hash as xs:string, $which as xs:string)"}, {"content":"cts:match-regions(${1:\\$range-indexes as cts:reference*}, ${2:\\$operation as xs:string}, ${3:\\$regions as cts:region+})", "trigger":"cts:match-regions", "description":"($range-indexes as cts:reference*, $operation as xs:string, $regions as cts:region+)"}, {"content":"cts:match-regions(${1:\\$range-indexes as cts:reference*}, ${2:\\$operation as xs:string}, ${3:\\$regions as cts:region+}, ${4:\\$options as xs:string*})", "trigger":"cts:match-regions", "description":"($range-indexes as cts:reference*, $operation as xs:string, $regions as cts:region+, $options as xs:string*)"}, {"content":"cts:match-regions(${1:\\$range-indexes as cts:reference*}, ${2:\\$operation as xs:string}, ${3:\\$regions as cts:region+}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?})", "trigger":"cts:match-regions", "description":"($range-indexes as cts:reference*, $operation as xs:string, $regions as cts:region+, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:match-regions(${1:\\$range-indexes as cts:reference*}, ${2:\\$operation as xs:string}, ${3:\\$regions as cts:region+}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:match-regions", "description":"($range-indexes as cts:reference*, $operation as xs:string, $regions as cts:region+, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*)"}, {"content":"geogml:point(${1:\\$point as element()})", "trigger":"geogml:point", "description":"($point as element())"}, {"content":"geogml:box(${1:\\$box as element()})", "trigger":"geogml:box", "description":"($box as element())"}, {"content":"geogml:circle(${1:\\$radius as xs:double}, ${2:\\$center as element()})", "trigger":"geogml:circle", "description":"($radius as xs:double, $center as element())"}, {"content":"gml:linestring(${1:\\$linestring as element(gml:LineString)})", "trigger":"gml:linestring", "description":"($linestring as element(gml:LineString))"}, {"content":"geogml:interior-polygon(${1:\\$polygon-or-points as element()+})", "trigger":"geogml:interior-polygon", "description":"($polygon-or-points as element()+)"}, {"content":"geogml:complex-polygon(${1:\\$complex-polygon as element()})", "trigger":"geogml:complex-polygon", "description":"($complex-polygon as element())"}, {"content":"gml:complex-polygon(${1:\\$complex-polygon as node()})", "trigger":"gml:complex-polygon", "description":"($complex-polygon as node())"}, {"content":"gml:geospatial-query(${1:\\$regions as cts:region*})", "trigger":"gml:geospatial-query", "description":"($regions as cts:region*)"}, {"content":"gml:geospatial-query(${1:\\$regions as cts:region*}, ${2:\\$options as xs:string*})", "trigger":"gml:geospatial-query", "description":"($regions as cts:region*, $options as xs:string*)"}, {"content":"gml:geospatial-query(${1:\\$regions as cts:region*}, ${2:\\$options as xs:string*}, ${3:\\$weight as xs:double?})", "trigger":"gml:geospatial-query", "description":"($regions as cts:region*, $options as xs:string*, $weight as xs:double?)"}, {"content":"gml:geospatial-query(${1:\\$regions as cts:region*}, ${2:\\$options as xs:string*}, ${3:\\$weight as xs:double?}, ${4:\\$namespace as xs:string?})", "trigger":"gml:geospatial-query", "description":"($regions as cts:region*, $options as xs:string*, $weight as xs:double?, $namespace as xs:string?)"}, {"content":"geogml:geospatial-query-from-elements(${1:\\$regions as element()*})", "trigger":"geogml:geospatial-query-from-elements", "description":"($regions as element()*)"}, {"content":"geogml:geospatial-query-from-elements(${1:\\$regions as element()*}, ${2:\\$options as xs:string*})", "trigger":"geogml:geospatial-query-from-elements", "description":"($regions as element()*, $options as xs:string*)"}, {"content":"geogml:geospatial-query-from-elements(${1:\\$regions as element()*}, ${2:\\$options as xs:string*}, ${3:\\$weight as xs:double?})", "trigger":"geogml:geospatial-query-from-elements", "description":"($regions as element()*, $options as xs:string*, $weight as xs:double?)"}, {"content":"geogml:linestring(${1:\\$linestring as element()})", "trigger":"geogml:linestring", "description":"($linestring as element())"}, {"content":"geogml:parse-gml(${1:\\$gml as element()*})", "trigger":"geogml:parse-gml", "description":"($gml as element()*)"}, {"content":"geogml:to-gml(${1:\\$region as cts:region*})", "trigger":"geogml:to-gml", "description":"($region as cts:region*)"}, {"content":"geogml:to-gml(${1:\\$region as cts:region*}, ${2:\\$gml-namespace as xs:string})", "trigger":"geogml:to-gml", "description":"($region as cts:region*, $gml-namespace as xs:string)"}, {"content":"hadoop:get-splits(${1:\\$nsbindings as xs:string*}, ${2:\\$doc-selector as xs:string}, ${3:\\$query as xs:string})", "trigger":"hadoop:get-splits", "description":"($nsbindings as xs:string*, $doc-selector as xs:string, $query as xs:string)"}, {"content":"xdmp:pdf-convert(${1:\\$doc as node()}, ${2:\\$filename as xs:string})", "trigger":"xdmp:pdf-convert", "description":"($doc as node(), $filename as xs:string)"}, {"content":"xdmp:pdf-convert(${1:\\$doc as node()}, ${2:\\$filename as xs:string}, ${3:\\$options as (element()|map:map)?})", "trigger":"xdmp:pdf-convert", "description":"($doc as node(), $filename as xs:string, $options as (element()|map:map)?)"}, {"content":"info:database-create(${1:\\$database-name as xs:string})", "trigger":"info:database-create", "description":"($database-name as xs:string)"}, {"content":"info:database-create(${1:\\$database-name as xs:string}, ${2:\\$forests-per-host as xs:positiveInteger?})", "trigger":"info:database-create", "description":"($database-name as xs:string, $forests-per-host as xs:positiveInteger?)"}, {"content":"info:database-create(${1:\\$database-name as xs:string}, ${2:\\$forests-per-host as xs:positiveInteger?}, ${3:\\$group as xs:string?})", "trigger":"info:database-create", "description":"($database-name as xs:string, $forests-per-host as xs:positiveInteger?, $group as xs:string?)"}, {"content":"info:database-create(${1:\\$database-name as xs:string}, ${2:\\$forests-per-host as xs:positiveInteger?}, ${3:\\$group as xs:string?}, ${4:\\$data-directory as xs:string?})", "trigger":"info:database-create", "description":"($database-name as xs:string, $forests-per-host as xs:positiveInteger?, $group as xs:string?, $data-directory as xs:string?)"}, {"content":"info:database-create(${1:\\$database-name as xs:string}, ${2:\\$forests-per-host as xs:positiveInteger?}, ${3:\\$group as xs:string?}, ${4:\\$data-directory as xs:string?}, ${5:\\$security-db as xs:string?})", "trigger":"info:database-create", "description":"($database-name as xs:string, $forests-per-host as xs:positiveInteger?, $group as xs:string?, $data-directory as xs:string?, $security-db as xs:string?)"}, {"content":"info:database-create(${1:\\$database-name as xs:string}, ${2:\\$forests-per-host as xs:positiveInteger?}, ${3:\\$group as xs:string?}, ${4:\\$data-directory as xs:string?}, ${5:\\$security-db as xs:string?}, ${6:\\$schemas-db as xs:string?})", "trigger":"info:database-create", "description":"($database-name as xs:string, $forests-per-host as xs:positiveInteger?, $group as xs:string?, $data-directory as xs:string?, $security-db as xs:string?, $schemas-db as xs:string?)"}, {"content":"info:database-create(${1:\\$database-name as xs:string}, ${2:\\$forests-per-host as xs:positiveInteger?}, ${3:\\$group as xs:string?}, ${4:\\$data-directory as xs:string?}, ${5:\\$security-db as xs:string?}, ${6:\\$schemas-db as xs:string?}, ${7:\\$triggers-db as xs:string?})", "trigger":"info:database-create", "description":"($database-name as xs:string, $forests-per-host as xs:positiveInteger?, $group as xs:string?, $data-directory as xs:string?, $security-db as xs:string?, $schemas-db as xs:string?, $triggers-db as xs:string?)"}, {"content":"info:database-set-feature(${1:\\$database as xs:string}, ${2:\\$settings as element(info:settings)})", "trigger":"info:database-set-feature", "description":"($database as xs:string, $settings as element(info:settings))"}, {"content":"info:database-get-feature(${1:\\$database as xs:string})", "trigger":"info:database-get-feature", "description":"($database as xs:string)"}, {"content":"info:database-get-feature(${1:\\$database as xs:string}, ${2:\\$preview-settings as element(info:settings)})", "trigger":"info:database-get-feature", "description":"($database as xs:string, $preview-settings as element(info:settings))"}, {"content":"info:database-get-feature(${1:\\$database as xs:string}, ${2:\\$preview-settings as element(info:settings)}, ${3:\\$delta as xs:boolean})", "trigger":"info:database-get-feature", "description":"($database as xs:string, $preview-settings as element(info:settings), $delta as xs:boolean)"}, {"content":"info:load(${1:\\$dir-path as xs:string})", "trigger":"info:load", "description":"($dir-path as xs:string)"}, {"content":"info:load(${1:\\$dir-path as xs:string}, ${2:\\$policy-name as xs:string?})", "trigger":"info:load", "description":"($dir-path as xs:string, $policy-name as xs:string?)"}, {"content":"info:load(${1:\\$dir-path as xs:string}, ${2:\\$policy-name as xs:string?}, ${3:\\$policy-deltas as element(info:options)?})", "trigger":"info:load", "description":"($dir-path as xs:string, $policy-name as xs:string?, $policy-deltas as element(info:options)?)"}, {"content":"info:load(${1:\\$dir-path as xs:string}, ${2:\\$policy-name as xs:string?}, ${3:\\$policy-deltas as element(info:options)?}, ${4:\\$database as xs:string})", "trigger":"info:load", "description":"($dir-path as xs:string, $policy-name as xs:string?, $policy-deltas as element(info:options)?, $database as xs:string)"}, {"content":"info:policy(${1:\\$policy-name as xs:string})", "trigger":"info:policy", "description":"($policy-name as xs:string)"}, {"content":"info:policy-names()", "trigger":"info:policy-names", "description":"()"}, {"content":"info:policy-set()", "trigger":"info:policy-set", "description":"()"}, {"content":"info:policy-set(${1:\\$policy-name as xs:string?})", "trigger":"info:policy-set", "description":"($policy-name as xs:string?)"}, {"content":"info:policy-set(${1:\\$policy-name as xs:string?}, ${2:\\$policy as element(info:options)?})", "trigger":"info:policy-set", "description":"($policy-name as xs:string?, $policy as element(info:options)?)"}, {"content":"info:policy-delete(${1:\\$policy-name as xs:string})", "trigger":"info:policy-delete", "description":"($policy-name as xs:string)"}, {"content":"info:tickets()", "trigger":"info:tickets", "description":"()"}, {"content":"info:tickets(${1:\\$database as xs:string*})", "trigger":"info:tickets", "description":"($database as xs:string*)"}, {"content":"info:tickets(${1:\\$database as xs:string*}, ${2:\\$status as xs:string*})", "trigger":"info:tickets", "description":"($database as xs:string*, $status as xs:string*)"}, {"content":"info:tickets(${1:\\$database as xs:string*}, ${2:\\$status as xs:string*}, ${3:\\$custom-query as schema-element(cts:query)?})", "trigger":"info:tickets", "description":"($database as xs:string*, $status as xs:string*, $custom-query as schema-element(cts:query)?)"}, {"content":"info:ticket-delete(${1:\\$ticket-id as xs:string})", "trigger":"info:ticket-delete", "description":"($ticket-id as xs:string)"}, {"content":"info:ticket(${1:\\$ticket-id as xs:string+})", "trigger":"info:ticket", "description":"($ticket-id as xs:string+)"}, {"content":"info:ticket-errors(${1:\\$ticket-id as xs:string})", "trigger":"info:ticket-errors", "description":"($ticket-id as xs:string)"}, {"content":"info:ticket-errors(${1:\\$ticket-id as xs:string}, ${2:\\$start as xs:unsignedInt?})", "trigger":"info:ticket-errors", "description":"($ticket-id as xs:string, $start as xs:unsignedInt?)"}, {"content":"info:ticket-errors(${1:\\$ticket-id as xs:string}, ${2:\\$start as xs:unsignedInt?}, ${3:\\$page-length as xs:unsignedInt?})", "trigger":"info:ticket-errors", "description":"($ticket-id as xs:string, $start as xs:unsignedInt?, $page-length as xs:unsignedInt?)"}, {"content":"info:ticket-errors(${1:\\$ticket-id as xs:string}, ${2:\\$start as xs:unsignedInt?}, ${3:\\$page-length as xs:unsignedInt?}, ${4:\\$sort-ascending as xs:boolean?})", "trigger":"info:ticket-errors", "description":"($ticket-id as xs:string, $start as xs:unsignedInt?, $page-length as xs:unsignedInt?, $sort-ascending as xs:boolean?)"}, {"content":"info:ticket-errors(${1:\\$ticket-id as xs:string}, ${2:\\$start as xs:unsignedInt?}, ${3:\\$page-length as xs:unsignedInt?}, ${4:\\$sort-ascending as xs:boolean?}, ${5:\\$filter as schema-element(cts:query)?})", "trigger":"info:ticket-errors", "description":"($ticket-id as xs:string, $start as xs:unsignedInt?, $page-length as xs:unsignedInt?, $sort-ascending as xs:boolean?, $filter as schema-element(cts:query)?)"}, {"content":"info:database-delete(${1:\\$database-name as xs:string})", "trigger":"info:database-delete", "description":"($database-name as xs:string)"}, {"content":"info:database-delete(${1:\\$database-name as xs:string}, ${2:\\$delete-data as xs:boolean?})", "trigger":"info:database-delete", "description":"($database-name as xs:string, $delete-data as xs:boolean?)"}, {"content":"info:error-detail(${1:\\$error-id as xs:unsignedLong})", "trigger":"info:error-detail", "description":"($error-id as xs:unsignedLong)"}, {"content":"info:unload(${1:\\$ticket-id as xs:string})", "trigger":"info:unload", "description":"($ticket-id as xs:string)"}, {"content":"info:unload(${1:\\$ticket-id as xs:string}, ${2:\\$database as xs:string*})", "trigger":"info:unload", "description":"($ticket-id as xs:string, $database as xs:string*)"}, {"content":"info:unload(${1:\\$ticket-id as xs:string}, ${2:\\$database as xs:string*}, ${3:\\$batch-size as xs:positiveInteger?})", "trigger":"info:unload", "description":"($ticket-id as xs:string, $database as xs:string*, $batch-size as xs:positiveInteger?)"}, {"content":"info:flow-cancel(${1:\\$flow-id as xs:string})", "trigger":"info:flow-cancel", "description":"($flow-id as xs:string)"}, {"content":"info:flow-policy(${1:\\$flow-id as xs:string})", "trigger":"info:flow-policy", "description":"($flow-id as xs:string)"}, {"content":"info:flow-start(${1:\\$flow-id as xs:string})", "trigger":"info:flow-start", "description":"($flow-id as xs:string)"}, {"content":"info:flow-tickets(${1:\\$flow-id as xs:string})", "trigger":"info:flow-tickets", "description":"($flow-id as xs:string)"}, {"content":"info:flow-tickets(${1:\\$flow-id as xs:string}, ${2:\\$include-inactive as xs:boolean?})", "trigger":"info:flow-tickets", "description":"($flow-id as xs:string, $include-inactive as xs:boolean?)"}, {"content":"info:flow-id(${1:\\$flow-name as xs:string})", "trigger":"info:flow-id", "description":"($flow-name as xs:string)"}, {"content":"infodev:check-options(${1:\\$options as element(info:options)})", "trigger":"infodev:check-options", "description":"($options as element(info:options))"}, {"content":"infodev:ticket-create(${1:\\$annotation as element(info:annotation)?}, ${2:\\$database as xs:string?}, ${3:\\$policy-name as xs:string?}, ${4:\\$policy-deltas as element(info:options)?})", "trigger":"infodev:ticket-create", "description":"($annotation as element(info:annotation)?, $database as xs:string?, $policy-name as xs:string?, $policy-deltas as element(info:options)?)"}, {"content":"infodev:ticket-add-annotation(${1:\\$ticket-id as xs:string}, ${2:\\$annotation as element(info:annotation)})", "trigger":"infodev:ticket-add-annotation", "description":"($ticket-id as xs:string, $annotation as element(info:annotation))"}, {"content":"infodev:ticket-get-status(${1:\\$ticket-id as xs:string})", "trigger":"infodev:ticket-get-status", "description":"($ticket-id as xs:string)"}, {"content":"infodev:ticket-set-status(${1:\\$ticket-id as xs:string}, ${2:\\$status as xs:string})", "trigger":"infodev:ticket-set-status", "description":"($ticket-id as xs:string, $status as xs:string)"}, {"content":"infodev:ticket-set-total-documents(${1:\\$ticket-id as xs:string}, ${2:\\$total-documents as xs:unsignedInt})", "trigger":"infodev:ticket-set-total-documents", "description":"($ticket-id as xs:string, $total-documents as xs:unsignedInt)"}, {"content":"infodev:ticket-set-total-transactions(${1:\\$ticket-id as xs:string}, ${2:\\$total-transactions as xs:unsignedInt})", "trigger":"infodev:ticket-set-total-transactions", "description":"($ticket-id as xs:string, $total-transactions as xs:unsignedInt)"}, {"content":"infodev:file-filter(${1:\\$policy-name as xs:string?}, ${2:\\$policy-deltas as element(info:options)*})", "trigger":"infodev:file-filter", "description":"($policy-name as xs:string?, $policy-deltas as element(info:options)*)"}, {"content":"infodev:transaction-size(${1:\\$policy-name as xs:string?}, ${2:\\$policy-deltas as element(info:options)*})", "trigger":"infodev:transaction-size", "description":"($policy-name as xs:string?, $policy-deltas as element(info:options)*)"}, {"content":"infodev:handle-error(${1:\\$ticket-id as xs:string}, ${2:\\$context as xs:string}, ${3:\\$error as element(error:error)})", "trigger":"infodev:handle-error", "description":"($ticket-id as xs:string, $context as xs:string, $error as element(error:error))"}, {"content":"infodev:handle-error(${1:\\$ticket-id as xs:string}, ${2:\\$context as xs:string}, ${3:\\$error as element(error:error)}, ${4:\\$annotation as element(info:annotation)?})", "trigger":"infodev:handle-error", "description":"($ticket-id as xs:string, $context as xs:string, $error as element(error:error), $annotation as element(info:annotation)?)"}, {"content":"infodev:handle-error(${1:\\$ticket-id as xs:string}, ${2:\\$context as xs:string}, ${3:\\$error as element(error:error)}, ${4:\\$annotation as element(info:annotation)?}, ${5:\\$error-log-level as xs:string?})", "trigger":"infodev:handle-error", "description":"($ticket-id as xs:string, $context as xs:string, $error as element(error:error), $annotation as element(info:annotation)?, $error-log-level as xs:string?)"}, {"content":"infodev:log-progress(${1:\\$ticket-id as xs:string}, ${2:\\$annotation as element(info:annotation)})", "trigger":"infodev:log-progress", "description":"($ticket-id as xs:string, $annotation as element(info:annotation))"}, {"content":"infodev:log-progress(${1:\\$ticket-id as xs:string}, ${2:\\$annotation as element(info:annotation)}, ${3:\\$documents-processed as xs:nonNegativeInteger?})", "trigger":"infodev:log-progress", "description":"($ticket-id as xs:string, $annotation as element(info:annotation), $documents-processed as xs:nonNegativeInteger?)"}, {"content":"infodev:log-progress(${1:\\$ticket-id as xs:string}, ${2:\\$annotation as element(info:annotation)}, ${3:\\$documents-processed as xs:nonNegativeInteger?}, ${4:\\$transactions-completed as xs:nonNegativeInteger?})", "trigger":"infodev:log-progress", "description":"($ticket-id as xs:string, $annotation as element(info:annotation), $documents-processed as xs:nonNegativeInteger?, $transactions-completed as xs:nonNegativeInteger?)"}, {"content":"infodev:log-progress(${1:\\$ticket-id as xs:string}, ${2:\\$annotation as element(info:annotation)}, ${3:\\$documents-processed as xs:nonNegativeInteger?}, ${4:\\$transactions-completed as xs:nonNegativeInteger?}, ${5:\\$error-log-level as xs:string?})", "trigger":"infodev:log-progress", "description":"($ticket-id as xs:string, $annotation as element(info:annotation), $documents-processed as xs:nonNegativeInteger?, $transactions-completed as xs:nonNegativeInteger?, $error-log-level as xs:string?)"}, {"content":"infodev:ingest(${1:\\$document as node()?}, ${2:\\$path as xs:string}, ${3:\\$ticket-id as xs:string})", "trigger":"infodev:ingest", "description":"($document as node()?, $path as xs:string, $ticket-id as xs:string)"}, {"content":"infodev:ingest(${1:\\$document as node()?}, ${2:\\$path as xs:string}, ${3:\\$ticket-id as xs:string}, ${4:\\$policy-deltas as element(info:options)?})", "trigger":"infodev:ingest", "description":"($document as node()?, $path as xs:string, $ticket-id as xs:string, $policy-deltas as element(info:options)?)"}, {"content":"infodev:ingest(${1:\\$document as node()?}, ${2:\\$path as xs:string}, ${3:\\$ticket-id as xs:string}, ${4:\\$policy-deltas as element(info:options)?}, ${5:\\$properties as element()*})", "trigger":"infodev:ingest", "description":"($document as node()?, $path as xs:string, $ticket-id as xs:string, $policy-deltas as element(info:options)?, $properties as element()*)"}, {"content":"infodev:collector-options(${1:\\$policy-name as xs:string?}, ${2:\\$policy-deltas as element(info:options)*})", "trigger":"infodev:collector-options", "description":"($policy-name as xs:string?, $policy-deltas as element(info:options)*)"}, {"content":"infodev:effective-policy(${1:\\$policy-name as xs:string?}, ${2:\\$policy-deltas as element(info:options)*})", "trigger":"infodev:effective-policy", "description":"($policy-name as xs:string?, $policy-deltas as element(info:options)*)"}, {"content":"infodev:filesystem-walk(${1:\\$dir-path as xs:string}, ${2:\\$ticket-id as xs:string}, ${3:\\$function as xdmp:function}, ${4:\\$policy-deltas as element(info:options)?})", "trigger":"infodev:filesystem-walk", "description":"($dir-path as xs:string, $ticket-id as xs:string, $function as xdmp:function, $policy-deltas as element(info:options)?)"}, {"content":"infodev:filesystem-walk(${1:\\$dir-path as xs:string}, ${2:\\$ticket-id as xs:string}, ${3:\\$function as xdmp:function}, ${4:\\$policy-deltas as element(info:options)?}, ${5:\\$context as item()?})", "trigger":"infodev:filesystem-walk", "description":"($dir-path as xs:string, $ticket-id as xs:string, $function as xdmp:function, $policy-deltas as element(info:options)?, $context as item()?)"}, {"content":"infodev:transaction(${1:\\$document-map as map:map}, ${2:\\$ticket-id as xs:string}, ${3:\\$function as xdmp:function}, ${4:\\$policy-deltas as element(info:options)?}, ${5:\\$transaction-index as xs:integer}, ${6:\\$context as item()?})", "trigger":"infodev:transaction", "description":"($document-map as map:map, $ticket-id as xs:string, $function as xdmp:function, $policy-deltas as element(info:options)?, $transaction-index as xs:integer, $context as item()?)"}, {"content":"infodev:transaction(${1:\\$document-map as map:map}, ${2:\\$ticket-id as xs:string}, ${3:\\$function as xdmp:function}, ${4:\\$policy-deltas as element(info:options)?}, ${5:\\$transaction-index as xs:integer}, ${6:\\$context as item()?}, ${7:\\$error-log-level as xs:string?})", "trigger":"infodev:transaction", "description":"($document-map as map:map, $ticket-id as xs:string, $function as xdmp:function, $policy-deltas as element(info:options)?, $transaction-index as xs:integer, $context as item()?, $error-log-level as xs:string?)"}, {"content":"infodev:get-file(${1:\\$source-location as xs:string}, ${2:\\$ticket-id as xs:string}, ${3:\\$policy-deltas as element(info:options)?})", "trigger":"infodev:get-file", "description":"($source-location as xs:string, $ticket-id as xs:string, $policy-deltas as element(info:options)?)"}, {"content":"infodev:get-external-binary-file(${1:\\$source-location as xs:string})", "trigger":"infodev:get-external-binary-file", "description":"($source-location as xs:string)"}, {"content":"xdmp:document-filter(${1:\\$doc as node()})", "trigger":"xdmp:document-filter", "description":"($doc as node())"}, {"content":"xdmp:document-filter(${1:\\$doc as node()}, ${2:\\$options as (element()|map:map)?})", "trigger":"xdmp:document-filter", "description":"($doc as node(), $options as (element()|map:map)?)"}, {"content":"Global-Object:declareUpdate()", "trigger":"Global-Object:declareUpdate", "description":"()"}, {"content":"Global-Object:declareUpdate(${1:\\$options as Object})", "trigger":"Global-Object:declareUpdate", "description":"($options as Object)"}, {"content":"Global-Object:require(${1:\\$location as String})", "trigger":"Global-Object:require", "description":"($location as String)"}, {"content":"cts:doc(${1:\\$uri as String})", "trigger":"cts:doc", "description":"($uri as String)"}, {"content":"json:config(${1:\\$strategy as xs:string})", "trigger":"json:config", "description":"($strategy as xs:string)"}, {"content":"json:check-config(${1:\\$config as map:map})", "trigger":"json:check-config", "description":"($config as map:map)"}, {"content":"json:transform-to-json(${1:\\$node as node()})", "trigger":"json:transform-to-json", "description":"($node as node())"}, {"content":"json:transform-to-json(${1:\\$node as node()}, ${2:\\$config as map:map})", "trigger":"json:transform-to-json", "description":"($node as node(), $config as map:map)"}, {"content":"json:transform-to-json-object(${1:\\$node as node()}, ${2:\\$config as map:map})", "trigger":"json:transform-to-json-object", "description":"($node as node(), $config as map:map)"}, {"content":"json:transform-to-json-xml(${1:\\$node as node()})", "trigger":"json:transform-to-json-xml", "description":"($node as node())"}, {"content":"json:transform-to-json-xml(${1:\\$node as node()}, ${2:\\$config as map:map})", "trigger":"json:transform-to-json-xml", "description":"($node as node(), $config as map:map)"}, {"content":"json:transform-from-json(${1:\\$json as item()})", "trigger":"json:transform-from-json", "description":"($json as item())"}, {"content":"json:transform-from-json(${1:\\$json as item()}, ${2:\\$config as map:map})", "trigger":"json:transform-from-json", "description":"($json as item(), $config as map:map)"}, {"content":"xdmp:to-json(${1:\\$item as item()*})", "trigger":"xdmp:to-json", "description":"($item as item()*)"}, {"content":"xdmp:to-json-string(${1:\\$item as item()*})", "trigger":"xdmp:to-json-string", "description":"($item as item()*)"}, {"content":"xdmp:from-json(${1:\\$arg as node()})", "trigger":"xdmp:from-json", "description":"($arg as node())"}, {"content":"xdmp:fromJSON(${1:\\$arg as node()})", "trigger":"xdmp:fromJSON", "description":"($arg as node())"}, {"content":"xdmp:from-json-string(${1:\\$arg as xs:string})", "trigger":"xdmp:from-json-string", "description":"($arg as xs:string)"}, {"content":"geokml:point(${1:\\$point as element()})", "trigger":"geokml:point", "description":"($point as element())"}, {"content":"geokml:box(${1:\\$envelope as element()})", "trigger":"geokml:box", "description":"($envelope as element())"}, {"content":"geokml:circle(${1:\\$radius as xs:double}, ${2:\\$center as element()})", "trigger":"geokml:circle", "description":"($radius as xs:double, $center as element())"}, {"content":"kml:linestring(${1:\\$linestring as element(kml:LineString)})", "trigger":"kml:linestring", "description":"($linestring as element(kml:LineString))"}, {"content":"kml:polygon(${1:\\$linestring as element()})", "trigger":"kml:polygon", "description":"($linestring as element())"}, {"content":"geokml:interior-polygon(${1:\\$points as element()})", "trigger":"geokml:interior-polygon", "description":"($points as element())"}, {"content":"kml:complex-polygon(${1:\\$complex-polygon as node()})", "trigger":"kml:complex-polygon", "description":"($complex-polygon as node())"}, {"content":"kml:geospatial-query(${1:\\$regions as cts:region*})", "trigger":"kml:geospatial-query", "description":"($regions as cts:region*)"}, {"content":"kml:geospatial-query(${1:\\$regions as cts:region*}, ${2:\\$options as xs:string*})", "trigger":"kml:geospatial-query", "description":"($regions as cts:region*, $options as xs:string*)"}, {"content":"kml:geospatial-query(${1:\\$regions as cts:region*}, ${2:\\$options as xs:string*}, ${3:\\$weight as xs:double?})", "trigger":"kml:geospatial-query", "description":"($regions as cts:region*, $options as xs:string*, $weight as xs:double?)"}, {"content":"kml:geospatial-query(${1:\\$regions as cts:region*}, ${2:\\$options as xs:string*}, ${3:\\$weight as xs:double?}, ${4:\\$namespace as xs:string?})", "trigger":"kml:geospatial-query", "description":"($regions as cts:region*, $options as xs:string*, $weight as xs:double?, $namespace as xs:string?)"}, {"content":"geokml:geospatial-query-from-elements(${1:\\$regions as element()*})", "trigger":"geokml:geospatial-query-from-elements", "description":"($regions as element()*)"}, {"content":"geokml:geospatial-query-from-elements(${1:\\$regions as element()*}, ${2:\\$options as xs:string*})", "trigger":"geokml:geospatial-query-from-elements", "description":"($regions as element()*, $options as xs:string*)"}, {"content":"geokml:geospatial-query-from-elements(${1:\\$regions as element()*}, ${2:\\$options as xs:string*}, ${3:\\$weight as xs:double?})", "trigger":"geokml:geospatial-query-from-elements", "description":"($regions as element()*, $options as xs:string*, $weight as xs:double?)"}, {"content":"geokml:parse-kml(${1:\\$kml as element()*})", "trigger":"geokml:parse-kml", "description":"($kml as element()*)"}, {"content":"geokml:to-kml(${1:\\$region as cts:region*})", "trigger":"geokml:to-kml", "description":"($region as cts:region*)"}, {"content":"geokml:to-kml(${1:\\$region as cts:region*}, ${2:\\$namespace as xs:string})", "trigger":"geokml:to-kml", "description":"($region as cts:region*, $namespace as xs:string)"}, {"content":"xdmp:user-last-login()", "trigger":"xdmp:user-last-login", "description":"()"}, {"content":"xdmp:user-last-login(${1:\\$user as xs:unsignedLong})", "trigger":"xdmp:user-last-login", "description":"($user as xs:unsignedLong)"}, {"content":"lnk:create(${1:\\$from as xs:string}, ${2:\\$to as xs:string}, ${3:\\$role as xs:string}, ${4:\\$rev-role as xs:string}, ${5:\\$strength as xs:string})", "trigger":"lnk:create", "description":"($from as xs:string, $to as xs:string, $role as xs:string, $rev-role as xs:string, $strength as xs:string)"}, {"content":"lnk:insert(${1:\\$link as element(lnk:link)})", "trigger":"lnk:insert", "description":"($link as element(lnk:link))"}, {"content":"lnk:remove(${1:\\$from as xs:string}, ${2:\\$to as xs:string})", "trigger":"lnk:remove", "description":"($from as xs:string, $to as xs:string)"}, {"content":"lnk:get(${1:\\$from as xs:string}, ${2:\\$to as xs:string})", "trigger":"lnk:get", "description":"($from as xs:string, $to as xs:string)"}, {"content":"lnk:from(${1:\\$from as xs:string})", "trigger":"lnk:from", "description":"($from as xs:string)"}, {"content":"lnk:to(${1:\\$to as xs:string})", "trigger":"lnk:to", "description":"($to as xs:string)"}, {"content":"manage:/manage/v2/(${1:\\$format as string}, ${2:\\$view as string})", "trigger":"manage:/manage/v2/", "description":"($format as string, $view as string)"}, {"content":"manage:/manage/v2/(${1:\\$format as string})", "trigger":"manage:/manage/v2/", "description":"($format as string)"}, {"content":"manage:/manage/v2/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2?view=query(${1:\\$format as string}, ${2:\\$name-match as string}, ${3:\\$page-start as string}, ${4:\\$page-length as string})", "trigger":"manage:/manage/v2?view=query", "description":"($format as string, $name-match as string, $page-start as string, $page-length as string)"}, {"content":"manage:/manage/v2?view=status(${1:\\$format as string})", "trigger":"manage:/manage/v2?view=status", "description":"($format as string)"}, {"content":"manage:/manage/v2/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/clusters(${1:\\$format as string}, ${2:\\$view as string}, ${3:\\$cluster-role as string})", "trigger":"manage:/manage/v2/clusters", "description":"($format as string, $view as string, $cluster-role as string)"}, {"content":"manage:/manage/v2/clusters(${1:\\$format as string})", "trigger":"manage:/manage/v2/clusters", "description":"($format as string)"}, {"content":"manage:/manage/v2/clusters?view=metrics(${1:\\$format as string}, ${2:\\$cluster-role as string})", "trigger":"manage:/manage/v2/clusters?view=metrics", "description":"($format as string, $cluster-role as string)"}, {"content":"manage:/manage/v2/clusters/{id|name}(${1:\\$format as string}, ${2:\\$view as string})", "trigger":"manage:/manage/v2/clusters/{id|name}", "description":"($format as string, $view as string)"}, {"content":"manage:/manage/v2/clusters/{id|name}?view=config(${1:\\$format as string})", "trigger":"manage:/manage/v2/clusters/{id|name}?view=config", "description":"($format as string)"}, {"content":"manage:/manage/v2/clusters/{id|name}?view=metrics(${1:\\$format as string})", "trigger":"manage:/manage/v2/clusters/{id|name}?view=metrics", "description":"($format as string)"}, {"content":"manage:/manage/v2/clusters/{id|name}?view=status(${1:\\$format as string})", "trigger":"manage:/manage/v2/clusters/{id|name}?view=status", "description":"($format as string)"}, {"content":"manage:/manage/v2/clusters/{id|name}(${1:\\$state as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/clusters/{id|name}", "description":"($state as string, $format as string)"}, {"content":"manage:/manage/v2/clusters/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/clusters/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/clusters/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/clusters/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/clusters/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/clusters/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/forests(${1:\\$format as string}, ${2:\\$view as string}, ${3:\\$database-id as string}, ${4:\\$group-id as string}, ${5:\\$host-id as string}, ${6:\\$fullrefs as string})", "trigger":"manage:/manage/v2/forests", "description":"($format as string, $view as string, $database-id as string, $group-id as string, $host-id as string, $fullrefs as string)"}, {"content":"manage:/manage/v2/forests?view=metrics(${1:\\$format as string}, ${2:\\$fullrefs as string})", "trigger":"manage:/manage/v2/forests?view=metrics", "description":"($format as string, $fullrefs as string)"}, {"content":"manage:/manage/v2/forests?view=status(${1:\\$format as string}, ${2:\\$database-id as string}, ${3:\\$group-id as string}, ${4:\\$host-id as string}, ${5:\\$fullrefs as string})", "trigger":"manage:/manage/v2/forests?view=status", "description":"($format as string, $database-id as string, $group-id as string, $host-id as string, $fullrefs as string)"}, {"content":"manage:/manage/v2/forests?view=storage(${1:\\$format as string}, ${2:\\$database-id as string}, ${3:\\$group-id as string}, ${4:\\$host-id as string}, ${5:\\$fullrefs as string})", "trigger":"manage:/manage/v2/forests?view=storage", "description":"($format as string, $database-id as string, $group-id as string, $host-id as string, $fullrefs as string)"}, {"content":"manage:/manage/v2/forests()", "trigger":"manage:/manage/v2/forests", "description":"()"}, {"content":"manage:/manage/v2/forests(${1:\\$format as string})", "trigger":"manage:/manage/v2/forests", "description":"($format as string)"}, {"content":"manage:/manage/v2/forests/{id|name}(${1:\\$state as string}, ${2:\\$database as string})", "trigger":"manage:/manage/v2/forests/{id|name}", "description":"($state as string, $database as string)"}, {"content":"manage:/manage/v2/forests/{id|name}(${1:\\$level as string}, ${2:\\$replicas as string})", "trigger":"manage:/manage/v2/forests/{id|name}", "description":"($level as string, $replicas as string)"}, {"content":"manage:/manage/v2/forests/{id|name}(${1:\\$format as string}, ${2:\\$view as string}, ${3:\\$property as string})", "trigger":"manage:/manage/v2/forests/{id|name}", "description":"($format as string, $view as string, $property as string)"}, {"content":"manage:/manage/v2/forests/{id|name}?view=config(${1:\\$format as string})", "trigger":"manage:/manage/v2/forests/{id|name}?view=config", "description":"($format as string)"}, {"content":"manage:/manage/v2/forests/{id|name}?view=counts(${1:\\$format as string}, ${2:\\$property as string})", "trigger":"manage:/manage/v2/forests/{id|name}?view=counts", "description":"($format as string, $property as string)"}, {"content":"manage:/manage/v2/forests/{id|name}?view=status(${1:\\$format as string})", "trigger":"manage:/manage/v2/forests/{id|name}?view=status", "description":"($format as string)"}, {"content":"manage:/manage/v2/forests/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/forests/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/forests/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/forests/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/forests/{id|name}/{custom}(${1:\\$format as string})", "trigger":"manage:/manage/v2/forests/{id|name}/{custom}", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases(${1:\\$format as string}, ${2:\\$view as string})", "trigger":"manage:/manage/v2/databases", "description":"($format as string, $view as string)"}, {"content":"manage:/manage/v2/databases(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases?view=metrics(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases?view=metrics", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}(${1:\\$format as string}, ${2:\\$view as string})", "trigger":"manage:/manage/v2/databases/{id|name}", "description":"($format as string, $view as string)"}, {"content":"manage:/manage/v2/databases/{id|name}(${1:\\$format as string}, ${2:\\$overwrite-replicas as string})", "trigger":"manage:/manage/v2/databases/{id|name}", "description":"($format as string, $overwrite-replicas as string)"}, {"content":"manage:/manage/v2/databases/{id|name}(${1:\\$forest-delete as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}", "description":"($forest-delete as string, $format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}?view=config(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}?view=config", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}?view=counts(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}?view=counts", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}?view=package(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}?view=package", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}?view=status(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}?view=status", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/flexrep(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/flexrep", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/flexrep/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/flexrep/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/flexrep/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/flexrep/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/flexrep/configs(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/flexrep/configs", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/flexrep/configs(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/flexrep/configs", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/flexrep/configs/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/flexrep/configs/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/flexrep/configs/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/flexrep/configs/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/flexrep/configs/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/flexrep/configs/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/flexrep/configs/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/flexrep/configs/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/flexrep/pulls(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/flexrep/pulls", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/flexrep/pulls(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/flexrep/pulls", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/flexrep/pulls/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/flexrep/pulls/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/flexrep/pulls/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/flexrep/pulls/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/flexrep/pulls/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/flexrep/pulls/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/flexrep/pulls/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/flexrep/pulls/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/partitions(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/partitions", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/partitions(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/partitions", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/partitions/{name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/partitions/{name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/partitions/{name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/partitions/{name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/partitions/{name}(${1:\\$delete-data as string})", "trigger":"manage:/manage/v2/databases/{id|name}/partitions/{name}", "description":"($delete-data as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/partitions/{name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/partitions/{name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/partitions/{name}/properties()", "trigger":"manage:/manage/v2/databases/{id|name}/partitions/{name}/properties", "description":"()"}, {"content":"manage:/manage/v2/databases/{id|name}/rebalancer(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/rebalancer", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/rebalancer()", "trigger":"manage:/manage/v2/databases/{id|name}/rebalancer", "description":"()"}, {"content":"manage:/manage/v2/databases/{id|name}/{custom}(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/{custom}", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/sub-databases(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/sub-databases", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/sub-databases()", "trigger":"manage:/manage/v2/databases/{id|name}/sub-databases", "description":"()"}, {"content":"manage:/manage/v2/databases/{super-id|name}/sub-databases/{sub-id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{super-id|name}/sub-databases/{sub-id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{super-id|name}/sub-databases/{sub-id|name}()", "trigger":"manage:/manage/v2/databases/{super-id|name}/sub-databases/{sub-id|name}", "description":"()"}, {"content":"manage:/manage/v2/databases/{id|name}/super-databases(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/super-databases", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/super-databases()", "trigger":"manage:/manage/v2/databases/{id|name}/super-databases", "description":"()"}, {"content":"manage:/manage/v2/databases/{sub-id|name}/super-databases/{super-id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{sub-id|name}/super-databases/{super-id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{sub-id|name}/super-databases/{super-id|name}()", "trigger":"manage:/manage/v2/databases/{sub-id|name}/super-databases/{super-id|name}", "description":"()"}, {"content":"manage:/manage/v2/databases/{id|name}/alert(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/alert", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/alert/configs(${1:\\$uri as string}, ${2:\\$name as string}, ${3:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/alert/configs", "description":"($uri as string, $name as string, $format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/alert/configs(${1:\\$uri as string}, ${2:\\$delete-triggers as string}, ${3:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/alert/configs", "description":"($uri as string, $delete-triggers as string, $format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/alert/configs(${1:\\$uri as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/alert/configs", "description":"($uri as string, $format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/alert/configs/properties(${1:\\$uri as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/alert/configs/properties", "description":"($uri as string, $format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/alert/configs/properties(${1:\\$uri as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/alert/configs/properties", "description":"($uri as string, $format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/alert/actions(${1:\\$uri as string}, ${2:\\$name as string}, ${3:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/alert/actions", "description":"($uri as string, $name as string, $format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/alert/actions(${1:\\$uri as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/alert/actions", "description":"($uri as string, $format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/alert/actions/{id|name}(${1:\\$uri as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/alert/actions/{id|name}", "description":"($uri as string, $format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/alert/actions/{id|name}(${1:\\$uri as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/alert/actions/{id|name}", "description":"($uri as string, $format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/alert/actions/{id|name}/properties(${1:\\$uri as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/alert/actions/{id|name}/properties", "description":"($uri as string, $format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/alert/actions/{id|name}/properties(${1:\\$uri as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/alert/actions/{id|name}/properties", "description":"($uri as string, $format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/alert/actions/{id|name}/rules(${1:\\$uri as string}, ${2:\\$name as string}, ${3:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/alert/actions/{id|name}/rules", "description":"($uri as string, $name as string, $format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/alert/actions/{id|name}/rules(${1:\\$uri as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/alert/actions/{id|name}/rules", "description":"($uri as string, $format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/alert/actions/{id|name}/rules/{id|name}(${1:\\$uri as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/alert/actions/{id|name}/rules/{id|name}", "description":"($uri as string, $format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/alert/actions/{id|name}/rules/{id|name}(${1:\\$uri as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/alert/actions/{id|name}/rules/{id|name}", "description":"($uri as string, $format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/alert/actions/{id|name}/rules/{id|name}/properties(${1:\\$uri as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/alert/actions/{id|name}/rules/{id|name}/properties", "description":"($uri as string, $format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/alert/actions/{id|name}/rules/{id|name}/properties(${1:\\$uri as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/alert/actions/{id|name}/rules/{id|name}/properties", "description":"($uri as string, $format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/triggers(${1:\\$uri as string}, ${2:\\$name as string}, ${3:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/triggers", "description":"($uri as string, $name as string, $format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/triggers(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/triggers", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/triggers{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/triggers{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/triggers{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/triggers{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/triggers{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/triggers{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/triggers{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/triggers{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/hosts(${1:\\$format as string}, ${2:\\$group-id as string}, ${3:\\$view as string})", "trigger":"manage:/manage/v2/hosts", "description":"($format as string, $group-id as string, $view as string)"}, {"content":"manage:/manage/v2/hosts(${1:\\$format as string})", "trigger":"manage:/manage/v2/hosts", "description":"($format as string)"}, {"content":"manage:/manage/v2/hosts?view=status(${1:\\$format as string}, ${2:\\$group-id as string})", "trigger":"manage:/manage/v2/hosts?view=status", "description":"($format as string, $group-id as string)"}, {"content":"manage:/manage/v2/hosts?view=metrics(${1:\\$format as string}, ${2:\\$group-id as string})", "trigger":"manage:/manage/v2/hosts?view=metrics", "description":"($format as string, $group-id as string)"}, {"content":"manage:/manage/v2/hosts/{id|name}(${1:\\$format as string}, ${2:\\$view as string})", "trigger":"manage:/manage/v2/hosts/{id|name}", "description":"($format as string, $view as string)"}, {"content":"manage:/manage/v2/hosts/{id|name}?view=config(${1:\\$view as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/hosts/{id|name}?view=config", "description":"($view as string, $format as string)"}, {"content":"manage:/manage/v2/hosts/{id|name}?view=counts(${1:\\$format as string})", "trigger":"manage:/manage/v2/hosts/{id|name}?view=counts", "description":"($format as string)"}, {"content":"manage:/manage/v2/hosts/{id|name}?view=status(${1:\\$format as string})", "trigger":"manage:/manage/v2/hosts/{id|name}?view=status", "description":"($format as string)"}, {"content":"manage:/manage/v2/hosts/{id|name}(${1:\\$state as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/hosts/{id|name}", "description":"($state as string, $format as string)"}, {"content":"manage:/manage/v2/hosts/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/hosts/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/hosts/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/hosts/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/hosts/{id|name}/{custom}(${1:\\$format as string})", "trigger":"manage:/manage/v2/hosts/{id|name}/{custom}", "description":"($format as string)"}, {"content":"manage:/manage/v2/servers(${1:\\$format as string}, ${2:\\$group-id as string}, ${3:\\$view as string}, ${4:\\$fullrefs as string})", "trigger":"manage:/manage/v2/servers", "description":"($format as string, $group-id as string, $view as string, $fullrefs as string)"}, {"content":"manage:/manage/v2/servers?view=metrics(${1:\\$format as string}, ${2:\\$group-id as string}, ${3:\\$fullrefs as string})", "trigger":"manage:/manage/v2/servers?view=metrics", "description":"($format as string, $group-id as string, $fullrefs as string)"}, {"content":"manage:/manage/v2/servers?view=status(${1:\\$format as string}, ${2:\\$group-id as string}, ${3:\\$fullrefs as string})", "trigger":"manage:/manage/v2/servers?view=status", "description":"($format as string, $group-id as string, $fullrefs as string)"}, {"content":"manage:/manage/v2/servers/{id|name}(${1:\\$group-id as string}, ${2:\\$format as string}, ${3:\\$view as string}, ${4:\\$host-id as string}, ${5:\\$fullrefs as string}, ${6:\\$modules as string})", "trigger":"manage:/manage/v2/servers/{id|name}", "description":"($group-id as string, $format as string, $view as string, $host-id as string, $fullrefs as string, $modules as string)"}, {"content":"manage:/manage/v2/servers/{id|name}?view=config(${1:\\$group-id as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/servers/{id|name}?view=config", "description":"($group-id as string, $format as string)"}, {"content":"manage:/manage/v2/servers/{id|name}?view=status(${1:\\$group-id as string}, ${2:\\$format as string}, ${3:\\$host-id as string}, ${4:\\$fullrefs as string})", "trigger":"manage:/manage/v2/servers/{id|name}?view=status", "description":"($group-id as string, $format as string, $host-id as string, $fullrefs as string)"}, {"content":"manage:/manage/v2/servers/{id|name}?view=package(${1:\\$group-id as string}, ${2:\\$format as string}, ${3:\\$modules as string})", "trigger":"manage:/manage/v2/servers/{id|name}?view=package", "description":"($group-id as string, $format as string, $modules as string)"}, {"content":"manage:/manage/v2/servers/{id|name}/{custom}(${1:\\$group-id as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/servers/{id|name}/{custom}", "description":"($group-id as string, $format as string)"}, {"content":"manage:/manage/v2/servers(${1:\\$group-id as string}, ${2:\\$server-type as string}, ${3:\\$format as string})", "trigger":"manage:/manage/v2/servers", "description":"($group-id as string, $server-type as string, $format as string)"}, {"content":"manage:/manage/v2/servers/{id|name}(${1:\\$group-id as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/servers/{id|name}", "description":"($group-id as string, $format as string)"}, {"content":"manage:/manage/v2/servers/{id|name}/properties(${1:\\$group-id as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/servers/{id|name}/properties", "description":"($group-id as string, $format as string)"}, {"content":"manage:/manage/v2/servers/{id|name}/properties(${1:\\$group-id as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/servers/{id|name}/properties", "description":"($group-id as string, $format as string)"}, {"content":"manage:/manage/v2/groups(${1:\\$format as string}, ${2:\\$view as string})", "trigger":"manage:/manage/v2/groups", "description":"($format as string, $view as string)"}, {"content":"manage:/manage/v2/groups(${1:\\$format as string})", "trigger":"manage:/manage/v2/groups", "description":"($format as string)"}, {"content":"manage:/manage/v2/groups/{id|name}(${1:\\$format as string}, ${2:\\$view as string})", "trigger":"manage:/manage/v2/groups/{id|name}", "description":"($format as string, $view as string)"}, {"content":"manage:/manage/v2/groups/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/groups/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/groups/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/groups/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/groups/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/groups/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/groups/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/groups/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/groups/{id|name}?view=config(${1:\\$format as string})", "trigger":"manage:/manage/v2/groups/{id|name}?view=config", "description":"($format as string)"}, {"content":"manage:/manage/v2/groups/{id|name}?view=counts(${1:\\$format as string})", "trigger":"manage:/manage/v2/groups/{id|name}?view=counts", "description":"($format as string)"}, {"content":"manage:/manage/v2/groups/{id|name}?view=status(${1:\\$format as string})", "trigger":"manage:/manage/v2/groups/{id|name}?view=status", "description":"($format as string)"}, {"content":"manage:/manage/v2/requests(${1:\\$format as string}, ${2:\\$view as string}, ${3:\\$group-id as string}, ${4:\\$host-id as string}, ${5:\\$server-id as string}, ${6:\\$seconds-min as string}, ${7:\\$fullrefs as string})", "trigger":"manage:/manage/v2/requests", "description":"($format as string, $view as string, $group-id as string, $host-id as string, $server-id as string, $seconds-min as string, $fullrefs as string)"}, {"content":"manage:/manage/v2/requests/{id|uri}(${1:\\$format as string}, ${2:\\$group-id as string}, ${3:\\$host-id as string}, ${4:\\$server-id as string})", "trigger":"manage:/manage/v2/requests/{id|uri}", "description":"($format as string, $group-id as string, $host-id as string, $server-id as string)"}, {"content":"manage:/manage/v2/transactions(${1:\\$format as string}, ${2:\\$view as string}, ${3:\\$host-id as string}, ${4:\\$seconds-min as string}, ${5:\\$fullrefs as string})", "trigger":"manage:/manage/v2/transactions", "description":"($format as string, $view as string, $host-id as string, $seconds-min as string, $fullrefs as string)"}, {"content":"manage:/manage/v2/transactions/{id|uri}(${1:\\$format as string}, ${2:\\$host-id as string})", "trigger":"manage:/manage/v2/transactions/{id|uri}", "description":"($format as string, $host-id as string)"}, {"content":"manage:/manage/v2/tickets/{tid}?view=process-status(${1:\\$format as string})", "trigger":"manage:/manage/v2/tickets/{tid}?view=process-status", "description":"($format as string)"}, {"content":"manage:/admin/v1/init(${1:\\$format as string}, ${2:\\$license-key as string}, ${3:\\$licensee as string})", "trigger":"manage:/admin/v1/init", "description":"($format as string, $license-key as string, $licensee as string)"}, {"content":"manage:/admin/v1/instance-admin(${1:\\$format as string}, ${2:\\$admin-username as string}, ${3:\\$admin-password as string})", "trigger":"manage:/admin/v1/instance-admin", "description":"($format as string, $admin-username as string, $admin-password as string)"}, {"content":"manage:/admin/v1/timestamp()", "trigger":"manage:/admin/v1/timestamp", "description":"()"}, {"content":"manage:/admin/v1/timestamp()", "trigger":"manage:/admin/v1/timestamp", "description":"()"}, {"content":"manage:/admin/v1/server-config()", "trigger":"manage:/admin/v1/server-config", "description":"()"}, {"content":"manage:/admin/v1/cluster-config(${1:\\$server-config as string}, ${2:\\$group as string}, ${3:\\$zone as string})", "trigger":"manage:/admin/v1/cluster-config", "description":"($server-config as string, $group as string, $zone as string)"}, {"content":"manage:/admin/v1/host-config(${1:\\$remote-host as string})", "trigger":"manage:/admin/v1/host-config", "description":"($remote-host as string)"}, {"content":"manage:/manage/v2/meters/resources(${1:\\$format as string}, ${2:\\$period as dateTime}, ${3:\\$start as dateTime}, ${4:\\$end as dateTime})", "trigger":"manage:/manage/v2/meters/resources", "description":"($format as string, $period as dateTime, $start as dateTime, $end as dateTime)"}, {"content":"manage:/manage/v2/meters/labels(${1:\\$format as string}, ${2:\\$name as string}, ${3:\\$start as dateTime}, ${4:\\$end as dateTime})", "trigger":"manage:/manage/v2/meters/labels", "description":"($format as string, $name as string, $start as dateTime, $end as dateTime)"}, {"content":"manage:/manage/v2/meters/labels(${1:\\$format as string})", "trigger":"manage:/manage/v2/meters/labels", "description":"($format as string)"}, {"content":"manage:/manage/v2/meters/labels()", "trigger":"manage:/manage/v2/meters/labels", "description":"()"}, {"content":"manage:/manage/v2/meters/labels/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/meters/labels/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/meters/labels/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/meters/labels/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/meters/labels/{id|name}()", "trigger":"manage:/manage/v2/meters/labels/{id|name}", "description":"()"}, {"content":"manage:/manage/v2/meters/labels/{id|name}()", "trigger":"manage:/manage/v2/meters/labels/{id|name}", "description":"()"}, {"content":"manage:/manage/v2/meters/labels/{id|name}()", "trigger":"manage:/manage/v2/meters/labels/{id|name}", "description":"()"}, {"content":"manage:/manage/v2/databases/{id|name}/cpf-configs(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/cpf-configs", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/cpf-configs(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/cpf-configs", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/cpf-configs/{domain-id|default-domain-name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/cpf-configs/{domain-id|default-domain-name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/cpf-configs/{domain-id|default-domain-name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/cpf-configs/{domain-id|default-domain-name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/cpf-configs/{domain-id|default-domain-name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/cpf-configs/{domain-id|default-domain-name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/cpf-configs/{domain-id|default-domain-name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/cpf-configs/{domain-id|default-domain-name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/domains(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/domains", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/domains(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/domains", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/domains/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/domains/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/domains/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/domains/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/domains/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/domains/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/domains/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/domains/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/domains/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/domains/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/pipelines(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/pipelines", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/pipelines(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/pipelines", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/pipelines/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/pipelines/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/pipelines/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/pipelines/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/pipelines/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/pipelines/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/pipelines/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/pipelines/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/view-schemas(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/view-schemas", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/view-schemas(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/view-schemas", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/view-schemas/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/view-schemas/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/view-schemas/{id|name}(${1:\\$format as string}, ${2:\\$delete-views as string})", "trigger":"manage:/manage/v2/databases/{id|name}/view-schemas/{id|name}", "description":"($format as string, $delete-views as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/view-schemas/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/view-schemas/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/view-schemas/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/view-schemas/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/view-schemas/{schema-name}/views(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/view-schemas/{schema-name}/views", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/view-schemas/{schema-name}/views(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/view-schemas/{schema-name}/views", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/view-schemas/{schema-name}/views/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/view-schemas/{schema-name}/views/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/view-schemas/{schema-name}/views/{id|name}(${1:\\$format as string}, ${2:\\$delete-views as string})", "trigger":"manage:/manage/v2/databases/{id|name}/view-schemas/{schema-name}/views/{id|name}", "description":"($format as string, $delete-views as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/view-schemas/{schema-name}/views/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/view-schemas/{schema-name}/views/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/view-schemas/{schema-name}/views/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/view-schemas/{schema-name}/views/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/users(${1:\\$format as string})", "trigger":"manage:/manage/v2/users", "description":"($format as string)"}, {"content":"manage:/manage/v2/users(${1:\\$format as string})", "trigger":"manage:/manage/v2/users", "description":"($format as string)"}, {"content":"manage:/manage/v2/users/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/users/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/users/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/users/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/users/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/users/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/users/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/users/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/roles(${1:\\$format as string})", "trigger":"manage:/manage/v2/roles", "description":"($format as string)"}, {"content":"manage:/manage/v2/roles(${1:\\$format as string})", "trigger":"manage:/manage/v2/roles", "description":"($format as string)"}, {"content":"manage:/manage/v2/roles/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/roles/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/roles/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/roles/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/roles/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/roles/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/roles/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/roles/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/privileges(${1:\\$format as string})", "trigger":"manage:/manage/v2/privileges", "description":"($format as string)"}, {"content":"manage:/manage/v2/privileges(${1:\\$format as string})", "trigger":"manage:/manage/v2/privileges", "description":"($format as string)"}, {"content":"manage:/manage/v2/privileges/{id|name}(${1:\\$format as string}, ${2:\\$kind as string})", "trigger":"manage:/manage/v2/privileges/{id|name}", "description":"($format as string, $kind as string)"}, {"content":"manage:/manage/v2/privileges/{id|name}(${1:\\$format as string}, ${2:\\$kind as string})", "trigger":"manage:/manage/v2/privileges/{id|name}", "description":"($format as string, $kind as string)"}, {"content":"manage:/manage/v2/privileges/{id|name}/properties(${1:\\$format as string}, ${2:\\$kind as string})", "trigger":"manage:/manage/v2/privileges/{id|name}/properties", "description":"($format as string, $kind as string)"}, {"content":"manage:/manage/v2/privileges/{id|name}/properties(${1:\\$format as string}, ${2:\\$kind as string})", "trigger":"manage:/manage/v2/privileges/{id|name}/properties", "description":"($format as string, $kind as string)"}, {"content":"manage:/manage/v2/security/properties(${1:\\$format as string}, ${2:\\$kind as string})", "trigger":"manage:/manage/v2/security/properties", "description":"($format as string, $kind as string)"}, {"content":"manage:/manage/v2/security/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/security/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/amps(${1:\\$format as string})", "trigger":"manage:/manage/v2/amps", "description":"($format as string)"}, {"content":"manage:/manage/v2/amps(${1:\\$format as string})", "trigger":"manage:/manage/v2/amps", "description":"($format as string)"}, {"content":"manage:/manage/v2/amps/{id|name}(${1:\\$format as string}, ${2:\\$namespace as string}, ${3:\\$document-uri as string}, ${4:\\$modules-database as string})", "trigger":"manage:/manage/v2/amps/{id|name}", "description":"($format as string, $namespace as string, $document-uri as string, $modules-database as string)"}, {"content":"manage:/manage/v2/amps/{id|name}(${1:\\$format as string}, ${2:\\$namespace as string}, ${3:\\$document-uri as string}, ${4:\\$modules-database as string})", "trigger":"manage:/manage/v2/amps/{id|name}", "description":"($format as string, $namespace as string, $document-uri as string, $modules-database as string)"}, {"content":"manage:/manage/v2/amps/{id|name}/properties(${1:\\$format as string}, ${2:\\$namespace as string}, ${3:\\$document-uri as string}, ${4:\\$modules-database as string})", "trigger":"manage:/manage/v2/amps/{id|name}/properties", "description":"($format as string, $namespace as string, $document-uri as string, $modules-database as string)"}, {"content":"manage:/manage/v2/amps/{id|name}/properties(${1:\\$format as string}, ${2:\\$namespace as string}, ${3:\\$document-uri as string}, ${4:\\$modules-database as string})", "trigger":"manage:/manage/v2/amps/{id|name}/properties", "description":"($format as string, $namespace as string, $document-uri as string, $modules-database as string)"}, {"content":"manage:/manage/v2/external-security(${1:\\$format as string})", "trigger":"manage:/manage/v2/external-security", "description":"($format as string)"}, {"content":"manage:/manage/v2/external-security(${1:\\$format as string})", "trigger":"manage:/manage/v2/external-security", "description":"($format as string)"}, {"content":"manage:/manage/v2/external-security/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/external-security/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/external-security/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/external-security/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/external-security/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/external-security/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/external-security/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/external-security/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/protected-collections(${1:\\$format as string})", "trigger":"manage:/manage/v2/protected-collections", "description":"($format as string)"}, {"content":"manage:/manage/v2/protected-collections(${1:\\$format as string})", "trigger":"manage:/manage/v2/protected-collections", "description":"($format as string)"}, {"content":"manage:/manage/v2/protected-collections?uri={collection-uri}(${1:\\$uri as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/protected-collections?uri={collection-uri}", "description":"($uri as string, $format as string)"}, {"content":"manage:/manage/v2/protected-collections?uri={collection-uri}(${1:\\$uri as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/protected-collections?uri={collection-uri}", "description":"($uri as string, $format as string)"}, {"content":"manage:/manage/v2/protected-collections/properties?uri={collection-uri}(${1:\\$uri as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/protected-collections/properties?uri={collection-uri}", "description":"($uri as string, $format as string)"}, {"content":"manage:/manage/v2/protected-collections/properties?uri={collection-uri}(${1:\\$uri as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/protected-collections/properties?uri={collection-uri}", "description":"($uri as string, $format as string)"}, {"content":"manage:/manage/v2/certificate-authorities(${1:\\$format as string})", "trigger":"manage:/manage/v2/certificate-authorities", "description":"($format as string)"}, {"content":"manage:/manage/v2/certificate-authorities(${1:\\$format as string})", "trigger":"manage:/manage/v2/certificate-authorities", "description":"($format as string)"}, {"content":"manage:/manage/v2/certificate-authorities/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/certificate-authorities/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/certificate-authorities/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/certificate-authorities/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/certificate-authorities/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/certificate-authorities/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/certificate-templates(${1:\\$format as string})", "trigger":"manage:/manage/v2/certificate-templates", "description":"($format as string)"}, {"content":"manage:/manage/v2/certificate-templates(${1:\\$format as string})", "trigger":"manage:/manage/v2/certificate-templates", "description":"($format as string)"}, {"content":"manage:/manage/v2/certificate-templates/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/certificate-templates/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/certificate-templates/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/certificate-templates/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/certificate-templates/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/certificate-templates/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/certificate-templates/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/certificate-templates/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/certificate-templates/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/certificate-templates/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/certificates(${1:\\$format as string})", "trigger":"manage:/manage/v2/certificates", "description":"($format as string)"}, {"content":"manage:/manage/v2/certificates(${1:\\$trusted as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/certificates", "description":"($trusted as string, $format as string)"}, {"content":"manage:/manage/v2/certificates/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/certificates/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/certificates/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/certificates/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/certificates/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/certificates/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/certificate-revocation-lists(${1:\\$url as string})", "trigger":"manage:/manage/v2/certificate-revocation-lists", "description":"($url as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/temporal(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/temporal", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/temporal/axes(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/temporal/axes", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/temporal/axes(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/temporal/axes", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/temporal/axes/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/temporal/axes/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/temporal/axes/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/temporal/axes/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/temporal/axes/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/temporal/axes/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/temporal/collections(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/temporal/collections", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/temporal/collections(${1:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/temporal/collections", "description":"($format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/temporal/collections?collection={name}(${1:\\$collection as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/temporal/collections?collection={name}", "description":"($collection as string, $format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/temporal/collections?collection={name}(${1:\\$collection as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/temporal/collections?collection={name}", "description":"($collection as string, $format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/temporal/collections/properties?collection={name}(${1:\\$collection as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/temporal/collections/properties?collection={name}", "description":"($collection as string, $format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/temporal/collections/properties?collection={name}(${1:\\$collection as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/temporal/collections/properties?collection={name}", "description":"($collection as string, $format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/temporal/collections/lsqt/properties?collection={name}(${1:\\$collection as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/temporal/collections/lsqt/properties?collection={name}", "description":"($collection as string, $format as string)"}, {"content":"manage:/manage/v2/databases/{id|name}/temporal/collections/lsqt/properties?collection={name}(${1:\\$collection as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/databases/{id|name}/temporal/collections/lsqt/properties?collection={name}", "description":"($collection as string, $format as string)"}, {"content":"manage:/manage/v2/task-servers(${1:\\$format as string}, ${2:\\$group-id as string})", "trigger":"manage:/manage/v2/task-servers", "description":"($format as string, $group-id as string)"}, {"content":"manage:/manage/v2/task-servers/{id|name}(${1:\\$format as string}, ${2:\\$group-id as string})", "trigger":"manage:/manage/v2/task-servers/{id|name}", "description":"($format as string, $group-id as string)"}, {"content":"manage:/manage/v2/task-servers/{id|name}/properties(${1:\\$format as string}, ${2:\\$group-id as string})", "trigger":"manage:/manage/v2/task-servers/{id|name}/properties", "description":"($format as string, $group-id as string)"}, {"content":"manage:/manage/v2/task-servers/{id|name}/properties(${1:\\$group-id as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/task-servers/{id|name}/properties", "description":"($group-id as string, $format as string)"}, {"content":"manage:/manage/v2/tasks(${1:\\$format as string}, ${2:\\$group-id as string})", "trigger":"manage:/manage/v2/tasks", "description":"($format as string, $group-id as string)"}, {"content":"manage:/manage/v2/tasks(${1:\\$group-id as string}, ${2:\\$server-type as string}, ${3:\\$format as string})", "trigger":"manage:/manage/v2/tasks", "description":"($group-id as string, $server-type as string, $format as string)"}, {"content":"manage:/manage/v2/tasks/{id|name}(${1:\\$group-id as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/tasks/{id|name}", "description":"($group-id as string, $format as string)"}, {"content":"manage:/manage/v2/tasks/{id|name}(${1:\\$group-id as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/tasks/{id|name}", "description":"($group-id as string, $format as string)"}, {"content":"manage:/manage/v2/tasks/{id|name}/properties(${1:\\$group-id as string}, ${2:\\$format as string}, ${3:\\$kind as string})", "trigger":"manage:/manage/v2/tasks/{id|name}/properties", "description":"($group-id as string, $format as string, $kind as string)"}, {"content":"manage:/manage/v2/tasks/{id|name}/properties(${1:\\$group-id as string}, ${2:\\$format as string}, ${3:\\$kind as string})", "trigger":"manage:/manage/v2/tasks/{id|name}/properties", "description":"($group-id as string, $format as string, $kind as string)"}, {"content":"manage:/manage/v2/mimetypes(${1:\\$format as string})", "trigger":"manage:/manage/v2/mimetypes", "description":"($format as string)"}, {"content":"manage:/manage/v2/mimetypes(${1:\\$format as string})", "trigger":"manage:/manage/v2/mimetypes", "description":"($format as string)"}, {"content":"manage:/manage/v2/mimetypes/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/mimetypes/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/mimetypes/{id|name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/mimetypes/{id|name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/mimetypes/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/mimetypes/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v2/mimetypes/{id|name}/properties(${1:\\$format as string})", "trigger":"manage:/manage/v2/mimetypes/{id|name}/properties", "description":"($format as string)"}, {"content":"manage:/manage/v1/domains(${1:\\$format as string})", "trigger":"manage:/manage/v1/domains", "description":"($format as string)"}, {"content":"manage:/v1/domains/{domain-id-or-default-domain-name}/status(${1:\\$format as string}, ${2:\\$with-targets as boolean})", "trigger":"manage:/v1/domains/{domain-id-or-default-domain-name}/status", "description":"($format as string, $with-targets as boolean)"}, {"content":"manage:/v1/domains/{domain-id-or-default-domain-name}/targets(${1:\\$format as string})", "trigger":"manage:/v1/domains/{domain-id-or-default-domain-name}/targets", "description":"($format as string)"}, {"content":"manage:/v1/domains/{domain-id-or-default-domain-name}/targets/{id|name}(${1:\\$format as string}, ${2:\\$with-targets as boolean})", "trigger":"manage:/v1/domains/{domain-id-or-default-domain-name}/targets/{id|name}", "description":"($format as string, $with-targets as boolean)"}, {"content":"manage:/v1/domains/{domain-id-or-default-domain-name}/targets/{id|name}/rules(${1:\\$format as string})", "trigger":"manage:/v1/domains/{domain-id-or-default-domain-name}/targets/{id|name}/rules", "description":"($format as string)"}, {"content":"manage:/v1/domains/{domain-id-or-default-domain-name}/targets/{id|name}/rules/ALERT_ID(${1:\\$format as string})", "trigger":"manage:/v1/domains/{domain-id-or-default-domain-name}/targets/{id|name}/rules/ALERT_ID", "description":"($format as string)"}, {"content":"manage:/v1/domains/{domain-id-or-default-domain-name}/targets/{id|name}/rules/ALERT_ID(${1:\\$format as string})", "trigger":"manage:/v1/domains/{domain-id-or-default-domain-name}/targets/{id|name}/rules/ALERT_ID", "description":"($format as string)"}, {"content":"manage:/v1/domains/{domain-id-or-default-domain-name}/targets/{id|name}/rules/ALERT_ID(${1:\\$format as string})", "trigger":"manage:/v1/domains/{domain-id-or-default-domain-name}/targets/{id|name}/rules/ALERT_ID", "description":"($format as string)"}, {"content":"manage:/v1/domains/{domain-id-or-default-domain-name}/targets/{id|name}/rules(${1:\\$format as string})", "trigger":"manage:/v1/domains/{domain-id-or-default-domain-name}/targets/{id|name}/rules", "description":"($format as string)"}, {"content":"manage:/manage/v2/credentials(${1:\\$format as string}, ${2:\\$type as string})", "trigger":"manage:/manage/v2/credentials", "description":"($format as string, $type as string)"}, {"content":"manage:/manage/v2/credentials(${1:\\$format as string}, ${2:\\$type as string})", "trigger":"manage:/manage/v2/credentials", "description":"($format as string, $type as string)"}, {"content":"manage:/manage/v2/credentials(${1:\\$format as string}, ${2:\\$type as string})", "trigger":"manage:/manage/v2/credentials", "description":"($format as string, $type as string)"}, {"content":"manage:/manage/v2/usage-report(${1:\\$format as string}, ${2:\\$previous-days as string}, ${3:\\$start-date as dateTime}, ${4:\\$end-date as dateTime})", "trigger":"manage:/manage/v2/usage-report", "description":"($format as string, $previous-days as string, $start-date as dateTime, $end-date as dateTime)"}, {"content":"manage:/manage/v2/support-request(${1:\\$format as string}, ${2:\\$scope as string}, ${3:\\$detail as string})", "trigger":"manage:/manage/v2/support-request", "description":"($format as string, $scope as string, $detail as string)"}, {"content":"manage:/manage/v2/logs(${1:\\$format as string}, ${2:\\$filename as string})", "trigger":"manage:/manage/v2/logs", "description":"($format as string, $filename as string)"}, {"content":"math:acos(${1:\\$x as xs:double})", "trigger":"math:acos", "description":"($x as xs:double)"}, {"content":"math:asin(${1:\\$x as xs:double})", "trigger":"math:asin", "description":"($x as xs:double)"}, {"content":"math:atan(${1:\\$x as xs:double})", "trigger":"math:atan", "description":"($x as xs:double)"}, {"content":"math:atan2(${1:\\$y as xs:double}, ${2:\\$x as xs:double})", "trigger":"math:atan2", "description":"($y as xs:double, $x as xs:double)"}, {"content":"math:cos(${1:\\$x as xs:double})", "trigger":"math:cos", "description":"($x as xs:double)"}, {"content":"math:cosh(${1:\\$x as xs:double})", "trigger":"math:cosh", "description":"($x as xs:double)"}, {"content":"math:sin(${1:\\$x as xs:double})", "trigger":"math:sin", "description":"($x as xs:double)"}, {"content":"math:sinh(${1:\\$x as xs:double})", "trigger":"math:sinh", "description":"($x as xs:double)"}, {"content":"math:tan(${1:\\$x as xs:double})", "trigger":"math:tan", "description":"($x as xs:double)"}, {"content":"math:cot(${1:\\$x as xs:double})", "trigger":"math:cot", "description":"($x as xs:double)"}, {"content":"math:tanh(${1:\\$x as xs:double})", "trigger":"math:tanh", "description":"($x as xs:double)"}, {"content":"math:exp(${1:\\$x as xs:double})", "trigger":"math:exp", "description":"($x as xs:double)"}, {"content":"math:frexp(${1:\\$x as xs:double})", "trigger":"math:frexp", "description":"($x as xs:double)"}, {"content":"math:ldexp(${1:\\$y as xs:double}, ${2:\\$i as xs:integer})", "trigger":"math:ldexp", "description":"($y as xs:double, $i as xs:integer)"}, {"content":"math:log(${1:\\$x as xs:double})", "trigger":"math:log", "description":"($x as xs:double)"}, {"content":"math:log10(${1:\\$x as xs:double})", "trigger":"math:log10", "description":"($x as xs:double)"}, {"content":"math:modf(${1:\\$x as xs:double})", "trigger":"math:modf", "description":"($x as xs:double)"}, {"content":"math:pow(${1:\\$x as xs:double}, ${2:\\$y as xs:double})", "trigger":"math:pow", "description":"($x as xs:double, $y as xs:double)"}, {"content":"math:sqrt(${1:\\$x as xs:double})", "trigger":"math:sqrt", "description":"($x as xs:double)"}, {"content":"math:ceil(${1:\\$x as xs:double})", "trigger":"math:ceil", "description":"($x as xs:double)"}, {"content":"math:fabs(${1:\\$x as xs:double})", "trigger":"math:fabs", "description":"($x as xs:double)"}, {"content":"math:floor(${1:\\$x as xs:double})", "trigger":"math:floor", "description":"($x as xs:double)"}, {"content":"math:fmod(${1:\\$x as xs:double}, ${2:\\$y as xs:double})", "trigger":"math:fmod", "description":"($x as xs:double, $y as xs:double)"}, {"content":"math:degrees(${1:\\$x as xs:double})", "trigger":"math:degrees", "description":"($x as xs:double)"}, {"content":"math:radians(${1:\\$x as xs:double})", "trigger":"math:radians", "description":"($x as xs:double)"}, {"content":"math:pi()", "trigger":"math:pi", "description":"()"}, {"content":"math:variance-p(${1:\\$arg as xs:double*})", "trigger":"math:variance-p", "description":"($arg as xs:double*)"}, {"content":"math:variance(${1:\\$arg as xs:double*})", "trigger":"math:variance", "description":"($arg as xs:double*)"}, {"content":"math:stddev-p(${1:\\$arg as xs:double*})", "trigger":"math:stddev-p", "description":"($arg as xs:double*)"}, {"content":"math:stddev(${1:\\$arg as xs:double*})", "trigger":"math:stddev", "description":"($arg as xs:double*)"}, {"content":"math:covariance-p(${1:\\$arg as json:array*})", "trigger":"math:covariance-p", "description":"($arg as json:array*)"}, {"content":"math:covariance(${1:\\$arg as json:array*})", "trigger":"math:covariance", "description":"($arg as json:array*)"}, {"content":"math:correlation(${1:\\$arg as json:array*})", "trigger":"math:correlation", "description":"($arg as json:array*)"}, {"content":"math:linear-model(${1:\\$arg as json:array*})", "trigger":"math:linear-model", "description":"($arg as json:array*)"}, {"content":"math:linear-model-intercept(${1:\\$linear-model as math:linear-model})", "trigger":"math:linear-model-intercept", "description":"($linear-model as math:linear-model)"}, {"content":"math:linear-model-rsquared(${1:\\$linear-model as math:linear-model})", "trigger":"math:linear-model-rsquared", "description":"($linear-model as math:linear-model)"}, {"content":"math:linear-model-coeff(${1:\\$linear-model as math:linear-model})", "trigger":"math:linear-model-coeff", "description":"($linear-model as math:linear-model)"}, {"content":"math:percentile(${1:\\$arg as xs:double*}, ${2:\\$p as xs:double*})", "trigger":"math:percentile", "description":"($arg as xs:double*, $p as xs:double*)"}, {"content":"math:median(${1:\\$arg as xs:double*})", "trigger":"math:median", "description":"($arg as xs:double*)"}, {"content":"cts:percentile(${1:\\$arg as xs:double*}, ${2:\\$p as xs:double*})", "trigger":"cts:percentile", "description":"($arg as xs:double*, $p as xs:double*)"}, {"content":"cts:median(${1:\\$arg as xs:double*})", "trigger":"cts:median", "description":"($arg as xs:double*)"}, {"content":"math:rank(${1:\\$arg1 as xs:anyAtomicType*}, ${2:\\$arg2 as xs:anyAtomicType})", "trigger":"math:rank", "description":"($arg1 as xs:anyAtomicType*, $arg2 as xs:anyAtomicType)"}, {"content":"math:rank(${1:\\$arg1 as xs:anyAtomicType*}, ${2:\\$arg2 as xs:anyAtomicType}, ${3:\\$options as xs:string*})", "trigger":"math:rank", "description":"($arg1 as xs:anyAtomicType*, $arg2 as xs:anyAtomicType, $options as xs:string*)"}, {"content":"math:percent-rank(${1:\\$arg as xs:anyAtomicType*}, ${2:\\$value as xs:anyAtomicType})", "trigger":"math:percent-rank", "description":"($arg as xs:anyAtomicType*, $value as xs:anyAtomicType)"}, {"content":"math:percent-rank(${1:\\$arg as xs:anyAtomicType*}, ${2:\\$value as xs:anyAtomicType}, ${3:\\$options as xs:string*})", "trigger":"math:percent-rank", "description":"($arg as xs:anyAtomicType*, $value as xs:anyAtomicType, $options as xs:string*)"}, {"content":"cts:rank(${1:\\$arg as xs:anyAtomicType*}, ${2:\\$value as xs:anyAtomicType})", "trigger":"cts:rank", "description":"($arg as xs:anyAtomicType*, $value as xs:anyAtomicType)"}, {"content":"cts:rank(${1:\\$arg as xs:anyAtomicType*}, ${2:\\$value as xs:anyAtomicType}, ${3:\\$options as xs:string*})", "trigger":"cts:rank", "description":"($arg as xs:anyAtomicType*, $value as xs:anyAtomicType, $options as xs:string*)"}, {"content":"cts:percent-rank(${1:\\$arg as xs:anyAtomicType*}, ${2:\\$value as xs:anyAtomicType})", "trigger":"cts:percent-rank", "description":"($arg as xs:anyAtomicType*, $value as xs:anyAtomicType)"}, {"content":"cts:percent-rank(${1:\\$arg as xs:anyAtomicType*}, ${2:\\$value as xs:anyAtomicType}, ${3:\\$options as xs:string*})", "trigger":"cts:percent-rank", "description":"($arg as xs:anyAtomicType*, $value as xs:anyAtomicType, $options as xs:string*)"}, {"content":"math:mode(${1:\\$arg as xs:anyAtomicType*})", "trigger":"math:mode", "description":"($arg as xs:anyAtomicType*)"}, {"content":"math:mode(${1:\\$arg as xs:anyAtomicType*}, ${2:\\$options as xs:string*})", "trigger":"math:mode", "description":"($arg as xs:anyAtomicType*, $options as xs:string*)"}, {"content":"math:trunc(${1:\\$arg as numeric?})", "trigger":"math:trunc", "description":"($arg as numeric?)"}, {"content":"math:trunc(${1:\\$arg as numeric?}, ${2:\\$n as xs:integer})", "trigger":"math:trunc", "description":"($arg as numeric?, $n as xs:integer)"}, {"content":"mcgm:point(${1:\\$point as element(Dot)})", "trigger":"mcgm:point", "description":"($point as element(Dot))"}, {"content":"mcgm:circle(${1:\\$radius as xs:double}, ${2:\\$center as element(Dot)})", "trigger":"mcgm:circle", "description":"($radius as xs:double, $center as element(Dot))"}, {"content":"mcgm:polygon(${1:\\$vertices as element(Dot)*})", "trigger":"mcgm:polygon", "description":"($vertices as element(Dot)*)"}, {"content":"mcgm:geospatial-query(${1:\\$regions as cts:region*})", "trigger":"mcgm:geospatial-query", "description":"($regions as cts:region*)"}, {"content":"mcgm:geospatial-query(${1:\\$regions as cts:region*}, ${2:\\$options as xs:string*})", "trigger":"mcgm:geospatial-query", "description":"($regions as cts:region*, $options as xs:string*)"}, {"content":"mcgm:geospatial-query(${1:\\$regions as cts:region*}, ${2:\\$options as xs:string*}, ${3:\\$weight as xs:double?})", "trigger":"mcgm:geospatial-query", "description":"($regions as cts:region*, $options as xs:string*, $weight as xs:double?)"}, {"content":"mcgm:geospatial-query-from-elements(${1:\\$regions as element(Dot)*})", "trigger":"mcgm:geospatial-query-from-elements", "description":"($regions as element(Dot)*)"}, {"content":"mcgm:geospatial-query-from-elements(${1:\\$regions as element(Dot)*}, ${2:\\$options as xs:string*})", "trigger":"mcgm:geospatial-query-from-elements", "description":"($regions as element(Dot)*, $options as xs:string*)"}, {"content":"mcgm:geospatial-query-from-elements(${1:\\$regions as element(Dot)*}, ${2:\\$options as xs:string*}, ${3:\\$weight as xs:double?})", "trigger":"mcgm:geospatial-query-from-elements", "description":"($regions as element(Dot)*, $options as xs:string*, $weight as xs:double?)"}, {"content":"msword:clean(${1:\\$uri as xs:string}, ${2:\\$doc as node()?})", "trigger":"msword:clean", "description":"($uri as xs:string, $doc as node()?)"}, {"content":"fn:name()", "trigger":"fn:name", "description":"()"}, {"content":"fn:name(${1:\\$arg as node()?})", "trigger":"fn:name", "description":"($arg as node()?)"}, {"content":"fn:local-name()", "trigger":"fn:local-name", "description":"()"}, {"content":"fn:local-name(${1:\\$arg as node()?})", "trigger":"fn:local-name", "description":"($arg as node()?)"}, {"content":"fn:namespace-uri()", "trigger":"fn:namespace-uri", "description":"()"}, {"content":"fn:namespace-uri(${1:\\$arg as node()?})", "trigger":"fn:namespace-uri", "description":"($arg as node()?)"}, {"content":"fn:number()", "trigger":"fn:number", "description":"()"}, {"content":"fn:number(${1:\\$arg as xs:anyAtomicType?})", "trigger":"fn:number", "description":"($arg as xs:anyAtomicType?)"}, {"content":"fn:lang(${1:\\$testlang as xs:string?})", "trigger":"fn:lang", "description":"($testlang as xs:string?)"}, {"content":"fn:lang(${1:\\$testlang as xs:string?}, ${2:\\$node as node()})", "trigger":"fn:lang", "description":"($testlang as xs:string?, $node as node())"}, {"content":"fn:root()", "trigger":"fn:root", "description":"()"}, {"content":"fn:root(${1:\\$arg as node()?})", "trigger":"fn:root", "description":"($arg as node()?)"}, {"content":"fn:generate-id()", "trigger":"fn:generate-id", "description":"()"}, {"content":"fn:generate-id(${1:\\$node as node()?})", "trigger":"fn:generate-id", "description":"($node as node()?)"}, {"content":"fn:abs(${1:\\$arg as numeric?})", "trigger":"fn:abs", "description":"($arg as numeric?)"}, {"content":"fn:ceiling(${1:\\$arg as numeric?})", "trigger":"fn:ceiling", "description":"($arg as numeric?)"}, {"content":"fn:floor(${1:\\$arg as numeric?})", "trigger":"fn:floor", "description":"($arg as numeric?)"}, {"content":"fn:round(${1:\\$arg as numeric?})", "trigger":"fn:round", "description":"($arg as numeric?)"}, {"content":"fn:round-half-to-even(${1:\\$arg as numeric?})", "trigger":"fn:round-half-to-even", "description":"($arg as numeric?)"}, {"content":"fn:round-half-to-even(${1:\\$arg as numeric?}, ${2:\\$precision as xs:integer})", "trigger":"fn:round-half-to-even", "description":"($arg as numeric?, $precision as xs:integer)"}, {"content":"cts:index-order(${1:\\$index as cts:reference})", "trigger":"cts:index-order", "description":"($index as cts:reference)"}, {"content":"cts:index-order(${1:\\$index as cts:reference}, ${2:\\$options as xs:string*})", "trigger":"cts:index-order", "description":"($index as cts:reference, $options as xs:string*)"}, {"content":"cts:score-order()", "trigger":"cts:score-order", "description":"()"}, {"content":"cts:score-order(${1:\\$options as xs:string*})", "trigger":"cts:score-order", "description":"($options as xs:string*)"}, {"content":"cts:fitness-order()", "trigger":"cts:fitness-order", "description":"()"}, {"content":"cts:fitness-order(${1:\\$options as xs:string*})", "trigger":"cts:fitness-order", "description":"($options as xs:string*)"}, {"content":"cts:confidence-order()", "trigger":"cts:confidence-order", "description":"()"}, {"content":"cts:confidence-order(${1:\\$options as xs:string*})", "trigger":"cts:confidence-order", "description":"($options as xs:string*)"}, {"content":"cts:quality-order()", "trigger":"cts:quality-order", "description":"()"}, {"content":"cts:quality-order(${1:\\$options as xs:string*})", "trigger":"cts:quality-order", "description":"($options as xs:string*)"}, {"content":"cts:document-order()", "trigger":"cts:document-order", "description":"()"}, {"content":"cts:document-order(${1:\\$options as xs:string*})", "trigger":"cts:document-order", "description":"($options as xs:string*)"}, {"content":"cts:unordered()", "trigger":"cts:unordered", "description":"()"}, {"content":"pkg:create(${1:\\$pkgname as xs:string})", "trigger":"pkg:create", "description":"($pkgname as xs:string)"}, {"content":"pkg:create(${1:\\$pkgname as xs:string}, ${2:\\$pkgbody as node()})", "trigger":"pkg:create", "description":"($pkgname as xs:string, $pkgbody as node())"}, {"content":"pkg:exists(${1:\\$pkgname as xs:string})", "trigger":"pkg:exists", "description":"($pkgname as xs:string)"}, {"content":"pkg:get-package-list()", "trigger":"pkg:get-package-list", "description":"()"}, {"content":"pkg:get-package-list(${1:\\$start as xs:unsignedLong})", "trigger":"pkg:get-package-list", "description":"($start as xs:unsignedLong)"}, {"content":"pkg:get-package-list(${1:\\$start as xs:unsignedLong}, ${2:\\$pageLength as xs:unsignedLong})", "trigger":"pkg:get-package-list", "description":"($start as xs:unsignedLong, $pageLength as xs:unsignedLong)"}, {"content":"pkg:installable(${1:\\$pkgname as xs:string})", "trigger":"pkg:installable", "description":"($pkgname as xs:string)"}, {"content":"pkg:install(${1:\\$pkgname as xs:string})", "trigger":"pkg:install", "description":"($pkgname as xs:string)"}, {"content":"pkg:valid(${1:\\$pkgname as xs:string})", "trigger":"pkg:valid", "description":"($pkgname as xs:string)"}, {"content":"pkg:errors(${1:\\$pkgname as xs:string})", "trigger":"pkg:errors", "description":"($pkgname as xs:string)"}, {"content":"pkg:revert(${1:\\$ticket-id as xs:string})", "trigger":"pkg:revert", "description":"($ticket-id as xs:string)"}, {"content":"pkg:database-configuration(${1:\\$database as xs:string})", "trigger":"pkg:database-configuration", "description":"($database as xs:string)"}, {"content":"pkg:put-database(${1:\\$pkgname as xs:string}, ${2:\\$dbxml as element(db:package-database)})", "trigger":"pkg:put-database", "description":"($pkgname as xs:string, $dbxml as element(db:package-database))"}, {"content":"pkg:get-database(${1:\\$pkgname as xs:string}, ${2:\\$database as xs:string})", "trigger":"pkg:get-database", "description":"($pkgname as xs:string, $database as xs:string)"}, {"content":"pkg:remove-database(${1:\\$pkgname as xs:string}, ${2:\\$database as xs:string})", "trigger":"pkg:remove-database", "description":"($pkgname as xs:string, $database as xs:string)"}, {"content":"pkg:get-database-list(${1:\\$pkgname as xs:string})", "trigger":"pkg:get-database-list", "description":"($pkgname as xs:string)"}, {"content":"pkg:get-database-list(${1:\\$pkgname as xs:string}, ${2:\\$start as xs:unsignedLong})", "trigger":"pkg:get-database-list", "description":"($pkgname as xs:string, $start as xs:unsignedLong)"}, {"content":"pkg:get-database-list(${1:\\$pkgname as xs:string}, ${2:\\$start as xs:unsignedLong}, ${3:\\$pageLength as xs:unsignedLong})", "trigger":"pkg:get-database-list", "description":"($pkgname as xs:string, $start as xs:unsignedLong, $pageLength as xs:unsignedLong)"}, {"content":"pkg:server-configuration(${1:\\$group as xs:string}, ${2:\\$server as xs:string})", "trigger":"pkg:server-configuration", "description":"($group as xs:string, $server as xs:string)"}, {"content":"pkg:server-configuration(${1:\\$group as xs:string}, ${2:\\$server as xs:string}, ${3:\\$include-modules as xs:boolean})", "trigger":"pkg:server-configuration", "description":"($group as xs:string, $server as xs:string, $include-modules as xs:boolean)"}, {"content":"pkg:put-server(${1:\\$pkgname as xs:string}, ${2:\\$srvxml as element()})", "trigger":"pkg:put-server", "description":"($pkgname as xs:string, $srvxml as element())"}, {"content":"pkg:get-server(${1:\\$pkgname as xs:string}, ${2:\\$group as xs:string}, ${3:\\$server as xs:string})", "trigger":"pkg:get-server", "description":"($pkgname as xs:string, $group as xs:string, $server as xs:string)"}, {"content":"pkg:remove-server(${1:\\$pkgname as xs:string}, ${2:\\$group as xs:string}, ${3:\\$server as xs:string})", "trigger":"pkg:remove-server", "description":"($pkgname as xs:string, $group as xs:string, $server as xs:string)"}, {"content":"pkg:get-server-list(${1:\\$pkgname as xs:string})", "trigger":"pkg:get-server-list", "description":"($pkgname as xs:string)"}, {"content":"pkg:get-server-list(${1:\\$pkgname as xs:string}, ${2:\\$start as xs:unsignedLong})", "trigger":"pkg:get-server-list", "description":"($pkgname as xs:string, $start as xs:unsignedLong)"}, {"content":"pkg:get-server-list(${1:\\$pkgname as xs:string}, ${2:\\$start as xs:unsignedLong}, ${3:\\$pageLength as xs:unsignedLong})", "trigger":"pkg:get-server-list", "description":"($pkgname as xs:string, $start as xs:unsignedLong, $pageLength as xs:unsignedLong)"}, {"content":"pkg:get-package(${1:\\$pkgname as xs:string})", "trigger":"pkg:get-package", "description":"($pkgname as xs:string)"}, {"content":"pkg:get-package(${1:\\$pkgname as xs:string}, ${2:\\$mimetype as xs:string?})", "trigger":"pkg:get-package", "description":"($pkgname as xs:string, $mimetype as xs:string?)"}, {"content":"pkg:delete(${1:\\$pkgname as xs:string})", "trigger":"pkg:delete", "description":"($pkgname as xs:string)"}, {"content":"pkg:differences(${1:\\$pkgname as xs:string})", "trigger":"pkg:differences", "description":"($pkgname as xs:string)"}, {"content":"pkg:differences(${1:\\$pkgname as xs:string}, ${2:\\$only-diffs as xs:boolean})", "trigger":"pkg:differences", "description":"($pkgname as xs:string, $only-diffs as xs:boolean)"}, {"content":"pkg:put-modules(${1:\\$pkgname as xs:string}, ${2:\\$group as xs:string}, ${3:\\$server as xs:string})", "trigger":"pkg:put-modules", "description":"($pkgname as xs:string, $group as xs:string, $server as xs:string)"}, {"content":"pkg:get-modules(${1:\\$pkgname as xs:string}, ${2:\\$group as xs:string}, ${3:\\$server as xs:string})", "trigger":"pkg:get-modules", "description":"($pkgname as xs:string, $group as xs:string, $server as xs:string)"}, {"content":"pkg:remove-modules(${1:\\$pkgname as xs:string}, ${2:\\$group as xs:string}, ${3:\\$server as xs:string})", "trigger":"pkg:remove-modules", "description":"($pkgname as xs:string, $group as xs:string, $server as xs:string)"}, {"content":"ooxml:package-uris(${1:\\$package as node()})", "trigger":"ooxml:package-uris", "description":"($package as node())"}, {"content":"ooxml:package-parts(${1:\\$package as node()})", "trigger":"ooxml:package-parts", "description":"($package as node())"}, {"content":"ooxml:package-parts-insert(${1:\\$directory as xs:string?}, ${2:\\$package-uris as xs:string*}, ${3:\\$package-parts as node()*})", "trigger":"ooxml:package-parts-insert", "description":"($directory as xs:string?, $package-uris as xs:string*, $package-parts as node()*)"}, {"content":"ooxml:package-parts-insert(${1:\\$directory as xs:string?}, ${2:\\$package-uris as xs:string*}, ${3:\\$package-parts as node()*}, ${4:\\$permissions as item()*})", "trigger":"ooxml:package-parts-insert", "description":"($directory as xs:string?, $package-uris as xs:string*, $package-parts as node()*, $permissions as item()*)"}, {"content":"ooxml:package-parts-insert(${1:\\$directory as xs:string?}, ${2:\\$package-uris as xs:string*}, ${3:\\$package-parts as node()*}, ${4:\\$permissions as item()*}, ${5:\\$collections as xs:string*})", "trigger":"ooxml:package-parts-insert", "description":"($directory as xs:string?, $package-uris as xs:string*, $package-parts as node()*, $permissions as item()*, $collections as xs:string*)"}, {"content":"ooxml:package-parts-insert(${1:\\$directory as xs:string?}, ${2:\\$package-uris as xs:string*}, ${3:\\$package-parts as node()*}, ${4:\\$permissions as item()*}, ${5:\\$collections as xs:string*}, ${6:\\$quality as xs:int?})", "trigger":"ooxml:package-parts-insert", "description":"($directory as xs:string?, $package-uris as xs:string*, $package-parts as node()*, $permissions as item()*, $collections as xs:string*, $quality as xs:int?)"}, {"content":"ooxml:package-parts-insert(${1:\\$directory as xs:string?}, ${2:\\$package-uris as xs:string*}, ${3:\\$package-parts as node()*}, ${4:\\$permissions as item()*}, ${5:\\$collections as xs:string*}, ${6:\\$quality as xs:int?}, ${7:\\$forest-ids as xs:unsignedLong*})", "trigger":"ooxml:package-parts-insert", "description":"($directory as xs:string?, $package-uris as xs:string*, $package-parts as node()*, $permissions as item()*, $collections as xs:string*, $quality as xs:int?, $forest-ids as xs:unsignedLong*)"}, {"content":"manage:/manage/v2/packages(${1:\\$start as string}, ${2:\\$pageLength as string}, ${3:\\$format as string})", "trigger":"manage:/manage/v2/packages", "description":"($start as string, $pageLength as string, $format as string)"}, {"content":"manage:/manage/v2/packages(${1:\\$pkgname as string}, ${2:\\$format as string})", "trigger":"manage:/manage/v2/packages", "description":"($pkgname as string, $format as string)"}, {"content":"manage:/manage/v2/packages/{pkgname}()", "trigger":"manage:/manage/v2/packages/{pkgname}", "description":"()"}, {"content":"manage:/manage/v2/packages/{pkgname}(${1:\\$view as string}, ${2:\\$filename as string}, ${3:\\$format as string})", "trigger":"manage:/manage/v2/packages/{pkgname}", "description":"($view as string, $filename as string, $format as string)"}, {"content":"manage:/manage/v2/packages/{pkgname}(${1:\\$format as string})", "trigger":"manage:/manage/v2/packages/{pkgname}", "description":"($format as string)"}, {"content":"manage:/manage/v2/packages/{pkgname}()", "trigger":"manage:/manage/v2/packages/{pkgname}", "description":"()"}, {"content":"manage:/manage/v2/packages/{pkgname}/databases(${1:\\$start as string}, ${2:\\$pageLength as string}, ${3:\\$format as string})", "trigger":"manage:/manage/v2/packages/{pkgname}/databases", "description":"($start as string, $pageLength as string, $format as string)"}, {"content":"manage:/manage/v2/packages/{pkgname}/databases/{name}()", "trigger":"manage:/manage/v2/packages/{pkgname}/databases/{name}", "description":"()"}, {"content":"manage:/manage/v2/packages/{pkgname}/databases/{name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/packages/{pkgname}/databases/{name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/packages/{pkgname}/databases/{name}(${1:\\$format as string})", "trigger":"manage:/manage/v2/packages/{pkgname}/databases/{name}", "description":"($format as string)"}, {"content":"manage:/manage/v2/packages/{pkgname}/databases/{name}()", "trigger":"manage:/manage/v2/packages/{pkgname}/databases/{name}", "description":"()"}, {"content":"manage:/manage/v2/packages/{pkgname}/servers(${1:\\$start as string}, ${2:\\$pageLength as string}, ${3:\\$format as string})", "trigger":"manage:/manage/v2/packages/{pkgname}/servers", "description":"($start as string, $pageLength as string, $format as string)"}, {"content":"manage:/manage/v2/packages/{pkgname}/servers/{name}(${1:\\$group-id={group-id} as string})", "trigger":"manage:/manage/v2/packages/{pkgname}/servers/{name}", "description":"($group-id={group-id} as string)"}, {"content":"manage:/manage/v2/packages/{pkgname}/servers/{name}(${1:\\$group-id={group-id} as string}, ${2:\\$format as string}, ${3:\\$modules as string})", "trigger":"manage:/manage/v2/packages/{pkgname}/servers/{name}", "description":"($group-id={group-id} as string, $format as string, $modules as string)"}, {"content":"manage:/manage/v2/packages/{pkgname}/servers/{name}(${1:\\$group-id={group-id} as string}, ${2:\\$format as string}, ${3:\\$modules as string})", "trigger":"manage:/manage/v2/packages/{pkgname}/servers/{name}", "description":"($group-id={group-id} as string, $format as string, $modules as string)"}, {"content":"manage:/manage/v2/packages/{pkgname}/servers/{name}(${1:\\$group-id={group-id} as string}, ${2:\\$modules as string})", "trigger":"manage:/manage/v2/packages/{pkgname}/servers/{name}", "description":"($group-id={group-id} as string, $modules as string)"}, {"content":"manage:/manage/v2/packages/{pkgname}/install(${1:\\$format as string})", "trigger":"manage:/manage/v2/packages/{pkgname}/install", "description":"($format as string)"}, {"content":"manage:/manage/v2/tickets/{ticketnumber}/revert()", "trigger":"manage:/manage/v2/tickets/{ticketnumber}/revert", "description":"()"}, {"content":"pdf:clean(${1:\\$doc as node()?}, ${2:\\$toc as element()?})", "trigger":"pdf:clean", "description":"($doc as node()?, $toc as element()?)"}, {"content":"pdf:get-toc(${1:\\$uri as xs:string})", "trigger":"pdf:get-toc", "description":"($uri as xs:string)"}, {"content":"pdf:make-toc(${1:\\$toc as element()?})", "trigger":"pdf:make-toc", "description":"($toc as element()?)"}, {"content":"pdf:insert-toc-headers(${1:\\$doc as node()?}, ${2:\\$toc as element()?})", "trigger":"pdf:insert-toc-headers", "description":"($doc as node()?, $toc as element()?)"}, {"content":"cts:period-compare(${1:\\$period-1 as cts:period}, ${2:\\$operator as xs:string}, ${3:\\$period-2 as cts:period})", "trigger":"cts:period-compare", "description":"($period-1 as cts:period, $operator as xs:string, $period-2 as cts:period)"}, {"content":"temporal:document-period(${1:\\$temporal-collection as xs:string}, ${2:\\$axis as xs:string}, ${3:\\$root as node()})", "trigger":"temporal:document-period", "description":"($temporal-collection as xs:string, $axis as xs:string, $root as node())"}, {"content":"temporal:get-lsqt(${1:\\$temporal-collection as xs:string})", "trigger":"temporal:get-lsqt", "description":"($temporal-collection as xs:string)"}, {"content":"temporal:get-use-lsqt(${1:\\$temporal-collection as xs:string})", "trigger":"temporal:get-use-lsqt", "description":"($temporal-collection as xs:string)"}, {"content":"temporal:set-use-lsqt(${1:\\$temporal-collection as xs:string}, ${2:\\$on as xs:boolean})", "trigger":"temporal:set-use-lsqt", "description":"($temporal-collection as xs:string, $on as xs:boolean)"}, {"content":"temporal:advance-lsqt(${1:\\$temporal-collection as xs:string}, ${2:\\$lag as xs:string})", "trigger":"temporal:advance-lsqt", "description":"($temporal-collection as xs:string, $lag as xs:string)"}, {"content":"temporal:get-lsqt-automation(${1:\\$temporal-collection as xs:string})", "trigger":"temporal:get-lsqt-automation", "description":"($temporal-collection as xs:string)"}, {"content":"temporal:get-lsqt-automation-period(${1:\\$temporal-collection as xs:string})", "trigger":"temporal:get-lsqt-automation-period", "description":"($temporal-collection as xs:string)"}, {"content":"temporal:get-lsqt-automation-lag(${1:\\$temporal-collection as xs:string})", "trigger":"temporal:get-lsqt-automation-lag", "description":"($temporal-collection as xs:string)"}, {"content":"temporal:set-lsqt-automation(${1:\\$temporal-collection as xs:string}, ${2:\\$on as xs:boolean})", "trigger":"temporal:set-lsqt-automation", "description":"($temporal-collection as xs:string, $on as xs:boolean)"}, {"content":"temporal:set-lsqt-automation(${1:\\$temporal-collection as xs:string}, ${2:\\$on as xs:boolean}, ${3:\\$period as xs:unsignedInt})", "trigger":"temporal:set-lsqt-automation", "description":"($temporal-collection as xs:string, $on as xs:boolean, $period as xs:unsignedInt)"}, {"content":"temporal:set-lsqt-automation(${1:\\$temporal-collection as xs:string}, ${2:\\$on as xs:boolean}, ${3:\\$period as xs:unsignedInt}, ${4:\\$lag as xs:unsignedInt})", "trigger":"temporal:set-lsqt-automation", "description":"($temporal-collection as xs:string, $on as xs:boolean, $period as xs:unsignedInt, $lag as xs:unsignedInt)"}, {"content":"p:insert(${1:\\$pipeline-node as node()})", "trigger":"p:insert", "description":"($pipeline-node as node())"}, {"content":"p:create(${1:\\$name as xs:string}, ${2:\\$description as xs:string}, ${3:\\$success-action as element(p:action)?}, ${4:\\$failure-action as element(p:action)?}, ${5:\\$status-transitions as element(p:status-transition)*}, ${6:\\$state-transitions as element(p:state-transition)*})", "trigger":"p:create", "description":"($name as xs:string, $description as xs:string, $success-action as element(p:action)?, $failure-action as element(p:action)?, $status-transitions as element(p:status-transition)*, $state-transitions as element(p:state-transition)*)"}, {"content":"p:remove(${1:\\$pipeline-name as xs:string})", "trigger":"p:remove", "description":"($pipeline-name as xs:string)"}, {"content":"p:get(${1:\\$pipeline-name as xs:string})", "trigger":"p:get", "description":"($pipeline-name as xs:string)"}, {"content":"p:get-by-id(${1:\\$pipeline-id as xs:unsignedLong})", "trigger":"p:get-by-id", "description":"($pipeline-id as xs:unsignedLong)"}, {"content":"p:collection()", "trigger":"p:collection", "description":"()"}, {"content":"p:pipelines()", "trigger":"p:pipelines", "description":"()"}, {"content":"p:state-transition(${1:\\$state as xs:anyURI}, ${2:\\$description as xs:string}, ${3:\\$on-success as xs:anyURI?}, ${4:\\$on-failure as xs:anyURI?}, ${5:\\$priority as xs:unsignedLong?}, ${6:\\$default-action as element(p:action)?}, ${7:\\$rules as element(p:execute)*})", "trigger":"p:state-transition", "description":"($state as xs:anyURI, $description as xs:string, $on-success as xs:anyURI?, $on-failure as xs:anyURI?, $priority as xs:unsignedLong?, $default-action as element(p:action)?, $rules as element(p:execute)*)"}, {"content":"p:status-transition(${1:\\$status as xs:string}, ${2:\\$description as xs:string}, ${3:\\$on-success as xs:anyURI?}, ${4:\\$on-failure as xs:anyURI?}, ${5:\\$priority as xs:unsignedLong?}, ${6:\\$default-action as element(p:action)?}, ${7:\\$rules as element(p:execute)*})", "trigger":"p:status-transition", "description":"($status as xs:string, $description as xs:string, $on-success as xs:anyURI?, $on-failure as xs:anyURI?, $priority as xs:unsignedLong?, $default-action as element(p:action)?, $rules as element(p:execute)*)"}, {"content":"p:execute(${1:\\$condition as element(p:condition)?}, ${2:\\$action as element(p:action)?}, ${3:\\$description as xs:string?})", "trigger":"p:execute", "description":"($condition as element(p:condition)?, $action as element(p:action)?, $description as xs:string?)"}, {"content":"p:condition(${1:\\$module as xs:string}, ${2:\\$description as xs:string?}, ${3:\\$options as element()?})", "trigger":"p:condition", "description":"($module as xs:string, $description as xs:string?, $options as element()?)"}, {"content":"p:action(${1:\\$module as xs:string}, ${2:\\$description as xs:string?}, ${3:\\$options as element()?})", "trigger":"p:action", "description":"($module as xs:string, $description as xs:string?, $options as element()?)"}, {"content":"pki:create-template(${1:\\$name as xs:string}, ${2:\\$description as xs:string}, ${3:\\$key-type as xs:string?}, ${4:\\$key-options as element()?}, ${5:\\$csr as element(x509:req)})", "trigger":"pki:create-template", "description":"($name as xs:string, $description as xs:string, $key-type as xs:string?, $key-options as element()?, $csr as element(x509:req))"}, {"content":"pki:insert-template(${1:\\$template as element(pki:template)})", "trigger":"pki:insert-template", "description":"($template as element(pki:template))"}, {"content":"pki:delete-certificate(${1:\\$certificate-id as xs:unsignedLong})", "trigger":"pki:delete-certificate", "description":"($certificate-id as xs:unsignedLong)"}, {"content":"pki:delete-template(${1:\\$template-id as xs:unsignedLong})", "trigger":"pki:delete-template", "description":"($template-id as xs:unsignedLong)"}, {"content":"pki:template-get-id(${1:\\$template as element(pki:template)})", "trigger":"pki:template-get-id", "description":"($template as element(pki:template))"}, {"content":"pki:template-get-name(${1:\\$template as element(pki:template)})", "trigger":"pki:template-get-name", "description":"($template as element(pki:template))"}, {"content":"pki:template-set-name(${1:\\$template as element(pki:template)}, ${2:\\$name as xs:string})", "trigger":"pki:template-set-name", "description":"($template as element(pki:template), $name as xs:string)"}, {"content":"pki:template-get-description(${1:\\$template as element(pki:template)})", "trigger":"pki:template-get-description", "description":"($template as element(pki:template))"}, {"content":"pki:template-set-description(${1:\\$template as element(pki:template)}, ${2:\\$description as xs:string})", "trigger":"pki:template-set-description", "description":"($template as element(pki:template), $description as xs:string)"}, {"content":"pki:template-get-key-type(${1:\\$template as element(pki:template)})", "trigger":"pki:template-get-key-type", "description":"($template as element(pki:template))"}, {"content":"pki:template-set-key-type(${1:\\$template as element(pki:template)}, ${2:\\$key-type as xs:string})", "trigger":"pki:template-set-key-type", "description":"($template as element(pki:template), $key-type as xs:string)"}, {"content":"pki:template-get-version(${1:\\$template as element(pki:template)})", "trigger":"pki:template-get-version", "description":"($template as element(pki:template))"}, {"content":"pki:template-get-key-options(${1:\\$template as element(pki:template)})", "trigger":"pki:template-get-key-options", "description":"($template as element(pki:template))"}, {"content":"pki:template-set-key-options(${1:\\$template as element(pki:template)}, ${2:\\$key-options as element(pki:key-options)})", "trigger":"pki:template-set-key-options", "description":"($template as element(pki:template), $key-options as element(pki:key-options))"}, {"content":"pki:template-get-request(${1:\\$template as element(pki:template)})", "trigger":"pki:template-get-request", "description":"($template as element(pki:template))"}, {"content":"pki:template-set-request(${1:\\$template as element(pki:template)}, ${2:\\$req as element(x509:req)})", "trigger":"pki:template-set-request", "description":"($template as element(pki:template), $req as element(x509:req))"}, {"content":"pki:get-template-ids()", "trigger":"pki:get-template-ids", "description":"()"}, {"content":"pki:get-template(${1:\\$template-id as xs:unsignedLong*})", "trigger":"pki:get-template", "description":"($template-id as xs:unsignedLong*)"}, {"content":"pki:generate-certificate-request(${1:\\$template-id as xs:unsignedLong}, ${2:\\$common-name as xs:string}, ${3:\\$dns-name as xs:string?}, ${4:\\$ip-addr as xs:string?})", "trigger":"pki:generate-certificate-request", "description":"($template-id as xs:unsignedLong, $common-name as xs:string, $dns-name as xs:string?, $ip-addr as xs:string?)"}, {"content":"pki:get-pending-certificate-requests-pem(${1:\\$template-id as xs:unsignedLong})", "trigger":"pki:get-pending-certificate-requests-pem", "description":"($template-id as xs:unsignedLong)"}, {"content":"pki:get-pending-certificate-requests-xml(${1:\\$template-id as xs:unsignedLong})", "trigger":"pki:get-pending-certificate-requests-xml", "description":"($template-id as xs:unsignedLong)"}, {"content":"pki:insert-signed-certificates(${1:\\$certs as xs:string})", "trigger":"pki:insert-signed-certificates", "description":"($certs as xs:string)"}, {"content":"pki:insert-trusted-certificates(${1:\\$certs as xs:string})", "trigger":"pki:insert-trusted-certificates", "description":"($certs as xs:string)"}, {"content":"pki:get-trusted-certificate-ids()", "trigger":"pki:get-trusted-certificate-ids", "description":"()"}, {"content":"pki:get-certificate(${1:\\$template-id as xs:unsignedLong}, ${2:\\$common-name as xs:string}, ${3:\\$dns-name as xs:string?}, ${4:\\$ip-addr as xs:string?})", "trigger":"pki:get-certificate", "description":"($template-id as xs:unsignedLong, $common-name as xs:string, $dns-name as xs:string?, $ip-addr as xs:string?)"}, {"content":"pki:insert-host-certificate(${1:\\$template-id as xs:unsignedLong}, ${2:\\$certs as xs:string}, ${3:\\$pkey as xs:string})", "trigger":"pki:insert-host-certificate", "description":"($template-id as xs:unsignedLong, $certs as xs:string, $pkey as xs:string)"}, {"content":"pki:need-certificate(${1:\\$template-id as xs:unsignedLong}, ${2:\\$common-name as xs:string}, ${3:\\$dns-name as xs:string?}, ${4:\\$ip-addr as xs:string?})", "trigger":"pki:need-certificate", "description":"($template-id as xs:unsignedLong, $common-name as xs:string, $dns-name as xs:string?, $ip-addr as xs:string?)"}, {"content":"pki:get-pending-certificate-request(${1:\\$template-id as xs:unsignedLong}, ${2:\\$common-name as xs:string}, ${3:\\$dns-name as xs:string?}, ${4:\\$ip-addr as xs:string?})", "trigger":"pki:get-pending-certificate-request", "description":"($template-id as xs:unsignedLong, $common-name as xs:string, $dns-name as xs:string?, $ip-addr as xs:string?)"}, {"content":"pki:generate-temporary-certificate-if-necessary(${1:\\$template-id as xs:unsignedLong}, ${2:\\$valid-for as xs:unsignedInt}, ${3:\\$common-name as xs:string}, ${4:\\$dns-name as xs:string?}, ${5:\\$ip-addr as xs:string?})", "trigger":"pki:generate-temporary-certificate-if-necessary", "description":"($template-id as xs:unsignedLong, $valid-for as xs:unsignedInt, $common-name as xs:string, $dns-name as xs:string?, $ip-addr as xs:string?)"}, {"content":"pki:generate-temporary-certificate(${1:\\$template-id as xs:unsignedLong}, ${2:\\$valid-for as xs:unsignedInt}, ${3:\\$common-name as xs:string}, ${4:\\$dns-name as xs:string?}, ${5:\\$ip-addr as xs:string?})", "trigger":"pki:generate-temporary-certificate", "description":"($template-id as xs:unsignedLong, $valid-for as xs:unsignedInt, $common-name as xs:string, $dns-name as xs:string?, $ip-addr as xs:string?)"}, {"content":"pki:is-temporary(${1:\\$cert as element(pki:certificate)})", "trigger":"pki:is-temporary", "description":"($cert as element(pki:certificate))"}, {"content":"pki:get-certificate-xml(${1:\\$template-id as xs:unsignedLong}, ${2:\\$hostname as xs:string})", "trigger":"pki:get-certificate-xml", "description":"($template-id as xs:unsignedLong, $hostname as xs:string)"}, {"content":"pki:get-certificates-for-template-xml(${1:\\$template-id as xs:unsignedLong})", "trigger":"pki:get-certificates-for-template-xml", "description":"($template-id as xs:unsignedLong)"}, {"content":"pki:get-certificate-pem(${1:\\$template-id as xs:unsignedLong}, ${2:\\$hostname as xs:string})", "trigger":"pki:get-certificate-pem", "description":"($template-id as xs:unsignedLong, $hostname as xs:string)"}, {"content":"pki:get-template-by-name(${1:\\$template-name as xs:string})", "trigger":"pki:get-template-by-name", "description":"($template-name as xs:string)"}, {"content":"pki:get-template-certificate-authority(${1:\\$template-id as xs:unsignedLong})", "trigger":"pki:get-template-certificate-authority", "description":"($template-id as xs:unsignedLong)"}, {"content":"pki:generate-template-certificate-authority(${1:\\$template-id as xs:unsignedLong}, ${2:\\$valid-for as xs:unsignedInt})", "trigger":"pki:generate-template-certificate-authority", "description":"($template-id as xs:unsignedLong, $valid-for as xs:unsignedInt)"}, {"content":"pki:get-certificates(${1:\\$cert-id as xs:unsignedLong*})", "trigger":"pki:get-certificates", "description":"($cert-id as xs:unsignedLong*)"}, {"content":"pki:get-certificates-for-template(${1:\\$template-id as xs:unsignedLong})", "trigger":"pki:get-certificates-for-template", "description":"($template-id as xs:unsignedLong)"}, {"content":"pki:template-in-use(${1:\\$template-id as xs:unsignedLong})", "trigger":"pki:template-in-use", "description":"($template-id as xs:unsignedLong)"}, {"content":"pki:insert-certificate-revocation-list(${1:\\$url as xs:string}, ${2:\\$crl as item()})", "trigger":"pki:insert-certificate-revocation-list", "description":"($url as xs:string, $crl as item())"}, {"content":"plugin:plugins(${1:\\$capability as xs:string*})", "trigger":"plugin:plugins", "description":"($capability as xs:string*)"}, {"content":"plugin:plugins(${1:\\$capability as xs:string*}, ${2:\\$scope as xs:string})", "trigger":"plugin:plugins", "description":"($capability as xs:string*, $scope as xs:string)"}, {"content":"plugin:enumerate(${1:\\$uri as xs:string})", "trigger":"plugin:enumerate", "description":"($uri as xs:string)"}, {"content":"plugin:enumerate(${1:\\$uri as xs:string}, ${2:\\$scope as xs:string})", "trigger":"plugin:enumerate", "description":"($uri as xs:string, $scope as xs:string)"}, {"content":"plugin:capability(${1:\\$capability as xs:string}, ${2:\\$uri as xs:string})", "trigger":"plugin:capability", "description":"($capability as xs:string, $uri as xs:string)"}, {"content":"plugin:capability(${1:\\$capability as xs:string}, ${2:\\$uri as xs:string}, ${3:\\$scope as xs:string})", "trigger":"plugin:capability", "description":"($capability as xs:string, $uri as xs:string, $scope as xs:string)"}, {"content":"plugin:implementations(${1:\\$capability as xs:string})", "trigger":"plugin:implementations", "description":"($capability as xs:string)"}, {"content":"plugin:implementations(${1:\\$capability as xs:string}, ${2:\\$scope as xs:string})", "trigger":"plugin:implementations", "description":"($capability as xs:string, $scope as xs:string)"}, {"content":"plugin:register(${1:\\$capabilities as map:map}, ${2:\\$plugin-uri as xs:string})", "trigger":"plugin:register", "description":"($capabilities as map:map, $plugin-uri as xs:string)"}, {"content":"plugin:initialize-scope(${1:\\$scope as xs:string})", "trigger":"plugin:initialize-scope", "description":"($scope as xs:string)"}, {"content":"plugin:flush-scope(${1:\\$scope as xs:string})", "trigger":"plugin:flush-scope", "description":"($scope as xs:string)"}, {"content":"plugin:flush-scope(${1:\\$scope as xs:string}, ${2:\\$pid as xs:string?})", "trigger":"plugin:flush-scope", "description":"($scope as xs:string, $pid as xs:string?)"}, {"content":"plugin:install-from-zip(${1:\\$scope as xs:string}, ${2:\\$zip as binary()})", "trigger":"plugin:install-from-zip", "description":"($scope as xs:string, $zip as binary())"}, {"content":"plugin:uninstall(${1:\\$scope as xs:string}, ${2:\\$pid as xs:string?})", "trigger":"plugin:uninstall", "description":"($scope as xs:string, $pid as xs:string?)"}, {"content":"plugin:asset(${1:\\$pid as xs:string}, ${2:\\$scope as xs:string}, ${3:\\$asset-path as xs:string})", "trigger":"plugin:asset", "description":"($pid as xs:string, $scope as xs:string, $asset-path as xs:string)"}, {"content":"plugin:asset-exists(${1:\\$pid as xs:string}, ${2:\\$scope as xs:string}, ${3:\\$asset-path as xs:string})", "trigger":"plugin:asset-exists", "description":"($pid as xs:string, $scope as xs:string, $asset-path as xs:string)"}, {"content":"plugin:install-from-filesystem(${1:\\$scope as xs:string})", "trigger":"plugin:install-from-filesystem", "description":"($scope as xs:string)"}, {"content":"ppt:clean(${1:\\$uri as xs:string}, ${2:\\$doc as node()?})", "trigger":"ppt:clean", "description":"($uri as xs:string, $doc as node()?)"}, {"content":"prof:enable(${1:\\$request-id as xs:unsignedLong})", "trigger":"prof:enable", "description":"($request-id as xs:unsignedLong)"}, {"content":"prof:disable(${1:\\$request-id as xs:unsignedLong})", "trigger":"prof:disable", "description":"($request-id as xs:unsignedLong)"}, {"content":"prof:reset(${1:\\$request-id as xs:unsignedLong})", "trigger":"prof:reset", "description":"($request-id as xs:unsignedLong)"}, {"content":"prof:report(${1:\\$request-id as xs:unsignedLong})", "trigger":"prof:report", "description":"($request-id as xs:unsignedLong)"}, {"content":"prof:allowed(${1:\\$request-id as xs:unsignedLong})", "trigger":"prof:allowed", "description":"($request-id as xs:unsignedLong)"}, {"content":"prof:eval(${1:\\$xquery as xs:string})", "trigger":"prof:eval", "description":"($xquery as xs:string)"}, {"content":"prof:eval(${1:\\$xquery as xs:string}, ${2:\\$vars as item()*})", "trigger":"prof:eval", "description":"($xquery as xs:string, $vars as item()*)"}, {"content":"prof:eval(${1:\\$xquery as xs:string}, ${2:\\$vars as item()*}, ${3:\\$options as (element()|map:map)?})", "trigger":"prof:eval", "description":"($xquery as xs:string, $vars as item()*, $options as (element()|map:map)?)"}, {"content":"prof:invoke(${1:\\$path as xs:string})", "trigger":"prof:invoke", "description":"($path as xs:string)"}, {"content":"prof:invoke(${1:\\$path as xs:string}, ${2:\\$vars as item()*})", "trigger":"prof:invoke", "description":"($path as xs:string, $vars as item()*)"}, {"content":"prof:invoke(${1:\\$path as xs:string}, ${2:\\$vars as item()*}, ${3:\\$options as (element()|map:map)?})", "trigger":"prof:invoke", "description":"($path as xs:string, $vars as item()*, $options as (element()|map:map)?)"}, {"content":"prof:value(${1:\\$expr as xs:string})", "trigger":"prof:value", "description":"($expr as xs:string)"}, {"content":"prof:xslt-eval(${1:\\$stylesheet as node()})", "trigger":"prof:xslt-eval", "description":"($stylesheet as node())"}, {"content":"prof:xslt-eval(${1:\\$stylesheet as node()}, ${2:\\$input as node()?})", "trigger":"prof:xslt-eval", "description":"($stylesheet as node(), $input as node()?)"}, {"content":"prof:xslt-eval(${1:\\$stylesheet as node()}, ${2:\\$input as node()?}, ${3:\\$params as map:map?})", "trigger":"prof:xslt-eval", "description":"($stylesheet as node(), $input as node()?, $params as map:map?)"}, {"content":"prof:xslt-eval(${1:\\$stylesheet as node()}, ${2:\\$input as node()?}, ${3:\\$params as map:map?}, ${4:\\$options as (element()|map:map)?})", "trigger":"prof:xslt-eval", "description":"($stylesheet as node(), $input as node()?, $params as map:map?, $options as (element()|map:map)?)"}, {"content":"prof:xslt-invoke(${1:\\$path as xs:string})", "trigger":"prof:xslt-invoke", "description":"($path as xs:string)"}, {"content":"prof:xslt-invoke(${1:\\$path as xs:string}, ${2:\\$input as node()?})", "trigger":"prof:xslt-invoke", "description":"($path as xs:string, $input as node()?)"}, {"content":"prof:xslt-invoke(${1:\\$path as xs:string}, ${2:\\$input as node()?}, ${3:\\$params as map:map?})", "trigger":"prof:xslt-invoke", "description":"($path as xs:string, $input as node()?, $params as map:map?)"}, {"content":"prof:xslt-invoke(${1:\\$path as xs:string}, ${2:\\$input as node()?}, ${3:\\$params as map:map?}, ${4:\\$options as (element()|map:map)?})", "trigger":"prof:xslt-invoke", "description":"($path as xs:string, $input as node()?, $params as map:map?, $options as (element()|map:map)?)"}, {"content":"fn:resolve-QName(${1:\\$qname as xs:string?}, ${2:\\$element as element()})", "trigger":"fn:resolve-QName", "description":"($qname as xs:string?, $element as element())"}, {"content":"fn:QName(${1:\\$paramURI as xs:string?}, ${2:\\$paramQName as xs:string})", "trigger":"fn:QName", "description":"($paramURI as xs:string?, $paramQName as xs:string)"}, {"content":"fn:expanded-QName(${1:\\$paramURI as xs:string?}, ${2:\\$paramLocal as xs:string})", "trigger":"fn:expanded-QName", "description":"($paramURI as xs:string?, $paramLocal as xs:string)"}, {"content":"fn:prefix-from-QName(${1:\\$arg as xs:QName?})", "trigger":"fn:prefix-from-QName", "description":"($arg as xs:QName?)"}, {"content":"fn:local-name-from-QName(${1:\\$arg as xs:QName?})", "trigger":"fn:local-name-from-QName", "description":"($arg as xs:QName?)"}, {"content":"fn:namespace-uri-from-QName(${1:\\$arg as xs:QName?})", "trigger":"fn:namespace-uri-from-QName", "description":"($arg as xs:QName?)"}, {"content":"fn:namespace-uri-for-prefix(${1:\\$prefix as xs:string?}, ${2:\\$element as element()})", "trigger":"fn:namespace-uri-for-prefix", "description":"($prefix as xs:string?, $element as element())"}, {"content":"fn:in-scope-prefixes(${1:\\$element as element()})", "trigger":"fn:in-scope-prefixes", "description":"($element as element())"}, {"content":"rdt:rule-validate(${1:\\$rule-collection as xs:string*})", "trigger":"rdt:rule-validate", "description":"($rule-collection as xs:string*)"}, {"content":"rdt:redact(${1:\\$doc as node()*}, ${2:\\$rule-collection as xs:string*})", "trigger":"rdt:redact", "description":"($doc as node()*, $rule-collection as xs:string*)"}, {"content":"fn:matches(${1:\\$input as xs:string?}, ${2:\\$pattern as xs:string})", "trigger":"fn:matches", "description":"($input as xs:string?, $pattern as xs:string)"}, {"content":"fn:matches(${1:\\$input as xs:string?}, ${2:\\$pattern as xs:string}, ${3:\\$flags as xs:string})", "trigger":"fn:matches", "description":"($input as xs:string?, $pattern as xs:string, $flags as xs:string)"}, {"content":"sql:like(${1:\\$input as xs:string?}, ${2:\\$pattern as xs:string}, ${3:\\$escape as xs:string})", "trigger":"sql:like", "description":"($input as xs:string?, $pattern as xs:string, $escape as xs:string)"}, {"content":"sql:glob(${1:\\$input as xs:string?}, ${2:\\$pattern as xs:string})", "trigger":"sql:glob", "description":"($input as xs:string?, $pattern as xs:string)"}, {"content":"fn:replace(${1:\\$input as xs:string?}, ${2:\\$pattern as xs:string}, ${3:\\$replacement as xs:string})", "trigger":"fn:replace", "description":"($input as xs:string?, $pattern as xs:string, $replacement as xs:string)"}, {"content":"fn:replace(${1:\\$input as xs:string?}, ${2:\\$pattern as xs:string}, ${3:\\$replacement as xs:string}, ${4:\\$flags as xs:string})", "trigger":"fn:replace", "description":"($input as xs:string?, $pattern as xs:string, $replacement as xs:string, $flags as xs:string)"}, {"content":"fn:analyze-string(${1:\\$in as xs:string?}, ${2:\\$regex as xs:string})", "trigger":"fn:analyze-string", "description":"($in as xs:string?, $regex as xs:string)"}, {"content":"fn:analyze-string(${1:\\$in as xs:string?}, ${2:\\$regex as xs:string}, ${3:\\$flags as xs:string})", "trigger":"fn:analyze-string", "description":"($in as xs:string?, $regex as xs:string, $flags as xs:string)"}, {"content":"fn:tokenize(${1:\\$input as xs:string?}, ${2:\\$pattern as xs:string})", "trigger":"fn:tokenize", "description":"($input as xs:string?, $pattern as xs:string)"}, {"content":"fn:tokenize(${1:\\$input as xs:string?}, ${2:\\$pattern as xs:string}, ${3:\\$flags as xs:string})", "trigger":"fn:tokenize", "description":"($input as xs:string?, $pattern as xs:string, $flags as xs:string)"}, {"content":"rest:rewrite(${1:\\$options as element(rest:options)}, ${2:\\$match-criteria as xs:string+})", "trigger":"rest:rewrite", "description":"($options as element(rest:options), $match-criteria as xs:string+)"}, {"content":"rest:report-error(${1:\\$error as element()})", "trigger":"rest:report-error", "description":"($error as element())"}, {"content":"rest:check-options(${1:\\$options as element(rest:options)})", "trigger":"rest:check-options", "description":"($options as element(rest:options))"}, {"content":"rest:get-raw-query-params()", "trigger":"rest:get-raw-query-params", "description":"()"}, {"content":"rest:matching-request(${1:\\$options as element(rest:options)}, ${2:\\$match-criteria as xs:string+})", "trigger":"rest:matching-request", "description":"($options as element(rest:options), $match-criteria as xs:string+)"}, {"content":"rest:process-request(${1:\\$request as element(rest:request)})", "trigger":"rest:process-request", "description":"($request as element(rest:request))"}, {"content":"rest:check-request(${1:\\$options as element(rest:request)})", "trigger":"rest:check-request", "description":"($options as element(rest:request))"}, {"content":"rest-client:/v1/documents(${1:\\$uri+ as string}, ${2:\\$database? as string}, ${3:\\$category* as string}, ${4:\\$format? as string}, ${5:\\$transform? as string}, ${6:\\$trans:{name}* as string}, ${7:\\$txid? as string})", "trigger":"rest-client:/v1/documents", "description":"($uri+ as string, $database? as string, $category* as string, $format? as string, $transform? as string, $trans:{name}* as string, $txid? as string)"}, {"content":"rest-client:/v1/documents(${1:\\$category* as string}, ${2:\\$database? as string}, ${3:\\$format? as string}, ${4:\\$txid? as string}, ${5:\\$uri as string})", "trigger":"rest-client:/v1/documents", "description":"($category* as string, $database? as string, $format? as string, $txid? as string, $uri as string)"}, {"content":"rest-client:/v1/documents(${1:\\$uri as string}, ${2:\\$category* as string}, ${3:\\$database? as string}, ${4:\\$format? as string}, ${5:\\$collection* as string}, ${6:\\$quality? as string}, ${7:\\$perm:{role}* as string}, ${8:\\$prop:{name}* as string}, ${9:\\$extract? as string}, ${10:\\$repair? as string}, ${11:\\$transform? as string}, ${12:\\$trans:{name}* as string}, ${13:\\$forest-name? as string}, ${14:\\$txid? as string}, ${15:\\$lang? as string}, ${16:\\$temporal-collection? as string}, ${17:\\$system-time? as string})", "trigger":"rest-client:/v1/documents", "description":"($uri as string, $category* as string, $database? as string, $format? as string, $collection* as string, $quality? as string, $perm:{role}* as string, $prop:{name}* as string, $extract? as string, $repair? as string, $transform? as string, $trans:{name}* as string, $forest-name? as string, $txid? as string, $lang? as string, $temporal-collection? as string, $system-time? as string)"}, {"content":"rest-client:/v1/documents?uri={db-uri}(${1:\\$uri as string}, ${2:\\$category* as string}, ${3:\\$database? as string}, ${4:\\$format? as string}, ${5:\\$txid? as string})", "trigger":"rest-client:/v1/documents?uri={db-uri}", "description":"($uri as string, $category* as string, $database? as string, $format? as string, $txid? as string)"}, {"content":"rest-client:/v1/documents?extension={ext}(${1:\\$extension as string}, ${2:\\$category* as string}, ${3:\\$directory? as string}, ${4:\\$database? as string}, ${5:\\$format? as string}, ${6:\\$collection* as string}, ${7:\\$quality? as string}, ${8:\\$perm:{role}* as string}, ${9:\\$prop:{name}* as string}, ${10:\\$extract? as string}, ${11:\\$repair? as string}, ${12:\\$transform? as string}, ${13:\\$trans:{name}* as string}, ${14:\\$forest-name? as string}, ${15:\\$txid? as string}, ${16:\\$lang? as string})", "trigger":"rest-client:/v1/documents?extension={ext}", "description":"($extension as string, $category* as string, $directory? as string, $database? as string, $format? as string, $collection* as string, $quality? as string, $perm:{role}* as string, $prop:{name}* as string, $extract? as string, $repair? as string, $transform? as string, $trans:{name}* as string, $forest-name? as string, $txid? as string, $lang? as string)"}, {"content":"rest-client:/v1/documents(${1:\\$database? as string}, ${2:\\$transform? as string}, ${3:\\$trans:{name}* as string}, ${4:\\$txid? as string}, ${5:\\$temporal-collection? as string}, ${6:\\$system-time? as string})", "trigger":"rest-client:/v1/documents", "description":"($database? as string, $transform? as string, $trans:{name}* as string, $txid? as string, $temporal-collection? as string, $system-time? as string)"}, {"content":"rest-client:/v1/documents(${1:\\$uri as string}, ${2:\\$category* as string}, ${3:\\$database? as string}, ${4:\\$format? as string}, ${5:\\$txid? as string})", "trigger":"rest-client:/v1/documents", "description":"($uri as string, $category* as string, $database? as string, $format? as string, $txid? as string)"}, {"content":"rest-client:/v1/documents(${1:\\$uri+ as string}, ${2:\\$category* as string}, ${3:\\$database? as string}, ${4:\\$txid? as string}, ${5:\\$temporal-collection? as string}, ${6:\\$system-time? as string})", "trigger":"rest-client:/v1/documents", "description":"($uri+ as string, $category* as string, $database? as string, $txid? as string, $temporal-collection? as string, $system-time? as string)"}, {"content":"rest-client:/v1/rest-apis(${1:\\$database? as string}, ${2:\\$format? as string}, ${3:\\$group? as string})", "trigger":"rest-client:/v1/rest-apis", "description":"($database? as string, $format? as string, $group? as string)"}, {"content":"rest-client:/v1/rest-apis()", "trigger":"rest-client:/v1/rest-apis", "description":"()"}, {"content":"rest-client:/v1/rest-apis/{name}(${1:\\$format? as string}, ${2:\\$group? as string})", "trigger":"rest-client:/v1/rest-apis/{name}", "description":"($format? as string, $group? as string)"}, {"content":"rest-client:/v1/rest-apis/{name}(${1:\\$include* as string}, ${2:\\$group? as string})", "trigger":"rest-client:/v1/rest-apis/{name}", "description":"($include* as string, $group? as string)"}, {"content":"rest-client:/v1/transactions(${1:\\$name as string}, ${2:\\$timeLimit as string}, ${3:\\$database? as string})", "trigger":"rest-client:/v1/transactions", "description":"($name as string, $timeLimit as string, $database? as string)"}, {"content":"rest-client:/v1/transactions/{txid}(${1:\\$format? as string}, ${2:\\$database? as string})", "trigger":"rest-client:/v1/transactions/{txid}", "description":"($format? as string, $database? as string)"}, {"content":"rest-client:/v1/transactions/{txid}(${1:\\$result as string}, ${2:\\$database? as string})", "trigger":"rest-client:/v1/transactions/{txid}", "description":"($result as string, $database? as string)"}, {"content":"rest-client:/v1/config/resources(${1:\\$format? as string}, ${2:\\$refresh? as string})", "trigger":"rest-client:/v1/config/resources", "description":"($format? as string, $refresh? as string)"}, {"content":"rest-client:/v1/config/resources/{name}()", "trigger":"rest-client:/v1/config/resources/{name}", "description":"()"}, {"content":"rest-client:/v1/config/resources/{name}(${1:\\$provider? as string}, ${2:\\$version? as string}, ${3:\\$title? as string}, ${4:\\$description? as string}, ${5:\\$method* as string}, ${6:\\$method:{name}* as string})", "trigger":"rest-client:/v1/config/resources/{name}", "description":"($provider? as string, $version? as string, $title? as string, $description? as string, $method* as string, $method:{name}* as string)"}, {"content":"rest-client:/v1/config/resources/{name}()", "trigger":"rest-client:/v1/config/resources/{name}", "description":"()"}, {"content":"rest-client:/v1/resources/{name}(${1:\\$database? as string}, ${2:\\$txid? as string}, ${3:\\$rs:{name}* as string})", "trigger":"rest-client:/v1/resources/{name}", "description":"($database? as string, $txid? as string, $rs:{name}* as string)"}, {"content":"rest-client:/v1/resources/{name}(${1:\\$database? as string}, ${2:\\$txid? as string}, ${3:\\$rs:{name}* as string})", "trigger":"rest-client:/v1/resources/{name}", "description":"($database? as string, $txid? as string, $rs:{name}* as string)"}, {"content":"rest-client:/v1/resources/{name}(${1:\\$database? as string}, ${2:\\$txid? as string}, ${3:\\$rs:{name}* as string})", "trigger":"rest-client:/v1/resources/{name}", "description":"($database? as string, $txid? as string, $rs:{name}* as string)"}, {"content":"rest-client:/v1/resources/{name}(${1:\\$database? as string}, ${2:\\$txid? as string}, ${3:\\$rs:{name}* as string})", "trigger":"rest-client:/v1/resources/{name}", "description":"($database? as string, $txid? as string, $rs:{name}* as string)"}, {"content":"rest-client:/v1/ext/{directories}(${1:\\$format? as string})", "trigger":"rest-client:/v1/ext/{directories}", "description":"($format? as string)"}, {"content":"rest-client:/v1/ext/{directories}()", "trigger":"rest-client:/v1/ext/{directories}", "description":"()"}, {"content":"rest-client:/v1/ext/{directories}/{asset}()", "trigger":"rest-client:/v1/ext/{directories}/{asset}", "description":"()"}, {"content":"rest-client:/v1/ext/{directories}/{asset}(${1:\\$format? as string}, ${2:\\$perm:{role}* as string})", "trigger":"rest-client:/v1/ext/{directories}/{asset}", "description":"($format? as string, $perm:{role}* as string)"}, {"content":"rest-client:/v1/ext/{directories}/{asset}()", "trigger":"rest-client:/v1/ext/{directories}/{asset}", "description":"()"}, {"content":"rest-client:/v1/eval(${1:\\$xquery? as string}, ${2:\\$javascript? as string}, ${3:\\$vars? as string}, ${4:\\$database? as string}, ${5:\\$txid? as string})", "trigger":"rest-client:/v1/eval", "description":"($xquery? as string, $javascript? as string, $vars? as string, $database? as string, $txid? as string)"}, {"content":"rest-client:/v1/invoke(${1:\\$module as string}, ${2:\\$vars? as string}, ${3:\\$database? as string}, ${4:\\$txid? as string})", "trigger":"rest-client:/v1/invoke", "description":"($module as string, $vars? as string, $database? as string, $txid? as string)"}, {"content":"rest-client:/v1/search(${1:\\$q? as string}, ${2:\\$structuredQuery? as string}, ${3:\\$start? as string}, ${4:\\$pageLength? as string}, ${5:\\$options? as string}, ${6:\\$view? as string}, ${7:\\$category* as string}, ${8:\\$database? as string}, ${9:\\$format? as string}, ${10:\\$txid? as string}, ${11:\\$collection* as string}, ${12:\\$directory? as string}, ${13:\\$transform? as string}, ${14:\\$trans:{name}* as string}, ${15:\\$forest-name* as string})", "trigger":"rest-client:/v1/search", "description":"($q? as string, $structuredQuery? as string, $start? as string, $pageLength? as string, $options? as string, $view? as string, $category* as string, $database? as string, $format? as string, $txid? as string, $collection* as string, $directory? as string, $transform? as string, $trans:{name}* as string, $forest-name* as string)"}, {"content":"rest-client:/v1/search(${1:\\$q? as string}, ${2:\\$start? as string}, ${3:\\$pageLength? as string}, ${4:\\$options? as string}, ${5:\\$view? as string}, ${6:\\$category* as string}, ${7:\\$database? as string}, ${8:\\$format? as string}, ${9:\\$txid? as string}, ${10:\\$collection* as string}, ${11:\\$directory? as string}, ${12:\\$transform? as string}, ${13:\\$trans:{name}* as string}, ${14:\\$forest-name* as string})", "trigger":"rest-client:/v1/search", "description":"($q? as string, $start? as string, $pageLength? as string, $options? as string, $view? as string, $category* as string, $database? as string, $format? as string, $txid? as string, $collection* as string, $directory? as string, $transform? as string, $trans:{name}* as string, $forest-name* as string)"}, {"content":"rest-client:/v1/search(${1:\\$database? as string}, ${2:\\$txid? as string}, ${3:\\$collection? as string}, ${4:\\$directory? as string})", "trigger":"rest-client:/v1/search", "description":"($database? as string, $txid? as string, $collection? as string, $directory? as string)"}, {"content":"rest-client:/v1/keyvalue(${1:\\$key? as string}, ${2:\\$element? as string}, ${3:\\$attribute? as string}, ${4:\\$value as string}, ${5:\\$start? as string}, ${6:\\$pageLength? as string}, ${7:\\$options? as string}, ${8:\\$view? as string}, ${9:\\$format? as string}, ${10:\\$txid? as string}, ${11:\\$collection* as string}, ${12:\\$directory? as string})", "trigger":"rest-client:/v1/keyvalue", "description":"($key? as string, $element? as string, $attribute? as string, $value as string, $start? as string, $pageLength? as string, $options? as string, $view? as string, $format? as string, $txid? as string, $collection* as string, $directory? as string)"}, {"content":"rest-client:/v1/qbe(${1:\\$query? as string}, ${2:\\$start? as string}, ${3:\\$pageLength? as string}, ${4:\\$options? as string}, ${5:\\$category* as string}, ${6:\\$database? as string}, ${7:\\$view? as string}, ${8:\\$format? as string}, ${9:\\$txid? as string}, ${10:\\$collection* as string}, ${11:\\$directory? as string}, ${12:\\$transform? as string}, ${13:\\$trans:{name}* as string}, ${14:\\$forest-name* as string})", "trigger":"rest-client:/v1/qbe", "description":"($query? as string, $start? as string, $pageLength? as string, $options? as string, $category* as string, $database? as string, $view? as string, $format? as string, $txid? as string, $collection* as string, $directory? as string, $transform? as string, $trans:{name}* as string, $forest-name* as string)"}, {"content":"rest-client:/v1/qbe(${1:\\$start? as string}, ${2:\\$pageLength? as string}, ${3:\\$options? as string}, ${4:\\$category* as string}, ${5:\\$database? as string}, ${6:\\$view* as string}, ${7:\\$format? as string}, ${8:\\$txid? as string}, ${9:\\$collection* as string}, ${10:\\$directory? as string}, ${11:\\$transform? as string}, ${12:\\$trans:{name}* as string}, ${13:\\$forest-name* as string})", "trigger":"rest-client:/v1/qbe", "description":"($start? as string, $pageLength? as string, $options? as string, $category* as string, $database? as string, $view* as string, $format? as string, $txid? as string, $collection* as string, $directory? as string, $transform? as string, $trans:{name}* as string, $forest-name* as string)"}, {"content":"rest-client:/v1/values(${1:\\$database? as string}, ${2:\\$format? as string}, ${3:\\$options? as string})", "trigger":"rest-client:/v1/values", "description":"($database? as string, $format? as string, $options? as string)"}, {"content":"rest-client:/v1/values/{name}(${1:\\$q? as string}, ${2:\\$structuredQuery? as string}, ${3:\\$options? as string}, ${4:\\$database? as string}, ${5:\\$view? as string}, ${6:\\$format? as string}, ${7:\\$collection* as string}, ${8:\\$directory? as string}, ${9:\\$direction? as string}, ${10:\\$frequency? as string}, ${11:\\$limit? as string}, ${12:\\$start? as string}, ${13:\\$pageLength? as string}, ${14:\\$aggregate? as string}, ${15:\\$aggregatePath? as string}, ${16:\\$transform? as string}, ${17:\\$trans:{name}* as string}, ${18:\\$txid? as string}, ${19:\\$forest-name* as string})", "trigger":"rest-client:/v1/values/{name}", "description":"($q? as string, $structuredQuery? as string, $options? as string, $database? as string, $view? as string, $format? as string, $collection* as string, $directory? as string, $direction? as string, $frequency? as string, $limit? as string, $start? as string, $pageLength? as string, $aggregate? as string, $aggregatePath? as string, $transform? as string, $trans:{name}* as string, $txid? as string, $forest-name* as string)"}, {"content":"rest-client:/v1/values/{name}(${1:\\$q? as string}, ${2:\\$options? as string}, ${3:\\$database? as string}, ${4:\\$view? as string}, ${5:\\$format? as string}, ${6:\\$txid? as string}, ${7:\\$direction? as string}, ${8:\\$directory? as string}, ${9:\\$frequency? as string}, ${10:\\$limit? as string}, ${11:\\$start? as string}, ${12:\\$pageLength? as string}, ${13:\\$aggregate? as string}, ${14:\\$aggregatePath? as string}, ${15:\\$transform? as string}, ${16:\\$trans:{name}* as string}, ${17:\\$forest-name* as string})", "trigger":"rest-client:/v1/values/{name}", "description":"($q? as string, $options? as string, $database? as string, $view? as string, $format? as string, $txid? as string, $direction? as string, $directory? as string, $frequency? as string, $limit? as string, $start? as string, $pageLength? as string, $aggregate? as string, $aggregatePath? as string, $transform? as string, $trans:{name}* as string, $forest-name* as string)"}, {"content":"rest-client:/v1/suggest(${1:\\$partial-q? as string}, ${2:\\$q* as string}, ${3:\\$limit? as string}, ${4:\\$cursor-position? as string}, ${5:\\$options? as string}, ${6:\\$database? as string}, ${7:\\$format? as string})", "trigger":"rest-client:/v1/suggest", "description":"($partial-q? as string, $q* as string, $limit? as string, $cursor-position? as string, $options? as string, $database? as string, $format? as string)"}, {"content":"rest-client:/v1/suggest(${1:\\$partial-q? as string}, ${2:\\$q* as string}, ${3:\\$limit? as string}, ${4:\\$cursor-position? as string}, ${5:\\$options? as string}, ${6:\\$database? as string}, ${7:\\$format? as string})", "trigger":"rest-client:/v1/suggest", "description":"($partial-q? as string, $q* as string, $limit? as string, $cursor-position? as string, $options? as string, $database? as string, $format? as string)"}, {"content":"rest-client:/v1/alert/rules(${1:\\$database? as string}, ${2:\\$format? as string})", "trigger":"rest-client:/v1/alert/rules", "description":"($database? as string, $format? as string)"}, {"content":"rest-client:/v1/alert/rules/{name}(${1:\\$database? as string}, ${2:\\$format? as string})", "trigger":"rest-client:/v1/alert/rules/{name}", "description":"($database? as string, $format? as string)"}, {"content":"rest-client:/v1/alert/rules/{name}(${1:\\$database? as string}, ${2:\\$format? as string})", "trigger":"rest-client:/v1/alert/rules/{name}", "description":"($database? as string, $format? as string)"}, {"content":"rest-client:/v1/alert/rules/{name}(${1:\\$database? as string})", "trigger":"rest-client:/v1/alert/rules/{name}", "description":"($database? as string)"}, {"content":"rest-client:/v1/alert/rules/{name}(${1:\\$database? as string})", "trigger":"rest-client:/v1/alert/rules/{name}", "description":"($database? as string)"}, {"content":"rest-client:/v1/alert/match(${1:\\$uri* as string}, ${2:\\$q? as string}, ${3:\\$structuredQuery? as string}, ${4:\\$options? as string}, ${5:\\$rule* as string}, ${6:\\$start? as string}, ${7:\\$pageLength? as string}, ${8:\\$database? as string}, ${9:\\$format? as string})", "trigger":"rest-client:/v1/alert/match", "description":"($uri* as string, $q? as string, $structuredQuery? as string, $options? as string, $rule* as string, $start? as string, $pageLength? as string, $database? as string, $format? as string)"}, {"content":"rest-client:/v1/alert/match(${1:\\$options? as string}, ${2:\\$start? as string}, ${3:\\$pageLength? as string}, ${4:\\$database? as string}, ${5:\\$format? as string})", "trigger":"rest-client:/v1/alert/match", "description":"($options? as string, $start? as string, $pageLength? as string, $database? as string, $format? as string)"}, {"content":"rest-client:/v1/config/query(${1:\\$format? as string})", "trigger":"rest-client:/v1/config/query", "description":"($format? as string)"}, {"content":"rest-client:/v1/config/query()", "trigger":"rest-client:/v1/config/query", "description":"()"}, {"content":"rest-client:/v1/config/query/(default|{name})(${1:\\$format? as string})", "trigger":"rest-client:/v1/config/query/(default|{name})", "description":"($format? as string)"}, {"content":"rest-client:/v1/config/query/(default|{name})(${1:\\$format? as string})", "trigger":"rest-client:/v1/config/query/(default|{name})", "description":"($format? as string)"}, {"content":"rest-client:/v1/config/query/(default|{name})(${1:\\$format? as string})", "trigger":"rest-client:/v1/config/query/(default|{name})", "description":"($format? as string)"}, {"content":"rest-client:/v1/config/query/(default|{name})()", "trigger":"rest-client:/v1/config/query/(default|{name})", "description":"()"}, {"content":"rest-client:/v1/config/query/(default|{name})/{child-element}(${1:\\$format? as string})", "trigger":"rest-client:/v1/config/query/(default|{name})/{child-element}", "description":"($format? as string)"}, {"content":"rest-client:/v1/config/query/(default|{name})/{child-element}(${1:\\$format? as string})", "trigger":"rest-client:/v1/config/query/(default|{name})/{child-element}", "description":"($format? as string)"}, {"content":"rest-client:/v1/config/query/(default|{name})/{child-element}(${1:\\$format? as string})", "trigger":"rest-client:/v1/config/query/(default|{name})/{child-element}", "description":"($format? as string)"}, {"content":"rest-client:/v1/config/query/(default|{name})/{child-element}()", "trigger":"rest-client:/v1/config/query/(default|{name})/{child-element}", "description":"()"}, {"content":"rest-client:/v1/config/properties(${1:\\$format? as string})", "trigger":"rest-client:/v1/config/properties", "description":"($format? as string)"}, {"content":"rest-client:/v1/config/properties(${1:\\$format? as string})", "trigger":"rest-client:/v1/config/properties", "description":"($format? as string)"}, {"content":"rest-client:/v1/config/properties()", "trigger":"rest-client:/v1/config/properties", "description":"()"}, {"content":"rest-client:/v1/config/properties/{property-name}(${1:\\$format? as string})", "trigger":"rest-client:/v1/config/properties/{property-name}", "description":"($format? as string)"}, {"content":"rest-client:/v1/config/properties/(property-name)(${1:\\$format? as string})", "trigger":"rest-client:/v1/config/properties/(property-name)", "description":"($format? as string)"}, {"content":"rest-client:/v1/config/properties/{property-name}()", "trigger":"rest-client:/v1/config/properties/{property-name}", "description":"()"}, {"content":"rest-client:/v1/config/transforms(${1:\\$format? as string}, ${2:\\$refresh? as string})", "trigger":"rest-client:/v1/config/transforms", "description":"($format? as string, $refresh? as string)"}, {"content":"rest-client:/v1/config/transforms/{name}()", "trigger":"rest-client:/v1/config/transforms/{name}", "description":"()"}, {"content":"rest-client:/v1/config/transforms/{name}(${1:\\$title? as string}, ${2:\\$provider? as string}, ${3:\\$version? as string}, ${4:\\$description? as string}, ${5:\\$trans:{name}* as string}, ${6:\\$format? as string})", "trigger":"rest-client:/v1/config/transforms/{name}", "description":"($title? as string, $provider? as string, $version? as string, $description? as string, $trans:{name}* as string, $format? as string)"}, {"content":"rest-client:/v1/config/transforms/{name}()", "trigger":"rest-client:/v1/config/transforms/{name}", "description":"()"}, {"content":"rest-client:/v1/config/namespaces(${1:\\$format? as string})", "trigger":"rest-client:/v1/config/namespaces", "description":"($format? as string)"}, {"content":"rest-client:/v1/config/namespaces(${1:\\$format? as string})", "trigger":"rest-client:/v1/config/namespaces", "description":"($format? as string)"}, {"content":"rest-client:/v1/config/namespaces(${1:\\$format? as string})", "trigger":"rest-client:/v1/config/namespaces", "description":"($format? as string)"}, {"content":"rest-client:/v1/config/namespaces()", "trigger":"rest-client:/v1/config/namespaces", "description":"()"}, {"content":"rest-client:/v1/config/namespaces/{prefix}(${1:\\$format? as string})", "trigger":"rest-client:/v1/config/namespaces/{prefix}", "description":"($format? as string)"}, {"content":"rest-client:/v1/config/namespaces/{prefix}(${1:\\$format? as string})", "trigger":"rest-client:/v1/config/namespaces/{prefix}", "description":"($format? as string)"}, {"content":"rest-client:/v1/config/namespaces/{prefix}()", "trigger":"rest-client:/v1/config/namespaces/{prefix}", "description":"()"}, {"content":"rest-client:/v1/config/indexes(${1:\\$format? as string})", "trigger":"rest-client:/v1/config/indexes", "description":"($format? as string)"}, {"content":"rest-client:/v1/config/indexes/{name}(${1:\\$format? as string})", "trigger":"rest-client:/v1/config/indexes/{name}", "description":"($format? as string)"}, {"content":"rest-client:/v1/graphs(${1:\\$database? as string}, ${2:\\$graph? as string}, ${3:\\$default? as string}, ${4:\\$category? as string}, ${5:\\$txid? as string})", "trigger":"rest-client:/v1/graphs", "description":"($database? as string, $graph? as string, $default? as string, $category? as string, $txid? as string)"}, {"content":"rest-client:/v1/graphs(${1:\\$database? as string}, ${2:\\$graph? as string}, ${3:\\$default? as string}, ${4:\\$txid? as string})", "trigger":"rest-client:/v1/graphs", "description":"($database? as string, $graph? as string, $default? as string, $txid? as string)"}, {"content":"rest-client:/v1/graphs(${1:\\$database? as string}, ${2:\\$graph? as string}, ${3:\\$default? as string}, ${4:\\$repair? as string}, ${5:\\$category? as string}, ${6:\\$txid? as string}, ${7:\\$perm:{role}* as string})", "trigger":"rest-client:/v1/graphs", "description":"($database? as string, $graph? as string, $default? as string, $repair? as string, $category? as string, $txid? as string, $perm:{role}* as string)"}, {"content":"rest-client:/v1/graphs(${1:\\$database? as string}, ${2:\\$graph? as string}, ${3:\\$default? as string}, ${4:\\$repair? as string}, ${5:\\$category? as string}, ${6:\\$txid? as string}, ${7:\\$perm:{role}* as string})", "trigger":"rest-client:/v1/graphs", "description":"($database? as string, $graph? as string, $default? as string, $repair? as string, $category? as string, $txid? as string, $perm:{role}* as string)"}, {"content":"rest-client:/v1/graphs(${1:\\$database? as string}, ${2:\\$graph? as string}, ${3:\\$default? as string}, ${4:\\$category? as string}, ${5:\\$txid? as string})", "trigger":"rest-client:/v1/graphs", "description":"($database? as string, $graph? as string, $default? as string, $category? as string, $txid? as string)"}, {"content":"rest-client:/v1/graphs/sparql(${1:\\$query as string}, ${2:\\$default-graph-uri* as string}, ${3:\\$named-graph-uri* as string}, ${4:\\$database? as string}, ${5:\\$base? as string}, ${6:\\$txid? as string}, ${7:\\$start? as string}, ${8:\\$pageLength? as string}, ${9:\\$q? as string}, ${10:\\$structuredQuery? as string}, ${11:\\$options? as string}, ${12:\\$collection* as string}, ${13:\\$directory? as string}, ${14:\\$ruleset* as string}, ${15:\\$default-rulesets? as string}, ${16:\\$optimize? as int}, ${17:\\$bind:{name}* as string}, ${18:\\$bind:{name}:{type}* as string}, ${19:\\$bind:{name}@{lang}* as string})", "trigger":"rest-client:/v1/graphs/sparql", "description":"($query as string, $default-graph-uri* as string, $named-graph-uri* as string, $database? as string, $base? as string, $txid? as string, $start? as string, $pageLength? as string, $q? as string, $structuredQuery? as string, $options? as string, $collection* as string, $directory? as string, $ruleset* as string, $default-rulesets? as string, $optimize? as int, $bind:{name}* as string, $bind:{name}:{type}* as string, $bind:{name}@{lang}* as string)"}, {"content":"rest-client:/v1/graphs/sparql(${1:\\$query? as string}, ${2:\\$update? as string}, ${3:\\$default-graph-uri* as string}, ${4:\\$named-graph-uri* as string}, ${5:\\$using-graph-uri* as }, ${6:\\$using-named-graph-uri* as }, ${7:\\$database? as string}, ${8:\\$base? as string}, ${9:\\$default-permissions? as }, ${10:\\$perm:{role}* as string}, ${11:\\$txid? as string}, ${12:\\$start? as string}, ${13:\\$pageLength? as string}, ${14:\\$q? as string}, ${15:\\$structuredQuery? as string}, ${16:\\$options? as string}, ${17:\\$collection* as string}, ${18:\\$directory? as string}, ${19:\\$ruleset* as string}, ${20:\\$default-rulesets? as string}, ${21:\\$optimize? as int}, ${22:\\$bind:{name}* as string}, ${23:\\$bind:{name}:{type}* as string}, ${24:\\$bind:{name}@{lang}* as string})", "trigger":"rest-client:/v1/graphs/sparql", "description":"($query? as string, $update? as string, $default-graph-uri* as string, $named-graph-uri* as string, $using-graph-uri* as , $using-named-graph-uri* as , $database? as string, $base? as string, $default-permissions? as , $perm:{role}* as string, $txid? as string, $start? as string, $pageLength? as string, $q? as string, $structuredQuery? as string, $options? as string, $collection* as string, $directory? as string, $ruleset* as string, $default-rulesets? as string, $optimize? as int, $bind:{name}* as string, $bind:{name}:{type}* as string, $bind:{name}@{lang}* as string)"}, {"content":"rest-client:/v1/graphs/things(${1:\\$iri* as string}, ${2:\\$database? as string})", "trigger":"rest-client:/v1/graphs/things", "description":"($iri* as string, $database? as string)"}, {"content":"sem:ruleset-store(${1:\\$locations as xs:string*})", "trigger":"sem:ruleset-store", "description":"($locations as xs:string*)"}, {"content":"sem:ruleset-store(${1:\\$locations as xs:string*}, ${2:\\$store as sem:store*})", "trigger":"sem:ruleset-store", "description":"($locations as xs:string*, $store as sem:store*)"}, {"content":"sem:ruleset-store(${1:\\$locations as xs:string*}, ${2:\\$store as sem:store*}, ${3:\\$options as xs:string*})", "trigger":"sem:ruleset-store", "description":"($locations as xs:string*, $store as sem:store*, $options as xs:string*)"}, {"content":"sc:type()", "trigger":"sc:type", "description":"()"}, {"content":"sc:type(${1:\\$arg as item()})", "trigger":"sc:type", "description":"($arg as item())"}, {"content":"sc:simple-type()", "trigger":"sc:simple-type", "description":"()"}, {"content":"sc:simple-type(${1:\\$arg as item()})", "trigger":"sc:simple-type", "description":"($arg as item())"}, {"content":"sc:complex-type()", "trigger":"sc:complex-type", "description":"()"}, {"content":"sc:complex-type(${1:\\$arg as item()})", "trigger":"sc:complex-type", "description":"($arg as item())"}, {"content":"sc:type-apply(${1:\\$type as schema-type()}, ${2:\\$arg as item()})", "trigger":"sc:type-apply", "description":"($type as schema-type(), $arg as item())"}, {"content":"sc:element-decl()", "trigger":"sc:element-decl", "description":"()"}, {"content":"sc:element-decl(${1:\\$arg as item()})", "trigger":"sc:element-decl", "description":"($arg as item())"}, {"content":"sc:attribute-decl()", "trigger":"sc:attribute-decl", "description":"()"}, {"content":"sc:attribute-decl(${1:\\$arg as item()})", "trigger":"sc:attribute-decl", "description":"($arg as item())"}, {"content":"sc:annotations()", "trigger":"sc:annotations", "description":"()"}, {"content":"sc:annotations(${1:\\$arg as schema-component()})", "trigger":"sc:annotations", "description":"($arg as schema-component())"}, {"content":"sc:name()", "trigger":"sc:name", "description":"()"}, {"content":"sc:name(${1:\\$arg as schema-component()})", "trigger":"sc:name", "description":"($arg as schema-component())"}, {"content":"sc:particles()", "trigger":"sc:particles", "description":"()"}, {"content":"sc:particles(${1:\\$arg as schema-component()})", "trigger":"sc:particles", "description":"($arg as schema-component())"}, {"content":"sc:attributes()", "trigger":"sc:attributes", "description":"()"}, {"content":"sc:attributes(${1:\\$arg as schema-component()})", "trigger":"sc:attributes", "description":"($arg as schema-component())"}, {"content":"sc:function-return-type()", "trigger":"sc:function-return-type", "description":"()"}, {"content":"sc:function-return-type(${1:\\$arg as function(*)})", "trigger":"sc:function-return-type", "description":"($arg as function(*))"}, {"content":"sc:function-parameter-type()", "trigger":"sc:function-parameter-type", "description":"()"}, {"content":"sc:function-parameter-type(${1:\\$arg as function(*)})", "trigger":"sc:function-parameter-type", "description":"($arg as function(*))"}, {"content":"sc:function-parameter-type(${1:\\$arg as function(*)}, ${2:\\$param as xs:integer?})", "trigger":"sc:function-parameter-type", "description":"($arg as function(*), $param as xs:integer?)"}, {"content":"sc:type-named(${1:\\$arg as xs:QName})", "trigger":"sc:type-named", "description":"($arg as xs:QName)"}, {"content":"sc:facets()", "trigger":"sc:facets", "description":"()"}, {"content":"sc:facets(${1:\\$arg as schema-component()})", "trigger":"sc:facets", "description":"($arg as schema-component())"}, {"content":"sc:schema()", "trigger":"sc:schema", "description":"()"}, {"content":"sc:schema(${1:\\$arg as item()})", "trigger":"sc:schema", "description":"($arg as item())"}, {"content":"sc:component-property(${1:\\$propname as xs:string})", "trigger":"sc:component-property", "description":"($propname as xs:string)"}, {"content":"sc:component-property(${1:\\$propname as xs:string}, ${2:\\$arg as schema-component()})", "trigger":"sc:component-property", "description":"($propname as xs:string, $arg as schema-component())"}, {"content":"sc:schema-from-path(${1:\\$namespace as xs:string})", "trigger":"sc:schema-from-path", "description":"($namespace as xs:string)"}, {"content":"sc:schema-from-path(${1:\\$namespace as xs:string}, ${2:\\$location as xs:string})", "trigger":"sc:schema-from-path", "description":"($namespace as xs:string, $location as xs:string)"}, {"content":"sc:canonical-path()", "trigger":"sc:canonical-path", "description":"()"}, {"content":"sc:canonical-path(${1:\\$arg as schema-component()})", "trigger":"sc:canonical-path", "description":"($arg as schema-component())"}, {"content":"search:check-options(${1:\\$options as element(search:options)})", "trigger":"search:check-options", "description":"($options as element(search:options))"}, {"content":"search:check-options(${1:\\$options as element(search:options)}, ${2:\\$strict as xs:boolean?})", "trigger":"search:check-options", "description":"($options as element(search:options), $strict as xs:boolean?)"}, {"content":"search:estimate(${1:\\$cts-query as element()})", "trigger":"search:estimate", "description":"($cts-query as element())"}, {"content":"search:estimate(${1:\\$cts-query as element()}, ${2:\\$options as element(search:options)?})", "trigger":"search:estimate", "description":"($cts-query as element(), $options as element(search:options)?)"}, {"content":"search:get-default-options()", "trigger":"search:get-default-options", "description":"()"}, {"content":"search:parse(${1:\\$qtext as xs:string+})", "trigger":"search:parse", "description":"($qtext as xs:string+)"}, {"content":"search:parse(${1:\\$qtext as xs:string+}, ${2:\\$options as element(search:options)?})", "trigger":"search:parse", "description":"($qtext as xs:string+, $options as element(search:options)?)"}, {"content":"search:parse(${1:\\$qtext as xs:string+}, ${2:\\$options as element(search:options)?}, ${3:\\$output as xs:string?})", "trigger":"search:parse", "description":"($qtext as xs:string+, $options as element(search:options)?, $output as xs:string?)"}, {"content":"search:remove-constraint(${1:\\$qtext as xs:string}, ${2:\\$ptext as xs:string}, ${3:\\$options as element(search:options)?})", "trigger":"search:remove-constraint", "description":"($qtext as xs:string, $ptext as xs:string, $options as element(search:options)?)"}, {"content":"search:resolve(${1:\\$query as element()})", "trigger":"search:resolve", "description":"($query as element())"}, {"content":"search:resolve(${1:\\$query as element()}, ${2:\\$options as element(search:options)?})", "trigger":"search:resolve", "description":"($query as element(), $options as element(search:options)?)"}, {"content":"search:resolve(${1:\\$query as element()}, ${2:\\$options as element(search:options)?}, ${3:\\$start as xs:unsignedLong?})", "trigger":"search:resolve", "description":"($query as element(), $options as element(search:options)?, $start as xs:unsignedLong?)"}, {"content":"search:resolve(${1:\\$query as element()}, ${2:\\$options as element(search:options)?}, ${3:\\$start as xs:unsignedLong?}, ${4:\\$page-length as xs:unsignedLong?})", "trigger":"search:resolve", "description":"($query as element(), $options as element(search:options)?, $start as xs:unsignedLong?, $page-length as xs:unsignedLong?)"}, {"content":"search:resolve-nodes(${1:\\$query as element()})", "trigger":"search:resolve-nodes", "description":"($query as element())"}, {"content":"search:resolve-nodes(${1:\\$query as element()}, ${2:\\$options as element(search:options)?})", "trigger":"search:resolve-nodes", "description":"($query as element(), $options as element(search:options)?)"}, {"content":"search:resolve-nodes(${1:\\$query as element()}, ${2:\\$options as element(search:options)?}, ${3:\\$start as xs:unsignedLong?})", "trigger":"search:resolve-nodes", "description":"($query as element(), $options as element(search:options)?, $start as xs:unsignedLong?)"}, {"content":"search:resolve-nodes(${1:\\$query as element()}, ${2:\\$options as element(search:options)?}, ${3:\\$start as xs:unsignedLong?}, ${4:\\$page-length as xs:unsignedLong?})", "trigger":"search:resolve-nodes", "description":"($query as element(), $options as element(search:options)?, $start as xs:unsignedLong?, $page-length as xs:unsignedLong?)"}, {"content":"search:search(${1:\\$qtext as xs:string+})", "trigger":"search:search", "description":"($qtext as xs:string+)"}, {"content":"search:search(${1:\\$qtext as xs:string+}, ${2:\\$options as element(search:options)?})", "trigger":"search:search", "description":"($qtext as xs:string+, $options as element(search:options)?)"}, {"content":"search:search(${1:\\$qtext as xs:string+}, ${2:\\$options as element(search:options)?}, ${3:\\$start as xs:unsignedLong?})", "trigger":"search:search", "description":"($qtext as xs:string+, $options as element(search:options)?, $start as xs:unsignedLong?)"}, {"content":"search:search(${1:\\$qtext as xs:string+}, ${2:\\$options as element(search:options)?}, ${3:\\$start as xs:unsignedLong?}, ${4:\\$page-length as xs:unsignedLong?})", "trigger":"search:search", "description":"($qtext as xs:string+, $options as element(search:options)?, $start as xs:unsignedLong?, $page-length as xs:unsignedLong?)"}, {"content":"search:snippet(${1:\\$result as node()}, ${2:\\$cts-query as schema-element(cts:query)})", "trigger":"search:snippet", "description":"($result as node(), $cts-query as schema-element(cts:query))"}, {"content":"search:snippet(${1:\\$result as node()}, ${2:\\$cts-query as schema-element(cts:query)}, ${3:\\$options as element(search:transform-results)?})", "trigger":"search:snippet", "description":"($result as node(), $cts-query as schema-element(cts:query), $options as element(search:transform-results)?)"}, {"content":"search:suggest(${1:\\$qtext as xs:string+})", "trigger":"search:suggest", "description":"($qtext as xs:string+)"}, {"content":"search:suggest(${1:\\$qtext as xs:string+}, ${2:\\$options as element(search:options)?})", "trigger":"search:suggest", "description":"($qtext as xs:string+, $options as element(search:options)?)"}, {"content":"search:suggest(${1:\\$qtext as xs:string+}, ${2:\\$options as element(search:options)?}, ${3:\\$limit as xs:unsignedInt?})", "trigger":"search:suggest", "description":"($qtext as xs:string+, $options as element(search:options)?, $limit as xs:unsignedInt?)"}, {"content":"search:suggest(${1:\\$qtext as xs:string+}, ${2:\\$options as element(search:options)?}, ${3:\\$limit as xs:unsignedInt?}, ${4:\\$cursor-position as xs:unsignedInt?})", "trigger":"search:suggest", "description":"($qtext as xs:string+, $options as element(search:options)?, $limit as xs:unsignedInt?, $cursor-position as xs:unsignedInt?)"}, {"content":"search:suggest(${1:\\$qtext as xs:string+}, ${2:\\$options as element(search:options)?}, ${3:\\$limit as xs:unsignedInt?}, ${4:\\$cursor-position as xs:unsignedInt?}, ${5:\\$focus as xs:positiveInteger?})", "trigger":"search:suggest", "description":"($qtext as xs:string+, $options as element(search:options)?, $limit as xs:unsignedInt?, $cursor-position as xs:unsignedInt?, $focus as xs:positiveInteger?)"}, {"content":"search:suggest(${1:\\$qtext as xs:string+}, ${2:\\$options as element(search:options)?}, ${3:\\$limit as xs:unsignedInt?}, ${4:\\$cursor-position as xs:unsignedInt?}, ${5:\\$focus as xs:positiveInteger?}, ${6:\\$query as element(search:query)*})", "trigger":"search:suggest", "description":"($qtext as xs:string+, $options as element(search:options)?, $limit as xs:unsignedInt?, $cursor-position as xs:unsignedInt?, $focus as xs:positiveInteger?, $query as element(search:query)*)"}, {"content":"search:unparse(${1:\\$qtree as element()})", "trigger":"search:unparse", "description":"($qtree as element())"}, {"content":"search:values(${1:\\$spec-name as xs:string}, ${2:\\$options as element(search:options)})", "trigger":"search:values", "description":"($spec-name as xs:string, $options as element(search:options))"}, {"content":"search:values(${1:\\$spec-name as xs:string}, ${2:\\$options as element(search:options)}, ${3:\\$query as element(search:query)?})", "trigger":"search:values", "description":"($spec-name as xs:string, $options as element(search:options), $query as element(search:query)?)"}, {"content":"search:values(${1:\\$spec-name as xs:string}, ${2:\\$options as element(search:options)}, ${3:\\$query as element(search:query)?}, ${4:\\$limit as xs:unsignedLong?})", "trigger":"search:values", "description":"($spec-name as xs:string, $options as element(search:options), $query as element(search:query)?, $limit as xs:unsignedLong?)"}, {"content":"search:values(${1:\\$spec-name as xs:string}, ${2:\\$options as element(search:options)}, ${3:\\$query as element(search:query)?}, ${4:\\$limit as xs:unsignedLong?}, ${5:\\$start as xs:anyAtomicType?})", "trigger":"search:values", "description":"($spec-name as xs:string, $options as element(search:options), $query as element(search:query)?, $limit as xs:unsignedLong?, $start as xs:anyAtomicType?)"}, {"content":"search:values(${1:\\$spec-name as xs:string}, ${2:\\$options as element(search:options)}, ${3:\\$query as element(search:query)?}, ${4:\\$limit as xs:unsignedLong?}, ${5:\\$start as xs:anyAtomicType?}, ${6:\\$page-start as xs:unsignedLong?})", "trigger":"search:values", "description":"($spec-name as xs:string, $options as element(search:options), $query as element(search:query)?, $limit as xs:unsignedLong?, $start as xs:anyAtomicType?, $page-start as xs:unsignedLong?)"}, {"content":"search:values(${1:\\$spec-name as xs:string}, ${2:\\$options as element(search:options)}, ${3:\\$query as element(search:query)?}, ${4:\\$limit as xs:unsignedLong?}, ${5:\\$start as xs:anyAtomicType?}, ${6:\\$page-start as xs:unsignedLong?}, ${7:\\$page-length as xs:unsignedLong?})", "trigger":"search:values", "description":"($spec-name as xs:string, $options as element(search:options), $query as element(search:query)?, $limit as xs:unsignedLong?, $start as xs:anyAtomicType?, $page-start as xs:unsignedLong?, $page-length as xs:unsignedLong?)"}, {"content":"cts:period-range-query(${1:\\$axis-name as xs:string*}, ${2:\\$operator as xs:string})", "trigger":"cts:period-range-query", "description":"($axis-name as xs:string*, $operator as xs:string)"}, {"content":"cts:period-range-query(${1:\\$axis-name as xs:string*}, ${2:\\$operator as xs:string}, ${3:\\$period as cts:period*})", "trigger":"cts:period-range-query", "description":"($axis-name as xs:string*, $operator as xs:string, $period as cts:period*)"}, {"content":"cts:period-range-query(${1:\\$axis-name as xs:string*}, ${2:\\$operator as xs:string}, ${3:\\$period as cts:period*}, ${4:\\$options as xs:string*})", "trigger":"cts:period-range-query", "description":"($axis-name as xs:string*, $operator as xs:string, $period as cts:period*, $options as xs:string*)"}, {"content":"cts:period-range-query-axis(${1:\\$query as cts:period-range-query})", "trigger":"cts:period-range-query-axis", "description":"($query as cts:period-range-query)"}, {"content":"cts:period-range-query-operator(${1:\\$query as cts:period-range-query})", "trigger":"cts:period-range-query-operator", "description":"($query as cts:period-range-query)"}, {"content":"cts:period-range-query-period(${1:\\$query as cts:period-range-query})", "trigger":"cts:period-range-query-period", "description":"($query as cts:period-range-query)"}, {"content":"cts:period-range-query-options(${1:\\$query as cts:period-range-query})", "trigger":"cts:period-range-query-options", "description":"($query as cts:period-range-query)"}, {"content":"cts:lsqt-query(${1:\\$temporal-collection as xs:string})", "trigger":"cts:lsqt-query", "description":"($temporal-collection as xs:string)"}, {"content":"cts:lsqt-query(${1:\\$temporal-collection as xs:string}, ${2:\\$timestamp as xs:dateTime?})", "trigger":"cts:lsqt-query", "description":"($temporal-collection as xs:string, $timestamp as xs:dateTime?)"}, {"content":"cts:lsqt-query(${1:\\$temporal-collection as xs:string}, ${2:\\$timestamp as xs:dateTime?}, ${3:\\$options as xs:string*})", "trigger":"cts:lsqt-query", "description":"($temporal-collection as xs:string, $timestamp as xs:dateTime?, $options as xs:string*)"}, {"content":"cts:lsqt-query(${1:\\$temporal-collection as xs:string}, ${2:\\$timestamp as xs:dateTime?}, ${3:\\$options as xs:string*}, ${4:\\$weight as xs:double?})", "trigger":"cts:lsqt-query", "description":"($temporal-collection as xs:string, $timestamp as xs:dateTime?, $options as xs:string*, $weight as xs:double?)"}, {"content":"cts:lsqt-query-temporal-collection(${1:\\$query as cts:lsqt-query})", "trigger":"cts:lsqt-query-temporal-collection", "description":"($query as cts:lsqt-query)"}, {"content":"cts:lsqt-query-timestamp(${1:\\$query as cts:lsqt-query})", "trigger":"cts:lsqt-query-timestamp", "description":"($query as cts:lsqt-query)"}, {"content":"cts:lsqt-query-options(${1:\\$query as cts:lsqt-query})", "trigger":"cts:lsqt-query-options", "description":"($query as cts:lsqt-query)"}, {"content":"cts:lsqt-query-weight(${1:\\$query as cts:lsqt-query})", "trigger":"cts:lsqt-query-weight", "description":"($query as cts:lsqt-query)"}, {"content":"cts:period-compare-query(${1:\\$axis-1 as xs:string}, ${2:\\$operator as xs:string}, ${3:\\$axis-2 as xs:string})", "trigger":"cts:period-compare-query", "description":"($axis-1 as xs:string, $operator as xs:string, $axis-2 as xs:string)"}, {"content":"cts:period-compare-query(${1:\\$axis-1 as xs:string}, ${2:\\$operator as xs:string}, ${3:\\$axis-2 as xs:string}, ${4:\\$options as xs:string*})", "trigger":"cts:period-compare-query", "description":"($axis-1 as xs:string, $operator as xs:string, $axis-2 as xs:string, $options as xs:string*)"}, {"content":"cts:period-compare-query-axis-1(${1:\\$query as cts:period-compare-query})", "trigger":"cts:period-compare-query-axis-1", "description":"($query as cts:period-compare-query)"}, {"content":"cts:period-compare-query-axis-2(${1:\\$query as cts:period-compare-query})", "trigger":"cts:period-compare-query-axis-2", "description":"($query as cts:period-compare-query)"}, {"content":"cts:period-compare-query-operator(${1:\\$query as cts:period-compare-query})", "trigger":"cts:period-compare-query-operator", "description":"($query as cts:period-compare-query)"}, {"content":"cts:period-compare-query-options(${1:\\$query as cts:period-compare-query})", "trigger":"cts:period-compare-query-options", "description":"($query as cts:period-compare-query)"}, {"content":"cts:true-query()", "trigger":"cts:true-query", "description":"()"}, {"content":"cts:false-query()", "trigger":"cts:false-query", "description":"()"}, {"content":"cts:and-query(${1:\\$queries as cts:query*})", "trigger":"cts:and-query", "description":"($queries as cts:query*)"}, {"content":"cts:and-query(${1:\\$queries as cts:query*}, ${2:\\$options as xs:string*})", "trigger":"cts:and-query", "description":"($queries as cts:query*, $options as xs:string*)"}, {"content":"cts:and-query-queries(${1:\\$query as cts:and-query})", "trigger":"cts:and-query-queries", "description":"($query as cts:and-query)"}, {"content":"cts:and-query-options(${1:\\$query as cts:and-query})", "trigger":"cts:and-query-options", "description":"($query as cts:and-query)"}, {"content":"cts:boost-query(${1:\\$matching-query as cts:query}, ${2:\\$boosting-query as cts:query})", "trigger":"cts:boost-query", "description":"($matching-query as cts:query, $boosting-query as cts:query)"}, {"content":"cts:boost-query-matching-query(${1:\\$query as cts:boost-query})", "trigger":"cts:boost-query-matching-query", "description":"($query as cts:boost-query)"}, {"content":"cts:boost-query-boosting-query(${1:\\$query as cts:boost-query})", "trigger":"cts:boost-query-boosting-query", "description":"($query as cts:boost-query)"}, {"content":"cts:or-query(${1:\\$queries as cts:query*})", "trigger":"cts:or-query", "description":"($queries as cts:query*)"}, {"content":"cts:or-query(${1:\\$queries as cts:query*}, ${2:\\$options as xs:string*})", "trigger":"cts:or-query", "description":"($queries as cts:query*, $options as xs:string*)"}, {"content":"cts:or-query-queries(${1:\\$query as cts:or-query})", "trigger":"cts:or-query-queries", "description":"($query as cts:or-query)"}, {"content":"cts:or-query-options(${1:\\$query as cts:or-query})", "trigger":"cts:or-query-options", "description":"($query as cts:or-query)"}, {"content":"cts:and-not-query(${1:\\$positive-query as cts:query}, ${2:\\$negative-query as cts:query})", "trigger":"cts:and-not-query", "description":"($positive-query as cts:query, $negative-query as cts:query)"}, {"content":"cts:and-not-query-positive-query(${1:\\$query as cts:and-not-query})", "trigger":"cts:and-not-query-positive-query", "description":"($query as cts:and-not-query)"}, {"content":"cts:and-not-query-negative-query(${1:\\$query as cts:and-not-query})", "trigger":"cts:and-not-query-negative-query", "description":"($query as cts:and-not-query)"}, {"content":"cts:not-query(${1:\\$query as cts:query})", "trigger":"cts:not-query", "description":"($query as cts:query)"}, {"content":"cts:not-query-query(${1:\\$query as cts:not-query})", "trigger":"cts:not-query-query", "description":"($query as cts:not-query)"}, {"content":"cts:not-query-weight(${1:\\$query as cts:not-query})", "trigger":"cts:not-query-weight", "description":"($query as cts:not-query)"}, {"content":"cts:word-query(${1:\\$text as xs:string*})", "trigger":"cts:word-query", "description":"($text as xs:string*)"}, {"content":"cts:word-query(${1:\\$text as xs:string*}, ${2:\\$options as xs:string*})", "trigger":"cts:word-query", "description":"($text as xs:string*, $options as xs:string*)"}, {"content":"cts:word-query(${1:\\$text as xs:string*}, ${2:\\$options as xs:string*}, ${3:\\$weight as xs:double?})", "trigger":"cts:word-query", "description":"($text as xs:string*, $options as xs:string*, $weight as xs:double?)"}, {"content":"cts:word-query-text(${1:\\$query as cts:word-query})", "trigger":"cts:word-query-text", "description":"($query as cts:word-query)"}, {"content":"cts:word-query-options(${1:\\$query as cts:word-query})", "trigger":"cts:word-query-options", "description":"($query as cts:word-query)"}, {"content":"cts:word-query-weight(${1:\\$query as cts:word-query})", "trigger":"cts:word-query-weight", "description":"($query as cts:word-query)"}, {"content":"cts:element-range-query(${1:\\$element-name as xs:QName*}, ${2:\\$operator as xs:string}, ${3:\\$value as xs:anyAtomicType*})", "trigger":"cts:element-range-query", "description":"($element-name as xs:QName*, $operator as xs:string, $value as xs:anyAtomicType*)"}, {"content":"cts:element-range-query(${1:\\$element-name as xs:QName*}, ${2:\\$operator as xs:string}, ${3:\\$value as xs:anyAtomicType*}, ${4:\\$options as xs:string*})", "trigger":"cts:element-range-query", "description":"($element-name as xs:QName*, $operator as xs:string, $value as xs:anyAtomicType*, $options as xs:string*)"}, {"content":"cts:element-range-query(${1:\\$element-name as xs:QName*}, ${2:\\$operator as xs:string}, ${3:\\$value as xs:anyAtomicType*}, ${4:\\$options as xs:string*}, ${5:\\$weight as xs:double?})", "trigger":"cts:element-range-query", "description":"($element-name as xs:QName*, $operator as xs:string, $value as xs:anyAtomicType*, $options as xs:string*, $weight as xs:double?)"}, {"content":"cts:element-range-query-element-name(${1:\\$query as cts:element-range-query})", "trigger":"cts:element-range-query-element-name", "description":"($query as cts:element-range-query)"}, {"content":"cts:element-range-query-operator(${1:\\$query as cts:element-range-query})", "trigger":"cts:element-range-query-operator", "description":"($query as cts:element-range-query)"}, {"content":"cts:element-range-query-value(${1:\\$query as cts:element-range-query})", "trigger":"cts:element-range-query-value", "description":"($query as cts:element-range-query)"}, {"content":"cts:element-range-query-options(${1:\\$query as cts:element-range-query})", "trigger":"cts:element-range-query-options", "description":"($query as cts:element-range-query)"}, {"content":"cts:element-range-query-weight(${1:\\$query as cts:element-range-query})", "trigger":"cts:element-range-query-weight", "description":"($query as cts:element-range-query)"}, {"content":"cts:json-property-range-query(${1:\\$property-name as xs:string*}, ${2:\\$operator as xs:string}, ${3:\\$value as xs:anyAtomicType*})", "trigger":"cts:json-property-range-query", "description":"($property-name as xs:string*, $operator as xs:string, $value as xs:anyAtomicType*)"}, {"content":"cts:json-property-range-query(${1:\\$property-name as xs:string*}, ${2:\\$operator as xs:string}, ${3:\\$value as xs:anyAtomicType*}, ${4:\\$options as xs:string*})", "trigger":"cts:json-property-range-query", "description":"($property-name as xs:string*, $operator as xs:string, $value as xs:anyAtomicType*, $options as xs:string*)"}, {"content":"cts:json-property-range-query(${1:\\$property-name as xs:string*}, ${2:\\$operator as xs:string}, ${3:\\$value as xs:anyAtomicType*}, ${4:\\$options as xs:string*}, ${5:\\$weight as xs:double?})", "trigger":"cts:json-property-range-query", "description":"($property-name as xs:string*, $operator as xs:string, $value as xs:anyAtomicType*, $options as xs:string*, $weight as xs:double?)"}, {"content":"cts:json-property-range-query-property-name(${1:\\$query as cts:json-property-range-query})", "trigger":"cts:json-property-range-query-property-name", "description":"($query as cts:json-property-range-query)"}, {"content":"cts:json-property-range-query-operator(${1:\\$query as cts:json-property-range-query})", "trigger":"cts:json-property-range-query-operator", "description":"($query as cts:json-property-range-query)"}, {"content":"cts:json-property-range-query-value(${1:\\$query as cts:json-property-range-query})", "trigger":"cts:json-property-range-query-value", "description":"($query as cts:json-property-range-query)"}, {"content":"cts:json-property-range-query-options(${1:\\$query as cts:json-property-range-query})", "trigger":"cts:json-property-range-query-options", "description":"($query as cts:json-property-range-query)"}, {"content":"cts:json-property-range-query-weight(${1:\\$query as cts:json-property-range-query})", "trigger":"cts:json-property-range-query-weight", "description":"($query as cts:json-property-range-query)"}, {"content":"cts:triple-range-query(${1:\\$subject as xs:anyAtomicType*}, ${2:\\$predicate as xs:anyAtomicType*}, ${3:\\$object as xs:anyAtomicType*})", "trigger":"cts:triple-range-query", "description":"($subject as xs:anyAtomicType*, $predicate as xs:anyAtomicType*, $object as xs:anyAtomicType*)"}, {"content":"cts:triple-range-query(${1:\\$subject as xs:anyAtomicType*}, ${2:\\$predicate as xs:anyAtomicType*}, ${3:\\$object as xs:anyAtomicType*}, ${4:\\$operator as xs:string*})", "trigger":"cts:triple-range-query", "description":"($subject as xs:anyAtomicType*, $predicate as xs:anyAtomicType*, $object as xs:anyAtomicType*, $operator as xs:string*)"}, {"content":"cts:triple-range-query(${1:\\$subject as xs:anyAtomicType*}, ${2:\\$predicate as xs:anyAtomicType*}, ${3:\\$object as xs:anyAtomicType*}, ${4:\\$operator as xs:string*}, ${5:\\$options as xs:string*})", "trigger":"cts:triple-range-query", "description":"($subject as xs:anyAtomicType*, $predicate as xs:anyAtomicType*, $object as xs:anyAtomicType*, $operator as xs:string*, $options as xs:string*)"}, {"content":"cts:triple-range-query(${1:\\$subject as xs:anyAtomicType*}, ${2:\\$predicate as xs:anyAtomicType*}, ${3:\\$object as xs:anyAtomicType*}, ${4:\\$operator as xs:string*}, ${5:\\$options as xs:string*}, ${6:\\$weight as xs:double?})", "trigger":"cts:triple-range-query", "description":"($subject as xs:anyAtomicType*, $predicate as xs:anyAtomicType*, $object as xs:anyAtomicType*, $operator as xs:string*, $options as xs:string*, $weight as xs:double?)"}, {"content":"cts:triple-range-query-subject(${1:\\$query as cts:triple-range-query})", "trigger":"cts:triple-range-query-subject", "description":"($query as cts:triple-range-query)"}, {"content":"cts:triple-range-query-predicate(${1:\\$query as cts:triple-range-query})", "trigger":"cts:triple-range-query-predicate", "description":"($query as cts:triple-range-query)"}, {"content":"cts:triple-range-query-object(${1:\\$query as cts:triple-range-query})", "trigger":"cts:triple-range-query-object", "description":"($query as cts:triple-range-query)"}, {"content":"cts:triple-range-query-operator(${1:\\$query as cts:triple-range-query})", "trigger":"cts:triple-range-query-operator", "description":"($query as cts:triple-range-query)"}, {"content":"cts:triple-range-query-options(${1:\\$query as cts:triple-range-query})", "trigger":"cts:triple-range-query-options", "description":"($query as cts:triple-range-query)"}, {"content":"cts:triple-range-query-weight(${1:\\$query as cts:triple-range-query})", "trigger":"cts:triple-range-query-weight", "description":"($query as cts:triple-range-query)"}, {"content":"cts:field-range-query(${1:\\$field-name as xs:string*}, ${2:\\$operator as xs:string}, ${3:\\$value as xs:anyAtomicType*})", "trigger":"cts:field-range-query", "description":"($field-name as xs:string*, $operator as xs:string, $value as xs:anyAtomicType*)"}, {"content":"cts:field-range-query(${1:\\$field-name as xs:string*}, ${2:\\$operator as xs:string}, ${3:\\$value as xs:anyAtomicType*}, ${4:\\$options as xs:string*})", "trigger":"cts:field-range-query", "description":"($field-name as xs:string*, $operator as xs:string, $value as xs:anyAtomicType*, $options as xs:string*)"}, {"content":"cts:field-range-query(${1:\\$field-name as xs:string*}, ${2:\\$operator as xs:string}, ${3:\\$value as xs:anyAtomicType*}, ${4:\\$options as xs:string*}, ${5:\\$weight as xs:double?})", "trigger":"cts:field-range-query", "description":"($field-name as xs:string*, $operator as xs:string, $value as xs:anyAtomicType*, $options as xs:string*, $weight as xs:double?)"}, {"content":"cts:field-range-query-field-name(${1:\\$query as cts:field-range-query})", "trigger":"cts:field-range-query-field-name", "description":"($query as cts:field-range-query)"}, {"content":"cts:field-range-query-operator(${1:\\$query as cts:field-range-query})", "trigger":"cts:field-range-query-operator", "description":"($query as cts:field-range-query)"}, {"content":"cts:field-range-query-value(${1:\\$query as cts:field-range-query})", "trigger":"cts:field-range-query-value", "description":"($query as cts:field-range-query)"}, {"content":"cts:field-range-query-options(${1:\\$query as cts:field-range-query})", "trigger":"cts:field-range-query-options", "description":"($query as cts:field-range-query)"}, {"content":"cts:field-range-query-weight(${1:\\$query as cts:field-range-query})", "trigger":"cts:field-range-query-weight", "description":"($query as cts:field-range-query)"}, {"content":"cts:valid-index-path(${1:\\$string as xs:string}, ${2:\\$ignorens as xs:boolean})", "trigger":"cts:valid-index-path", "description":"($string as xs:string, $ignorens as xs:boolean)"}, {"content":"cts:path-range-query(${1:\\$path-expression as xs:string*}, ${2:\\$operator as xs:string}, ${3:\\$value as xs:anyAtomicType*})", "trigger":"cts:path-range-query", "description":"($path-expression as xs:string*, $operator as xs:string, $value as xs:anyAtomicType*)"}, {"content":"cts:path-range-query(${1:\\$path-expression as xs:string*}, ${2:\\$operator as xs:string}, ${3:\\$value as xs:anyAtomicType*}, ${4:\\$options as xs:string*})", "trigger":"cts:path-range-query", "description":"($path-expression as xs:string*, $operator as xs:string, $value as xs:anyAtomicType*, $options as xs:string*)"}, {"content":"cts:path-range-query(${1:\\$path-expression as xs:string*}, ${2:\\$operator as xs:string}, ${3:\\$value as xs:anyAtomicType*}, ${4:\\$options as xs:string*}, ${5:\\$weight as xs:double?})", "trigger":"cts:path-range-query", "description":"($path-expression as xs:string*, $operator as xs:string, $value as xs:anyAtomicType*, $options as xs:string*, $weight as xs:double?)"}, {"content":"cts:path-range-query-path-name(${1:\\$query as cts:path-range-query})", "trigger":"cts:path-range-query-path-name", "description":"($query as cts:path-range-query)"}, {"content":"cts:path-range-query-operator(${1:\\$query as cts:path-range-query})", "trigger":"cts:path-range-query-operator", "description":"($query as cts:path-range-query)"}, {"content":"cts:path-range-query-value(${1:\\$query as cts:path-range-query})", "trigger":"cts:path-range-query-value", "description":"($query as cts:path-range-query)"}, {"content":"cts:path-range-query-options(${1:\\$query as cts:path-range-query})", "trigger":"cts:path-range-query-options", "description":"($query as cts:path-range-query)"}, {"content":"cts:path-range-query-weight(${1:\\$query as cts:path-range-query})", "trigger":"cts:path-range-query-weight", "description":"($query as cts:path-range-query)"}, {"content":"cts:element-value-query(${1:\\$element-name as xs:QName*})", "trigger":"cts:element-value-query", "description":"($element-name as xs:QName*)"}, {"content":"cts:element-value-query(${1:\\$element-name as xs:QName*}, ${2:\\$text as xs:string*})", "trigger":"cts:element-value-query", "description":"($element-name as xs:QName*, $text as xs:string*)"}, {"content":"cts:element-value-query(${1:\\$element-name as xs:QName*}, ${2:\\$text as xs:string*}, ${3:\\$options as xs:string*})", "trigger":"cts:element-value-query", "description":"($element-name as xs:QName*, $text as xs:string*, $options as xs:string*)"}, {"content":"cts:element-value-query(${1:\\$element-name as xs:QName*}, ${2:\\$text as xs:string*}, ${3:\\$options as xs:string*}, ${4:\\$weight as xs:double?})", "trigger":"cts:element-value-query", "description":"($element-name as xs:QName*, $text as xs:string*, $options as xs:string*, $weight as xs:double?)"}, {"content":"cts:element-value-query-element-name(${1:\\$query as cts:element-value-query})", "trigger":"cts:element-value-query-element-name", "description":"($query as cts:element-value-query)"}, {"content":"cts:element-value-query-text(${1:\\$query as cts:element-value-query})", "trigger":"cts:element-value-query-text", "description":"($query as cts:element-value-query)"}, {"content":"cts:element-value-query-options(${1:\\$query as cts:element-value-query})", "trigger":"cts:element-value-query-options", "description":"($query as cts:element-value-query)"}, {"content":"cts:element-value-query-weight(${1:\\$query as cts:element-value-query})", "trigger":"cts:element-value-query-weight", "description":"($query as cts:element-value-query)"}, {"content":"cts:json-property-value-query(${1:\\$property-name as xs:string*}, ${2:\\$value as xs:anyAtomicType*})", "trigger":"cts:json-property-value-query", "description":"($property-name as xs:string*, $value as xs:anyAtomicType*)"}, {"content":"cts:json-property-value-query(${1:\\$property-name as xs:string*}, ${2:\\$value as xs:anyAtomicType*}, ${3:\\$options as xs:string*})", "trigger":"cts:json-property-value-query", "description":"($property-name as xs:string*, $value as xs:anyAtomicType*, $options as xs:string*)"}, {"content":"cts:json-property-value-query(${1:\\$property-name as xs:string*}, ${2:\\$value as xs:anyAtomicType*}, ${3:\\$options as xs:string*}, ${4:\\$weight as xs:double?})", "trigger":"cts:json-property-value-query", "description":"($property-name as xs:string*, $value as xs:anyAtomicType*, $options as xs:string*, $weight as xs:double?)"}, {"content":"cts:json-property-value-query-property-name(${1:\\$query as cts:json-property-value-query})", "trigger":"cts:json-property-value-query-property-name", "description":"($query as cts:json-property-value-query)"}, {"content":"cts:json-property-value-query-value(${1:\\$query as cts:json-property-value-query})", "trigger":"cts:json-property-value-query-value", "description":"($query as cts:json-property-value-query)"}, {"content":"cts:json-property-value-query-text(${1:\\$query as cts:json-property-value-query})", "trigger":"cts:json-property-value-query-text", "description":"($query as cts:json-property-value-query)"}, {"content":"cts:json-property-value-query-options(${1:\\$query as cts:json-property-value-query})", "trigger":"cts:json-property-value-query-options", "description":"($query as cts:json-property-value-query)"}, {"content":"cts:json-property-value-query-weight(${1:\\$query as cts:json-property-value-query})", "trigger":"cts:json-property-value-query-weight", "description":"($query as cts:json-property-value-query)"}, {"content":"cts:element-word-query(${1:\\$element-name as xs:QName*}, ${2:\\$text as xs:string*})", "trigger":"cts:element-word-query", "description":"($element-name as xs:QName*, $text as xs:string*)"}, {"content":"cts:element-word-query(${1:\\$element-name as xs:QName*}, ${2:\\$text as xs:string*}, ${3:\\$options as xs:string*})", "trigger":"cts:element-word-query", "description":"($element-name as xs:QName*, $text as xs:string*, $options as xs:string*)"}, {"content":"cts:element-word-query(${1:\\$element-name as xs:QName*}, ${2:\\$text as xs:string*}, ${3:\\$options as xs:string*}, ${4:\\$weight as xs:double?})", "trigger":"cts:element-word-query", "description":"($element-name as xs:QName*, $text as xs:string*, $options as xs:string*, $weight as xs:double?)"}, {"content":"cts:element-word-query-text(${1:\\$query as cts:element-word-query})", "trigger":"cts:element-word-query-text", "description":"($query as cts:element-word-query)"}, {"content":"cts:element-word-query-element-name(${1:\\$query as cts:element-word-query})", "trigger":"cts:element-word-query-element-name", "description":"($query as cts:element-word-query)"}, {"content":"cts:element-word-query-options(${1:\\$query as cts:element-word-query})", "trigger":"cts:element-word-query-options", "description":"($query as cts:element-word-query)"}, {"content":"cts:element-word-query-weight(${1:\\$query as cts:element-word-query})", "trigger":"cts:element-word-query-weight", "description":"($query as cts:element-word-query)"}, {"content":"cts:json-property-word-query(${1:\\$property-name as xs:string*}, ${2:\\$text as xs:string*})", "trigger":"cts:json-property-word-query", "description":"($property-name as xs:string*, $text as xs:string*)"}, {"content":"cts:json-property-word-query(${1:\\$property-name as xs:string*}, ${2:\\$text as xs:string*}, ${3:\\$options as xs:string*})", "trigger":"cts:json-property-word-query", "description":"($property-name as xs:string*, $text as xs:string*, $options as xs:string*)"}, {"content":"cts:json-property-word-query(${1:\\$property-name as xs:string*}, ${2:\\$text as xs:string*}, ${3:\\$options as xs:string*}, ${4:\\$weight as xs:double?})", "trigger":"cts:json-property-word-query", "description":"($property-name as xs:string*, $text as xs:string*, $options as xs:string*, $weight as xs:double?)"}, {"content":"cts:json-property-word-query-text(${1:\\$query as cts:json-property-word-query})", "trigger":"cts:json-property-word-query-text", "description":"($query as cts:json-property-word-query)"}, {"content":"cts:json-property-word-query-property-name(${1:\\$query as cts:json-property-word-query})", "trigger":"cts:json-property-word-query-property-name", "description":"($query as cts:json-property-word-query)"}, {"content":"cts:json-property-word-query-options(${1:\\$query as cts:json-property-word-query})", "trigger":"cts:json-property-word-query-options", "description":"($query as cts:json-property-word-query)"}, {"content":"cts:json-property-word-query-weight(${1:\\$query as cts:json-property-word-query})", "trigger":"cts:json-property-word-query-weight", "description":"($query as cts:json-property-word-query)"}, {"content":"cts:field-word-query(${1:\\$field-name as xs:string*}, ${2:\\$text as xs:string*})", "trigger":"cts:field-word-query", "description":"($field-name as xs:string*, $text as xs:string*)"}, {"content":"cts:field-word-query(${1:\\$field-name as xs:string*}, ${2:\\$text as xs:string*}, ${3:\\$options as xs:string*})", "trigger":"cts:field-word-query", "description":"($field-name as xs:string*, $text as xs:string*, $options as xs:string*)"}, {"content":"cts:field-word-query(${1:\\$field-name as xs:string*}, ${2:\\$text as xs:string*}, ${3:\\$options as xs:string*}, ${4:\\$weight as xs:double?})", "trigger":"cts:field-word-query", "description":"($field-name as xs:string*, $text as xs:string*, $options as xs:string*, $weight as xs:double?)"}, {"content":"cts:field-word-query-text(${1:\\$query as cts:field-word-query})", "trigger":"cts:field-word-query-text", "description":"($query as cts:field-word-query)"}, {"content":"cts:field-word-query-field-name(${1:\\$query as cts:field-word-query})", "trigger":"cts:field-word-query-field-name", "description":"($query as cts:field-word-query)"}, {"content":"cts:field-word-query-options(${1:\\$query as cts:field-word-query})", "trigger":"cts:field-word-query-options", "description":"($query as cts:field-word-query)"}, {"content":"cts:field-word-query-weight(${1:\\$query as cts:field-word-query})", "trigger":"cts:field-word-query-weight", "description":"($query as cts:field-word-query)"}, {"content":"cts:field-value-query(${1:\\$field-name as xs:string*}, ${2:\\$text as xs:anyAtomicType*})", "trigger":"cts:field-value-query", "description":"($field-name as xs:string*, $text as xs:anyAtomicType*)"}, {"content":"cts:field-value-query(${1:\\$field-name as xs:string*}, ${2:\\$text as xs:anyAtomicType*}, ${3:\\$options as xs:string*})", "trigger":"cts:field-value-query", "description":"($field-name as xs:string*, $text as xs:anyAtomicType*, $options as xs:string*)"}, {"content":"cts:field-value-query(${1:\\$field-name as xs:string*}, ${2:\\$text as xs:anyAtomicType*}, ${3:\\$options as xs:string*}, ${4:\\$weight as xs:double?})", "trigger":"cts:field-value-query", "description":"($field-name as xs:string*, $text as xs:anyAtomicType*, $options as xs:string*, $weight as xs:double?)"}, {"content":"cts:field-value-query-text(${1:\\$query as cts:field-value-query})", "trigger":"cts:field-value-query-text", "description":"($query as cts:field-value-query)"}, {"content":"cts:field-value-query-field-name(${1:\\$query as cts:field-value-query})", "trigger":"cts:field-value-query-field-name", "description":"($query as cts:field-value-query)"}, {"content":"cts:field-value-query-options(${1:\\$query as cts:field-value-query})", "trigger":"cts:field-value-query-options", "description":"($query as cts:field-value-query)"}, {"content":"cts:field-value-query-weight(${1:\\$query as cts:field-value-query})", "trigger":"cts:field-value-query-weight", "description":"($query as cts:field-value-query)"}, {"content":"cts:element-attribute-range-query(${1:\\$element-name as xs:QName*}, ${2:\\$attribute-name as xs:QName*}, ${3:\\$operator as xs:string}, ${4:\\$value as xs:anyAtomicType*})", "trigger":"cts:element-attribute-range-query", "description":"($element-name as xs:QName*, $attribute-name as xs:QName*, $operator as xs:string, $value as xs:anyAtomicType*)"}, {"content":"cts:element-attribute-range-query(${1:\\$element-name as xs:QName*}, ${2:\\$attribute-name as xs:QName*}, ${3:\\$operator as xs:string}, ${4:\\$value as xs:anyAtomicType*}, ${5:\\$options as xs:string*})", "trigger":"cts:element-attribute-range-query", "description":"($element-name as xs:QName*, $attribute-name as xs:QName*, $operator as xs:string, $value as xs:anyAtomicType*, $options as xs:string*)"}, {"content":"cts:element-attribute-range-query(${1:\\$element-name as xs:QName*}, ${2:\\$attribute-name as xs:QName*}, ${3:\\$operator as xs:string}, ${4:\\$value as xs:anyAtomicType*}, ${5:\\$options as xs:string*}, ${6:\\$weight as xs:double?})", "trigger":"cts:element-attribute-range-query", "description":"($element-name as xs:QName*, $attribute-name as xs:QName*, $operator as xs:string, $value as xs:anyAtomicType*, $options as xs:string*, $weight as xs:double?)"}, {"content":"cts:element-attribute-range-query-element-name(${1:\\$query as cts:element-attribute-range-query})", "trigger":"cts:element-attribute-range-query-element-name", "description":"($query as cts:element-attribute-range-query)"}, {"content":"cts:element-attribute-range-query-attribute-name(${1:\\$query as cts:element-attribute-range-query})", "trigger":"cts:element-attribute-range-query-attribute-name", "description":"($query as cts:element-attribute-range-query)"}, {"content":"cts:element-attribute-range-query-operator(${1:\\$query as cts:element-attribute-range-query})", "trigger":"cts:element-attribute-range-query-operator", "description":"($query as cts:element-attribute-range-query)"}, {"content":"cts:element-attribute-range-query-value(${1:\\$query as cts:element-attribute-range-query})", "trigger":"cts:element-attribute-range-query-value", "description":"($query as cts:element-attribute-range-query)"}, {"content":"cts:element-attribute-range-query-options(${1:\\$query as cts:element-attribute-range-query})", "trigger":"cts:element-attribute-range-query-options", "description":"($query as cts:element-attribute-range-query)"}, {"content":"cts:element-attribute-range-query-weight(${1:\\$query as cts:element-attribute-range-query})", "trigger":"cts:element-attribute-range-query-weight", "description":"($query as cts:element-attribute-range-query)"}, {"content":"cts:element-attribute-value-query(${1:\\$element-name as xs:QName*}, ${2:\\$attribute-name as xs:QName*}, ${3:\\$text as xs:string*})", "trigger":"cts:element-attribute-value-query", "description":"($element-name as xs:QName*, $attribute-name as xs:QName*, $text as xs:string*)"}, {"content":"cts:element-attribute-value-query(${1:\\$element-name as xs:QName*}, ${2:\\$attribute-name as xs:QName*}, ${3:\\$text as xs:string*}, ${4:\\$options as xs:string*})", "trigger":"cts:element-attribute-value-query", "description":"($element-name as xs:QName*, $attribute-name as xs:QName*, $text as xs:string*, $options as xs:string*)"}, {"content":"cts:element-attribute-value-query(${1:\\$element-name as xs:QName*}, ${2:\\$attribute-name as xs:QName*}, ${3:\\$text as xs:string*}, ${4:\\$options as xs:string*}, ${5:\\$weight as xs:double?})", "trigger":"cts:element-attribute-value-query", "description":"($element-name as xs:QName*, $attribute-name as xs:QName*, $text as xs:string*, $options as xs:string*, $weight as xs:double?)"}, {"content":"cts:element-attribute-value-query-text(${1:\\$query as cts:element-attribute-value-query})", "trigger":"cts:element-attribute-value-query-text", "description":"($query as cts:element-attribute-value-query)"}, {"content":"cts:element-attribute-value-query-element-name(${1:\\$query as cts:element-attribute-value-query})", "trigger":"cts:element-attribute-value-query-element-name", "description":"($query as cts:element-attribute-value-query)"}, {"content":"cts:element-attribute-value-query-attribute-name(${1:\\$query as cts:element-attribute-value-query})", "trigger":"cts:element-attribute-value-query-attribute-name", "description":"($query as cts:element-attribute-value-query)"}, {"content":"cts:element-attribute-value-query-options(${1:\\$query as cts:element-attribute-value-query})", "trigger":"cts:element-attribute-value-query-options", "description":"($query as cts:element-attribute-value-query)"}, {"content":"cts:element-attribute-value-query-weight(${1:\\$query as cts:element-attribute-value-query})", "trigger":"cts:element-attribute-value-query-weight", "description":"($query as cts:element-attribute-value-query)"}, {"content":"cts:element-attribute-word-query(${1:\\$element-name as xs:QName*}, ${2:\\$attribute-name as xs:QName*}, ${3:\\$text as xs:string*})", "trigger":"cts:element-attribute-word-query", "description":"($element-name as xs:QName*, $attribute-name as xs:QName*, $text as xs:string*)"}, {"content":"cts:element-attribute-word-query(${1:\\$element-name as xs:QName*}, ${2:\\$attribute-name as xs:QName*}, ${3:\\$text as xs:string*}, ${4:\\$options as xs:string*})", "trigger":"cts:element-attribute-word-query", "description":"($element-name as xs:QName*, $attribute-name as xs:QName*, $text as xs:string*, $options as xs:string*)"}, {"content":"cts:element-attribute-word-query(${1:\\$element-name as xs:QName*}, ${2:\\$attribute-name as xs:QName*}, ${3:\\$text as xs:string*}, ${4:\\$options as xs:string*}, ${5:\\$weight as xs:double?})", "trigger":"cts:element-attribute-word-query", "description":"($element-name as xs:QName*, $attribute-name as xs:QName*, $text as xs:string*, $options as xs:string*, $weight as xs:double?)"}, {"content":"cts:element-attribute-word-query-text(${1:\\$query as cts:element-attribute-word-query})", "trigger":"cts:element-attribute-word-query-text", "description":"($query as cts:element-attribute-word-query)"}, {"content":"cts:element-attribute-word-query-element-name(${1:\\$query as cts:element-attribute-word-query})", "trigger":"cts:element-attribute-word-query-element-name", "description":"($query as cts:element-attribute-word-query)"}, {"content":"cts:element-attribute-word-query-attribute-name(${1:\\$query as cts:element-attribute-word-query})", "trigger":"cts:element-attribute-word-query-attribute-name", "description":"($query as cts:element-attribute-word-query)"}, {"content":"cts:element-attribute-word-query-options(${1:\\$query as cts:element-attribute-word-query})", "trigger":"cts:element-attribute-word-query-options", "description":"($query as cts:element-attribute-word-query)"}, {"content":"cts:element-attribute-word-query-weight(${1:\\$query as cts:element-attribute-word-query})", "trigger":"cts:element-attribute-word-query-weight", "description":"($query as cts:element-attribute-word-query)"}, {"content":"cts:similar-query(${1:\\$nodes as node()*})", "trigger":"cts:similar-query", "description":"($nodes as node()*)"}, {"content":"cts:similar-query(${1:\\$nodes as node()*}, ${2:\\$weight as xs:double?})", "trigger":"cts:similar-query", "description":"($nodes as node()*, $weight as xs:double?)"}, {"content":"cts:similar-query(${1:\\$nodes as node()*}, ${2:\\$weight as xs:double?}, ${3:\\$options as element()?})", "trigger":"cts:similar-query", "description":"($nodes as node()*, $weight as xs:double?, $options as element()?)"}, {"content":"cts:similar-query-nodes(${1:\\$query as cts:similar-query})", "trigger":"cts:similar-query-nodes", "description":"($query as cts:similar-query)"}, {"content":"cts:similar-query-weight(${1:\\$query as cts:similar-query})", "trigger":"cts:similar-query-weight", "description":"($query as cts:similar-query)"}, {"content":"cts:contains(${1:\\$nodes as item()*}, ${2:\\$query as cts:query})", "trigger":"cts:contains", "description":"($nodes as item()*, $query as cts:query)"}, {"content":"cts:search(${1:\\$expression as node()*}, ${2:\\$query as cts:query?})", "trigger":"cts:search", "description":"($expression as node()*, $query as cts:query?)"}, {"content":"cts:search(${1:\\$expression as node()*}, ${2:\\$query as cts:query?}, ${3:\\$options as (cts:order|xs:string)*})", "trigger":"cts:search", "description":"($expression as node()*, $query as cts:query?, $options as (cts:order|xs:string)*)"}, {"content":"cts:search(${1:\\$expression as node()*}, ${2:\\$query as cts:query?}, ${3:\\$options as (cts:order|xs:string)*}, ${4:\\$quality-weight as xs:double?})", "trigger":"cts:search", "description":"($expression as node()*, $query as cts:query?, $options as (cts:order|xs:string)*, $quality-weight as xs:double?)"}, {"content":"cts:search(${1:\\$expression as node()*}, ${2:\\$query as cts:query?}, ${3:\\$options as (cts:order|xs:string)*}, ${4:\\$quality-weight as xs:double?}, ${5:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:search", "description":"($expression as node()*, $query as cts:query?, $options as (cts:order|xs:string)*, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:quality()", "trigger":"cts:quality", "description":"()"}, {"content":"cts:quality(${1:\\$node as node()})", "trigger":"cts:quality", "description":"($node as node())"}, {"content":"cts:score()", "trigger":"cts:score", "description":"()"}, {"content":"cts:score(${1:\\$node as node()})", "trigger":"cts:score", "description":"($node as node())"}, {"content":"cts:relevance-info()", "trigger":"cts:relevance-info", "description":"()"}, {"content":"cts:relevance-info(${1:\\$node as node()})", "trigger":"cts:relevance-info", "description":"($node as node())"}, {"content":"cts:relevance-info(${1:\\$node as node()}, ${2:\\$output-kind as xs:string})", "trigger":"cts:relevance-info", "description":"($node as node(), $output-kind as xs:string)"}, {"content":"cts:confidence()", "trigger":"cts:confidence", "description":"()"}, {"content":"cts:confidence(${1:\\$node as node()})", "trigger":"cts:confidence", "description":"($node as node())"}, {"content":"cts:fitness()", "trigger":"cts:fitness", "description":"()"}, {"content":"cts:fitness(${1:\\$node as node()})", "trigger":"cts:fitness", "description":"($node as node())"}, {"content":"cts:remainder()", "trigger":"cts:remainder", "description":"()"}, {"content":"cts:remainder(${1:\\$node as node()})", "trigger":"cts:remainder", "description":"($node as node())"}, {"content":"cts:tokenize(${1:\\$text as xs:string})", "trigger":"cts:tokenize", "description":"($text as xs:string)"}, {"content":"cts:tokenize(${1:\\$text as xs:string}, ${2:\\$language as xs:string?})", "trigger":"cts:tokenize", "description":"($text as xs:string, $language as xs:string?)"}, {"content":"cts:tokenize(${1:\\$text as xs:string}, ${2:\\$language as xs:string?}, ${3:\\$field as xs:string?})", "trigger":"cts:tokenize", "description":"($text as xs:string, $language as xs:string?, $field as xs:string?)"}, {"content":"cts:stem(${1:\\$text as xs:string})", "trigger":"cts:stem", "description":"($text as xs:string)"}, {"content":"cts:stem(${1:\\$text as xs:string}, ${2:\\$language as xs:string?})", "trigger":"cts:stem", "description":"($text as xs:string, $language as xs:string?)"}, {"content":"cts:near-query(${1:\\$queries as cts:query*})", "trigger":"cts:near-query", "description":"($queries as cts:query*)"}, {"content":"cts:near-query(${1:\\$queries as cts:query*}, ${2:\\$distance as xs:double?})", "trigger":"cts:near-query", "description":"($queries as cts:query*, $distance as xs:double?)"}, {"content":"cts:near-query(${1:\\$queries as cts:query*}, ${2:\\$distance as xs:double?}, ${3:\\$options as xs:string*})", "trigger":"cts:near-query", "description":"($queries as cts:query*, $distance as xs:double?, $options as xs:string*)"}, {"content":"cts:near-query(${1:\\$queries as cts:query*}, ${2:\\$distance as xs:double?}, ${3:\\$options as xs:string*}, ${4:\\$distance-weight as xs:double?})", "trigger":"cts:near-query", "description":"($queries as cts:query*, $distance as xs:double?, $options as xs:string*, $distance-weight as xs:double?)"}, {"content":"cts:near-query-queries(${1:\\$query as cts:near-query})", "trigger":"cts:near-query-queries", "description":"($query as cts:near-query)"}, {"content":"cts:near-query-distance(${1:\\$query as cts:near-query})", "trigger":"cts:near-query-distance", "description":"($query as cts:near-query)"}, {"content":"cts:near-query-options(${1:\\$query as cts:near-query})", "trigger":"cts:near-query-options", "description":"($query as cts:near-query)"}, {"content":"cts:near-query-weight(${1:\\$query as cts:near-query})", "trigger":"cts:near-query-weight", "description":"($query as cts:near-query)"}, {"content":"cts:not-in-query(${1:\\$positive-query as cts:query}, ${2:\\$negative-query as cts:query})", "trigger":"cts:not-in-query", "description":"($positive-query as cts:query, $negative-query as cts:query)"}, {"content":"cts:not-in-query-positive-query(${1:\\$query as cts:not-in-query})", "trigger":"cts:not-in-query-positive-query", "description":"($query as cts:not-in-query)"}, {"content":"cts:not-in-query-negative-query(${1:\\$query as cts:not-in-query})", "trigger":"cts:not-in-query-negative-query", "description":"($query as cts:not-in-query)"}, {"content":"cts:element-query(${1:\\$element-name as xs:QName*}, ${2:\\$query as cts:query})", "trigger":"cts:element-query", "description":"($element-name as xs:QName*, $query as cts:query)"}, {"content":"cts:element-query-element-name(${1:\\$query as cts:element-query})", "trigger":"cts:element-query-element-name", "description":"($query as cts:element-query)"}, {"content":"cts:element-query-query(${1:\\$query as cts:element-query})", "trigger":"cts:element-query-query", "description":"($query as cts:element-query)"}, {"content":"cts:json-property-scope-query(${1:\\$property-name as xs:string*}, ${2:\\$query as cts:query})", "trigger":"cts:json-property-scope-query", "description":"($property-name as xs:string*, $query as cts:query)"}, {"content":"cts:json-property-scope-query-property-name(${1:\\$query as cts:json-property-scope-query})", "trigger":"cts:json-property-scope-query-property-name", "description":"($query as cts:json-property-scope-query)"}, {"content":"cts:json-property-scope-query-query(${1:\\$query as cts:json-property-scope-query})", "trigger":"cts:json-property-scope-query-query", "description":"($query as cts:json-property-scope-query)"}, {"content":"cts:document-query(${1:\\$uris as xs:string*})", "trigger":"cts:document-query", "description":"($uris as xs:string*)"}, {"content":"cts:document-query-uris(${1:\\$query as cts:document-query})", "trigger":"cts:document-query-uris", "description":"($query as cts:document-query)"}, {"content":"cts:collection-query(${1:\\$uris as xs:string*})", "trigger":"cts:collection-query", "description":"($uris as xs:string*)"}, {"content":"cts:collection-query-uris(${1:\\$query as cts:collection-query})", "trigger":"cts:collection-query-uris", "description":"($query as cts:collection-query)"}, {"content":"cts:directory-query(${1:\\$uris as xs:string*})", "trigger":"cts:directory-query", "description":"($uris as xs:string*)"}, {"content":"cts:directory-query(${1:\\$uris as xs:string*}, ${2:\\$depth as xs:string?})", "trigger":"cts:directory-query", "description":"($uris as xs:string*, $depth as xs:string?)"}, {"content":"cts:directory-query-uris(${1:\\$query as cts:directory-query})", "trigger":"cts:directory-query-uris", "description":"($query as cts:directory-query)"}, {"content":"cts:directory-query-depth(${1:\\$query as cts:directory-query})", "trigger":"cts:directory-query-depth", "description":"($query as cts:directory-query)"}, {"content":"cts:register(${1:\\$query as cts:query})", "trigger":"cts:register", "description":"($query as cts:query)"}, {"content":"cts:deregister(${1:\\$id as xs:unsignedLong})", "trigger":"cts:deregister", "description":"($id as xs:unsignedLong)"}, {"content":"cts:registered-query(${1:\\$ids as xs:unsignedLong*})", "trigger":"cts:registered-query", "description":"($ids as xs:unsignedLong*)"}, {"content":"cts:registered-query(${1:\\$ids as xs:unsignedLong*}, ${2:\\$options as xs:string*})", "trigger":"cts:registered-query", "description":"($ids as xs:unsignedLong*, $options as xs:string*)"}, {"content":"cts:registered-query(${1:\\$ids as xs:unsignedLong*}, ${2:\\$options as xs:string*}, ${3:\\$weight as xs:double?})", "trigger":"cts:registered-query", "description":"($ids as xs:unsignedLong*, $options as xs:string*, $weight as xs:double?)"}, {"content":"cts:registered-query-ids(${1:\\$query as cts:registered-query})", "trigger":"cts:registered-query-ids", "description":"($query as cts:registered-query)"}, {"content":"cts:registered-query-options(${1:\\$query as cts:registered-query})", "trigger":"cts:registered-query-options", "description":"($query as cts:registered-query)"}, {"content":"cts:registered-query-weight(${1:\\$query as cts:registered-query})", "trigger":"cts:registered-query-weight", "description":"($query as cts:registered-query)"}, {"content":"cts:words()", "trigger":"cts:words", "description":"()"}, {"content":"cts:words(${1:\\$start as xs:string?})", "trigger":"cts:words", "description":"($start as xs:string?)"}, {"content":"cts:words(${1:\\$start as xs:string?}, ${2:\\$options as xs:string*})", "trigger":"cts:words", "description":"($start as xs:string?, $options as xs:string*)"}, {"content":"cts:words(${1:\\$start as xs:string?}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "trigger":"cts:words", "description":"($start as xs:string?, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:words(${1:\\$start as xs:string?}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$quality-weight as xs:double?})", "trigger":"cts:words", "description":"($start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:words(${1:\\$start as xs:string?}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$quality-weight as xs:double?}, ${5:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:words", "description":"($start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:word-match(${1:\\$pattern as xs:string})", "trigger":"cts:word-match", "description":"($pattern as xs:string)"}, {"content":"cts:word-match(${1:\\$pattern as xs:string}, ${2:\\$options as xs:string*})", "trigger":"cts:word-match", "description":"($pattern as xs:string, $options as xs:string*)"}, {"content":"cts:word-match(${1:\\$pattern as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "trigger":"cts:word-match", "description":"($pattern as xs:string, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:word-match(${1:\\$pattern as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$quality-weight as xs:double?})", "trigger":"cts:word-match", "description":"($pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:word-match(${1:\\$pattern as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$quality-weight as xs:double?}, ${5:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:word-match", "description":"($pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:element-words(${1:\\$element-names as xs:QName*})", "trigger":"cts:element-words", "description":"($element-names as xs:QName*)"}, {"content":"cts:element-words(${1:\\$element-names as xs:QName*}, ${2:\\$start as xs:string?})", "trigger":"cts:element-words", "description":"($element-names as xs:QName*, $start as xs:string?)"}, {"content":"cts:element-words(${1:\\$element-names as xs:QName*}, ${2:\\$start as xs:string?}, ${3:\\$options as xs:string*})", "trigger":"cts:element-words", "description":"($element-names as xs:QName*, $start as xs:string?, $options as xs:string*)"}, {"content":"cts:element-words(${1:\\$element-names as xs:QName*}, ${2:\\$start as xs:string?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "trigger":"cts:element-words", "description":"($element-names as xs:QName*, $start as xs:string?, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:element-words(${1:\\$element-names as xs:QName*}, ${2:\\$start as xs:string?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "trigger":"cts:element-words", "description":"($element-names as xs:QName*, $start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:element-words(${1:\\$element-names as xs:QName*}, ${2:\\$start as xs:string?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:element-words", "description":"($element-names as xs:QName*, $start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:json-property-words(${1:\\$property-names as xs:string*})", "trigger":"cts:json-property-words", "description":"($property-names as xs:string*)"}, {"content":"cts:json-property-words(${1:\\$property-names as xs:string*}, ${2:\\$start as xs:string?})", "trigger":"cts:json-property-words", "description":"($property-names as xs:string*, $start as xs:string?)"}, {"content":"cts:json-property-words(${1:\\$property-names as xs:string*}, ${2:\\$start as xs:string?}, ${3:\\$options as xs:string*})", "trigger":"cts:json-property-words", "description":"($property-names as xs:string*, $start as xs:string?, $options as xs:string*)"}, {"content":"cts:json-property-words(${1:\\$property-names as xs:string*}, ${2:\\$start as xs:string?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "trigger":"cts:json-property-words", "description":"($property-names as xs:string*, $start as xs:string?, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:json-property-words(${1:\\$property-names as xs:string*}, ${2:\\$start as xs:string?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "trigger":"cts:json-property-words", "description":"($property-names as xs:string*, $start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:json-property-words(${1:\\$property-names as xs:string*}, ${2:\\$start as xs:string?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:json-property-words", "description":"($property-names as xs:string*, $start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:element-word-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:string?})", "trigger":"cts:element-word-match", "description":"($element-names as xs:QName*, $pattern as xs:string?)"}, {"content":"cts:element-word-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:string?}, ${3:\\$options as xs:string*})", "trigger":"cts:element-word-match", "description":"($element-names as xs:QName*, $pattern as xs:string?, $options as xs:string*)"}, {"content":"cts:element-word-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:string?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "trigger":"cts:element-word-match", "description":"($element-names as xs:QName*, $pattern as xs:string?, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:element-word-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:string?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "trigger":"cts:element-word-match", "description":"($element-names as xs:QName*, $pattern as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:element-word-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:string?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:element-word-match", "description":"($element-names as xs:QName*, $pattern as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:json-property-word-match(${1:\\$property-names as xs:string*}, ${2:\\$pattern as xs:string?})", "trigger":"cts:json-property-word-match", "description":"($property-names as xs:string*, $pattern as xs:string?)"}, {"content":"cts:json-property-word-match(${1:\\$property-names as xs:string*}, ${2:\\$pattern as xs:string?}, ${3:\\$options as xs:string*})", "trigger":"cts:json-property-word-match", "description":"($property-names as xs:string*, $pattern as xs:string?, $options as xs:string*)"}, {"content":"cts:json-property-word-match(${1:\\$property-names as xs:string*}, ${2:\\$pattern as xs:string?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "trigger":"cts:json-property-word-match", "description":"($property-names as xs:string*, $pattern as xs:string?, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:json-property-word-match(${1:\\$property-names as xs:string*}, ${2:\\$pattern as xs:string?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "trigger":"cts:json-property-word-match", "description":"($property-names as xs:string*, $pattern as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:json-property-word-match(${1:\\$property-names as xs:string*}, ${2:\\$pattern as xs:string?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:json-property-word-match", "description":"($property-names as xs:string*, $pattern as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:element-values(${1:\\$element-names as xs:QName*})", "trigger":"cts:element-values", "description":"($element-names as xs:QName*)"}, {"content":"cts:element-values(${1:\\$element-names as xs:QName*}, ${2:\\$start as xs:anyAtomicType?})", "trigger":"cts:element-values", "description":"($element-names as xs:QName*, $start as xs:anyAtomicType?)"}, {"content":"cts:element-values(${1:\\$element-names as xs:QName*}, ${2:\\$start as xs:anyAtomicType?}, ${3:\\$options as xs:string*})", "trigger":"cts:element-values", "description":"($element-names as xs:QName*, $start as xs:anyAtomicType?, $options as xs:string*)"}, {"content":"cts:element-values(${1:\\$element-names as xs:QName*}, ${2:\\$start as xs:anyAtomicType?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "trigger":"cts:element-values", "description":"($element-names as xs:QName*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:element-values(${1:\\$element-names as xs:QName*}, ${2:\\$start as xs:anyAtomicType?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "trigger":"cts:element-values", "description":"($element-names as xs:QName*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:element-values(${1:\\$element-names as xs:QName*}, ${2:\\$start as xs:anyAtomicType?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:element-values", "description":"($element-names as xs:QName*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:field-values(${1:\\$field-names as xs:string*})", "trigger":"cts:field-values", "description":"($field-names as xs:string*)"}, {"content":"cts:field-values(${1:\\$field-names as xs:string*}, ${2:\\$start as xs:anyAtomicType?})", "trigger":"cts:field-values", "description":"($field-names as xs:string*, $start as xs:anyAtomicType?)"}, {"content":"cts:field-values(${1:\\$field-names as xs:string*}, ${2:\\$start as xs:anyAtomicType?}, ${3:\\$options as xs:string*})", "trigger":"cts:field-values", "description":"($field-names as xs:string*, $start as xs:anyAtomicType?, $options as xs:string*)"}, {"content":"cts:field-values(${1:\\$field-names as xs:string*}, ${2:\\$start as xs:anyAtomicType?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "trigger":"cts:field-values", "description":"($field-names as xs:string*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:field-values(${1:\\$field-names as xs:string*}, ${2:\\$start as xs:anyAtomicType?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "trigger":"cts:field-values", "description":"($field-names as xs:string*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:field-values(${1:\\$field-names as xs:string*}, ${2:\\$start as xs:anyAtomicType?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:field-values", "description":"($field-names as xs:string*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:values(${1:\\$range-indexes as cts:reference*})", "trigger":"cts:values", "description":"($range-indexes as cts:reference*)"}, {"content":"cts:values(${1:\\$range-indexes as cts:reference*}, ${2:\\$start as xs:anyAtomicType?})", "trigger":"cts:values", "description":"($range-indexes as cts:reference*, $start as xs:anyAtomicType?)"}, {"content":"cts:values(${1:\\$range-indexes as cts:reference*}, ${2:\\$start as xs:anyAtomicType?}, ${3:\\$options as xs:string*})", "trigger":"cts:values", "description":"($range-indexes as cts:reference*, $start as xs:anyAtomicType?, $options as xs:string*)"}, {"content":"cts:values(${1:\\$range-indexes as cts:reference*}, ${2:\\$start as xs:anyAtomicType?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "trigger":"cts:values", "description":"($range-indexes as cts:reference*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:values(${1:\\$range-indexes as cts:reference*}, ${2:\\$start as xs:anyAtomicType?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "trigger":"cts:values", "description":"($range-indexes as cts:reference*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:values(${1:\\$range-indexes as cts:reference*}, ${2:\\$start as xs:anyAtomicType?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:values", "description":"($range-indexes as cts:reference*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:triples()", "trigger":"cts:triples", "description":"()"}, {"content":"cts:triples(${1:\\$subject as xs:anyAtomicType*})", "trigger":"cts:triples", "description":"($subject as xs:anyAtomicType*)"}, {"content":"cts:triples(${1:\\$subject as xs:anyAtomicType*}, ${2:\\$predicate as xs:anyAtomicType*})", "trigger":"cts:triples", "description":"($subject as xs:anyAtomicType*, $predicate as xs:anyAtomicType*)"}, {"content":"cts:triples(${1:\\$subject as xs:anyAtomicType*}, ${2:\\$predicate as xs:anyAtomicType*}, ${3:\\$object as xs:anyAtomicType*})", "trigger":"cts:triples", "description":"($subject as xs:anyAtomicType*, $predicate as xs:anyAtomicType*, $object as xs:anyAtomicType*)"}, {"content":"cts:triples(${1:\\$subject as xs:anyAtomicType*}, ${2:\\$predicate as xs:anyAtomicType*}, ${3:\\$object as xs:anyAtomicType*}, ${4:\\$operator as xs:string*})", "trigger":"cts:triples", "description":"($subject as xs:anyAtomicType*, $predicate as xs:anyAtomicType*, $object as xs:anyAtomicType*, $operator as xs:string*)"}, {"content":"cts:triples(${1:\\$subject as xs:anyAtomicType*}, ${2:\\$predicate as xs:anyAtomicType*}, ${3:\\$object as xs:anyAtomicType*}, ${4:\\$operator as xs:string*}, ${5:\\$options as xs:string*})", "trigger":"cts:triples", "description":"($subject as xs:anyAtomicType*, $predicate as xs:anyAtomicType*, $object as xs:anyAtomicType*, $operator as xs:string*, $options as xs:string*)"}, {"content":"cts:triples(${1:\\$subject as xs:anyAtomicType*}, ${2:\\$predicate as xs:anyAtomicType*}, ${3:\\$object as xs:anyAtomicType*}, ${4:\\$operator as xs:string*}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?})", "trigger":"cts:triples", "description":"($subject as xs:anyAtomicType*, $predicate as xs:anyAtomicType*, $object as xs:anyAtomicType*, $operator as xs:string*, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:triples(${1:\\$subject as xs:anyAtomicType*}, ${2:\\$predicate as xs:anyAtomicType*}, ${3:\\$object as xs:anyAtomicType*}, ${4:\\$operator as xs:string*}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:triples", "description":"($subject as xs:anyAtomicType*, $predicate as xs:anyAtomicType*, $object as xs:anyAtomicType*, $operator as xs:string*, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:triple-value-statistics()", "trigger":"cts:triple-value-statistics", "description":"()"}, {"content":"cts:triple-value-statistics(${1:\\$values as xs:anyAtomicType*})", "trigger":"cts:triple-value-statistics", "description":"($values as xs:anyAtomicType*)"}, {"content":"cts:triple-value-statistics(${1:\\$values as xs:anyAtomicType*}, ${2:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:triple-value-statistics", "description":"($values as xs:anyAtomicType*, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:element-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:anyAtomicType})", "trigger":"cts:element-value-match", "description":"($element-names as xs:QName*, $pattern as xs:anyAtomicType)"}, {"content":"cts:element-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*})", "trigger":"cts:element-value-match", "description":"($element-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*)"}, {"content":"cts:element-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "trigger":"cts:element-value-match", "description":"($element-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:element-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "trigger":"cts:element-value-match", "description":"($element-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:element-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:element-value-match", "description":"($element-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:element-value-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$element-name-2 as xs:QName})", "trigger":"cts:element-value-co-occurrences", "description":"($element-name-1 as xs:QName, $element-name-2 as xs:QName)"}, {"content":"cts:element-value-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$element-name-2 as xs:QName}, ${3:\\$options as xs:string*})", "trigger":"cts:element-value-co-occurrences", "description":"($element-name-1 as xs:QName, $element-name-2 as xs:QName, $options as xs:string*)"}, {"content":"cts:element-value-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$element-name-2 as xs:QName}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "trigger":"cts:element-value-co-occurrences", "description":"($element-name-1 as xs:QName, $element-name-2 as xs:QName, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:element-value-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$element-name-2 as xs:QName}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "trigger":"cts:element-value-co-occurrences", "description":"($element-name-1 as xs:QName, $element-name-2 as xs:QName, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:element-value-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$element-name-2 as xs:QName}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:element-value-co-occurrences", "description":"($element-name-1 as xs:QName, $element-name-2 as xs:QName, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:element-attribute-value-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$attribute-name-1 as xs:QName?}, ${3:\\$element-name-2 as xs:QName}, ${4:\\$attribute-name-2 as xs:QName?})", "trigger":"cts:element-attribute-value-co-occurrences", "description":"($element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $element-name-2 as xs:QName, $attribute-name-2 as xs:QName?)"}, {"content":"cts:element-attribute-value-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$attribute-name-1 as xs:QName?}, ${3:\\$element-name-2 as xs:QName}, ${4:\\$attribute-name-2 as xs:QName?}, ${5:\\$options as xs:string*})", "trigger":"cts:element-attribute-value-co-occurrences", "description":"($element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $element-name-2 as xs:QName, $attribute-name-2 as xs:QName?, $options as xs:string*)"}, {"content":"cts:element-attribute-value-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$attribute-name-1 as xs:QName?}, ${3:\\$element-name-2 as xs:QName}, ${4:\\$attribute-name-2 as xs:QName?}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?})", "trigger":"cts:element-attribute-value-co-occurrences", "description":"($element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $element-name-2 as xs:QName, $attribute-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:element-attribute-value-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$attribute-name-1 as xs:QName?}, ${3:\\$element-name-2 as xs:QName}, ${4:\\$attribute-name-2 as xs:QName?}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$quality-weight as xs:double?})", "trigger":"cts:element-attribute-value-co-occurrences", "description":"($element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $element-name-2 as xs:QName, $attribute-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:element-attribute-value-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$attribute-name-1 as xs:QName?}, ${3:\\$element-name-2 as xs:QName}, ${4:\\$attribute-name-2 as xs:QName?}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$quality-weight as xs:double?}, ${8:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:element-attribute-value-co-occurrences", "description":"($element-name-1 as xs:QName, $attribute-name-1 as xs:QName?, $element-name-2 as xs:QName, $attribute-name-2 as xs:QName?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:value-match(${1:\\$range-indexes as cts:reference*}, ${2:\\$pattern as xs:anyAtomicType})", "trigger":"cts:value-match", "description":"($range-indexes as cts:reference*, $pattern as xs:anyAtomicType)"}, {"content":"cts:value-match(${1:\\$range-indexes as cts:reference*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*})", "trigger":"cts:value-match", "description":"($range-indexes as cts:reference*, $pattern as xs:anyAtomicType, $options as xs:string*)"}, {"content":"cts:value-match(${1:\\$range-indexes as cts:reference*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "trigger":"cts:value-match", "description":"($range-indexes as cts:reference*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:value-match(${1:\\$range-indexes as cts:reference*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "trigger":"cts:value-match", "description":"($range-indexes as cts:reference*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:value-match(${1:\\$range-indexes as cts:reference*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:value-match", "description":"($range-indexes as cts:reference*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:value-co-occurrences(${1:\\$range-index-1 as cts:reference}, ${2:\\$range-index-2 as cts:reference})", "trigger":"cts:value-co-occurrences", "description":"($range-index-1 as cts:reference, $range-index-2 as cts:reference)"}, {"content":"cts:value-co-occurrences(${1:\\$range-index-1 as cts:reference}, ${2:\\$range-index-2 as cts:reference}, ${3:\\$options as xs:string*})", "trigger":"cts:value-co-occurrences", "description":"($range-index-1 as cts:reference, $range-index-2 as cts:reference, $options as xs:string*)"}, {"content":"cts:value-co-occurrences(${1:\\$range-index-1 as cts:reference}, ${2:\\$range-index-2 as cts:reference}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "trigger":"cts:value-co-occurrences", "description":"($range-index-1 as cts:reference, $range-index-2 as cts:reference, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:value-co-occurrences(${1:\\$range-index-1 as cts:reference}, ${2:\\$range-index-2 as cts:reference}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "trigger":"cts:value-co-occurrences", "description":"($range-index-1 as cts:reference, $range-index-2 as cts:reference, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:value-co-occurrences(${1:\\$range-index-1 as cts:reference}, ${2:\\$range-index-2 as cts:reference}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:value-co-occurrences", "description":"($range-index-1 as cts:reference, $range-index-2 as cts:reference, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:value-ranges(${1:\\$range-indexes as cts:reference*})", "trigger":"cts:value-ranges", "description":"($range-indexes as cts:reference*)"}, {"content":"cts:value-ranges(${1:\\$range-indexes as cts:reference*}, ${2:\\$bounds as xs:anyAtomicType*})", "trigger":"cts:value-ranges", "description":"($range-indexes as cts:reference*, $bounds as xs:anyAtomicType*)"}, {"content":"cts:value-ranges(${1:\\$range-indexes as cts:reference*}, ${2:\\$bounds as xs:anyAtomicType*}, ${3:\\$options as xs:string*})", "trigger":"cts:value-ranges", "description":"($range-indexes as cts:reference*, $bounds as xs:anyAtomicType*, $options as xs:string*)"}, {"content":"cts:value-ranges(${1:\\$range-indexes as cts:reference*}, ${2:\\$bounds as xs:anyAtomicType*}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "trigger":"cts:value-ranges", "description":"($range-indexes as cts:reference*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:value-ranges(${1:\\$range-indexes as cts:reference*}, ${2:\\$bounds as xs:anyAtomicType*}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "trigger":"cts:value-ranges", "description":"($range-indexes as cts:reference*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:value-ranges(${1:\\$range-indexes as cts:reference*}, ${2:\\$bounds as xs:anyAtomicType*}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:value-ranges", "description":"($range-indexes as cts:reference*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:reference-scalar-type(${1:\\$index as cts:reference})", "trigger":"cts:reference-scalar-type", "description":"($index as cts:reference)"}, {"content":"cts:uri-reference()", "trigger":"cts:uri-reference", "description":"()"}, {"content":"cts:collection-reference()", "trigger":"cts:collection-reference", "description":"()"}, {"content":"cts:collection-reference(${1:\\$options as xs:string*})", "trigger":"cts:collection-reference", "description":"($options as xs:string*)"}, {"content":"cts:element-reference(${1:\\$element as xs:QName})", "trigger":"cts:element-reference", "description":"($element as xs:QName)"}, {"content":"cts:element-reference(${1:\\$element as xs:QName}, ${2:\\$options as xs:string*})", "trigger":"cts:element-reference", "description":"($element as xs:QName, $options as xs:string*)"}, {"content":"cts:json-property-reference(${1:\\$property as xs:string})", "trigger":"cts:json-property-reference", "description":"($property as xs:string)"}, {"content":"cts:json-property-reference(${1:\\$property as xs:string}, ${2:\\$options as xs:string*})", "trigger":"cts:json-property-reference", "description":"($property as xs:string, $options as xs:string*)"}, {"content":"cts:element-attribute-reference(${1:\\$element as xs:QName}, ${2:\\$attribute as xs:QName})", "trigger":"cts:element-attribute-reference", "description":"($element as xs:QName, $attribute as xs:QName)"}, {"content":"cts:element-attribute-reference(${1:\\$element as xs:QName}, ${2:\\$attribute as xs:QName}, ${3:\\$options as xs:string*})", "trigger":"cts:element-attribute-reference", "description":"($element as xs:QName, $attribute as xs:QName, $options as xs:string*)"}, {"content":"cts:field-reference(${1:\\$field as xs:string})", "trigger":"cts:field-reference", "description":"($field as xs:string)"}, {"content":"cts:field-reference(${1:\\$field as xs:string}, ${2:\\$options as xs:string*})", "trigger":"cts:field-reference", "description":"($field as xs:string, $options as xs:string*)"}, {"content":"cts:path-reference(${1:\\$path-expression as xs:string})", "trigger":"cts:path-reference", "description":"($path-expression as xs:string)"}, {"content":"cts:path-reference(${1:\\$path-expression as xs:string}, ${2:\\$options as xs:string*})", "trigger":"cts:path-reference", "description":"($path-expression as xs:string, $options as xs:string*)"}, {"content":"cts:path-reference(${1:\\$path-expression as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$map as map:map})", "trigger":"cts:path-reference", "description":"($path-expression as xs:string, $options as xs:string*, $map as map:map)"}, {"content":"cts:value-tuples(${1:\\$range-indexes as cts:reference*})", "trigger":"cts:value-tuples", "description":"($range-indexes as cts:reference*)"}, {"content":"cts:value-tuples(${1:\\$range-indexes as cts:reference*}, ${2:\\$options as xs:string*})", "trigger":"cts:value-tuples", "description":"($range-indexes as cts:reference*, $options as xs:string*)"}, {"content":"cts:value-tuples(${1:\\$range-indexes as cts:reference*}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "trigger":"cts:value-tuples", "description":"($range-indexes as cts:reference*, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:value-tuples(${1:\\$range-indexes as cts:reference*}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$quality-weight as xs:double?})", "trigger":"cts:value-tuples", "description":"($range-indexes as cts:reference*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:value-tuples(${1:\\$range-indexes as cts:reference*}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$quality-weight as xs:double?}, ${5:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:value-tuples", "description":"($range-indexes as cts:reference*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:aggregate(${1:\\$native-plugin as xs:string}, ${2:\\$aggregate-name as xs:string}, ${3:\\$range-indexes as cts:reference*})", "trigger":"cts:aggregate", "description":"($native-plugin as xs:string, $aggregate-name as xs:string, $range-indexes as cts:reference*)"}, {"content":"cts:aggregate(${1:\\$native-plugin as xs:string}, ${2:\\$aggregate-name as xs:string}, ${3:\\$range-indexes as cts:reference*}, ${4:\\$argument as item()*})", "trigger":"cts:aggregate", "description":"($native-plugin as xs:string, $aggregate-name as xs:string, $range-indexes as cts:reference*, $argument as item()*)"}, {"content":"cts:aggregate(${1:\\$native-plugin as xs:string}, ${2:\\$aggregate-name as xs:string}, ${3:\\$range-indexes as cts:reference*}, ${4:\\$argument as item()*}, ${5:\\$options as xs:string*})", "trigger":"cts:aggregate", "description":"($native-plugin as xs:string, $aggregate-name as xs:string, $range-indexes as cts:reference*, $argument as item()*, $options as xs:string*)"}, {"content":"cts:aggregate(${1:\\$native-plugin as xs:string}, ${2:\\$aggregate-name as xs:string}, ${3:\\$range-indexes as cts:reference*}, ${4:\\$argument as item()*}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?})", "trigger":"cts:aggregate", "description":"($native-plugin as xs:string, $aggregate-name as xs:string, $range-indexes as cts:reference*, $argument as item()*, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:aggregate(${1:\\$native-plugin as xs:string}, ${2:\\$aggregate-name as xs:string}, ${3:\\$range-indexes as cts:reference*}, ${4:\\$argument as item()*}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:aggregate", "description":"($native-plugin as xs:string, $aggregate-name as xs:string, $range-indexes as cts:reference*, $argument as item()*, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:count-aggregate(${1:\\$range-index as cts:reference})", "trigger":"cts:count-aggregate", "description":"($range-index as cts:reference)"}, {"content":"cts:count-aggregate(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*})", "trigger":"cts:count-aggregate", "description":"($range-index as cts:reference, $options as xs:string*)"}, {"content":"cts:count-aggregate(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "trigger":"cts:count-aggregate", "description":"($range-index as cts:reference, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:count-aggregate(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:count-aggregate", "description":"($range-index as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:min(${1:\\$range-index as cts:reference})", "trigger":"cts:min", "description":"($range-index as cts:reference)"}, {"content":"cts:min(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*})", "trigger":"cts:min", "description":"($range-index as cts:reference, $options as xs:string*)"}, {"content":"cts:min(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "trigger":"cts:min", "description":"($range-index as cts:reference, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:min(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:min", "description":"($range-index as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:max(${1:\\$range-index as cts:reference})", "trigger":"cts:max", "description":"($range-index as cts:reference)"}, {"content":"cts:max(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*})", "trigger":"cts:max", "description":"($range-index as cts:reference, $options as xs:string*)"}, {"content":"cts:max(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "trigger":"cts:max", "description":"($range-index as cts:reference, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:max(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:max", "description":"($range-index as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:sum-aggregate(${1:\\$range-index as cts:reference})", "trigger":"cts:sum-aggregate", "description":"($range-index as cts:reference)"}, {"content":"cts:sum-aggregate(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*})", "trigger":"cts:sum-aggregate", "description":"($range-index as cts:reference, $options as xs:string*)"}, {"content":"cts:sum-aggregate(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "trigger":"cts:sum-aggregate", "description":"($range-index as cts:reference, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:sum-aggregate(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:sum-aggregate", "description":"($range-index as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:avg-aggregate(${1:\\$range-index as cts:reference})", "trigger":"cts:avg-aggregate", "description":"($range-index as cts:reference)"}, {"content":"cts:avg-aggregate(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*})", "trigger":"cts:avg-aggregate", "description":"($range-index as cts:reference, $options as xs:string*)"}, {"content":"cts:avg-aggregate(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "trigger":"cts:avg-aggregate", "description":"($range-index as cts:reference, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:avg-aggregate(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:avg-aggregate", "description":"($range-index as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:variance-p(${1:\\$range-index as cts:reference})", "trigger":"cts:variance-p", "description":"($range-index as cts:reference)"}, {"content":"cts:variance-p(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*})", "trigger":"cts:variance-p", "description":"($range-index as cts:reference, $options as xs:string*)"}, {"content":"cts:variance-p(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "trigger":"cts:variance-p", "description":"($range-index as cts:reference, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:variance-p(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:variance-p", "description":"($range-index as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:variance(${1:\\$range-index as cts:reference})", "trigger":"cts:variance", "description":"($range-index as cts:reference)"}, {"content":"cts:variance(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*})", "trigger":"cts:variance", "description":"($range-index as cts:reference, $options as xs:string*)"}, {"content":"cts:variance(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "trigger":"cts:variance", "description":"($range-index as cts:reference, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:variance(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:variance", "description":"($range-index as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:stddev-p(${1:\\$range-index as cts:reference})", "trigger":"cts:stddev-p", "description":"($range-index as cts:reference)"}, {"content":"cts:stddev-p(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*})", "trigger":"cts:stddev-p", "description":"($range-index as cts:reference, $options as xs:string*)"}, {"content":"cts:stddev-p(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "trigger":"cts:stddev-p", "description":"($range-index as cts:reference, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:stddev-p(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:stddev-p", "description":"($range-index as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:stddev(${1:\\$range-index as cts:reference})", "trigger":"cts:stddev", "description":"($range-index as cts:reference)"}, {"content":"cts:stddev(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*})", "trigger":"cts:stddev", "description":"($range-index as cts:reference, $options as xs:string*)"}, {"content":"cts:stddev(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "trigger":"cts:stddev", "description":"($range-index as cts:reference, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:stddev(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:stddev", "description":"($range-index as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:covariance-p(${1:\\$value1 as cts:reference}, ${2:\\$value2 as cts:reference})", "trigger":"cts:covariance-p", "description":"($value1 as cts:reference, $value2 as cts:reference)"}, {"content":"cts:covariance-p(${1:\\$value1 as cts:reference}, ${2:\\$value2 as cts:reference}, ${3:\\$options as xs:string*})", "trigger":"cts:covariance-p", "description":"($value1 as cts:reference, $value2 as cts:reference, $options as xs:string*)"}, {"content":"cts:covariance-p(${1:\\$value1 as cts:reference}, ${2:\\$value2 as cts:reference}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "trigger":"cts:covariance-p", "description":"($value1 as cts:reference, $value2 as cts:reference, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:covariance-p(${1:\\$value1 as cts:reference}, ${2:\\$value2 as cts:reference}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:covariance-p", "description":"($value1 as cts:reference, $value2 as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:covariance(${1:\\$value1 as cts:reference}, ${2:\\$value2 as cts:reference})", "trigger":"cts:covariance", "description":"($value1 as cts:reference, $value2 as cts:reference)"}, {"content":"cts:covariance(${1:\\$value1 as cts:reference}, ${2:\\$value2 as cts:reference}, ${3:\\$options as xs:string*})", "trigger":"cts:covariance", "description":"($value1 as cts:reference, $value2 as cts:reference, $options as xs:string*)"}, {"content":"cts:covariance(${1:\\$value1 as cts:reference}, ${2:\\$value2 as cts:reference}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "trigger":"cts:covariance", "description":"($value1 as cts:reference, $value2 as cts:reference, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:covariance(${1:\\$value1 as cts:reference}, ${2:\\$value2 as cts:reference}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:covariance", "description":"($value1 as cts:reference, $value2 as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:correlation(${1:\\$value1 as cts:reference}, ${2:\\$value2 as cts:reference})", "trigger":"cts:correlation", "description":"($value1 as cts:reference, $value2 as cts:reference)"}, {"content":"cts:correlation(${1:\\$value1 as cts:reference}, ${2:\\$value2 as cts:reference}, ${3:\\$options as xs:string*})", "trigger":"cts:correlation", "description":"($value1 as cts:reference, $value2 as cts:reference, $options as xs:string*)"}, {"content":"cts:correlation(${1:\\$value1 as cts:reference}, ${2:\\$value2 as cts:reference}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "trigger":"cts:correlation", "description":"($value1 as cts:reference, $value2 as cts:reference, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:correlation(${1:\\$value1 as cts:reference}, ${2:\\$value2 as cts:reference}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:correlation", "description":"($value1 as cts:reference, $value2 as cts:reference, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:linear-model(${1:\\$values as cts:reference*})", "trigger":"cts:linear-model", "description":"($values as cts:reference*)"}, {"content":"cts:linear-model(${1:\\$values as cts:reference*}, ${2:\\$options as xs:string*})", "trigger":"cts:linear-model", "description":"($values as cts:reference*, $options as xs:string*)"}, {"content":"cts:linear-model(${1:\\$values as cts:reference*}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "trigger":"cts:linear-model", "description":"($values as cts:reference*, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:linear-model(${1:\\$values as cts:reference*}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:linear-model", "description":"($values as cts:reference*, $options as xs:string*, $query as cts:query?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:element-value-ranges(${1:\\$element-names as xs:QName*})", "trigger":"cts:element-value-ranges", "description":"($element-names as xs:QName*)"}, {"content":"cts:element-value-ranges(${1:\\$element-names as xs:QName*}, ${2:\\$bounds as xs:anyAtomicType*})", "trigger":"cts:element-value-ranges", "description":"($element-names as xs:QName*, $bounds as xs:anyAtomicType*)"}, {"content":"cts:element-value-ranges(${1:\\$element-names as xs:QName*}, ${2:\\$bounds as xs:anyAtomicType*}, ${3:\\$options as xs:string*})", "trigger":"cts:element-value-ranges", "description":"($element-names as xs:QName*, $bounds as xs:anyAtomicType*, $options as xs:string*)"}, {"content":"cts:element-value-ranges(${1:\\$element-names as xs:QName*}, ${2:\\$bounds as xs:anyAtomicType*}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "trigger":"cts:element-value-ranges", "description":"($element-names as xs:QName*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:element-value-ranges(${1:\\$element-names as xs:QName*}, ${2:\\$bounds as xs:anyAtomicType*}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "trigger":"cts:element-value-ranges", "description":"($element-names as xs:QName*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:element-value-ranges(${1:\\$element-names as xs:QName*}, ${2:\\$bounds as xs:anyAtomicType*}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:element-value-ranges", "description":"($element-names as xs:QName*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:field-value-match(${1:\\$field-names as xs:string*}, ${2:\\$pattern as xs:anyAtomicType})", "trigger":"cts:field-value-match", "description":"($field-names as xs:string*, $pattern as xs:anyAtomicType)"}, {"content":"cts:field-value-match(${1:\\$field-names as xs:string*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*})", "trigger":"cts:field-value-match", "description":"($field-names as xs:string*, $pattern as xs:anyAtomicType, $options as xs:string*)"}, {"content":"cts:field-value-match(${1:\\$field-names as xs:string*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "trigger":"cts:field-value-match", "description":"($field-names as xs:string*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:field-value-match(${1:\\$field-names as xs:string*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "trigger":"cts:field-value-match", "description":"($field-names as xs:string*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:field-value-match(${1:\\$field-names as xs:string*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:field-value-match", "description":"($field-names as xs:string*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:field-value-co-occurrences(${1:\\$field-name-1 as xs:string}, ${2:\\$field-name-2 as xs:string})", "trigger":"cts:field-value-co-occurrences", "description":"($field-name-1 as xs:string, $field-name-2 as xs:string)"}, {"content":"cts:field-value-co-occurrences(${1:\\$field-name-1 as xs:string}, ${2:\\$field-name-2 as xs:string}, ${3:\\$options as xs:string*})", "trigger":"cts:field-value-co-occurrences", "description":"($field-name-1 as xs:string, $field-name-2 as xs:string, $options as xs:string*)"}, {"content":"cts:field-value-co-occurrences(${1:\\$field-name-1 as xs:string}, ${2:\\$field-name-2 as xs:string}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "trigger":"cts:field-value-co-occurrences", "description":"($field-name-1 as xs:string, $field-name-2 as xs:string, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:field-value-co-occurrences(${1:\\$field-name-1 as xs:string}, ${2:\\$field-name-2 as xs:string}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "trigger":"cts:field-value-co-occurrences", "description":"($field-name-1 as xs:string, $field-name-2 as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:field-value-co-occurrences(${1:\\$field-name-1 as xs:string}, ${2:\\$field-name-2 as xs:string}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:field-value-co-occurrences", "description":"($field-name-1 as xs:string, $field-name-2 as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:field-value-ranges(${1:\\$field-names as xs:string*})", "trigger":"cts:field-value-ranges", "description":"($field-names as xs:string*)"}, {"content":"cts:field-value-ranges(${1:\\$field-names as xs:string*}, ${2:\\$bounds as xs:anyAtomicType*})", "trigger":"cts:field-value-ranges", "description":"($field-names as xs:string*, $bounds as xs:anyAtomicType*)"}, {"content":"cts:field-value-ranges(${1:\\$field-names as xs:string*}, ${2:\\$bounds as xs:anyAtomicType*}, ${3:\\$options as xs:string*})", "trigger":"cts:field-value-ranges", "description":"($field-names as xs:string*, $bounds as xs:anyAtomicType*, $options as xs:string*)"}, {"content":"cts:field-value-ranges(${1:\\$field-names as xs:string*}, ${2:\\$bounds as xs:anyAtomicType*}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "trigger":"cts:field-value-ranges", "description":"($field-names as xs:string*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:field-value-ranges(${1:\\$field-names as xs:string*}, ${2:\\$bounds as xs:anyAtomicType*}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "trigger":"cts:field-value-ranges", "description":"($field-names as xs:string*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:field-value-ranges(${1:\\$field-names as xs:string*}, ${2:\\$bounds as xs:anyAtomicType*}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:field-value-ranges", "description":"($field-names as xs:string*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:frequency(${1:\\$value as item()})", "trigger":"cts:frequency", "description":"($value as item())"}, {"content":"cts:sum(${1:\\$arg as xs:anyAtomicType*})", "trigger":"cts:sum", "description":"($arg as xs:anyAtomicType*)"}, {"content":"cts:sum(${1:\\$arg as xs:anyAtomicType*}, ${2:\\$zero as xs:anyAtomicType?})", "trigger":"cts:sum", "description":"($arg as xs:anyAtomicType*, $zero as xs:anyAtomicType?)"}, {"content":"cts:count(${1:\\$arg as item()*})", "trigger":"cts:count", "description":"($arg as item()*)"}, {"content":"cts:count(${1:\\$arg as item()*}, ${2:\\$maximum as xs:double})", "trigger":"cts:count", "description":"($arg as item()*, $maximum as xs:double)"}, {"content":"cts:avg(${1:\\$arg as xs:anyAtomicType*})", "trigger":"cts:avg", "description":"($arg as xs:anyAtomicType*)"}, {"content":"cts:uris()", "trigger":"cts:uris", "description":"()"}, {"content":"cts:uris(${1:\\$start as xs:string?})", "trigger":"cts:uris", "description":"($start as xs:string?)"}, {"content":"cts:uris(${1:\\$start as xs:string?}, ${2:\\$options as xs:string*})", "trigger":"cts:uris", "description":"($start as xs:string?, $options as xs:string*)"}, {"content":"cts:uris(${1:\\$start as xs:string?}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "trigger":"cts:uris", "description":"($start as xs:string?, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:uris(${1:\\$start as xs:string?}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$quality-weight as xs:double?})", "trigger":"cts:uris", "description":"($start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:uris(${1:\\$start as xs:string?}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$quality-weight as xs:double?}, ${5:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:uris", "description":"($start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:uri-match(${1:\\$pattern as xs:string})", "trigger":"cts:uri-match", "description":"($pattern as xs:string)"}, {"content":"cts:uri-match(${1:\\$pattern as xs:string}, ${2:\\$options as xs:string*})", "trigger":"cts:uri-match", "description":"($pattern as xs:string, $options as xs:string*)"}, {"content":"cts:uri-match(${1:\\$pattern as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "trigger":"cts:uri-match", "description":"($pattern as xs:string, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:uri-match(${1:\\$pattern as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$quality-weight as xs:double?})", "trigger":"cts:uri-match", "description":"($pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:uri-match(${1:\\$pattern as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$quality-weight as xs:double?}, ${5:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:uri-match", "description":"($pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:collections()", "trigger":"cts:collections", "description":"()"}, {"content":"cts:collections(${1:\\$start as xs:string?})", "trigger":"cts:collections", "description":"($start as xs:string?)"}, {"content":"cts:collections(${1:\\$start as xs:string?}, ${2:\\$options as xs:string*})", "trigger":"cts:collections", "description":"($start as xs:string?, $options as xs:string*)"}, {"content":"cts:collections(${1:\\$start as xs:string?}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "trigger":"cts:collections", "description":"($start as xs:string?, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:collections(${1:\\$start as xs:string?}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$quality-weight as xs:double?})", "trigger":"cts:collections", "description":"($start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:collections(${1:\\$start as xs:string?}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$quality-weight as xs:double?}, ${5:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:collections", "description":"($start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:collection-match(${1:\\$pattern as xs:string})", "trigger":"cts:collection-match", "description":"($pattern as xs:string)"}, {"content":"cts:collection-match(${1:\\$pattern as xs:string}, ${2:\\$options as xs:string*})", "trigger":"cts:collection-match", "description":"($pattern as xs:string, $options as xs:string*)"}, {"content":"cts:collection-match(${1:\\$pattern as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "trigger":"cts:collection-match", "description":"($pattern as xs:string, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:collection-match(${1:\\$pattern as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$quality-weight as xs:double?})", "trigger":"cts:collection-match", "description":"($pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:collection-match(${1:\\$pattern as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$quality-weight as xs:double?}, ${5:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:collection-match", "description":"($pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:element-attribute-words(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*})", "trigger":"cts:element-attribute-words", "description":"($element-names as xs:QName*, $attribute-names as xs:QName*)"}, {"content":"cts:element-attribute-words(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$start as xs:string?})", "trigger":"cts:element-attribute-words", "description":"($element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:string?)"}, {"content":"cts:element-attribute-words(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$start as xs:string?}, ${4:\\$options as xs:string*})", "trigger":"cts:element-attribute-words", "description":"($element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:string?, $options as xs:string*)"}, {"content":"cts:element-attribute-words(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$start as xs:string?}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?})", "trigger":"cts:element-attribute-words", "description":"($element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:string?, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:element-attribute-words(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$start as xs:string?}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?})", "trigger":"cts:element-attribute-words", "description":"($element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:element-attribute-words(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$start as xs:string?}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?}, ${7:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:element-attribute-words", "description":"($element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:element-attribute-word-match(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$pattern as xs:string})", "trigger":"cts:element-attribute-word-match", "description":"($element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:string)"}, {"content":"cts:element-attribute-word-match(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$pattern as xs:string}, ${4:\\$options as xs:string*})", "trigger":"cts:element-attribute-word-match", "description":"($element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:string, $options as xs:string*)"}, {"content":"cts:element-attribute-word-match(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$pattern as xs:string}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?})", "trigger":"cts:element-attribute-word-match", "description":"($element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:string, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:element-attribute-word-match(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$pattern as xs:string}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?})", "trigger":"cts:element-attribute-word-match", "description":"($element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:element-attribute-word-match(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$pattern as xs:string}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?}, ${7:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:element-attribute-word-match", "description":"($element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:element-attribute-values(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*})", "trigger":"cts:element-attribute-values", "description":"($element-names as xs:QName*, $attribute-names as xs:QName*)"}, {"content":"cts:element-attribute-values(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$start as xs:anyAtomicType?})", "trigger":"cts:element-attribute-values", "description":"($element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:anyAtomicType?)"}, {"content":"cts:element-attribute-values(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$start as xs:anyAtomicType?}, ${4:\\$options as xs:string*})", "trigger":"cts:element-attribute-values", "description":"($element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:anyAtomicType?, $options as xs:string*)"}, {"content":"cts:element-attribute-values(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$start as xs:anyAtomicType?}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?})", "trigger":"cts:element-attribute-values", "description":"($element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:element-attribute-values(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$start as xs:anyAtomicType?}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?})", "trigger":"cts:element-attribute-values", "description":"($element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:element-attribute-values(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$start as xs:anyAtomicType?}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?}, ${7:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:element-attribute-values", "description":"($element-names as xs:QName*, $attribute-names as xs:QName*, $start as xs:anyAtomicType?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:element-attribute-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$pattern as xs:anyAtomicType})", "trigger":"cts:element-attribute-value-match", "description":"($element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:anyAtomicType)"}, {"content":"cts:element-attribute-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$pattern as xs:anyAtomicType}, ${4:\\$options as xs:string*})", "trigger":"cts:element-attribute-value-match", "description":"($element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*)"}, {"content":"cts:element-attribute-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$pattern as xs:anyAtomicType}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?})", "trigger":"cts:element-attribute-value-match", "description":"($element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:element-attribute-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$pattern as xs:anyAtomicType}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?})", "trigger":"cts:element-attribute-value-match", "description":"($element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:element-attribute-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$pattern as xs:anyAtomicType}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?}, ${7:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:element-attribute-value-match", "description":"($element-names as xs:QName*, $attribute-names as xs:QName*, $pattern as xs:anyAtomicType, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:element-attribute-value-ranges(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*})", "trigger":"cts:element-attribute-value-ranges", "description":"($element-names as xs:QName*, $attribute-names as xs:QName*)"}, {"content":"cts:element-attribute-value-ranges(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$bounds as xs:anyAtomicType*})", "trigger":"cts:element-attribute-value-ranges", "description":"($element-names as xs:QName*, $attribute-names as xs:QName*, $bounds as xs:anyAtomicType*)"}, {"content":"cts:element-attribute-value-ranges(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$bounds as xs:anyAtomicType*}, ${4:\\$options as xs:string*})", "trigger":"cts:element-attribute-value-ranges", "description":"($element-names as xs:QName*, $attribute-names as xs:QName*, $bounds as xs:anyAtomicType*, $options as xs:string*)"}, {"content":"cts:element-attribute-value-ranges(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$bounds as xs:anyAtomicType*}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?})", "trigger":"cts:element-attribute-value-ranges", "description":"($element-names as xs:QName*, $attribute-names as xs:QName*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:element-attribute-value-ranges(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$bounds as xs:anyAtomicType*}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?})", "trigger":"cts:element-attribute-value-ranges", "description":"($element-names as xs:QName*, $attribute-names as xs:QName*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:element-attribute-value-ranges(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$bounds as xs:anyAtomicType*}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?}, ${7:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:element-attribute-value-ranges", "description":"($element-names as xs:QName*, $attribute-names as xs:QName*, $bounds as xs:anyAtomicType*, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:field-words(${1:\\$field-names as xs:string*})", "trigger":"cts:field-words", "description":"($field-names as xs:string*)"}, {"content":"cts:field-words(${1:\\$field-names as xs:string*}, ${2:\\$start as xs:string?})", "trigger":"cts:field-words", "description":"($field-names as xs:string*, $start as xs:string?)"}, {"content":"cts:field-words(${1:\\$field-names as xs:string*}, ${2:\\$start as xs:string?}, ${3:\\$options as xs:string*})", "trigger":"cts:field-words", "description":"($field-names as xs:string*, $start as xs:string?, $options as xs:string*)"}, {"content":"cts:field-words(${1:\\$field-names as xs:string*}, ${2:\\$start as xs:string?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "trigger":"cts:field-words", "description":"($field-names as xs:string*, $start as xs:string?, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:field-words(${1:\\$field-names as xs:string*}, ${2:\\$start as xs:string?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "trigger":"cts:field-words", "description":"($field-names as xs:string*, $start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:field-words(${1:\\$field-names as xs:string*}, ${2:\\$start as xs:string?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:field-words", "description":"($field-names as xs:string*, $start as xs:string?, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:field-word-match(${1:\\$field-names as xs:string*}, ${2:\\$pattern as xs:string})", "trigger":"cts:field-word-match", "description":"($field-names as xs:string*, $pattern as xs:string)"}, {"content":"cts:field-word-match(${1:\\$field-names as xs:string*}, ${2:\\$pattern as xs:string}, ${3:\\$options as xs:string*})", "trigger":"cts:field-word-match", "description":"($field-names as xs:string*, $pattern as xs:string, $options as xs:string*)"}, {"content":"cts:field-word-match(${1:\\$field-names as xs:string*}, ${2:\\$pattern as xs:string}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "trigger":"cts:field-word-match", "description":"($field-names as xs:string*, $pattern as xs:string, $options as xs:string*, $query as cts:query?)"}, {"content":"cts:field-word-match(${1:\\$field-names as xs:string*}, ${2:\\$pattern as xs:string}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "trigger":"cts:field-word-match", "description":"($field-names as xs:string*, $pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?)"}, {"content":"cts:field-word-match(${1:\\$field-names as xs:string*}, ${2:\\$pattern as xs:string}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "trigger":"cts:field-word-match", "description":"($field-names as xs:string*, $pattern as xs:string, $options as xs:string*, $query as cts:query?, $quality-weight as xs:double?, $forest-ids as xs:unsignedLong*)"}, {"content":"cts:reverse-query(${1:\\$nodes as node()*})", "trigger":"cts:reverse-query", "description":"($nodes as node()*)"}, {"content":"cts:reverse-query(${1:\\$nodes as node()*}, ${2:\\$weight as xs:double?})", "trigger":"cts:reverse-query", "description":"($nodes as node()*, $weight as xs:double?)"}, {"content":"cts:reverse-query-nodes(${1:\\$query as cts:reverse-query})", "trigger":"cts:reverse-query-nodes", "description":"($query as cts:reverse-query)"}, {"content":"cts:reverse-query-weight(${1:\\$query as cts:reverse-query})", "trigger":"cts:reverse-query-weight", "description":"($query as cts:reverse-query)"}, {"content":"cts:document-fragment-query(${1:\\$query as cts:query})", "trigger":"cts:document-fragment-query", "description":"($query as cts:query)"}, {"content":"cts:document-fragment-query-query(${1:\\$query as cts:document-fragment-query})", "trigger":"cts:document-fragment-query-query", "description":"($query as cts:document-fragment-query)"}, {"content":"cts:properties-fragment-query(${1:\\$query as cts:query})", "trigger":"cts:properties-fragment-query", "description":"($query as cts:query)"}, {"content":"cts:properties-fragment-query-query(${1:\\$query as cts:properties-fragment-query})", "trigger":"cts:properties-fragment-query-query", "description":"($query as cts:properties-fragment-query)"}, {"content":"cts:locks-fragment-query(${1:\\$query as cts:query})", "trigger":"cts:locks-fragment-query", "description":"($query as cts:query)"}, {"content":"cts:locks-fragment-query-query(${1:\\$query as cts:locks-fragment-query})", "trigger":"cts:locks-fragment-query-query", "description":"($query as cts:locks-fragment-query)"}, {"content":"cts:query(${1:\\$query as node()})", "trigger":"cts:query", "description":"($query as node())"}, {"content":"cts:distinctive-terms(${1:\\$nodes as node()*})", "trigger":"cts:distinctive-terms", "description":"($nodes as node()*)"}, {"content":"cts:distinctive-terms(${1:\\$nodes as node()*}, ${2:\\$options as element()?})", "trigger":"cts:distinctive-terms", "description":"($nodes as node()*, $options as element()?)"}, {"content":"cts:period(${1:\\$start as xs:dateTime}, ${2:\\$end as xs:dateTime})", "trigger":"cts:period", "description":"($start as xs:dateTime, $end as xs:dateTime)"}, {"content":"cts:reference-parse(${1:\\$reference as node()})", "trigger":"cts:reference-parse", "description":"($reference as node())"}, {"content":"cts:parse(${1:\\$query as xs:string})", "trigger":"cts:parse", "description":"($query as xs:string)"}, {"content":"cts:parse(${1:\\$query as xs:string}, ${2:\\$bindings as map:map?})", "trigger":"cts:parse", "description":"($query as xs:string, $bindings as map:map?)"}, {"content":"xdmp:can-grant-roles(${1:\\$roles as xs:string*})", "trigger":"xdmp:can-grant-roles", "description":"($roles as xs:string*)"}, {"content":"xdmp:security-assert(${1:\\$privileges as xs:string*}, ${2:\\$kind as xs:string})", "trigger":"xdmp:security-assert", "description":"($privileges as xs:string*, $kind as xs:string)"}, {"content":"xdmp:has-privilege(${1:\\$privileges as xs:string*}, ${2:\\$kind as xs:string})", "trigger":"xdmp:has-privilege", "description":"($privileges as xs:string*, $kind as xs:string)"}, {"content":"xdmp:user-roles(${1:\\$name as xs:string})", "trigger":"xdmp:user-roles", "description":"($name as xs:string)"}, {"content":"xdmp:user-roles(${1:\\$name as xs:string}, ${2:\\$extSecId as xs:unsignedLong})", "trigger":"xdmp:user-roles", "description":"($name as xs:string, $extSecId as xs:unsignedLong)"}, {"content":"xdmp:user-roles(${1:\\$name as xs:string}, ${2:\\$extSecId as xs:unsignedLong}, ${3:\\$secDbFirst as xs:boolean})", "trigger":"xdmp:user-roles", "description":"($name as xs:string, $extSecId as xs:unsignedLong, $secDbFirst as xs:boolean)"}, {"content":"xdmp:userid-roles(${1:\\$userId as xs:unsignedLong})", "trigger":"xdmp:userid-roles", "description":"($userId as xs:unsignedLong)"}, {"content":"xdmp:userid-roles(${1:\\$userId as xs:unsignedLong}, ${2:\\$extSecId as xs:unsignedLong})", "trigger":"xdmp:userid-roles", "description":"($userId as xs:unsignedLong, $extSecId as xs:unsignedLong)"}, {"content":"xdmp:userid-roles(${1:\\$userId as xs:unsignedLong}, ${2:\\$extSecId as xs:unsignedLong}, ${3:\\$secDbFirst as xs:boolean})", "trigger":"xdmp:userid-roles", "description":"($userId as xs:unsignedLong, $extSecId as xs:unsignedLong, $secDbFirst as xs:boolean)"}, {"content":"xdmp:role-roles(${1:\\$name as xs:string})", "trigger":"xdmp:role-roles", "description":"($name as xs:string)"}, {"content":"xdmp:privilege-roles(${1:\\$action as xs:string}, ${2:\\$kind as xs:string})", "trigger":"xdmp:privilege-roles", "description":"($action as xs:string, $kind as xs:string)"}, {"content":"xdmp:amp-roles(${1:\\$namespace-uri as xs:string}, ${2:\\$localname as xs:string}, ${3:\\$document-uri as xs:string}, ${4:\\$database-id as xs:unsignedLong})", "trigger":"xdmp:amp-roles", "description":"($namespace-uri as xs:string, $localname as xs:string, $document-uri as xs:string, $database-id as xs:unsignedLong)"}, {"content":"xdmp:document-get-collections(${1:\\$uri as xs:string})", "trigger":"xdmp:document-get-collections", "description":"($uri as xs:string)"}, {"content":"xdmp:document-get-metadata(${1:\\$uri as xs:string})", "trigger":"xdmp:document-get-metadata", "description":"($uri as xs:string)"}, {"content":"xdmp:document-get-metadata_value(${1:\\$uri as xs:string}, ${2:\\$keyName as xs:string})", "trigger":"xdmp:document-get-metadata_value", "description":"($uri as xs:string, $keyName as xs:string)"}, {"content":"xdmp:node-metadata(${1:\\$node as xs:string})", "trigger":"xdmp:node-metadata", "description":"($node as xs:string)"}, {"content":"xdmp:node-metadata_value(${1:\\$uri as xs:string}, ${2:\\$keyName as xs:string})", "trigger":"xdmp:node-metadata_value", "description":"($uri as xs:string, $keyName as xs:string)"}, {"content":"xdmp:node-collections(${1:\\$node as node()})", "trigger":"xdmp:node-collections", "description":"($node as node())"}, {"content":"xdmp:document-get-permissions(${1:\\$uri as xs:string})", "trigger":"xdmp:document-get-permissions", "description":"($uri as xs:string)"}, {"content":"xdmp:document-get-permissions(${1:\\$uri as xs:string}, ${2:\\$output-kind as xs:string})", "trigger":"xdmp:document-get-permissions", "description":"($uri as xs:string, $output-kind as xs:string)"}, {"content":"xdmp:node-permissions(${1:\\$node as node()})", "trigger":"xdmp:node-permissions", "description":"($node as node())"}, {"content":"xdmp:node-permissions(${1:\\$node as node()}, ${2:\\$output-kind as xs:string})", "trigger":"xdmp:node-permissions", "description":"($node as node(), $output-kind as xs:string)"}, {"content":"xdmp:default-permissions()", "trigger":"xdmp:default-permissions", "description":"()"}, {"content":"xdmp:default-permissions(${1:\\$uri as xs:string})", "trigger":"xdmp:default-permissions", "description":"($uri as xs:string)"}, {"content":"xdmp:default-permissions(${1:\\$uri as xs:string}, ${2:\\$output-kind as xs:string})", "trigger":"xdmp:default-permissions", "description":"($uri as xs:string, $output-kind as xs:string)"}, {"content":"xdmp:default-collections()", "trigger":"xdmp:default-collections", "description":"()"}, {"content":"xdmp:default-collections(${1:\\$uri as xs:string})", "trigger":"xdmp:default-collections", "description":"($uri as xs:string)"}, {"content":"xdmp:get-current-user()", "trigger":"xdmp:get-current-user", "description":"()"}, {"content":"xdmp:get-current-userid()", "trigger":"xdmp:get-current-userid", "description":"()"}, {"content":"xdmp:get-request-user()", "trigger":"xdmp:get-request-user", "description":"()"}, {"content":"xdmp:get-current-roles()", "trigger":"xdmp:get-current-roles", "description":"()"}, {"content":"xdmp:permission(${1:\\$role as xs:string}, ${2:\\$capability as xs:string})", "trigger":"xdmp:permission", "description":"($role as xs:string, $capability as xs:string)"}, {"content":"xdmp:permission(${1:\\$role as xs:string}, ${2:\\$capability as xs:string}, ${3:\\$output-kind as xs:string})", "trigger":"xdmp:permission", "description":"($role as xs:string, $capability as xs:string, $output-kind as xs:string)"}, {"content":"xdmp:user(${1:\\$user as xs:string})", "trigger":"xdmp:user", "description":"($user as xs:string)"}, {"content":"xdmp:user(${1:\\$user as xs:string}, ${2:\\$extSecId as xs:unsignedLong})", "trigger":"xdmp:user", "description":"($user as xs:string, $extSecId as xs:unsignedLong)"}, {"content":"xdmp:user(${1:\\$user as xs:string}, ${2:\\$extSecId as xs:unsignedLong}, ${3:\\$secDbFirst as xs:boolean})", "trigger":"xdmp:user", "description":"($user as xs:string, $extSecId as xs:unsignedLong, $secDbFirst as xs:boolean)"}, {"content":"xdmp:role(${1:\\$role as xs:string})", "trigger":"xdmp:role", "description":"($role as xs:string)"}, {"content":"xdmp:privilege(${1:\\$action as xs:string}, ${2:\\$kind as xs:string})", "trigger":"xdmp:privilege", "description":"($action as xs:string, $kind as xs:string)"}, {"content":"xdmp:amp(${1:\\$namespace as xs:string}, ${2:\\$localname as xs:string}, ${3:\\$module-uri as xs:string}, ${4:\\$database as xs:unsignedLong})", "trigger":"xdmp:amp", "description":"($namespace as xs:string, $localname as xs:string, $module-uri as xs:string, $database as xs:unsignedLong)"}, {"content":"xdmp:user-external-security(${1:\\$user-id as xs:unsignedLong})", "trigger":"xdmp:user-external-security", "description":"($user-id as xs:unsignedLong)"}, {"content":"xdmp:external-security(${1:\\$external-security as xs:string})", "trigger":"xdmp:external-security", "description":"($external-security as xs:string)"}, {"content":"xdmp:credentials(${1:\\$uri as [xs:string?]})", "trigger":"xdmp:credentials", "description":"($uri as [xs:string?])"}, {"content":"xdmp:credential(${1:\\$id as xs:unsignedLong})", "trigger":"xdmp:credential", "description":"($id as xs:unsignedLong)"}, {"content":"xdmp:credential-id(${1:\\$credential-name as xs:string})", "trigger":"xdmp:credential-id", "description":"($credential-name as xs:string)"}, {"content":"sec:create-user(${1:\\$user-name as xs:string}, ${2:\\$description as xs:string?}, ${3:\\$password as xs:string}, ${4:\\$role-names as xs:string*}, ${5:\\$permissions as element(sec:permission)*}, ${6:\\$collections as xs:string*})", "trigger":"sec:create-user", "description":"($user-name as xs:string, $description as xs:string?, $password as xs:string, $role-names as xs:string*, $permissions as element(sec:permission)*, $collections as xs:string*)"}, {"content":"sec:create-user(${1:\\$user-name as xs:string}, ${2:\\$description as xs:string?}, ${3:\\$password as xs:string}, ${4:\\$role-names as xs:string*}, ${5:\\$permissions as element(sec:permission)*}, ${6:\\$collections as xs:string*}, ${7:\\$external-names as xs:string*})", "trigger":"sec:create-user", "description":"($user-name as xs:string, $description as xs:string?, $password as xs:string, $role-names as xs:string*, $permissions as element(sec:permission)*, $collections as xs:string*, $external-names as xs:string*)"}, {"content":"sec:create-user-with-role(${1:\\$user-name as xs:string}, ${2:\\$description as xs:string?}, ${3:\\$password as xs:string}, ${4:\\$role-names as xs:string*}, ${5:\\$permissions as element(sec:permission)*}, ${6:\\$collections as xs:string*}, ${7:\\$external-names as xs:string*})", "trigger":"sec:create-user-with-role", "description":"($user-name as xs:string, $description as xs:string?, $password as xs:string, $role-names as xs:string*, $permissions as element(sec:permission)*, $collections as xs:string*, $external-names as xs:string*)"}, {"content":"sec:user-set-name(${1:\\$user-name as xs:string}, ${2:\\$new-user-name as xs:string}, ${3:\\$password as xs:string})", "trigger":"sec:user-set-name", "description":"($user-name as xs:string, $new-user-name as xs:string, $password as xs:string)"}, {"content":"sec:user-set-password(${1:\\$user-name as xs:string}, ${2:\\$password as xs:string})", "trigger":"sec:user-set-password", "description":"($user-name as xs:string, $password as xs:string)"}, {"content":"sec:user-set-description(${1:\\$user-name as xs:string}, ${2:\\$description as xs:string})", "trigger":"sec:user-set-description", "description":"($user-name as xs:string, $description as xs:string)"}, {"content":"sec:role-set-description(${1:\\$role-name as xs:string}, ${2:\\$description as xs:string})", "trigger":"sec:role-set-description", "description":"($role-name as xs:string, $description as xs:string)"}, {"content":"sec:role-get-description(${1:\\$role-name as xs:string})", "trigger":"sec:role-get-description", "description":"($role-name as xs:string)"}, {"content":"sec:get-role-ids()", "trigger":"sec:get-role-ids", "description":"()"}, {"content":"sec:get-role-ids(${1:\\$role-names as xs:string*})", "trigger":"sec:get-role-ids", "description":"($role-names as xs:string*)"}, {"content":"sec:get-role-names(${1:\\$role-ids as xs:unsignedLong*})", "trigger":"sec:get-role-names", "description":"($role-ids as xs:unsignedLong*)"}, {"content":"sec:user-set-roles(${1:\\$user-name as xs:string}, ${2:\\$role-names as xs:string*})", "trigger":"sec:user-set-roles", "description":"($user-name as xs:string, $role-names as xs:string*)"}, {"content":"sec:user-add-roles(${1:\\$user-name as xs:string}, ${2:\\$role-names as xs:string*})", "trigger":"sec:user-add-roles", "description":"($user-name as xs:string, $role-names as xs:string*)"}, {"content":"sec:user-remove-roles(${1:\\$user-name as xs:string}, ${2:\\$role-names as xs:string*})", "trigger":"sec:user-remove-roles", "description":"($user-name as xs:string, $role-names as xs:string*)"}, {"content":"sec:user-get-roles(${1:\\$user-name as xs:string})", "trigger":"sec:user-get-roles", "description":"($user-name as xs:string)"}, {"content":"sec:user-get-description(${1:\\$user-name as xs:string})", "trigger":"sec:user-get-description", "description":"($user-name as xs:string)"}, {"content":"sec:remove-user(${1:\\$user-name as xs:string})", "trigger":"sec:remove-user", "description":"($user-name as xs:string)"}, {"content":"sec:create-role(${1:\\$role-name as xs:string}, ${2:\\$description as xs:string?}, ${3:\\$role-names as xs:string*}, ${4:\\$permissions as element(sec:permission)*}, ${5:\\$collections as xs:string*})", "trigger":"sec:create-role", "description":"($role-name as xs:string, $description as xs:string?, $role-names as xs:string*, $permissions as element(sec:permission)*, $collections as xs:string*)"}, {"content":"sec:create-role(${1:\\$role-name as xs:string}, ${2:\\$description as xs:string?}, ${3:\\$role-names as xs:string*}, ${4:\\$permissions as element(sec:permission)*}, ${5:\\$collections as xs:string*}, ${6:\\$compartment as xs:string?})", "trigger":"sec:create-role", "description":"($role-name as xs:string, $description as xs:string?, $role-names as xs:string*, $permissions as element(sec:permission)*, $collections as xs:string*, $compartment as xs:string?)"}, {"content":"sec:create-role(${1:\\$role-name as xs:string}, ${2:\\$description as xs:string?}, ${3:\\$role-names as xs:string*}, ${4:\\$permissions as element(sec:permission)*}, ${5:\\$collections as xs:string*}, ${6:\\$compartment as xs:string?}, ${7:\\$external-names as xs:string*})", "trigger":"sec:create-role", "description":"($role-name as xs:string, $description as xs:string?, $role-names as xs:string*, $permissions as element(sec:permission)*, $collections as xs:string*, $compartment as xs:string?, $external-names as xs:string*)"}, {"content":"sec:role-set-name(${1:\\$role-name as xs:string}, ${2:\\$new-role-name as xs:string})", "trigger":"sec:role-set-name", "description":"($role-name as xs:string, $new-role-name as xs:string)"}, {"content":"sec:role-set-roles(${1:\\$role-name as xs:string}, ${2:\\$role-names as xs:string*})", "trigger":"sec:role-set-roles", "description":"($role-name as xs:string, $role-names as xs:string*)"}, {"content":"sec:role-add-roles(${1:\\$role-name as xs:string}, ${2:\\$new-roles as xs:string*})", "trigger":"sec:role-add-roles", "description":"($role-name as xs:string, $new-roles as xs:string*)"}, {"content":"sec:role-remove-roles(${1:\\$role-name as xs:string}, ${2:\\$role-names as xs:string*})", "trigger":"sec:role-remove-roles", "description":"($role-name as xs:string, $role-names as xs:string*)"}, {"content":"sec:remove-role(${1:\\$role-name as xs:string})", "trigger":"sec:remove-role", "description":"($role-name as xs:string)"}, {"content":"sec:remove-role-from-users(${1:\\$role-name as xs:string})", "trigger":"sec:remove-role-from-users", "description":"($role-name as xs:string)"}, {"content":"sec:remove-role-from-roles(${1:\\$role-name as xs:string})", "trigger":"sec:remove-role-from-roles", "description":"($role-name as xs:string)"}, {"content":"sec:remove-role-from-privileges(${1:\\$role-name as xs:string})", "trigger":"sec:remove-role-from-privileges", "description":"($role-name as xs:string)"}, {"content":"sec:remove-role-from-amps(${1:\\$role-name as xs:string})", "trigger":"sec:remove-role-from-amps", "description":"($role-name as xs:string)"}, {"content":"sec:create-privilege(${1:\\$privilege-name as xs:string}, ${2:\\$action as xs:string}, ${3:\\$kind as xs:string}, ${4:\\$role-names as xs:string*})", "trigger":"sec:create-privilege", "description":"($privilege-name as xs:string, $action as xs:string, $kind as xs:string, $role-names as xs:string*)"}, {"content":"sec:privilege-set-name(${1:\\$action as xs:string}, ${2:\\$kind as xs:string}, ${3:\\$new-privilege-name as xs:string})", "trigger":"sec:privilege-set-name", "description":"($action as xs:string, $kind as xs:string, $new-privilege-name as xs:string)"}, {"content":"sec:remove-privilege(${1:\\$action as xs:string}, ${2:\\$kind as xs:string})", "trigger":"sec:remove-privilege", "description":"($action as xs:string, $kind as xs:string)"}, {"content":"sec:privilege-get-roles(${1:\\$action as xs:string}, ${2:\\$kind as xs:string})", "trigger":"sec:privilege-get-roles", "description":"($action as xs:string, $kind as xs:string)"}, {"content":"sec:privilege-set-roles(${1:\\$action as xs:string}, ${2:\\$kind as xs:string}, ${3:\\$role-names as xs:string*})", "trigger":"sec:privilege-set-roles", "description":"($action as xs:string, $kind as xs:string, $role-names as xs:string*)"}, {"content":"sec:privilege-add-roles(${1:\\$action as xs:string}, ${2:\\$kind as xs:string}, ${3:\\$role-names as xs:string*})", "trigger":"sec:privilege-add-roles", "description":"($action as xs:string, $kind as xs:string, $role-names as xs:string*)"}, {"content":"sec:privilege-remove-roles(${1:\\$action as xs:string}, ${2:\\$kind as xs:string}, ${3:\\$role-names as xs:string*})", "trigger":"sec:privilege-remove-roles", "description":"($action as xs:string, $kind as xs:string, $role-names as xs:string*)"}, {"content":"sec:create-amp(${1:\\$namespace as xs:string}, ${2:\\$local-name as xs:string}, ${3:\\$document-uri as xs:string}, ${4:\\$database as xs:unsignedLong}, ${5:\\$role-names as xs:string*})", "trigger":"sec:create-amp", "description":"($namespace as xs:string, $local-name as xs:string, $document-uri as xs:string, $database as xs:unsignedLong, $role-names as xs:string*)"}, {"content":"sec:amp-set-roles(${1:\\$namespace as xs:string}, ${2:\\$local-name as xs:string}, ${3:\\$document-uri as xs:string}, ${4:\\$database as xs:unsignedLong}, ${5:\\$role-names as xs:string*})", "trigger":"sec:amp-set-roles", "description":"($namespace as xs:string, $local-name as xs:string, $document-uri as xs:string, $database as xs:unsignedLong, $role-names as xs:string*)"}, {"content":"sec:amp-add-roles(${1:\\$namespace as xs:string}, ${2:\\$local-name as xs:string}, ${3:\\$document-uri as xs:string}, ${4:\\$database as xs:unsignedLong}, ${5:\\$role-names as xs:string*})", "trigger":"sec:amp-add-roles", "description":"($namespace as xs:string, $local-name as xs:string, $document-uri as xs:string, $database as xs:unsignedLong, $role-names as xs:string*)"}, {"content":"sec:amp-get-roles(${1:\\$namespace as xs:string}, ${2:\\$local-name as xs:string}, ${3:\\$document-uri as xs:string}, ${4:\\$database as xs:unsignedLong})", "trigger":"sec:amp-get-roles", "description":"($namespace as xs:string, $local-name as xs:string, $document-uri as xs:string, $database as xs:unsignedLong)"}, {"content":"sec:role-get-roles(${1:\\$role-name as xs:string})", "trigger":"sec:role-get-roles", "description":"($role-name as xs:string)"}, {"content":"sec:amp-remove-roles(${1:\\$namespace as xs:string}, ${2:\\$local-name as xs:string}, ${3:\\$document-uri as xs:string}, ${4:\\$database as xs:unsignedLong}, ${5:\\$role-names as xs:string*})", "trigger":"sec:amp-remove-roles", "description":"($namespace as xs:string, $local-name as xs:string, $document-uri as xs:string, $database as xs:unsignedLong, $role-names as xs:string*)"}, {"content":"sec:remove-amp(${1:\\$namespace as xs:string}, ${2:\\$local-name as xs:string}, ${3:\\$document-uri as xs:string}, ${4:\\$database as xs:unsignedLong})", "trigger":"sec:remove-amp", "description":"($namespace as xs:string, $local-name as xs:string, $document-uri as xs:string, $database as xs:unsignedLong)"}, {"content":"sec:amp-doc-collections()", "trigger":"sec:amp-doc-collections", "description":"()"}, {"content":"sec:amp-doc-permissions()", "trigger":"sec:amp-doc-permissions", "description":"()"}, {"content":"sec:user-doc-collections()", "trigger":"sec:user-doc-collections", "description":"()"}, {"content":"sec:user-doc-permissions()", "trigger":"sec:user-doc-permissions", "description":"()"}, {"content":"sec:role-doc-collections()", "trigger":"sec:role-doc-collections", "description":"()"}, {"content":"sec:role-doc-permissions()", "trigger":"sec:role-doc-permissions", "description":"()"}, {"content":"sec:get-amp(${1:\\$namespace as xs:string}, ${2:\\$local-name as xs:string}, ${3:\\$document-uri as xs:string}, ${4:\\$database as xs:unsignedLong})", "trigger":"sec:get-amp", "description":"($namespace as xs:string, $local-name as xs:string, $document-uri as xs:string, $database as xs:unsignedLong)"}, {"content":"sec:get-privilege(${1:\\$action as xs:string}, ${2:\\$kind as xs:string})", "trigger":"sec:get-privilege", "description":"($action as xs:string, $kind as xs:string)"}, {"content":"sec:priv-doc-collections()", "trigger":"sec:priv-doc-collections", "description":"()"}, {"content":"sec:priv-doc-permissions()", "trigger":"sec:priv-doc-permissions", "description":"()"}, {"content":"sec:security-collection()", "trigger":"sec:security-collection", "description":"()"}, {"content":"sec:security-namespace()", "trigger":"sec:security-namespace", "description":"()"}, {"content":"sec:users-collection()", "trigger":"sec:users-collection", "description":"()"}, {"content":"sec:roles-collection()", "trigger":"sec:roles-collection", "description":"()"}, {"content":"sec:privileges-collection()", "trigger":"sec:privileges-collection", "description":"()"}, {"content":"sec:amps-collection()", "trigger":"sec:amps-collection", "description":"()"}, {"content":"sec:collections-collection()", "trigger":"sec:collections-collection", "description":"()"}, {"content":"sec:user-set-default-permissions(${1:\\$user-name as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "trigger":"sec:user-set-default-permissions", "description":"($user-name as xs:string, $permissions as element(sec:permission)*)"}, {"content":"sec:get-distinct-permissions(${1:\\$input-perms as element(sec:permission)*}, ${2:\\$output-perms as element(sec:permission)*})", "trigger":"sec:get-distinct-permissions", "description":"($input-perms as element(sec:permission)*, $output-perms as element(sec:permission)*)"}, {"content":"sec:role-set-default-permissions(${1:\\$role-name as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "trigger":"sec:role-set-default-permissions", "description":"($role-name as xs:string, $permissions as element(sec:permission)*)"}, {"content":"sec:user-get-default-permissions(${1:\\$user-name as xs:string})", "trigger":"sec:user-get-default-permissions", "description":"($user-name as xs:string)"}, {"content":"sec:role-get-default-permissions(${1:\\$role-name as xs:string})", "trigger":"sec:role-get-default-permissions", "description":"($role-name as xs:string)"}, {"content":"sec:user-get-default-collections(${1:\\$user-name as xs:string})", "trigger":"sec:user-get-default-collections", "description":"($user-name as xs:string)"}, {"content":"sec:role-get-default-collections(${1:\\$role-name as xs:string})", "trigger":"sec:role-get-default-collections", "description":"($role-name as xs:string)"}, {"content":"sec:user-set-default-collections(${1:\\$user-name as xs:string}, ${2:\\$collections as xs:string*})", "trigger":"sec:user-set-default-collections", "description":"($user-name as xs:string, $collections as xs:string*)"}, {"content":"sec:role-set-default-collections(${1:\\$role-name as xs:string}, ${2:\\$collections as xs:string*})", "trigger":"sec:role-set-default-collections", "description":"($role-name as xs:string, $collections as xs:string*)"}, {"content":"sec:get-collection(${1:\\$uri as xs:string})", "trigger":"sec:get-collection", "description":"($uri as xs:string)"}, {"content":"sec:protect-collection(${1:\\$uri as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "trigger":"sec:protect-collection", "description":"($uri as xs:string, $permissions as element(sec:permission)*)"}, {"content":"sec:unprotect-collection(${1:\\$uri as xs:string})", "trigger":"sec:unprotect-collection", "description":"($uri as xs:string)"}, {"content":"sec:collection-set-permissions(${1:\\$uri as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "trigger":"sec:collection-set-permissions", "description":"($uri as xs:string, $permissions as element(sec:permission)*)"}, {"content":"sec:collection-add-permissions(${1:\\$uri as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "trigger":"sec:collection-add-permissions", "description":"($uri as xs:string, $permissions as element(sec:permission)*)"}, {"content":"sec:collection-remove-permissions(${1:\\$uri as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "trigger":"sec:collection-remove-permissions", "description":"($uri as xs:string, $permissions as element(sec:permission)*)"}, {"content":"sec:collection-get-permissions(${1:\\$uri as xs:string})", "trigger":"sec:collection-get-permissions", "description":"($uri as xs:string)"}, {"content":"sec:user-privileges(${1:\\$user-name as xs:string})", "trigger":"sec:user-privileges", "description":"($user-name as xs:string)"}, {"content":"sec:role-privileges(${1:\\$role-name as xs:string})", "trigger":"sec:role-privileges", "description":"($role-name as xs:string)"}, {"content":"sec:security-installed()", "trigger":"sec:security-installed", "description":"()"}, {"content":"sec:uid-for-name(${1:\\$name as xs:string})", "trigger":"sec:uid-for-name", "description":"($name as xs:string)"}, {"content":"sec:get-user-names(${1:\\$user-ids as xs:unsignedLong*})", "trigger":"sec:get-user-names", "description":"($user-ids as xs:unsignedLong*)"}, {"content":"sec:set-realm(${1:\\$realm as xs:string})", "trigger":"sec:set-realm", "description":"($realm as xs:string)"}, {"content":"sec:check-admin()", "trigger":"sec:check-admin", "description":"()"}, {"content":"sec:security-version()", "trigger":"sec:security-version", "description":"()"}, {"content":"sec:get-compartments()", "trigger":"sec:get-compartments", "description":"()"}, {"content":"sec:role-get-compartment(${1:\\$role-name as xs:string})", "trigger":"sec:role-get-compartment", "description":"($role-name as xs:string)"}, {"content":"sec:compartment-get-roles(${1:\\$compartment-name as xs:string})", "trigger":"sec:compartment-get-roles", "description":"($compartment-name as xs:string)"}, {"content":"sec:validate-permissions(${1:\\$permissions as element(sec:permission)*})", "trigger":"sec:validate-permissions", "description":"($permissions as element(sec:permission)*)"}, {"content":"sec:role-exists(${1:\\$role-name as xs:string})", "trigger":"sec:role-exists", "description":"($role-name as xs:string)"}, {"content":"sec:user-exists(${1:\\$user-name as xs:string})", "trigger":"sec:user-exists", "description":"($user-name as xs:string)"}, {"content":"sec:privilege-exists(${1:\\$action as xs:string}, ${2:\\$kind as xs:string})", "trigger":"sec:privilege-exists", "description":"($action as xs:string, $kind as xs:string)"}, {"content":"sec:amp-exists(${1:\\$namespace as xs:string}, ${2:\\$local-name as xs:string}, ${3:\\$document-uri as xs:string}, ${4:\\$database as xs:unsignedLong})", "trigger":"sec:amp-exists", "description":"($namespace as xs:string, $local-name as xs:string, $document-uri as xs:string, $database as xs:unsignedLong)"}, {"content":"sec:user-get-last-password-date(${1:\\$user-name as xs:string})", "trigger":"sec:user-get-last-password-date", "description":"($user-name as xs:string)"}, {"content":"sec:user-get-password-extra(${1:\\$user-name as xs:string})", "trigger":"sec:user-get-password-extra", "description":"($user-name as xs:string)"}, {"content":"sec:user-set-password-extra(${1:\\$user-name as xs:string}, ${2:\\$extra as element(sec:password-extra)})", "trigger":"sec:user-set-password-extra", "description":"($user-name as xs:string, $extra as element(sec:password-extra))"}, {"content":"sec:credentials-set-aws(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string})", "trigger":"sec:credentials-set-aws", "description":"($access-key as xs:string, $secret-key as xs:string)"}, {"content":"sec:user-set-external-names(${1:\\$user-name as xs:string}, ${2:\\$external-name as xs:string*})", "trigger":"sec:user-set-external-names", "description":"($user-name as xs:string, $external-name as xs:string*)"}, {"content":"sec:role-set-external-names(${1:\\$role-name as xs:string}, ${2:\\$external-name as xs:string*})", "trigger":"sec:role-set-external-names", "description":"($role-name as xs:string, $external-name as xs:string*)"}, {"content":"sec:role-get-external-names(${1:\\$role-name as xs:string})", "trigger":"sec:role-get-external-names", "description":"($role-name as xs:string)"}, {"content":"sec:create-external-security(${1:\\$external-security-name as xs:string}, ${2:\\$description as xs:string}, ${3:\\$authentication as xs:string}, ${4:\\$cache-timeout as xs:unsignedInt}, ${5:\\$authorization as xs:string}, ${6:\\$ldap-server-uri as xs:string}, ${7:\\$ldap-base as xs:string}, ${8:\\$ldap-attribute as xs:string}, ${9:\\$ldap-default-user as xs:string}, ${10:\\$ldap-password as xs:string}, ${11:\\$ldap-bind-method as xs:string})", "trigger":"sec:create-external-security", "description":"($external-security-name as xs:string, $description as xs:string, $authentication as xs:string, $cache-timeout as xs:unsignedInt, $authorization as xs:string, $ldap-server-uri as xs:string, $ldap-base as xs:string, $ldap-attribute as xs:string, $ldap-default-user as xs:string, $ldap-password as xs:string, $ldap-bind-method as xs:string)"}, {"content":"sec:remove-external-security(${1:\\$external-security-name as xs:string})", "trigger":"sec:remove-external-security", "description":"($external-security-name as xs:string)"}, {"content":"sec:external-security-set-name(${1:\\$external-security-name as xs:string}, ${2:\\$new-external-security-name as xs:string})", "trigger":"sec:external-security-set-name", "description":"($external-security-name as xs:string, $new-external-security-name as xs:string)"}, {"content":"sec:external-security-set-description(${1:\\$external-security-name as xs:string}, ${2:\\$description as xs:string})", "trigger":"sec:external-security-set-description", "description":"($external-security-name as xs:string, $description as xs:string)"}, {"content":"sec:external-security-set-authentication(${1:\\$external-security-name as xs:string}, ${2:\\$authentication as xs:string})", "trigger":"sec:external-security-set-authentication", "description":"($external-security-name as xs:string, $authentication as xs:string)"}, {"content":"sec:external-security-set-cache-timeout(${1:\\$external-security-name as xs:string}, ${2:\\$cache-timeout as xs:unsignedInt})", "trigger":"sec:external-security-set-cache-timeout", "description":"($external-security-name as xs:string, $cache-timeout as xs:unsignedInt)"}, {"content":"sec:external-security-set-authorization(${1:\\$external-security-name as xs:string}, ${2:\\$authorization as xs:string})", "trigger":"sec:external-security-set-authorization", "description":"($external-security-name as xs:string, $authorization as xs:string)"}, {"content":"sec:external-security-set-ldap-server-uri(${1:\\$external-security-name as xs:string}, ${2:\\$ldap-server-uri as xs:string})", "trigger":"sec:external-security-set-ldap-server-uri", "description":"($external-security-name as xs:string, $ldap-server-uri as xs:string)"}, {"content":"sec:external-security-set-ldap-base(${1:\\$external-security-name as xs:string}, ${2:\\$ldap-base as xs:string})", "trigger":"sec:external-security-set-ldap-base", "description":"($external-security-name as xs:string, $ldap-base as xs:string)"}, {"content":"sec:external-security-set-ldap-attribute(${1:\\$external-security-name as xs:string}, ${2:\\$ldap-attribute as xs:string})", "trigger":"sec:external-security-set-ldap-attribute", "description":"($external-security-name as xs:string, $ldap-attribute as xs:string)"}, {"content":"sec:external-security-set-ldap-default-user(${1:\\$external-security-name as xs:string}, ${2:\\$ldap-default-user as xs:string})", "trigger":"sec:external-security-set-ldap-default-user", "description":"($external-security-name as xs:string, $ldap-default-user as xs:string)"}, {"content":"sec:external-security-set-ldap-password(${1:\\$external-security-name as xs:string}, ${2:\\$ldap-password as xs:string})", "trigger":"sec:external-security-set-ldap-password", "description":"($external-security-name as xs:string, $ldap-password as xs:string)"}, {"content":"sec:external-security-get-description(${1:\\$external-security-name as xs:string})", "trigger":"sec:external-security-get-description", "description":"($external-security-name as xs:string)"}, {"content":"sec:external-security-get-authentication(${1:\\$external-security-name as xs:string})", "trigger":"sec:external-security-get-authentication", "description":"($external-security-name as xs:string)"}, {"content":"sec:external-security-get-cache-timeout(${1:\\$external-security-name as xs:string})", "trigger":"sec:external-security-get-cache-timeout", "description":"($external-security-name as xs:string)"}, {"content":"sec:external-security-get-authorization(${1:\\$external-security-name as xs:string})", "trigger":"sec:external-security-get-authorization", "description":"($external-security-name as xs:string)"}, {"content":"sec:external-security-get-ldap-server-uri(${1:\\$external-security-name as xs:string})", "trigger":"sec:external-security-get-ldap-server-uri", "description":"($external-security-name as xs:string)"}, {"content":"sec:external-security-get-ldap-base(${1:\\$external-security-name as xs:string})", "trigger":"sec:external-security-get-ldap-base", "description":"($external-security-name as xs:string)"}, {"content":"sec:external-security-get-ldap-attribute(${1:\\$external-security-name as xs:string})", "trigger":"sec:external-security-get-ldap-attribute", "description":"($external-security-name as xs:string)"}, {"content":"sec:external-security-get-ldap-default-user(${1:\\$external-security-name as xs:string})", "trigger":"sec:external-security-get-ldap-default-user", "description":"($external-security-name as xs:string)"}, {"content":"sec:external-security-clear-cache(${1:\\$external-security-name as xs:string})", "trigger":"sec:external-security-clear-cache", "description":"($external-security-name as xs:string)"}, {"content":"sec:credentials-get-aws()", "trigger":"sec:credentials-get-aws", "description":"()"}, {"content":"sec:amps-change-modules-database(${1:\\$old-db as xs:unsignedLong}, ${2:\\$new-db as xs:unsignedLong})", "trigger":"sec:amps-change-modules-database", "description":"($old-db as xs:unsignedLong, $new-db as xs:unsignedLong)"}, {"content":"sec:user-get-external-names(${1:\\$user-name as xs:string})", "trigger":"sec:user-get-external-names", "description":"($user-name as xs:string)"}, {"content":"sec:external-security-set-ldap-bind-method(${1:\\$external-security-name as xs:string}, ${2:\\$ldap-bind-method as xs:string})", "trigger":"sec:external-security-set-ldap-bind-method", "description":"($external-security-name as xs:string, $ldap-bind-method as xs:string)"}, {"content":"sec:external-security-get-ldap-bind-method(${1:\\$external-security-name as xs:string})", "trigger":"sec:external-security-get-ldap-bind-method", "description":"($external-security-name as xs:string)"}, {"content":"sec:protected-paths-collection()", "trigger":"sec:protected-paths-collection", "description":"()"}, {"content":"sec:protected-path-doc-collections()", "trigger":"sec:protected-path-doc-collections", "description":"()"}, {"content":"sec:protect-path(${1:\\$path as xs:string}, ${2:\\$path-namespaces as element(sec:path-namespace)*}, ${3:\\$permissions as element(sec:permission)+})", "trigger":"sec:protect-path", "description":"($path as xs:string, $path-namespaces as element(sec:path-namespace)*, $permissions as element(sec:permission)+)"}, {"content":"sec:unprotect-path(${1:\\$path as xs:string}, ${2:\\$path-namespaces as element(sec:path-namespace)*})", "trigger":"sec:unprotect-path", "description":"($path as xs:string, $path-namespaces as element(sec:path-namespace)*)"}, {"content":"sec:path-set-permissions(${1:\\$path as xs:string}, ${2:\\$path-namespaces as element(sec:path-namespace)*}, ${3:\\$permissions as element(sec:permission)+})", "trigger":"sec:path-set-permissions", "description":"($path as xs:string, $path-namespaces as element(sec:path-namespace)*, $permissions as element(sec:permission)+)"}, {"content":"sec:path-add-permissions(${1:\\$path as xs:string}, ${2:\\$path-namespaces as element(sec:path-namespace)*}, ${3:\\$permissions as element(sec:permission)+})", "trigger":"sec:path-add-permissions", "description":"($path as xs:string, $path-namespaces as element(sec:path-namespace)*, $permissions as element(sec:permission)+)"}, {"content":"sec:path-remove-permissions(${1:\\$path as xs:string}, ${2:\\$path-namespaces as element(sec:path-namespace)*}, ${3:\\$permissions as element(sec:permission)+})", "trigger":"sec:path-remove-permissions", "description":"($path as xs:string, $path-namespaces as element(sec:path-namespace)*, $permissions as element(sec:permission)+)"}, {"content":"sec:path-get-permissions(${1:\\$path as xs:string}, ${2:\\$path-namespaces as element(sec:path-namespace)*})", "trigger":"sec:path-get-permissions", "description":"($path as xs:string, $path-namespaces as element(sec:path-namespace)*)"}, {"content":"sec:query-rolesets-collection()", "trigger":"sec:query-rolesets-collection", "description":"()"}, {"content":"sec:query-rolesets-doc-collections()", "trigger":"sec:query-rolesets-doc-collections", "description":"()"}, {"content":"sec:security-path-namespace(${1:\\$prefix as xs:string}, ${2:\\$namespace-uri as xs:string})", "trigger":"sec:security-path-namespace", "description":"($prefix as xs:string, $namespace-uri as xs:string)"}, {"content":"sec:query-roleset(${1:\\$role-names as xs:string+})", "trigger":"sec:query-roleset", "description":"($role-names as xs:string+)"}, {"content":"sec:add-query-rolesets(${1:\\$rolesets as element(sec:query-roleset)+})", "trigger":"sec:add-query-rolesets", "description":"($rolesets as element(sec:query-roleset)+)"}, {"content":"sec:remove-query-rolesets(${1:\\$rolesets as element(sec:query-roleset)+)})", "trigger":"sec:remove-query-rolesets", "description":"($rolesets as element(sec:query-roleset)+))"}, {"content":"sec:uri-credential-target(${1:\\$uri-pattern as xs:string}, ${2:\\$authentication as xs:string})", "trigger":"sec:uri-credential-target", "description":"($uri-pattern as xs:string, $authentication as xs:string)"}, {"content":"sec:create-credential(${1:\\$name as xs:string}, ${2:\\$description as xs:string}, ${3:\\$username as xs:string?}, ${4:\\$password as xs:string?}, ${5:\\$certificate as xs:string?}, ${6:\\$private-key as xs:string?}, ${7:\\$signing as xs:boolean}, ${8:\\$targets as element(sec:credential-target)*}, ${9:\\$permissions as element(sec:permission)*})", "trigger":"sec:create-credential", "description":"($name as xs:string, $description as xs:string, $username as xs:string?, $password as xs:string?, $certificate as xs:string?, $private-key as xs:string?, $signing as xs:boolean, $targets as element(sec:credential-target)*, $permissions as element(sec:permission)*)"}, {"content":"sec:get-credential(${1:\\$credential-name as xs:string})", "trigger":"sec:get-credential", "description":"($credential-name as xs:string)"}, {"content":"sec:remove-credential(${1:\\$credential-name as xs:string})", "trigger":"sec:remove-credential", "description":"($credential-name as xs:string)"}, {"content":"sec:remove-credential-by-id(${1:\\$credential-id as xs:unsignedLong})", "trigger":"sec:remove-credential-by-id", "description":"($credential-id as xs:unsignedLong)"}, {"content":"sec:get-credential-ids()", "trigger":"sec:get-credential-ids", "description":"()"}, {"content":"sec:get-credential-names()", "trigger":"sec:get-credential-names", "description":"()"}, {"content":"sec:credential-get-id(${1:\\$credential-name as xs:string})", "trigger":"sec:credential-get-id", "description":"($credential-name as xs:string)"}, {"content":"sec:credential-get-description(${1:\\$credential-name as xs:string})", "trigger":"sec:credential-get-description", "description":"($credential-name as xs:string)"}, {"content":"sec:credential-get-username(${1:\\$credential-name as xs:string})", "trigger":"sec:credential-get-username", "description":"($credential-name as xs:string)"}, {"content":"sec:credential-get-password(${1:\\$credential-name as xs:string})", "trigger":"sec:credential-get-password", "description":"($credential-name as xs:string)"}, {"content":"sec:credential-get-certificate(${1:\\$credential-name as xs:string})", "trigger":"sec:credential-get-certificate", "description":"($credential-name as xs:string)"}, {"content":"sec:credential-get-private-key(${1:\\$credential-name as xs:string})", "trigger":"sec:credential-get-private-key", "description":"($credential-name as xs:string)"}, {"content":"sec:credential-get-targets(${1:\\$credential-name as xs:string})", "trigger":"sec:credential-get-targets", "description":"($credential-name as xs:string)"}, {"content":"sec:credential-get-signing(${1:\\$credential-name as xs:string})", "trigger":"sec:credential-get-signing", "description":"($credential-name as xs:string)"}, {"content":"sec:credential-get-permissions(${1:\\$credential-name as xs:string})", "trigger":"sec:credential-get-permissions", "description":"($credential-name as xs:string)"}, {"content":"sec:credential-set-name(${1:\\$credential-name as xs:string}, ${2:\\$new-name as xs:string})", "trigger":"sec:credential-set-name", "description":"($credential-name as xs:string, $new-name as xs:string)"}, {"content":"sec:credential-set-description(${1:\\$credential-name as xs:string}, ${2:\\$description as xs:string})", "trigger":"sec:credential-set-description", "description":"($credential-name as xs:string, $description as xs:string)"}, {"content":"sec:credential-set-username(${1:\\$credential-name as xs:string}, ${2:\\$username as xs:string?})", "trigger":"sec:credential-set-username", "description":"($credential-name as xs:string, $username as xs:string?)"}, {"content":"sec:credential-set-password(${1:\\$credential-name as xs:string}, ${2:\\$password as xs:string?})", "trigger":"sec:credential-set-password", "description":"($credential-name as xs:string, $password as xs:string?)"}, {"content":"sec:credential-set-certificate(${1:\\$credential-name as xs:string}, ${2:\\$certificate as xs:string?}, ${3:\\$private-key as xs:string?})", "trigger":"sec:credential-set-certificate", "description":"($credential-name as xs:string, $certificate as xs:string?, $private-key as xs:string?)"}, {"content":"sec:credential-set-targets(${1:\\$credential-name as xs:string}, ${2:\\$targets as element(sec:credential-target)*})", "trigger":"sec:credential-set-targets", "description":"($credential-name as xs:string, $targets as element(sec:credential-target)*)"}, {"content":"sec:credential-set-signing(${1:\\$credential-name as xs:string}, ${2:\\$signing as xs:boolean})", "trigger":"sec:credential-set-signing", "description":"($credential-name as xs:string, $signing as xs:boolean)"}, {"content":"sec:credential-set-permissions(${1:\\$credential-name as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "trigger":"sec:credential-set-permissions", "description":"($credential-name as xs:string, $permissions as element(sec:permission)*)"}, {"content":"sem:()", "trigger":"sem:", "description":"()"}, {"content":"sem:rdf-parse(${1:\\$in as item()})", "trigger":"sem:rdf-parse", "description":"($in as item())"}, {"content":"sem:rdf-parse(${1:\\$in as item()}, ${2:\\$options as xs:string*})", "trigger":"sem:rdf-parse", "description":"($in as item(), $options as xs:string*)"}, {"content":"sem:rdf-serialize(${1:\\$triples as sem:triple*})", "trigger":"sem:rdf-serialize", "description":"($triples as sem:triple*)"}, {"content":"sem:rdf-serialize(${1:\\$triples as sem:triple*}, ${2:\\$options as xs:string*})", "trigger":"sem:rdf-serialize", "description":"($triples as sem:triple*, $options as xs:string*)"}, {"content":"sem:rdf-get(${1:\\$location as xs:string})", "trigger":"sem:rdf-get", "description":"($location as xs:string)"}, {"content":"sem:rdf-get(${1:\\$location as xs:string}, ${2:\\$options as xs:string*})", "trigger":"sem:rdf-get", "description":"($location as xs:string, $options as xs:string*)"}, {"content":"sem:rdf-get(${1:\\$location as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$http-opts as element()?})", "trigger":"sem:rdf-get", "description":"($location as xs:string, $options as xs:string*, $http-opts as element()?)"}, {"content":"sem:rdf-insert(${1:\\$triples as sem:triple*})", "trigger":"sem:rdf-insert", "description":"($triples as sem:triple*)"}, {"content":"sem:rdf-insert(${1:\\$triples as sem:triple*}, ${2:\\$options as xs:string*})", "trigger":"sem:rdf-insert", "description":"($triples as sem:triple*, $options as xs:string*)"}, {"content":"sem:rdf-insert(${1:\\$triples as sem:triple*}, ${2:\\$options as xs:string*}, ${3:\\$permissions as element(sec:permission)*})", "trigger":"sem:rdf-insert", "description":"($triples as sem:triple*, $options as xs:string*, $permissions as element(sec:permission)*)"}, {"content":"sem:rdf-insert(${1:\\$triples as sem:triple*}, ${2:\\$options as xs:string*}, ${3:\\$permissions as element(sec:permission)*}, ${4:\\$collections as xs:string*})", "trigger":"sem:rdf-insert", "description":"($triples as sem:triple*, $options as xs:string*, $permissions as element(sec:permission)*, $collections as xs:string*)"}, {"content":"sem:rdf-insert(${1:\\$triples as sem:triple*}, ${2:\\$options as xs:string*}, ${3:\\$permissions as element(sec:permission)*}, ${4:\\$collections as xs:string*}, ${5:\\$quality as xs:int?})", "trigger":"sem:rdf-insert", "description":"($triples as sem:triple*, $options as xs:string*, $permissions as element(sec:permission)*, $collections as xs:string*, $quality as xs:int?)"}, {"content":"sem:rdf-insert(${1:\\$triples as sem:triple*}, ${2:\\$options as xs:string*}, ${3:\\$permissions as element(sec:permission)*}, ${4:\\$collections as xs:string*}, ${5:\\$quality as xs:int?}, ${6:\\$forest-ids as xs:unsignedLong*})", "trigger":"sem:rdf-insert", "description":"($triples as sem:triple*, $options as xs:string*, $permissions as element(sec:permission)*, $collections as xs:string*, $quality as xs:int?, $forest-ids as xs:unsignedLong*)"}, {"content":"sem:rdf-load(${1:\\$location as xs:string})", "trigger":"sem:rdf-load", "description":"($location as xs:string)"}, {"content":"sem:rdf-load(${1:\\$location as xs:string}, ${2:\\$options as xs:string*})", "trigger":"sem:rdf-load", "description":"($location as xs:string, $options as xs:string*)"}, {"content":"sem:rdf-load(${1:\\$location as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$http-opts as element()?})", "trigger":"sem:rdf-load", "description":"($location as xs:string, $options as xs:string*, $http-opts as element()?)"}, {"content":"sem:rdf-load(${1:\\$location as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$http-opts as element()?}, ${4:\\$permissions as item()*})", "trigger":"sem:rdf-load", "description":"($location as xs:string, $options as xs:string*, $http-opts as element()?, $permissions as item()*)"}, {"content":"sem:rdf-load(${1:\\$location as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$http-opts as element()?}, ${4:\\$permissions as item()*}, ${5:\\$collections as xs:string*})", "trigger":"sem:rdf-load", "description":"($location as xs:string, $options as xs:string*, $http-opts as element()?, $permissions as item()*, $collections as xs:string*)"}, {"content":"sem:rdf-load(${1:\\$location as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$http-opts as element()?}, ${4:\\$permissions as item()*}, ${5:\\$collections as xs:string*}, ${6:\\$quality as xs:int?})", "trigger":"sem:rdf-load", "description":"($location as xs:string, $options as xs:string*, $http-opts as element()?, $permissions as item()*, $collections as xs:string*, $quality as xs:int?)"}, {"content":"sem:rdf-load(${1:\\$location as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$http-opts as element()?}, ${4:\\$permissions as item()*}, ${5:\\$collections as xs:string*}, ${6:\\$quality as xs:int?}, ${7:\\$forest-ids as xs:unsignedLong*})", "trigger":"sem:rdf-load", "description":"($location as xs:string, $options as xs:string*, $http-opts as element()?, $permissions as item()*, $collections as xs:string*, $quality as xs:int?, $forest-ids as xs:unsignedLong*)"}, {"content":"sem:database-nodes(${1:\\$triples as sem:triple*})", "trigger":"sem:database-nodes", "description":"($triples as sem:triple*)"}, {"content":"sem:database-nodes(${1:\\$triples as sem:triple*}, ${2:\\$options as xs:string*})", "trigger":"sem:database-nodes", "description":"($triples as sem:triple*, $options as xs:string*)"}, {"content":"sem:database-nodes(${1:\\$triples as sem:triple*}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "trigger":"sem:database-nodes", "description":"($triples as sem:triple*, $options as xs:string*, $query as cts:query?)"}, {"content":"sem:graph(${1:\\$graphname as sem:iri})", "trigger":"sem:graph", "description":"($graphname as sem:iri)"}, {"content":"sem:graph-insert(${1:\\$graphname as sem:iri}, ${2:\\$triples as sem:triple*})", "trigger":"sem:graph-insert", "description":"($graphname as sem:iri, $triples as sem:triple*)"}, {"content":"sem:graph-insert(${1:\\$graphname as sem:iri}, ${2:\\$triples as sem:triple*}, ${3:\\$permissions as item()*})", "trigger":"sem:graph-insert", "description":"($graphname as sem:iri, $triples as sem:triple*, $permissions as item()*)"}, {"content":"sem:graph-insert(${1:\\$graphname as sem:iri}, ${2:\\$triples as sem:triple*}, ${3:\\$permissions as item()*}, ${4:\\$collections as xs:string*})", "trigger":"sem:graph-insert", "description":"($graphname as sem:iri, $triples as sem:triple*, $permissions as item()*, $collections as xs:string*)"}, {"content":"sem:graph-insert(${1:\\$graphname as sem:iri}, ${2:\\$triples as sem:triple*}, ${3:\\$permissions as item()*}, ${4:\\$collections as xs:string*}, ${5:\\$quality as xs:int?})", "trigger":"sem:graph-insert", "description":"($graphname as sem:iri, $triples as sem:triple*, $permissions as item()*, $collections as xs:string*, $quality as xs:int?)"}, {"content":"sem:graph-insert(${1:\\$graphname as sem:iri}, ${2:\\$triples as sem:triple*}, ${3:\\$permissions as item()*}, ${4:\\$collections as xs:string*}, ${5:\\$quality as xs:int?}, ${6:\\$forest-ids as xs:unsignedLong*})", "trigger":"sem:graph-insert", "description":"($graphname as sem:iri, $triples as sem:triple*, $permissions as item()*, $collections as xs:string*, $quality as xs:int?, $forest-ids as xs:unsignedLong*)"}, {"content":"sem:graph-delete(${1:\\$graphname as sem:iri})", "trigger":"sem:graph-delete", "description":"($graphname as sem:iri)"}, {"content":"sem:query-results-serialize(${1:\\$results as item()*})", "trigger":"sem:query-results-serialize", "description":"($results as item()*)"}, {"content":"sem:query-results-serialize(${1:\\$results as item()*}, ${2:\\$options as xs:string*})", "trigger":"sem:query-results-serialize", "description":"($results as item()*, $options as xs:string*)"}, {"content":"sem:curie-expand(${1:\\$curie as xs:string})", "trigger":"sem:curie-expand", "description":"($curie as xs:string)"}, {"content":"sem:curie-expand(${1:\\$curie as xs:string}, ${2:\\$mapping as map:map})", "trigger":"sem:curie-expand", "description":"($curie as xs:string, $mapping as map:map)"}, {"content":"sem:curie-shorten(${1:\\$iri as sem:iri})", "trigger":"sem:curie-shorten", "description":"($iri as sem:iri)"}, {"content":"sem:curie-shorten(${1:\\$iri as sem:iri}, ${2:\\$mapping as map:map})", "trigger":"sem:curie-shorten", "description":"($iri as sem:iri, $mapping as map:map)"}, {"content":"sem:prefixes(${1:\\$prefixdef as xs:string?})", "trigger":"sem:prefixes", "description":"($prefixdef as xs:string?)"}, {"content":"sem:prefixes(${1:\\$prefixdef as xs:string?}, ${2:\\$include-common as xs:boolean?})", "trigger":"sem:prefixes", "description":"($prefixdef as xs:string?, $include-common as xs:boolean?)"}, {"content":"sem:rdf-builder()", "trigger":"sem:rdf-builder", "description":"()"}, {"content":"sem:rdf-builder(${1:\\$prefixes as map:map?})", "trigger":"sem:rdf-builder", "description":"($prefixes as map:map?)"}, {"content":"sem:rdf-builder(${1:\\$prefixes as map:map?}, ${2:\\$graph as sem:iri?})", "trigger":"sem:rdf-builder", "description":"($prefixes as map:map?, $graph as sem:iri?)"}, {"content":"sem:describe(${1:\\$iris as sem:iri*})", "trigger":"sem:describe", "description":"($iris as sem:iri*)"}, {"content":"sem:transitive-closure(${1:\\$seeds as sem:iri*}, ${2:\\$predicates as sem:iri*}, ${3:\\$limit as xs:integer})", "trigger":"sem:transitive-closure", "description":"($seeds as sem:iri*, $predicates as sem:iri*, $limit as xs:integer)"}, {"content":"sem:sparql-values(${1:\\$sparql as xs:string}, ${2:\\$values as map:map*})", "trigger":"sem:sparql-values", "description":"($sparql as xs:string, $values as map:map*)"}, {"content":"sem:sparql-values(${1:\\$sparql as xs:string}, ${2:\\$values as map:map*}, ${3:\\$options as xs:string*})", "trigger":"sem:sparql-values", "description":"($sparql as xs:string, $values as map:map*, $options as xs:string*)"}, {"content":"sem:sparql-values(${1:\\$sparql as xs:string}, ${2:\\$values as map:map*}, ${3:\\$options as xs:string*}, ${4:\\$store as item()*})", "trigger":"sem:sparql-values", "description":"($sparql as xs:string, $values as map:map*, $options as xs:string*, $store as item()*)"}, {"content":"sem:iri(${1:\\$string-iri as xs:string})", "trigger":"sem:iri", "description":"($string-iri as xs:string)"}, {"content":"fn:boolean(${1:\\$arg as item()*})", "trigger":"fn:boolean", "description":"($arg as item()*)"}, {"content":"fn:boolean(${1:\\$arg as item()*}, ${2:\\$collation as xs:string})", "trigger":"fn:boolean", "description":"($arg as item()*, $collation as xs:string)"}, {"content":"fn:index-of(${1:\\$seqParam as xs:anyAtomicType*}, ${2:\\$srchParam as xs:anyAtomicType})", "trigger":"fn:index-of", "description":"($seqParam as xs:anyAtomicType*, $srchParam as xs:anyAtomicType)"}, {"content":"fn:index-of(${1:\\$seqParam as xs:anyAtomicType*}, ${2:\\$srchParam as xs:anyAtomicType}, ${3:\\$collationLiteral as xs:string})", "trigger":"fn:index-of", "description":"($seqParam as xs:anyAtomicType*, $srchParam as xs:anyAtomicType, $collationLiteral as xs:string)"}, {"content":"fn:empty(${1:\\$arg as item()*})", "trigger":"fn:empty", "description":"($arg as item()*)"}, {"content":"fn:exists(${1:\\$arg as item()*})", "trigger":"fn:exists", "description":"($arg as item()*)"}, {"content":"fn:distinct-nodes(${1:\\$nodes as node()*})", "trigger":"fn:distinct-nodes", "description":"($nodes as node()*)"}, {"content":"fn:distinct-values(${1:\\$arg as item()*})", "trigger":"fn:distinct-values", "description":"($arg as item()*)"}, {"content":"fn:distinct-values(${1:\\$arg as item()*}, ${2:\\$collation as xs:string})", "trigger":"fn:distinct-values", "description":"($arg as item()*, $collation as xs:string)"}, {"content":"fn:insert-before(${1:\\$target as item()*}, ${2:\\$position as xs:integer}, ${3:\\$inserts as item()*})", "trigger":"fn:insert-before", "description":"($target as item()*, $position as xs:integer, $inserts as item()*)"}, {"content":"fn:remove(${1:\\$target as item()*}, ${2:\\$position as xs:integer})", "trigger":"fn:remove", "description":"($target as item()*, $position as xs:integer)"}, {"content":"fn:reverse(${1:\\$target as item()*})", "trigger":"fn:reverse", "description":"($target as item()*)"}, {"content":"fn:subsequence(${1:\\$sourceSeq as item()*}, ${2:\\$startingLoc as xs:double})", "trigger":"fn:subsequence", "description":"($sourceSeq as item()*, $startingLoc as xs:double)"}, {"content":"fn:subsequence(${1:\\$sourceSeq as item()*}, ${2:\\$startingLoc as xs:double}, ${3:\\$length as xs:double})", "trigger":"fn:subsequence", "description":"($sourceSeq as item()*, $startingLoc as xs:double, $length as xs:double)"}, {"content":"fn:unordered(${1:\\$sourceSeq as item()*})", "trigger":"fn:unordered", "description":"($sourceSeq as item()*)"}, {"content":"fn:zero-or-one(${1:\\$arg as item()*})", "trigger":"fn:zero-or-one", "description":"($arg as item()*)"}, {"content":"fn:one-or-more(${1:\\$arg as item()*})", "trigger":"fn:one-or-more", "description":"($arg as item()*)"}, {"content":"fn:exactly-one(${1:\\$arg as item()*})", "trigger":"fn:exactly-one", "description":"($arg as item()*)"}, {"content":"fn:deep-equal(${1:\\$parameter1 as item()*}, ${2:\\$parameter2 as item()*})", "trigger":"fn:deep-equal", "description":"($parameter1 as item()*, $parameter2 as item()*)"}, {"content":"fn:deep-equal(${1:\\$parameter1 as item()*}, ${2:\\$parameter2 as item()*}, ${3:\\$collation as xs:string})", "trigger":"fn:deep-equal", "description":"($parameter1 as item()*, $parameter2 as item()*, $collation as xs:string)"}, {"content":"fn:count(${1:\\$arg as item()*})", "trigger":"fn:count", "description":"($arg as item()*)"}, {"content":"fn:count(${1:\\$arg as item()*}, ${2:\\$maximum as xs:double?})", "trigger":"fn:count", "description":"($arg as item()*, $maximum as xs:double?)"}, {"content":"fn:avg(${1:\\$arg as xs:anyAtomicType*})", "trigger":"fn:avg", "description":"($arg as xs:anyAtomicType*)"}, {"content":"fn:max(${1:\\$arg as xs:anyAtomicType*})", "trigger":"fn:max", "description":"($arg as xs:anyAtomicType*)"}, {"content":"fn:max(${1:\\$arg as xs:anyAtomicType*}, ${2:\\$collation as xs:string})", "trigger":"fn:max", "description":"($arg as xs:anyAtomicType*, $collation as xs:string)"}, {"content":"fn:min(${1:\\$arg as xs:anyAtomicType*})", "trigger":"fn:min", "description":"($arg as xs:anyAtomicType*)"}, {"content":"fn:min(${1:\\$arg as xs:anyAtomicType*}, ${2:\\$collation as xs:string})", "trigger":"fn:min", "description":"($arg as xs:anyAtomicType*, $collation as xs:string)"}, {"content":"fn:sum(${1:\\$arg as xs:anyAtomicType*})", "trigger":"fn:sum", "description":"($arg as xs:anyAtomicType*)"}, {"content":"fn:sum(${1:\\$arg as xs:anyAtomicType*}, ${2:\\$zero as xs:anyAtomicType?})", "trigger":"fn:sum", "description":"($arg as xs:anyAtomicType*, $zero as xs:anyAtomicType?)"}, {"content":"fn:id(${1:\\$arg as xs:string*})", "trigger":"fn:id", "description":"($arg as xs:string*)"}, {"content":"fn:id(${1:\\$arg as xs:string*}, ${2:\\$node as node()})", "trigger":"fn:id", "description":"($arg as xs:string*, $node as node())"}, {"content":"fn:idref(${1:\\$arg as xs:string*})", "trigger":"fn:idref", "description":"($arg as xs:string*)"}, {"content":"fn:idref(${1:\\$arg as xs:string*}, ${2:\\$node as node()})", "trigger":"fn:idref", "description":"($arg as xs:string*, $node as node())"}, {"content":"fn:doc()", "trigger":"fn:doc", "description":"()"}, {"content":"fn:doc(${1:\\$uri as xs:string*})", "trigger":"fn:doc", "description":"($uri as xs:string*)"}, {"content":"fn:doc-available(${1:\\$uri as xs:string?})", "trigger":"fn:doc-available", "description":"($uri as xs:string?)"}, {"content":"fn:collection()", "trigger":"fn:collection", "description":"()"}, {"content":"fn:collection(${1:\\$uri as xs:string*})", "trigger":"fn:collection", "description":"($uri as xs:string*)"}, {"content":"fn:document(${1:\\$uris as item()*})", "trigger":"fn:document", "description":"($uris as item()*)"}, {"content":"fn:document(${1:\\$uris as item()*}, ${2:\\$base-node as node()})", "trigger":"fn:document", "description":"($uris as item()*, $base-node as node())"}, {"content":"fn:unparsed-text(${1:\\$href as xs:string})", "trigger":"fn:unparsed-text", "description":"($href as xs:string)"}, {"content":"fn:unparsed-text(${1:\\$href as xs:string}, ${2:\\$encoding as xs:string})", "trigger":"fn:unparsed-text", "description":"($href as xs:string, $encoding as xs:string)"}, {"content":"fn:unparsed-text-available(${1:\\$href as xs:string})", "trigger":"fn:unparsed-text-available", "description":"($href as xs:string)"}, {"content":"fn:unparsed-text-available(${1:\\$href as xs:string}, ${2:\\$encoding as xs:string})", "trigger":"fn:unparsed-text-available", "description":"($href as xs:string, $encoding as xs:string)"}, {"content":"xdmp:set-response-output-method(${1:\\$method as xs:string})", "trigger":"xdmp:set-response-output-method", "description":"($method as xs:string)"}, {"content":"xdmp:email(${1:\\$message as element()})", "trigger":"xdmp:email", "description":"($message as element())"}, {"content":"sem:datatype(${1:\\$value as xs:anyAtomicType})", "trigger":"sem:datatype", "description":"($value as xs:anyAtomicType)"}, {"content":"sem:bnode()", "trigger":"sem:bnode", "description":"()"}, {"content":"sem:bnode(${1:\\$value as xs:anyAtomicType})", "trigger":"sem:bnode", "description":"($value as xs:anyAtomicType)"}, {"content":"xdmp:type(${1:\\$value as xs:anyAtomicType})", "trigger":"xdmp:type", "description":"($value as xs:anyAtomicType)"}, {"content":"sem:isIRI(${1:\\$value as xs:anyAtomicType})", "trigger":"sem:isIRI", "description":"($value as xs:anyAtomicType)"}, {"content":"sem:isBlank(${1:\\$value as xs:anyAtomicType})", "trigger":"sem:isBlank", "description":"($value as xs:anyAtomicType)"}, {"content":"sem:isLiteral(${1:\\$value as xs:anyAtomicType})", "trigger":"sem:isLiteral", "description":"($value as xs:anyAtomicType)"}, {"content":"sem:isNumeric(${1:\\$value as xs:anyAtomicType})", "trigger":"sem:isNumeric", "description":"($value as xs:anyAtomicType)"}, {"content":"sem:sameTerm(${1:\\$a as xs:anyAtomicType}, ${2:\\$b as xs:anyAtomicType})", "trigger":"sem:sameTerm", "description":"($a as xs:anyAtomicType, $b as xs:anyAtomicType)"}, {"content":"sem:lang(${1:\\$value as xs:anyAtomicType})", "trigger":"sem:lang", "description":"($value as xs:anyAtomicType)"}, {"content":"sem:langMatches(${1:\\$lang-tag as xs:string}, ${2:\\$lang-range as xs:string})", "trigger":"sem:langMatches", "description":"($lang-tag as xs:string, $lang-range as xs:string)"}, {"content":"sem:random()", "trigger":"sem:random", "description":"()"}, {"content":"sem:default-graph-iri()", "trigger":"sem:default-graph-iri", "description":"()"}, {"content":"sem:graph-add-permissions(${1:\\$graph as sem:iri}, ${2:\\$permissions as element(sec:permission)*})", "trigger":"sem:graph-add-permissions", "description":"($graph as sem:iri, $permissions as element(sec:permission)*)"}, {"content":"sem:graph-set-permissions(${1:\\$graph as sem:iri}, ${2:\\$permissions as element(sec:permission)*})", "trigger":"sem:graph-set-permissions", "description":"($graph as sem:iri, $permissions as element(sec:permission)*)"}, {"content":"sem:graph-remove-permissions(${1:\\$graph as sem:iri}, ${2:\\$permissions as element(sec:permission)*})", "trigger":"sem:graph-remove-permissions", "description":"($graph as sem:iri, $permissions as element(sec:permission)*)"}, {"content":"sem:graph-get-permissions(${1:\\$graph as sem:iri})", "trigger":"sem:graph-get-permissions", "description":"($graph as sem:iri)"}, {"content":"sem:graph-get-permissions(${1:\\$graph as sem:iri}, ${2:\\$format as xs:string})", "trigger":"sem:graph-get-permissions", "description":"($graph as sem:iri, $format as xs:string)"}, {"content":"sem:if(${1:\\$condition as xs:boolean}, ${2:\\$then as item()*}, ${3:\\$else as item()*})", "trigger":"sem:if", "description":"($condition as xs:boolean, $then as item()*, $else as item()*)"}, {"content":"sem:coalesce(${1:\\$parameter1 as item()*})", "trigger":"sem:coalesce", "description":"($parameter1 as item()*)"}, {"content":"sem:coalesce(${1:\\$parameter1 as item()*}, ${2:\\$parameterN as item()*,...})", "trigger":"sem:coalesce", "description":"($parameter1 as item()*, $parameterN as item()*,...)"}, {"content":"sem:timezone-string(${1:\\$value as xs:dateTime})", "trigger":"sem:timezone-string", "description":"($value as xs:dateTime)"}, {"content":"sem:uuid-string()", "trigger":"sem:uuid-string", "description":"()"}, {"content":"sem:uuid()", "trigger":"sem:uuid", "description":"()"}, {"content":"sem:triple(${1:\\$subject_or_node as item()})", "trigger":"sem:triple", "description":"($subject_or_node as item())"}, {"content":"sem:triple(${1:\\$subject_or_node as item()}, ${2:\\$predicate as xs:anyAtomicType})", "trigger":"sem:triple", "description":"($subject_or_node as item(), $predicate as xs:anyAtomicType)"}, {"content":"sem:triple(${1:\\$subject_or_node as item()}, ${2:\\$predicate as xs:anyAtomicType}, ${3:\\$object as xs:anyAtomicType})", "trigger":"sem:triple", "description":"($subject_or_node as item(), $predicate as xs:anyAtomicType, $object as xs:anyAtomicType)"}, {"content":"sem:triple(${1:\\$subject_or_node as item()}, ${2:\\$predicate as xs:anyAtomicType}, ${3:\\$object as xs:anyAtomicType}, ${4:\\$graph as sem:iri?})", "trigger":"sem:triple", "description":"($subject_or_node as item(), $predicate as xs:anyAtomicType, $object as xs:anyAtomicType, $graph as sem:iri?)"}, {"content":"sem:triple-subject(${1:\\$triple as sem:triple})", "trigger":"sem:triple-subject", "description":"($triple as sem:triple)"}, {"content":"sem:triple-predicate(${1:\\$triple as sem:triple})", "trigger":"sem:triple-predicate", "description":"($triple as sem:triple)"}, {"content":"sem:triple-object(${1:\\$triple as sem:triple})", "trigger":"sem:triple-object", "description":"($triple as sem:triple)"}, {"content":"sem:triple-graph(${1:\\$triple as sem:triple})", "trigger":"sem:triple-graph", "description":"($triple as sem:triple)"}, {"content":"sem:unknown(${1:\\$string as xs:string}, ${2:\\$datatype as sem:iri})", "trigger":"sem:unknown", "description":"($string as xs:string, $datatype as sem:iri)"}, {"content":"sem:unknown-datatype(${1:\\$val as sem:unknown})", "trigger":"sem:unknown-datatype", "description":"($val as sem:unknown)"}, {"content":"sem:invalid(${1:\\$string as xs:string}, ${2:\\$datatype as sem:iri})", "trigger":"sem:invalid", "description":"($string as xs:string, $datatype as sem:iri)"}, {"content":"sem:invalid-datatype(${1:\\$val as sem:invalid})", "trigger":"sem:invalid-datatype", "description":"($val as sem:invalid)"}, {"content":"rdf:langString(${1:\\$string as xs:string}, ${2:\\$lang as xs:string})", "trigger":"rdf:langString", "description":"($string as xs:string, $lang as xs:string)"}, {"content":"rdf:langString-language(${1:\\$val as rdf:langString})", "trigger":"rdf:langString-language", "description":"($val as rdf:langString)"}, {"content":"sem:typed-literal(${1:\\$value as xs:string}, ${2:\\$datatype as sem:iri})", "trigger":"sem:typed-literal", "description":"($value as xs:string, $datatype as sem:iri)"}, {"content":"sem:sparql(${1:\\$sparql as xs:string})", "trigger":"sem:sparql", "description":"($sparql as xs:string)"}, {"content":"sem:sparql(${1:\\$sparql as xs:string}, ${2:\\$bindings as map:map?})", "trigger":"sem:sparql", "description":"($sparql as xs:string, $bindings as map:map?)"}, {"content":"sem:sparql(${1:\\$sparql as xs:string}, ${2:\\$bindings as map:map?}, ${3:\\$options as xs:string*})", "trigger":"sem:sparql", "description":"($sparql as xs:string, $bindings as map:map?, $options as xs:string*)"}, {"content":"sem:sparql(${1:\\$sparql as xs:string}, ${2:\\$bindings as map:map?}, ${3:\\$options as xs:string*}, ${4:\\$store as sem:store*})", "trigger":"sem:sparql", "description":"($sparql as xs:string, $bindings as map:map?, $options as xs:string*, $store as sem:store*)"}, {"content":"sem:sparql-update(${1:\\$sparql as xs:string})", "trigger":"sem:sparql-update", "description":"($sparql as xs:string)"}, {"content":"sem:sparql-update(${1:\\$sparql as xs:string}, ${2:\\$bindings as map:map?})", "trigger":"sem:sparql-update", "description":"($sparql as xs:string, $bindings as map:map?)"}, {"content":"sem:sparql-update(${1:\\$sparql as xs:string}, ${2:\\$bindings as map:map?}, ${3:\\$options as xs:string*})", "trigger":"sem:sparql-update", "description":"($sparql as xs:string, $bindings as map:map?, $options as xs:string*)"}, {"content":"sem:sparql-update(${1:\\$sparql as xs:string}, ${2:\\$bindings as map:map?}, ${3:\\$options as xs:string*}, ${4:\\$store as sem:store*})", "trigger":"sem:sparql-update", "description":"($sparql as xs:string, $bindings as map:map?, $options as xs:string*, $store as sem:store*)"}, {"content":"sem:sparql-update(${1:\\$sparql as xs:string}, ${2:\\$bindings as map:map?}, ${3:\\$options as xs:string*}, ${4:\\$store as sem:store*}, ${5:\\$default-permissions as element(sec:permission)*})", "trigger":"sem:sparql-update", "description":"($sparql as xs:string, $bindings as map:map?, $options as xs:string*, $store as sem:store*, $default-permissions as element(sec:permission)*)"}, {"content":"sem:in-memory-store(${1:\\$dataset as sem:triple*})", "trigger":"sem:in-memory-store", "description":"($dataset as sem:triple*)"}, {"content":"sem:store()", "trigger":"sem:store", "description":"()"}, {"content":"sem:store(${1:\\$options as xs:string*})", "trigger":"sem:store", "description":"($options as xs:string*)"}, {"content":"sem:store(${1:\\$options as xs:string*}, ${2:\\$query as cts:query?})", "trigger":"sem:store", "description":"($options as xs:string*, $query as cts:query?)"}, {"content":"spell:load(${1:\\$path as xs:string}, ${2:\\$uri as xs:string})", "trigger":"spell:load", "description":"($path as xs:string, $uri as xs:string)"}, {"content":"spell:insert(${1:\\$uri as xs:string}, ${2:\\$dict as item()})", "trigger":"spell:insert", "description":"($uri as xs:string, $dict as item())"}, {"content":"spell:add-word(${1:\\$uri as xs:string}, ${2:\\$word as xs:string})", "trigger":"spell:add-word", "description":"($uri as xs:string, $word as xs:string)"}, {"content":"spell:remove-word(${1:\\$uri as xs:string}, ${2:\\$word as xs:string})", "trigger":"spell:remove-word", "description":"($uri as xs:string, $word as xs:string)"}, {"content":"spell:make-dictionary(${1:\\$words as xs:string*})", "trigger":"spell:make-dictionary", "description":"($words as xs:string*)"}, {"content":"spell:make-dictionary(${1:\\$words as xs:string*}, ${2:\\$output-kind as xs:string})", "trigger":"spell:make-dictionary", "description":"($words as xs:string*, $output-kind as xs:string)"}, {"content":"spell:is-correct(${1:\\$uri as xs:string*}, ${2:\\$word as xs:string})", "trigger":"spell:is-correct", "description":"($uri as xs:string*, $word as xs:string)"}, {"content":"spell:suggest(${1:\\$uri as xs:string*}, ${2:\\$word as xs:string})", "trigger":"spell:suggest", "description":"($uri as xs:string*, $word as xs:string)"}, {"content":"spell:suggest(${1:\\$uri as xs:string*}, ${2:\\$word as xs:string}, ${3:\\$options as (element()|map:map)?})", "trigger":"spell:suggest", "description":"($uri as xs:string*, $word as xs:string, $options as (element()|map:map)?)"}, {"content":"spell:levenshtein-distance(${1:\\$str1 as xs:string}, ${2:\\$str2 as xs:string})", "trigger":"spell:levenshtein-distance", "description":"($str1 as xs:string, $str2 as xs:string)"}, {"content":"spell:double-metaphone(${1:\\$word as xs:string})", "trigger":"spell:double-metaphone", "description":"($word as xs:string)"}, {"content":"spell:suggest-detailed(${1:\\$dictionary_uris as xs:string*}, ${2:\\$word as xs:string})", "trigger":"spell:suggest-detailed", "description":"($dictionary_uris as xs:string*, $word as xs:string)"}, {"content":"spell:suggest-detailed(${1:\\$dictionary_uris as xs:string*}, ${2:\\$word as xs:string}, ${3:\\$options as (element()|map:map)?})", "trigger":"spell:suggest-detailed", "description":"($dictionary_uris as xs:string*, $word as xs:string, $options as (element()|map:map)?)"}, {"content":"spell:romanize(${1:\\$string as xs:string})", "trigger":"spell:romanize", "description":"($string as xs:string)"}, {"content":"xdmp:sql(${1:\\$sql2 as xs:string})", "trigger":"xdmp:sql", "description":"($sql2 as xs:string)"}, {"content":"xdmp:sql(${1:\\$sql2 as xs:string}, ${2:\\$options as xs:string*})", "trigger":"xdmp:sql", "description":"($sql2 as xs:string, $options as xs:string*)"}, {"content":"xdmp:sql(${1:\\$sql2 as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$bindings as map:map?})", "trigger":"xdmp:sql", "description":"($sql2 as xs:string, $options as xs:string*, $bindings as map:map?)"}, {"content":"xdmp:sql(${1:\\$sql2 as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$bindings as map:map?}, ${4:\\$query as cts:query?})", "trigger":"xdmp:sql", "description":"($sql2 as xs:string, $options as xs:string*, $bindings as map:map?, $query as cts:query?)"}, {"content":"xdmp:x509-certificate-extract(${1:\\$cert as xs:string})", "trigger":"xdmp:x509-certificate-extract", "description":"($cert as xs:string)"}, {"content":"xdmp:md5(${1:\\$data as item()})", "trigger":"xdmp:md5", "description":"($data as item())"}, {"content":"xdmp:md5(${1:\\$data as item()}, ${2:\\$encoding as xs:string})", "trigger":"xdmp:md5", "description":"($data as item(), $encoding as xs:string)"}, {"content":"xdmp:hmac-md5(${1:\\$secretkey as item()}, ${2:\\$message as item()})", "trigger":"xdmp:hmac-md5", "description":"($secretkey as item(), $message as item())"}, {"content":"xdmp:hmac-md5(${1:\\$secretkey as item()}, ${2:\\$message as item()}, ${3:\\$encoding as xs:string})", "trigger":"xdmp:hmac-md5", "description":"($secretkey as item(), $message as item(), $encoding as xs:string)"}, {"content":"xdmp:sha1(${1:\\$data as item()})", "trigger":"xdmp:sha1", "description":"($data as item())"}, {"content":"xdmp:sha1(${1:\\$data as item()}, ${2:\\$encoding as xs:string})", "trigger":"xdmp:sha1", "description":"($data as item(), $encoding as xs:string)"}, {"content":"xdmp:hmac-sha1(${1:\\$secretkey as item()}, ${2:\\$message as item()})", "trigger":"xdmp:hmac-sha1", "description":"($secretkey as item(), $message as item())"}, {"content":"xdmp:hmac-sha1(${1:\\$secretkey as item()}, ${2:\\$message as item()}, ${3:\\$encoding as xs:string})", "trigger":"xdmp:hmac-sha1", "description":"($secretkey as item(), $message as item(), $encoding as xs:string)"}, {"content":"xdmp:sha256(${1:\\$data as item()})", "trigger":"xdmp:sha256", "description":"($data as item())"}, {"content":"xdmp:sha256(${1:\\$data as item()}, ${2:\\$encoding as xs:string})", "trigger":"xdmp:sha256", "description":"($data as item(), $encoding as xs:string)"}, {"content":"xdmp:hmac-sha256(${1:\\$secretkey as item()}, ${2:\\$message as item()})", "trigger":"xdmp:hmac-sha256", "description":"($secretkey as item(), $message as item())"}, {"content":"xdmp:hmac-sha256(${1:\\$secretkey as item()}, ${2:\\$message as item()}, ${3:\\$encoding as xs:string})", "trigger":"xdmp:hmac-sha256", "description":"($secretkey as item(), $message as item(), $encoding as xs:string)"}, {"content":"xdmp:sha384(${1:\\$data as item()})", "trigger":"xdmp:sha384", "description":"($data as item())"}, {"content":"xdmp:sha384(${1:\\$data as item()}, ${2:\\$encoding as xs:string})", "trigger":"xdmp:sha384", "description":"($data as item(), $encoding as xs:string)"}, {"content":"xdmp:sha512(${1:\\$data as item()})", "trigger":"xdmp:sha512", "description":"($data as item())"}, {"content":"xdmp:sha512(${1:\\$data as item()}, ${2:\\$encoding as xs:string})", "trigger":"xdmp:sha512", "description":"($data as item(), $encoding as xs:string)"}, {"content":"xdmp:hmac-sha512(${1:\\$secretkey as item()}, ${2:\\$message as item()})", "trigger":"xdmp:hmac-sha512", "description":"($secretkey as item(), $message as item())"}, {"content":"xdmp:hmac-sha512(${1:\\$secretkey as item()}, ${2:\\$message as item()}, ${3:\\$encoding as xs:string})", "trigger":"xdmp:hmac-sha512", "description":"($secretkey as item(), $message as item(), $encoding as xs:string)"}, {"content":"xdmp:host-status(${1:\\$host-id as xs:unsignedLong*})", "trigger":"xdmp:host-status", "description":"($host-id as xs:unsignedLong*)"}, {"content":"xdmp:host-get-ssl-fips-enabled(${1:\\$host-id as xs:unsignedLong*})", "trigger":"xdmp:host-get-ssl-fips-enabled", "description":"($host-id as xs:unsignedLong*)"}, {"content":"xdmp:cache-status()", "trigger":"xdmp:cache-status", "description":"()"}, {"content":"xdmp:cache-status(${1:\\$host-id as xs:unsignedLong*})", "trigger":"xdmp:cache-status", "description":"($host-id as xs:unsignedLong*)"}, {"content":"xdmp:forest-status(${1:\\$forest-id as xs:unsignedLong*})", "trigger":"xdmp:forest-status", "description":"($forest-id as xs:unsignedLong*)"}, {"content":"xdmp:forest-online(${1:\\$forestID as xs:unsignedLong})", "trigger":"xdmp:forest-online", "description":"($forestID as xs:unsignedLong)"}, {"content":"xdmp:forest-online(${1:\\$forestID as xs:unsignedLong}, ${2:\\$timestamp as xs:unsignedLong})", "trigger":"xdmp:forest-online", "description":"($forestID as xs:unsignedLong, $timestamp as xs:unsignedLong)"}, {"content":"xdmp:forest-online(${1:\\$forestID as xs:unsignedLong}, ${2:\\$timestamp as xs:unsignedLong}, ${3:\\$isReplica as xs:boolean})", "trigger":"xdmp:forest-online", "description":"($forestID as xs:unsignedLong, $timestamp as xs:unsignedLong, $isReplica as xs:boolean)"}, {"content":"xdmp:forest-online(${1:\\$forestID as xs:unsignedLong}, ${2:\\$timestamp as xs:unsignedLong}, ${3:\\$isReplica as xs:boolean}, ${4:\\$syncingOk as xs:boolean})", "trigger":"xdmp:forest-online", "description":"($forestID as xs:unsignedLong, $timestamp as xs:unsignedLong, $isReplica as xs:boolean, $syncingOk as xs:boolean)"}, {"content":"xdmp:server-status(${1:\\$host-id as xs:unsignedLong}, ${2:\\$server-id as xs:unsignedLong*})", "trigger":"xdmp:server-status", "description":"($host-id as xs:unsignedLong, $server-id as xs:unsignedLong*)"}, {"content":"xdmp:forest-counts(${1:\\$forest-id as xs:unsignedLong*})", "trigger":"xdmp:forest-counts", "description":"($forest-id as xs:unsignedLong*)"}, {"content":"xdmp:forest-counts(${1:\\$forest-id as xs:unsignedLong*}, ${2:\\$show-elements as xs:string*})", "trigger":"xdmp:forest-counts", "description":"($forest-id as xs:unsignedLong*, $show-elements as xs:string*)"}, {"content":"xdmp:forest-counts(${1:\\$forest-id as xs:unsignedLong*}, ${2:\\$show-elements as xs:string*}, ${3:\\$options as xs:string*})", "trigger":"xdmp:forest-counts", "description":"($forest-id as xs:unsignedLong*, $show-elements as xs:string*, $options as xs:string*)"}, {"content":"xdmp:request-status(${1:\\$host-id as xs:unsignedLong}, ${2:\\$server-id as xs:unsignedLong}, ${3:\\$request-id as xs:unsignedLong*})", "trigger":"xdmp:request-status", "description":"($host-id as xs:unsignedLong, $server-id as xs:unsignedLong, $request-id as xs:unsignedLong*)"}, {"content":"xdmp:foreign-cluster-status(${1:\\$host-id as xs:unsignedLong}, ${2:\\$foreign-cluster-id as xs:unsignedLong})", "trigger":"xdmp:foreign-cluster-status", "description":"($host-id as xs:unsignedLong, $foreign-cluster-id as xs:unsignedLong)"}, {"content":"xdmp:keystore-status()", "trigger":"xdmp:keystore-status", "description":"()"}, {"content":"fn:codepoints-to-string(${1:\\$arg as xs:integer*})", "trigger":"fn:codepoints-to-string", "description":"($arg as xs:integer*)"}, {"content":"fn:string-to-codepoints(${1:\\$arg as xs:string})", "trigger":"fn:string-to-codepoints", "description":"($arg as xs:string)"}, {"content":"fn:compare(${1:\\$comparand1 as xs:string?}, ${2:\\$comparand2 as xs:string?})", "trigger":"fn:compare", "description":"($comparand1 as xs:string?, $comparand2 as xs:string?)"}, {"content":"fn:compare(${1:\\$comparand1 as xs:string?}, ${2:\\$comparand2 as xs:string?}, ${3:\\$collation as xs:string})", "trigger":"fn:compare", "description":"($comparand1 as xs:string?, $comparand2 as xs:string?, $collation as xs:string)"}, {"content":"fn:codepoint-equal(${1:\\$comparand1 as xs:string?}, ${2:\\$comparand2 as xs:string?})", "trigger":"fn:codepoint-equal", "description":"($comparand1 as xs:string?, $comparand2 as xs:string?)"}, {"content":"fn:concat(${1:\\$parameter1 as xs:anyAtomicType?})", "trigger":"fn:concat", "description":"($parameter1 as xs:anyAtomicType?)"}, {"content":"fn:concat(${1:\\$parameter1 as xs:anyAtomicType?}, ${2:\\$parameterN as xs:anyAtomicType?,...})", "trigger":"fn:concat", "description":"($parameter1 as xs:anyAtomicType?, $parameterN as xs:anyAtomicType?,...)"}, {"content":"fn:string-join(${1:\\$parameter1 as xs:string*}, ${2:\\$parameter2 as xs:string})", "trigger":"fn:string-join", "description":"($parameter1 as xs:string*, $parameter2 as xs:string)"}, {"content":"fn:starts-with(${1:\\$parameter1 as xs:string?}, ${2:\\$parameter2 as xs:string?})", "trigger":"fn:starts-with", "description":"($parameter1 as xs:string?, $parameter2 as xs:string?)"}, {"content":"fn:starts-with(${1:\\$parameter1 as xs:string?}, ${2:\\$parameter2 as xs:string?}, ${3:\\$collation as xs:string})", "trigger":"fn:starts-with", "description":"($parameter1 as xs:string?, $parameter2 as xs:string?, $collation as xs:string)"}, {"content":"fn:ends-with(${1:\\$parameter1 as xs:string?}, ${2:\\$parameter2 as xs:string?})", "trigger":"fn:ends-with", "description":"($parameter1 as xs:string?, $parameter2 as xs:string?)"}, {"content":"fn:ends-with(${1:\\$parameter1 as xs:string?}, ${2:\\$parameter2 as xs:string?}, ${3:\\$collation as xs:string})", "trigger":"fn:ends-with", "description":"($parameter1 as xs:string?, $parameter2 as xs:string?, $collation as xs:string)"}, {"content":"fn:contains(${1:\\$parameter1 as xs:string?}, ${2:\\$parameter2 as xs:string?})", "trigger":"fn:contains", "description":"($parameter1 as xs:string?, $parameter2 as xs:string?)"}, {"content":"fn:contains(${1:\\$parameter1 as xs:string?}, ${2:\\$parameter2 as xs:string?}, ${3:\\$collation as xs:string})", "trigger":"fn:contains", "description":"($parameter1 as xs:string?, $parameter2 as xs:string?, $collation as xs:string)"}, {"content":"fn:substring(${1:\\$sourceString as xs:string?}, ${2:\\$startingLoc as xs:double})", "trigger":"fn:substring", "description":"($sourceString as xs:string?, $startingLoc as xs:double)"}, {"content":"fn:substring(${1:\\$sourceString as xs:string?}, ${2:\\$startingLoc as xs:double}, ${3:\\$length as xs:double})", "trigger":"fn:substring", "description":"($sourceString as xs:string?, $startingLoc as xs:double, $length as xs:double)"}, {"content":"fn:string-length()", "trigger":"fn:string-length", "description":"()"}, {"content":"fn:string-length(${1:\\$sourceString as xs:string?})", "trigger":"fn:string-length", "description":"($sourceString as xs:string?)"}, {"content":"fn:substring-before(${1:\\$input as xs:string?}, ${2:\\$before as xs:string?})", "trigger":"fn:substring-before", "description":"($input as xs:string?, $before as xs:string?)"}, {"content":"fn:substring-before(${1:\\$input as xs:string?}, ${2:\\$before as xs:string?}, ${3:\\$collation as xs:string})", "trigger":"fn:substring-before", "description":"($input as xs:string?, $before as xs:string?, $collation as xs:string)"}, {"content":"fn:substring-after(${1:\\$input as xs:string?}, ${2:\\$after as xs:string?})", "trigger":"fn:substring-after", "description":"($input as xs:string?, $after as xs:string?)"}, {"content":"fn:substring-after(${1:\\$input as xs:string?}, ${2:\\$after as xs:string?}, ${3:\\$collation as xs:string})", "trigger":"fn:substring-after", "description":"($input as xs:string?, $after as xs:string?, $collation as xs:string)"}, {"content":"fn:normalize-space()", "trigger":"fn:normalize-space", "description":"()"}, {"content":"fn:normalize-space(${1:\\$input as xs:string?})", "trigger":"fn:normalize-space", "description":"($input as xs:string?)"}, {"content":"fn:normalize-unicode(${1:\\$arg as xs:string?})", "trigger":"fn:normalize-unicode", "description":"($arg as xs:string?)"}, {"content":"fn:normalize-unicode(${1:\\$arg as xs:string?}, ${2:\\$normalizationForm as xs:string})", "trigger":"fn:normalize-unicode", "description":"($arg as xs:string?, $normalizationForm as xs:string)"}, {"content":"fn:upper-case(${1:\\$string as xs:string?})", "trigger":"fn:upper-case", "description":"($string as xs:string?)"}, {"content":"fn:lower-case(${1:\\$string as xs:string?})", "trigger":"fn:lower-case", "description":"($string as xs:string?)"}, {"content":"fn:translate(${1:\\$src as xs:string?}, ${2:\\$mapString as xs:string?}, ${3:\\$transString as xs:string?})", "trigger":"fn:translate", "description":"($src as xs:string?, $mapString as xs:string?, $transString as xs:string?)"}, {"content":"fn:string-pad(${1:\\$padString as xs:string?}, ${2:\\$padCount as xs:integer})", "trigger":"fn:string-pad", "description":"($padString as xs:string?, $padCount as xs:integer)"}, {"content":"fn:escape-uri(${1:\\$uri-part as xs:string}, ${2:\\$escape-reserved as xs:boolean})", "trigger":"fn:escape-uri", "description":"($uri-part as xs:string, $escape-reserved as xs:boolean)"}, {"content":"fn:encode-for-uri(${1:\\$uri-part as xs:string})", "trigger":"fn:encode-for-uri", "description":"($uri-part as xs:string)"}, {"content":"fn:iri-to-uri(${1:\\$uri-part as xs:string})", "trigger":"fn:iri-to-uri", "description":"($uri-part as xs:string)"}, {"content":"fn:escape-html-uri(${1:\\$uri-part as xs:string})", "trigger":"fn:escape-html-uri", "description":"($uri-part as xs:string)"}, {"content":"xdmp:encode-for-NCName(${1:\\$name as xs:string})", "trigger":"xdmp:encode-for-NCName", "description":"($name as xs:string)"}, {"content":"xdmp:decode-from-NCName(${1:\\$name as xs:string})", "trigger":"xdmp:decode-from-NCName", "description":"($name as xs:string)"}, {"content":"xdmp:position(${1:\\$test as xs:string?}, ${2:\\$target as xs:string?})", "trigger":"xdmp:position", "description":"($test as xs:string?, $target as xs:string?)"}, {"content":"xdmp:position(${1:\\$test as xs:string?}, ${2:\\$target as xs:string?}, ${3:\\$collation as xs:string?})", "trigger":"xdmp:position", "description":"($test as xs:string?, $target as xs:string?, $collation as xs:string?)"}, {"content":"xdmp:initcap(${1:\\$string as xs:string?})", "trigger":"xdmp:initcap", "description":"($string as xs:string?)"}, {"content":"tde:get-view(${1:\\$schema as xs:string}, ${2:\\$view as xs:string})", "trigger":"tde:get-view", "description":"($schema as xs:string, $view as xs:string)"}, {"content":"tde:document-data-extract(${1:\\$documents as node()*})", "trigger":"tde:document-data-extract", "description":"($documents as node()*)"}, {"content":"tde:document-data-extract(${1:\\$documents as node()*}, ${2:\\$templates as element(tde:template)*})", "trigger":"tde:document-data-extract", "description":"($documents as node()*, $templates as element(tde:template)*)"}, {"content":"tde:validate(${1:\\$templates as element(tde:template)*})", "trigger":"tde:validate", "description":"($templates as element(tde:template)*)"}, {"content":"tde:validate(${1:\\$templates as element(tde:template)*}, ${2:\\$excludeTemplateURIs as xs:string()*})", "trigger":"tde:validate", "description":"($templates as element(tde:template)*, $excludeTemplateURIs as xs:string()*)"}, {"content":"temporal:()", "trigger":"temporal:", "description":"()"}, {"content":"temporal:axis-create(${1:\\$axis-name as xs:string}, ${2:\\$start-range-index as cts:reference}, ${3:\\$end-range-index as cts:reference})", "trigger":"temporal:axis-create", "description":"($axis-name as xs:string, $start-range-index as cts:reference, $end-range-index as cts:reference)"}, {"content":"temporal:axis-remove(${1:\\$axis-name as xs:string})", "trigger":"temporal:axis-remove", "description":"($axis-name as xs:string)"}, {"content":"temporal:axes()", "trigger":"temporal:axes", "description":"()"}, {"content":"temporal:collection-create(${1:\\$collection-name as xs:string}, ${2:\\$system-axis as xs:string}, ${3:\\$valid-axis as xs:string})", "trigger":"temporal:collection-create", "description":"($collection-name as xs:string, $system-axis as xs:string, $valid-axis as xs:string)"}, {"content":"temporal:collection-create(${1:\\$collection-name as xs:string}, ${2:\\$system-axis as xs:string}, ${3:\\$valid-axis as xs:string}, ${4:\\$options as xs:string*})", "trigger":"temporal:collection-create", "description":"($collection-name as xs:string, $system-axis as xs:string, $valid-axis as xs:string, $options as xs:string*)"}, {"content":"temporal:collection-remove(${1:\\$collection-name as xs:string})", "trigger":"temporal:collection-remove", "description":"($collection-name as xs:string)"}, {"content":"temporal:collection-get-axis(${1:\\$temporal-collection as xs:string}, ${2:\\$axis as xs:string})", "trigger":"temporal:collection-get-axis", "description":"($temporal-collection as xs:string, $axis as xs:string)"}, {"content":"temporal:collections()", "trigger":"temporal:collections", "description":"()"}, {"content":"temporal:axis-get-start(${1:\\$axis-name as xs:string})", "trigger":"temporal:axis-get-start", "description":"($axis-name as xs:string)"}, {"content":"temporal:axis-get-end(${1:\\$axis-name as xs:string})", "trigger":"temporal:axis-get-end", "description":"($axis-name as xs:string)"}, {"content":"temporal:collection-get-options(${1:\\$temporal-collection as xs:string})", "trigger":"temporal:collection-get-options", "description":"($temporal-collection as xs:string)"}, {"content":"temporal:collection-set-options(${1:\\$temporal-collection as xs:string}, ${2:\\$options as xs:string*})", "trigger":"temporal:collection-set-options", "description":"($temporal-collection as xs:string, $options as xs:string*)"}, {"content":"thsr:load(${1:\\$path as xs:string}, ${2:\\$uri as xs:string})", "trigger":"thsr:load", "description":"($path as xs:string, $uri as xs:string)"}, {"content":"thsr:insert(${1:\\$uri as xs:string}, ${2:\\$thsr as element(thsr:thesaurus)})", "trigger":"thsr:insert", "description":"($uri as xs:string, $thsr as element(thsr:thesaurus))"}, {"content":"thsr:set-entry(${1:\\$uri as xs:string}, ${2:\\$entry as item()})", "trigger":"thsr:set-entry", "description":"($uri as xs:string, $entry as item())"}, {"content":"thsr:remove-term(${1:\\$uri as xs:string*}, ${2:\\$term as xs:string})", "trigger":"thsr:remove-term", "description":"($uri as xs:string*, $term as xs:string)"}, {"content":"thsr:remove-entry(${1:\\$uri as xs:string*}, ${2:\\$entry as item()})", "trigger":"thsr:remove-entry", "description":"($uri as xs:string*, $entry as item())"}, {"content":"thsr:add-synonym(${1:\\$entry as element(thsr:entry)}, ${2:\\$synonym as item()})", "trigger":"thsr:add-synonym", "description":"($entry as element(thsr:entry), $synonym as item())"}, {"content":"thsr:remove-synonym(${1:\\$entry as element(thsr:entry)}, ${2:\\$synonym as item()})", "trigger":"thsr:remove-synonym", "description":"($entry as element(thsr:entry), $synonym as item())"}, {"content":"thsr:lookup(${1:\\$uri as xs:string*}, ${2:\\$term as xs:string})", "trigger":"thsr:lookup", "description":"($uri as xs:string*, $term as xs:string)"}, {"content":"thsr:lookup(${1:\\$uri as xs:string*}, ${2:\\$term as xs:string}, ${3:\\$output-kind as xs:string})", "trigger":"thsr:lookup", "description":"($uri as xs:string*, $term as xs:string, $output-kind as xs:string)"}, {"content":"thsr:query-lookup(${1:\\$uri as xs:string*}, ${2:\\$query as cts:query})", "trigger":"thsr:query-lookup", "description":"($uri as xs:string*, $query as cts:query)"}, {"content":"thsr:query-lookup(${1:\\$uri as xs:string*}, ${2:\\$query as cts:query}, ${3:\\$output-kind as xs:string})", "trigger":"thsr:query-lookup", "description":"($uri as xs:string*, $query as cts:query, $output-kind as xs:string)"}, {"content":"thsr:expand(${1:\\$query as cts:query}, ${2:\\$entries as item()*}, ${3:\\$new-weight as xs:double?}, ${4:\\$min-weight as xs:double?}, ${5:\\$filter as node()*})", "trigger":"thsr:expand", "description":"($query as cts:query, $entries as item()*, $new-weight as xs:double?, $min-weight as xs:double?, $filter as node()*)"}, {"content":"xdmp:tidy(${1:\\$doc as xs:string})", "trigger":"xdmp:tidy", "description":"($doc as xs:string)"}, {"content":"xdmp:tidy(${1:\\$doc as xs:string}, ${2:\\$options as (element()|map:map)?})", "trigger":"xdmp:tidy", "description":"($doc as xs:string, $options as (element()|map:map)?)"}, {"content":"tieredstorage:forest-migrate(${1:\\$forest-ids as xs:unsignedLong*})", "trigger":"tieredstorage:forest-migrate", "description":"($forest-ids as xs:unsignedLong*)"}, {"content":"tieredstorage:forest-migrate(${1:\\$forest-ids as xs:unsignedLong*}, ${2:\\$new-host-id as xs:unsignedLong?})", "trigger":"tieredstorage:forest-migrate", "description":"($forest-ids as xs:unsignedLong*, $new-host-id as xs:unsignedLong?)"}, {"content":"tieredstorage:forest-migrate(${1:\\$forest-ids as xs:unsignedLong*}, ${2:\\$new-host-id as xs:unsignedLong?}, ${3:\\$new-data-directory as xs:string?})", "trigger":"tieredstorage:forest-migrate", "description":"($forest-ids as xs:unsignedLong*, $new-host-id as xs:unsignedLong?, $new-data-directory as xs:string?)"}, {"content":"tieredstorage:forest-migrate(${1:\\$forest-ids as xs:unsignedLong*}, ${2:\\$new-host-id as xs:unsignedLong?}, ${3:\\$new-data-directory as xs:string?}, ${4:\\$new-large-data-directory as xs:string?})", "trigger":"tieredstorage:forest-migrate", "description":"($forest-ids as xs:unsignedLong*, $new-host-id as xs:unsignedLong?, $new-data-directory as xs:string?, $new-large-data-directory as xs:string?)"}, {"content":"tieredstorage:forest-migrate(${1:\\$forest-ids as xs:unsignedLong*}, ${2:\\$new-host-id as xs:unsignedLong?}, ${3:\\$new-data-directory as xs:string?}, ${4:\\$new-large-data-directory as xs:string?}, ${5:\\$new-fast-data-directory as xs:string?})", "trigger":"tieredstorage:forest-migrate", "description":"($forest-ids as xs:unsignedLong*, $new-host-id as xs:unsignedLong?, $new-data-directory as xs:string?, $new-large-data-directory as xs:string?, $new-fast-data-directory as xs:string?)"}, {"content":"tieredstorage:forest-migrate(${1:\\$forest-ids as xs:unsignedLong*}, ${2:\\$new-host-id as xs:unsignedLong?}, ${3:\\$new-data-directory as xs:string?}, ${4:\\$new-large-data-directory as xs:string?}, ${5:\\$new-fast-data-directory as xs:string?}, ${6:\\$options as xs:string*})", "trigger":"tieredstorage:forest-migrate", "description":"($forest-ids as xs:unsignedLong*, $new-host-id as xs:unsignedLong?, $new-data-directory as xs:string?, $new-large-data-directory as xs:string?, $new-fast-data-directory as xs:string?, $options as xs:string*)"}, {"content":"tieredstorage:forest-combine(${1:\\$forest-ids as xs:unsignedLong*}, ${2:\\$forest-name as xs:string}, ${3:\\$host-id as xs:unsignedLong})", "trigger":"tieredstorage:forest-combine", "description":"($forest-ids as xs:unsignedLong*, $forest-name as xs:string, $host-id as xs:unsignedLong)"}, {"content":"tieredstorage:forest-combine(${1:\\$forest-ids as xs:unsignedLong*}, ${2:\\$forest-name as xs:string}, ${3:\\$host-id as xs:unsignedLong}, ${4:\\$data-directory as xs:string?})", "trigger":"tieredstorage:forest-combine", "description":"($forest-ids as xs:unsignedLong*, $forest-name as xs:string, $host-id as xs:unsignedLong, $data-directory as xs:string?)"}, {"content":"tieredstorage:forest-combine(${1:\\$forest-ids as xs:unsignedLong*}, ${2:\\$forest-name as xs:string}, ${3:\\$host-id as xs:unsignedLong}, ${4:\\$data-directory as xs:string?}, ${5:\\$large-data-directory as xs:string?})", "trigger":"tieredstorage:forest-combine", "description":"($forest-ids as xs:unsignedLong*, $forest-name as xs:string, $host-id as xs:unsignedLong, $data-directory as xs:string?, $large-data-directory as xs:string?)"}, {"content":"tieredstorage:forest-combine(${1:\\$forest-ids as xs:unsignedLong*}, ${2:\\$forest-name as xs:string}, ${3:\\$host-id as xs:unsignedLong}, ${4:\\$data-directory as xs:string?}, ${5:\\$large-data-directory as xs:string?}, ${6:\\$fast-data-directory as xs:string?})", "trigger":"tieredstorage:forest-combine", "description":"($forest-ids as xs:unsignedLong*, $forest-name as xs:string, $host-id as xs:unsignedLong, $data-directory as xs:string?, $large-data-directory as xs:string?, $fast-data-directory as xs:string?)"}, {"content":"tieredstorage:forest-combine(${1:\\$forest-ids as xs:unsignedLong*}, ${2:\\$forest-name as xs:string}, ${3:\\$host-id as xs:unsignedLong}, ${4:\\$data-directory as xs:string?}, ${5:\\$large-data-directory as xs:string?}, ${6:\\$fast-data-directory as xs:string?}, ${7:\\$options as xs:string*})", "trigger":"tieredstorage:forest-combine", "description":"($forest-ids as xs:unsignedLong*, $forest-name as xs:string, $host-id as xs:unsignedLong, $data-directory as xs:string?, $large-data-directory as xs:string?, $fast-data-directory as xs:string?, $options as xs:string*)"}, {"content":"tieredstorage:range-partition-create(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$lower as xs:anyAtomicType?}, ${4:\\$upper as xs:anyAtomicType?}, ${5:\\$forests-per-host as xs:unsignedInt}, ${6:\\$host-ids as xs:unsignedLong*})", "trigger":"tieredstorage:range-partition-create", "description":"($database-id as xs:unsignedLong, $partition-name as xs:string, $lower as xs:anyAtomicType?, $upper as xs:anyAtomicType?, $forests-per-host as xs:unsignedInt, $host-ids as xs:unsignedLong*)"}, {"content":"tieredstorage:range-partition-create(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$lower as xs:anyAtomicType?}, ${4:\\$upper as xs:anyAtomicType?}, ${5:\\$forests-per-host as xs:unsignedInt}, ${6:\\$host-ids as xs:unsignedLong*}, ${7:\\$data-directory as xs:string?})", "trigger":"tieredstorage:range-partition-create", "description":"($database-id as xs:unsignedLong, $partition-name as xs:string, $lower as xs:anyAtomicType?, $upper as xs:anyAtomicType?, $forests-per-host as xs:unsignedInt, $host-ids as xs:unsignedLong*, $data-directory as xs:string?)"}, {"content":"tieredstorage:range-partition-create(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$lower as xs:anyAtomicType?}, ${4:\\$upper as xs:anyAtomicType?}, ${5:\\$forests-per-host as xs:unsignedInt}, ${6:\\$host-ids as xs:unsignedLong*}, ${7:\\$data-directory as xs:string?}, ${8:\\$large-data-directory as xs:string?})", "trigger":"tieredstorage:range-partition-create", "description":"($database-id as xs:unsignedLong, $partition-name as xs:string, $lower as xs:anyAtomicType?, $upper as xs:anyAtomicType?, $forests-per-host as xs:unsignedInt, $host-ids as xs:unsignedLong*, $data-directory as xs:string?, $large-data-directory as xs:string?)"}, {"content":"tieredstorage:range-partition-create(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$lower as xs:anyAtomicType?}, ${4:\\$upper as xs:anyAtomicType?}, ${5:\\$forests-per-host as xs:unsignedInt}, ${6:\\$host-ids as xs:unsignedLong*}, ${7:\\$data-directory as xs:string?}, ${8:\\$large-data-directory as xs:string?}, ${9:\\$fast-data-directory as xs:string?})", "trigger":"tieredstorage:range-partition-create", "description":"($database-id as xs:unsignedLong, $partition-name as xs:string, $lower as xs:anyAtomicType?, $upper as xs:anyAtomicType?, $forests-per-host as xs:unsignedInt, $host-ids as xs:unsignedLong*, $data-directory as xs:string?, $large-data-directory as xs:string?, $fast-data-directory as xs:string?)"}, {"content":"tieredstorage:range-partition-create(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$lower as xs:anyAtomicType?}, ${4:\\$upper as xs:anyAtomicType?}, ${5:\\$forests-per-host as xs:unsignedInt}, ${6:\\$host-ids as xs:unsignedLong*}, ${7:\\$data-directory as xs:string?}, ${8:\\$large-data-directory as xs:string?}, ${9:\\$fast-data-directory as xs:string?}, ${10:\\$options as xs:string*})", "trigger":"tieredstorage:range-partition-create", "description":"($database-id as xs:unsignedLong, $partition-name as xs:string, $lower as xs:anyAtomicType?, $upper as xs:anyAtomicType?, $forests-per-host as xs:unsignedInt, $host-ids as xs:unsignedLong*, $data-directory as xs:string?, $large-data-directory as xs:string?, $fast-data-directory as xs:string?, $options as xs:string*)"}, {"content":"tieredstorage:partition-forests(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string})", "trigger":"tieredstorage:partition-forests", "description":"($database-id as xs:unsignedLong, $partition-name as xs:string)"}, {"content":"tieredstorage:partition-forests(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$include-replicas as xs:boolean})", "trigger":"tieredstorage:partition-forests", "description":"($database-id as xs:unsignedLong, $partition-name as xs:string, $include-replicas as xs:boolean)"}, {"content":"tieredstorage:database-partitions(${1:\\$database-id as xs:unsignedLong})", "trigger":"tieredstorage:database-partitions", "description":"($database-id as xs:unsignedLong)"}, {"content":"tieredstorage:partition-set-updates-allowed(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$value as xs:string})", "trigger":"tieredstorage:partition-set-updates-allowed", "description":"($database-id as xs:unsignedLong, $partition-name as xs:string, $value as xs:string)"}, {"content":"tieredstorage:partition-set-availability(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$value as xs:string})", "trigger":"tieredstorage:partition-set-availability", "description":"($database-id as xs:unsignedLong, $partition-name as xs:string, $value as xs:string)"}, {"content":"tieredstorage:partition-transfer(${1:\\$partition-db-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$dst-db-id as xs:unsignedLong})", "trigger":"tieredstorage:partition-transfer", "description":"($partition-db-id as xs:unsignedLong, $partition-name as xs:string, $dst-db-id as xs:unsignedLong)"}, {"content":"tieredstorage:partition-transfer(${1:\\$partition-db-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$dst-db-id as xs:unsignedLong}, ${4:\\$options as xs:string*})", "trigger":"tieredstorage:partition-transfer", "description":"($partition-db-id as xs:unsignedLong, $partition-name as xs:string, $dst-db-id as xs:unsignedLong, $options as xs:string*)"}, {"content":"tieredstorage:partition-migrate(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$host-ids as xs:unsignedLong*})", "trigger":"tieredstorage:partition-migrate", "description":"($database-id as xs:unsignedLong, $partition-name as xs:string, $host-ids as xs:unsignedLong*)"}, {"content":"tieredstorage:partition-migrate(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$host-ids as xs:unsignedLong*}, ${4:\\$data-directory as xs:string?})", "trigger":"tieredstorage:partition-migrate", "description":"($database-id as xs:unsignedLong, $partition-name as xs:string, $host-ids as xs:unsignedLong*, $data-directory as xs:string?)"}, {"content":"tieredstorage:partition-migrate(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$host-ids as xs:unsignedLong*}, ${4:\\$data-directory as xs:string?}, ${5:\\$large-data-directory as xs:string?})", "trigger":"tieredstorage:partition-migrate", "description":"($database-id as xs:unsignedLong, $partition-name as xs:string, $host-ids as xs:unsignedLong*, $data-directory as xs:string?, $large-data-directory as xs:string?)"}, {"content":"tieredstorage:partition-migrate(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$host-ids as xs:unsignedLong*}, ${4:\\$data-directory as xs:string?}, ${5:\\$large-data-directory as xs:string?}, ${6:\\$fast-data-directory as xs:string?})", "trigger":"tieredstorage:partition-migrate", "description":"($database-id as xs:unsignedLong, $partition-name as xs:string, $host-ids as xs:unsignedLong*, $data-directory as xs:string?, $large-data-directory as xs:string?, $fast-data-directory as xs:string?)"}, {"content":"tieredstorage:partition-migrate(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$host-ids as xs:unsignedLong*}, ${4:\\$data-directory as xs:string?}, ${5:\\$large-data-directory as xs:string?}, ${6:\\$fast-data-directory as xs:string?}, ${7:\\$options as xs:string*})", "trigger":"tieredstorage:partition-migrate", "description":"($database-id as xs:unsignedLong, $partition-name as xs:string, $host-ids as xs:unsignedLong*, $data-directory as xs:string?, $large-data-directory as xs:string?, $fast-data-directory as xs:string?, $options as xs:string*)"}, {"content":"tieredstorage:partition-resize(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$forests-per-host as xs:unsignedInt}, ${4:\\$host-ids as xs:unsignedLong*})", "trigger":"tieredstorage:partition-resize", "description":"($database-id as xs:unsignedLong, $partition-name as xs:string, $forests-per-host as xs:unsignedInt, $host-ids as xs:unsignedLong*)"}, {"content":"tieredstorage:partition-resize(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$forests-per-host as xs:unsignedInt}, ${4:\\$host-ids as xs:unsignedLong*}, ${5:\\$data-directory as xs:string?})", "trigger":"tieredstorage:partition-resize", "description":"($database-id as xs:unsignedLong, $partition-name as xs:string, $forests-per-host as xs:unsignedInt, $host-ids as xs:unsignedLong*, $data-directory as xs:string?)"}, {"content":"tieredstorage:partition-resize(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$forests-per-host as xs:unsignedInt}, ${4:\\$host-ids as xs:unsignedLong*}, ${5:\\$data-directory as xs:string?}, ${6:\\$large-data-directory as xs:string?})", "trigger":"tieredstorage:partition-resize", "description":"($database-id as xs:unsignedLong, $partition-name as xs:string, $forests-per-host as xs:unsignedInt, $host-ids as xs:unsignedLong*, $data-directory as xs:string?, $large-data-directory as xs:string?)"}, {"content":"tieredstorage:partition-resize(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$forests-per-host as xs:unsignedInt}, ${4:\\$host-ids as xs:unsignedLong*}, ${5:\\$data-directory as xs:string?}, ${6:\\$large-data-directory as xs:string?}, ${7:\\$fast-data-directory as xs:string?})", "trigger":"tieredstorage:partition-resize", "description":"($database-id as xs:unsignedLong, $partition-name as xs:string, $forests-per-host as xs:unsignedInt, $host-ids as xs:unsignedLong*, $data-directory as xs:string?, $large-data-directory as xs:string?, $fast-data-directory as xs:string?)"}, {"content":"tieredstorage:partition-resize(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$forests-per-host as xs:unsignedInt}, ${4:\\$host-ids as xs:unsignedLong*}, ${5:\\$data-directory as xs:string?}, ${6:\\$large-data-directory as xs:string?}, ${7:\\$fast-data-directory as xs:string?}, ${8:\\$options as xs:string*})", "trigger":"tieredstorage:partition-resize", "description":"($database-id as xs:unsignedLong, $partition-name as xs:string, $forests-per-host as xs:unsignedInt, $host-ids as xs:unsignedLong*, $data-directory as xs:string?, $large-data-directory as xs:string?, $fast-data-directory as xs:string?, $options as xs:string*)"}, {"content":"tieredstorage:partition-delete(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$delete-data as xs:boolean})", "trigger":"tieredstorage:partition-delete", "description":"($database-id as xs:unsignedLong, $partition-name as xs:string, $delete-data as xs:boolean)"}, {"content":"tieredstorage:partition-delete(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$delete-data as xs:boolean}, ${4:\\$options as xs:string*})", "trigger":"tieredstorage:partition-delete", "description":"($database-id as xs:unsignedLong, $partition-name as xs:string, $delete-data as xs:boolean, $options as xs:string*)"}, {"content":"tieredstorage:database-create-super-database(${1:\\$database-id as xs:unsignedLong}, ${2:\\$database-name as xs:string})", "trigger":"tieredstorage:database-create-super-database", "description":"($database-id as xs:unsignedLong, $database-name as xs:string)"}, {"content":"tieredstorage:database-create-sub-database(${1:\\$dbid as xs:unsignedLong}, ${2:\\$database-name as xs:string})", "trigger":"tieredstorage:database-create-sub-database", "description":"($dbid as xs:unsignedLong, $database-name as xs:string)"}, {"content":"tieredstorage:database-create-sub-database(${1:\\$dbid as xs:unsignedLong}, ${2:\\$database-name as xs:string}, ${3:\\$kind as xs:string})", "trigger":"tieredstorage:database-create-sub-database", "description":"($dbid as xs:unsignedLong, $database-name as xs:string, $kind as xs:string)"}, {"content":"tieredstorage:database-delete-super-database(${1:\\$database-id as xs:unsignedLong}, ${2:\\$delete-dbid as xs:unsignedLong})", "trigger":"tieredstorage:database-delete-super-database", "description":"($database-id as xs:unsignedLong, $delete-dbid as xs:unsignedLong)"}, {"content":"tieredstorage:database-delete-sub-database(${1:\\$database-id as xs:unsignedLong}, ${2:\\$delete-dbid as xs:unsignedLong})", "trigger":"tieredstorage:database-delete-sub-database", "description":"($database-id as xs:unsignedLong, $delete-dbid as xs:unsignedLong)"}, {"content":"tieredstorage:query-partition-create(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$partition-number as xs:unsignedInt?}, ${4:\\$forests-per-host as xs:unsignedInt}, ${5:\\$host-ids as xs:unsignedLong*})", "trigger":"tieredstorage:query-partition-create", "description":"($database-id as xs:unsignedLong, $partition-name as xs:string, $partition-number as xs:unsignedInt?, $forests-per-host as xs:unsignedInt, $host-ids as xs:unsignedLong*)"}, {"content":"tieredstorage:query-partition-create(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$partition-number as xs:unsignedInt?}, ${4:\\$forests-per-host as xs:unsignedInt}, ${5:\\$host-ids as xs:unsignedLong*}, ${6:\\$data-directory as xs:string?})", "trigger":"tieredstorage:query-partition-create", "description":"($database-id as xs:unsignedLong, $partition-name as xs:string, $partition-number as xs:unsignedInt?, $forests-per-host as xs:unsignedInt, $host-ids as xs:unsignedLong*, $data-directory as xs:string?)"}, {"content":"tieredstorage:query-partition-create(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$partition-number as xs:unsignedInt?}, ${4:\\$forests-per-host as xs:unsignedInt}, ${5:\\$host-ids as xs:unsignedLong*}, ${6:\\$data-directory as xs:string?}, ${7:\\$large-data-directory as xs:string?})", "trigger":"tieredstorage:query-partition-create", "description":"($database-id as xs:unsignedLong, $partition-name as xs:string, $partition-number as xs:unsignedInt?, $forests-per-host as xs:unsignedInt, $host-ids as xs:unsignedLong*, $data-directory as xs:string?, $large-data-directory as xs:string?)"}, {"content":"tieredstorage:query-partition-create(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$partition-number as xs:unsignedInt?}, ${4:\\$forests-per-host as xs:unsignedInt}, ${5:\\$host-ids as xs:unsignedLong*}, ${6:\\$data-directory as xs:string?}, ${7:\\$large-data-directory as xs:string?}, ${8:\\$fast-data-directory as xs:string?})", "trigger":"tieredstorage:query-partition-create", "description":"($database-id as xs:unsignedLong, $partition-name as xs:string, $partition-number as xs:unsignedInt?, $forests-per-host as xs:unsignedInt, $host-ids as xs:unsignedLong*, $data-directory as xs:string?, $large-data-directory as xs:string?, $fast-data-directory as xs:string?)"}, {"content":"tieredstorage:query-partition-create(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$partition-number as xs:unsignedInt?}, ${4:\\$forests-per-host as xs:unsignedInt}, ${5:\\$host-ids as xs:unsignedLong*}, ${6:\\$data-directory as xs:string?}, ${7:\\$large-data-directory as xs:string?}, ${8:\\$fast-data-directory as xs:string?}, ${9:\\$options as xs:string*})", "trigger":"tieredstorage:query-partition-create", "description":"($database-id as xs:unsignedLong, $partition-name as xs:string, $partition-number as xs:unsignedInt?, $forests-per-host as xs:unsignedInt, $host-ids as xs:unsignedLong*, $data-directory as xs:string?, $large-data-directory as xs:string?, $fast-data-directory as xs:string?, $options as xs:string*)"}, {"content":"tieredstorage:database-partition-numbers(${1:\\$database-id as xs:unsignedLong})", "trigger":"tieredstorage:database-partition-numbers", "description":"($database-id as xs:unsignedLong)"}, {"content":"tieredstorage:partition-number-forests(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-number as xs:unsignedLong})", "trigger":"tieredstorage:partition-number-forests", "description":"($database-id as xs:unsignedLong, $partition-number as xs:unsignedLong)"}, {"content":"tieredstorage:partition-set-query(${1:\\$schema-database-id as xs:unsignedLong}, ${2:\\$partition-number as xs:unsignedInt}, ${3:\\$query as cts:query})", "trigger":"tieredstorage:partition-set-query", "description":"($schema-database-id as xs:unsignedLong, $partition-number as xs:unsignedInt, $query as cts:query)"}, {"content":"tieredstorage:partition-get-query(${1:\\$schema-database-id as xs:unsignedLong}, ${2:\\$partition-number as xs:unsignedInt})", "trigger":"tieredstorage:partition-get-query", "description":"($schema-database-id as xs:unsignedLong, $partition-number as xs:unsignedInt)"}, {"content":"tieredstorage:partition-delete-query(${1:\\$schema-database-id as xs:unsignedLong}, ${2:\\$partition-number as xs:unsignedInt})", "trigger":"tieredstorage:partition-delete-query", "description":"($schema-database-id as xs:unsignedLong, $partition-number as xs:unsignedInt)"}, {"content":"tieredstorage:partition-queries(${1:\\$schema-database-id as xs:unsignedLong})", "trigger":"tieredstorage:partition-queries", "description":"($schema-database-id as xs:unsignedLong)"}, {"content":"fn:trace(${1:\\$value as item()*}, ${2:\\$label as xs:string})", "trigger":"fn:trace", "description":"($value as item()*, $label as xs:string)"}, {"content":"xdmp:get-transaction-mode()", "trigger":"xdmp:get-transaction-mode", "description":"()"}, {"content":"xdmp:set-transaction-mode(${1:\\$value as xs:string})", "trigger":"xdmp:set-transaction-mode", "description":"($value as xs:string)"}, {"content":"xdmp:transaction()", "trigger":"xdmp:transaction", "description":"()"}, {"content":"xdmp:transaction(${1:\\$txn-name as xs:string})", "trigger":"xdmp:transaction", "description":"($txn-name as xs:string)"}, {"content":"xdmp:transaction(${1:\\$txn-name as xs:string}, ${2:\\$host-id as xs:unsignedLong})", "trigger":"xdmp:transaction", "description":"($txn-name as xs:string, $host-id as xs:unsignedLong)"}, {"content":"xdmp:set-transaction-name(${1:\\$name as xs:string})", "trigger":"xdmp:set-transaction-name", "description":"($name as xs:string)"}, {"content":"xdmp:set-transaction-name(${1:\\$name as xs:string}, ${2:\\$host-id as xs:unsignedLong})", "trigger":"xdmp:set-transaction-name", "description":"($name as xs:string, $host-id as xs:unsignedLong)"}, {"content":"xdmp:set-transaction-name(${1:\\$name as xs:string}, ${2:\\$host-id as xs:unsignedLong}, ${3:\\$txn-id as xs:unsignedLong})", "trigger":"xdmp:set-transaction-name", "description":"($name as xs:string, $host-id as xs:unsignedLong, $txn-id as xs:unsignedLong)"}, {"content":"xdmp:set-transaction-time-limit(${1:\\$time-limit as xs:unsignedInt})", "trigger":"xdmp:set-transaction-time-limit", "description":"($time-limit as xs:unsignedInt)"}, {"content":"xdmp:set-transaction-time-limit(${1:\\$time-limit as xs:unsignedInt}, ${2:\\$host-id as xs:unsignedLong})", "trigger":"xdmp:set-transaction-time-limit", "description":"($time-limit as xs:unsignedInt, $host-id as xs:unsignedLong)"}, {"content":"xdmp:set-transaction-time-limit(${1:\\$time-limit as xs:unsignedInt}, ${2:\\$host-id as xs:unsignedLong}, ${3:\\$txn-id as xs:unsignedLong})", "trigger":"xdmp:set-transaction-time-limit", "description":"($time-limit as xs:unsignedInt, $host-id as xs:unsignedLong, $txn-id as xs:unsignedLong)"}, {"content":"xdmp:commit()", "trigger":"xdmp:commit", "description":"()"}, {"content":"xdmp:rollback()", "trigger":"xdmp:rollback", "description":"()"}, {"content":"xdmp:transaction-commit(${1:\\$host-id as xs:unsignedLong}, ${2:\\$txn-id as xs:unsignedLong})", "trigger":"xdmp:transaction-commit", "description":"($host-id as xs:unsignedLong, $txn-id as xs:unsignedLong)"}, {"content":"xdmp:transaction-rollback(${1:\\$host-id as xs:unsignedLong}, ${2:\\$txn-id as xs:unsignedLong})", "trigger":"xdmp:transaction-rollback", "description":"($host-id as xs:unsignedLong, $txn-id as xs:unsignedLong)"}, {"content":"xdmp:xa-complete(${1:\\$forestID as xs:unsignedLong}, ${2:\\$txn-id as xs:unsignedLong}, ${3:\\$commit as xs:boolean}, ${4:\\$remember as xs:boolean})", "trigger":"xdmp:xa-complete", "description":"($forestID as xs:unsignedLong, $txn-id as xs:unsignedLong, $commit as xs:boolean, $remember as xs:boolean)"}, {"content":"xdmp:xa-forget(${1:\\$forestID as xs:unsignedLong}, ${2:\\$txn-id as xs:unsignedLong})", "trigger":"xdmp:xa-forget", "description":"($forestID as xs:unsignedLong, $txn-id as xs:unsignedLong)"}, {"content":"trgr:create-trigger(${1:\\$trigger-name as xs:string}, ${2:\\$description as xs:string?}, ${3:\\$event as element()}, ${4:\\$module as element(trgr:module)}, ${5:\\$enabled as xs:boolean}, ${6:\\$permissions as item()*})", "trigger":"trgr:create-trigger", "description":"($trigger-name as xs:string, $description as xs:string?, $event as element(), $module as element(trgr:module), $enabled as xs:boolean, $permissions as item()*)"}, {"content":"trgr:create-trigger(${1:\\$trigger-name as xs:string}, ${2:\\$description as xs:string?}, ${3:\\$event as element()}, ${4:\\$module as element(trgr:module)}, ${5:\\$enabled as xs:boolean}, ${6:\\$permissions as item()*}, ${7:\\$recursive as xs:boolean?})", "trigger":"trgr:create-trigger", "description":"($trigger-name as xs:string, $description as xs:string?, $event as element(), $module as element(trgr:module), $enabled as xs:boolean, $permissions as item()*, $recursive as xs:boolean?)"}, {"content":"trgr:create-trigger(${1:\\$trigger-name as xs:string}, ${2:\\$description as xs:string?}, ${3:\\$event as element()}, ${4:\\$module as element(trgr:module)}, ${5:\\$enabled as xs:boolean}, ${6:\\$permissions as item()*}, ${7:\\$recursive as xs:boolean?}, ${8:\\$task-priority as xs:string})", "trigger":"trgr:create-trigger", "description":"($trigger-name as xs:string, $description as xs:string?, $event as element(), $module as element(trgr:module), $enabled as xs:boolean, $permissions as item()*, $recursive as xs:boolean?, $task-priority as xs:string)"}, {"content":"trgr:trigger-set-name(${1:\\$trigger-name as xs:string}, ${2:\\$new-trigger-name as xs:string})", "trigger":"trgr:trigger-set-name", "description":"($trigger-name as xs:string, $new-trigger-name as xs:string)"}, {"content":"trgr:trigger-set-description(${1:\\$trigger-name as xs:string}, ${2:\\$description as xs:string})", "trigger":"trgr:trigger-set-description", "description":"($trigger-name as xs:string, $description as xs:string)"}, {"content":"trgr:trigger-enable(${1:\\$trigger-name as xs:string})", "trigger":"trgr:trigger-enable", "description":"($trigger-name as xs:string)"}, {"content":"trgr:trigger-disable(${1:\\$trigger-name as xs:string})", "trigger":"trgr:trigger-disable", "description":"($trigger-name as xs:string)"}, {"content":"trgr:trigger-set-module(${1:\\$trigger-name as xs:string}, ${2:\\$module as element(trgr:module)})", "trigger":"trgr:trigger-set-module", "description":"($trigger-name as xs:string, $module as element(trgr:module))"}, {"content":"trgr:trigger-set-event(${1:\\$trigger-name as xs:string}, ${2:\\$event as element()})", "trigger":"trgr:trigger-set-event", "description":"($trigger-name as xs:string, $event as element())"}, {"content":"trgr:trigger-set-permissions(${1:\\$trigger-name as xs:string}, ${2:\\$permissions as item()*})", "trigger":"trgr:trigger-set-permissions", "description":"($trigger-name as xs:string, $permissions as item()*)"}, {"content":"trgr:trigger-get-permissions(${1:\\$trigger-name as xs:string})", "trigger":"trgr:trigger-get-permissions", "description":"($trigger-name as xs:string)"}, {"content":"trgr:trigger-add-permissions(${1:\\$trigger-name as xs:string}, ${2:\\$permissions as item()*})", "trigger":"trgr:trigger-add-permissions", "description":"($trigger-name as xs:string, $permissions as item()*)"}, {"content":"trgr:trigger-remove-permissions(${1:\\$trigger-name as xs:string}, ${2:\\$permissions as item()*})", "trigger":"trgr:trigger-remove-permissions", "description":"($trigger-name as xs:string, $permissions as item()*)"}, {"content":"trgr:get-trigger(${1:\\$trigger-name as xs:string})", "trigger":"trgr:get-trigger", "description":"($trigger-name as xs:string)"}, {"content":"trgr:get-trigger-by-id(${1:\\$trigger-id as xs:unsignedLong})", "trigger":"trgr:get-trigger-by-id", "description":"($trigger-id as xs:unsignedLong)"}, {"content":"trgr:trigger-module(${1:\\$database-id as xs:unsignedLong}, ${2:\\$root as xs:string}, ${3:\\$path as xs:string})", "trigger":"trgr:trigger-module", "description":"($database-id as xs:unsignedLong, $root as xs:string, $path as xs:string)"}, {"content":"trgr:trigger-data-event(${1:\\$scope as element()}, ${2:\\$content as element()}, ${3:\\$when as element(trgr:when)})", "trigger":"trgr:trigger-data-event", "description":"($scope as element(), $content as element(), $when as element(trgr:when))"}, {"content":"trgr:trigger-database-online-event(${1:\\$user-name as xs:string})", "trigger":"trgr:trigger-database-online-event", "description":"($user-name as xs:string)"}, {"content":"trgr:document-scope(${1:\\$uri as xs:string})", "trigger":"trgr:document-scope", "description":"($uri as xs:string)"}, {"content":"trgr:collection-scope(${1:\\$uri as xs:string})", "trigger":"trgr:collection-scope", "description":"($uri as xs:string)"}, {"content":"trgr:directory-scope(${1:\\$uri as xs:string}, ${2:\\$depth as xs:string})", "trigger":"trgr:directory-scope", "description":"($uri as xs:string, $depth as xs:string)"}, {"content":"trgr:document-content(${1:\\$update-kind as xs:string})", "trigger":"trgr:document-content", "description":"($update-kind as xs:string)"}, {"content":"trgr:any-property-content()", "trigger":"trgr:any-property-content", "description":"()"}, {"content":"trgr:property-content(${1:\\$property-name as xs:QName})", "trigger":"trgr:property-content", "description":"($property-name as xs:QName)"}, {"content":"trgr:pre-commit()", "trigger":"trgr:pre-commit", "description":"()"}, {"content":"trgr:post-commit()", "trigger":"trgr:post-commit", "description":"()"}, {"content":"trgr:remove-trigger(${1:\\$trigger-name as xs:string})", "trigger":"trgr:remove-trigger", "description":"($trigger-name as xs:string)"}, {"content":"trgr:trigger-set-recursive(${1:\\$trigger-name as xs:string}, ${2:\\$recursive as xs:boolean})", "trigger":"trgr:trigger-set-recursive", "description":"($trigger-name as xs:string, $recursive as xs:boolean)"}, {"content":"trgr:trigger-set-task-priority(${1:\\$trigger-name as xs:string}, ${2:\\$task-priority as xs:string})", "trigger":"trgr:trigger-set-task-priority", "description":"($trigger-name as xs:string, $task-priority as xs:string)"}, {"content":"trgr:triggers-change-modules-database(${1:\\$old-db as xs:unsignedLong}, ${2:\\$new-db as xs:unsignedLong})", "trigger":"trgr:triggers-change-modules-database", "description":"($old-db as xs:unsignedLong, $new-db as xs:unsignedLong)"}, {"content":"trgr:any-custom-property-content()", "trigger":"trgr:any-custom-property-content", "description":"()"}, {"content":"trgr:validate-trigger-name(${1:\\$trigger-name as xs:string})", "trigger":"trgr:validate-trigger-name", "description":"($trigger-name as xs:string)"}, {"content":"trgr:validate-data-event(${1:\\$event as element(trgr:data-event)})", "trigger":"trgr:validate-data-event", "description":"($event as element(trgr:data-event))"}, {"content":"trgr:validate-scope()", "trigger":"trgr:validate-scope", "description":"()"}, {"content":"trgr:validate-content()", "trigger":"trgr:validate-content", "description":"()"}, {"content":"trgr:validate-when()", "trigger":"trgr:validate-when", "description":"()"}, {"content":"trgr:validate-database-online-event(${1:\\$database-online-event as element(trgr:database-online-event)})", "trigger":"trgr:validate-database-online-event", "description":"($database-online-event as element(trgr:database-online-event))"}, {"content":"trgr:validate-module(${1:\\$module as element(trgr:module)})", "trigger":"trgr:validate-module", "description":"($module as element(trgr:module))"}, {"content":"trgr:triggers-uri()", "trigger":"trgr:triggers-uri", "description":"()"}, {"content":"trgr:get-unique-trigger-id()", "trigger":"trgr:get-unique-trigger-id", "description":"()"}, {"content":"trgr:triggers-collection()", "trigger":"trgr:triggers-collection", "description":"()"}, {"content":"trgr:triggers-namespace()", "trigger":"trgr:triggers-namespace", "description":"()"}, {"content":"xdmp:rethrow()", "trigger":"xdmp:rethrow", "description":"()"}, {"content":"xdmp:lock-for-update(${1:\\$uri as xs:string})", "trigger":"xdmp:lock-for-update", "description":"($uri as xs:string)"}, {"content":"xdmp:save(${1:\\$path as xs:string}, ${2:\\$node as node()})", "trigger":"xdmp:save", "description":"($path as xs:string, $node as node())"}, {"content":"xdmp:save(${1:\\$path as xs:string}, ${2:\\$node as node()}, ${3:\\$options as (element()|map:map)?})", "trigger":"xdmp:save", "description":"($path as xs:string, $node as node(), $options as (element()|map:map)?)"}, {"content":"xdmp:document-load(${1:\\$location as xs:string})", "trigger":"xdmp:document-load", "description":"($location as xs:string)"}, {"content":"xdmp:document-load(${1:\\$location as xs:string}, ${2:\\$options as (element()|map:map)?})", "trigger":"xdmp:document-load", "description":"($location as xs:string, $options as (element()|map:map)?)"}, {"content":"temporal:document-load(${1:\\$temporal-collection as xs:string}, ${2:\\$location as xs:string})", "trigger":"temporal:document-load", "description":"($temporal-collection as xs:string, $location as xs:string)"}, {"content":"temporal:document-load(${1:\\$temporal-collection as xs:string}, ${2:\\$location as xs:string}, ${3:\\$options as (element()|map:map)?})", "trigger":"temporal:document-load", "description":"($temporal-collection as xs:string, $location as xs:string, $options as (element()|map:map)?)"}, {"content":"xdmp:load(${1:\\$path as xs:string})", "trigger":"xdmp:load", "description":"($path as xs:string)"}, {"content":"xdmp:load(${1:\\$path as xs:string}, ${2:\\$uri as xs:string?})", "trigger":"xdmp:load", "description":"($path as xs:string, $uri as xs:string?)"}, {"content":"xdmp:load(${1:\\$path as xs:string}, ${2:\\$uri as xs:string?}, ${3:\\$permissions as element(sec:permission)*})", "trigger":"xdmp:load", "description":"($path as xs:string, $uri as xs:string?, $permissions as element(sec:permission)*)"}, {"content":"xdmp:load(${1:\\$path as xs:string}, ${2:\\$uri as xs:string?}, ${3:\\$permissions as element(sec:permission)*}, ${4:\\$collections as xs:string*})", "trigger":"xdmp:load", "description":"($path as xs:string, $uri as xs:string?, $permissions as element(sec:permission)*, $collections as xs:string*)"}, {"content":"xdmp:load(${1:\\$path as xs:string}, ${2:\\$uri as xs:string?}, ${3:\\$permissions as element(sec:permission)*}, ${4:\\$collections as xs:string*}, ${5:\\$quality as xs:int?})", "trigger":"xdmp:load", "description":"($path as xs:string, $uri as xs:string?, $permissions as element(sec:permission)*, $collections as xs:string*, $quality as xs:int?)"}, {"content":"xdmp:load(${1:\\$path as xs:string}, ${2:\\$uri as xs:string?}, ${3:\\$permissions as element(sec:permission)*}, ${4:\\$collections as xs:string*}, ${5:\\$quality as xs:int?}, ${6:\\$default-namespace as xs:string?})", "trigger":"xdmp:load", "description":"($path as xs:string, $uri as xs:string?, $permissions as element(sec:permission)*, $collections as xs:string*, $quality as xs:int?, $default-namespace as xs:string?)"}, {"content":"xdmp:load(${1:\\$path as xs:string}, ${2:\\$uri as xs:string?}, ${3:\\$permissions as element(sec:permission)*}, ${4:\\$collections as xs:string*}, ${5:\\$quality as xs:int?}, ${6:\\$default-namespace as xs:string?}, ${7:\\$options as xs:string*})", "trigger":"xdmp:load", "description":"($path as xs:string, $uri as xs:string?, $permissions as element(sec:permission)*, $collections as xs:string*, $quality as xs:int?, $default-namespace as xs:string?, $options as xs:string*)"}, {"content":"xdmp:load(${1:\\$path as xs:string}, ${2:\\$uri as xs:string?}, ${3:\\$permissions as element(sec:permission)*}, ${4:\\$collections as xs:string*}, ${5:\\$quality as xs:int?}, ${6:\\$default-namespace as xs:string?}, ${7:\\$options as xs:string*}, ${8:\\$forest-ids as xs:unsignedLong*})", "trigger":"xdmp:load", "description":"($path as xs:string, $uri as xs:string?, $permissions as element(sec:permission)*, $collections as xs:string*, $quality as xs:int?, $default-namespace as xs:string?, $options as xs:string*, $forest-ids as xs:unsignedLong*)"}, {"content":"xdmp:document-insert(${1:\\$uri as xs:string}, ${2:\\$root as node()})", "trigger":"xdmp:document-insert", "description":"($uri as xs:string, $root as node())"}, {"content":"xdmp:document-insert(${1:\\$uri as xs:string}, ${2:\\$root as node()}, ${3:\\$options as (element()|map:map)?})", "trigger":"xdmp:document-insert", "description":"($uri as xs:string, $root as node(), $options as (element()|map:map)?)"}, {"content":"temporal:statement-set-system-time(${1:\\$system-time as xs:dateTime})", "trigger":"temporal:statement-set-system-time", "description":"($system-time as xs:dateTime)"}, {"content":"temporal:statement-get-system-time()", "trigger":"temporal:statement-get-system-time", "description":"()"}, {"content":"temporal:document-insert(${1:\\$temporal-collection as xs:string}, ${2:\\$uri as xs:string}, ${3:\\$root as node()})", "trigger":"temporal:document-insert", "description":"($temporal-collection as xs:string, $uri as xs:string, $root as node())"}, {"content":"temporal:document-insert(${1:\\$temporal-collection as xs:string}, ${2:\\$uri as xs:string}, ${3:\\$root as node()}, ${4:\\$permissions as element(sec:permission)*})", "trigger":"temporal:document-insert", "description":"($temporal-collection as xs:string, $uri as xs:string, $root as node(), $permissions as element(sec:permission)*)"}, {"content":"temporal:document-insert(${1:\\$temporal-collection as xs:string}, ${2:\\$uri as xs:string}, ${3:\\$root as node()}, ${4:\\$permissions as element(sec:permission)*}, ${5:\\$collections as xs:string*})", "trigger":"temporal:document-insert", "description":"($temporal-collection as xs:string, $uri as xs:string, $root as node(), $permissions as element(sec:permission)*, $collections as xs:string*)"}, {"content":"temporal:document-insert(${1:\\$temporal-collection as xs:string}, ${2:\\$uri as xs:string}, ${3:\\$root as node()}, ${4:\\$permissions as element(sec:permission)*}, ${5:\\$collections as xs:string*}, ${6:\\$quality as xs:int?})", "trigger":"temporal:document-insert", "description":"($temporal-collection as xs:string, $uri as xs:string, $root as node(), $permissions as element(sec:permission)*, $collections as xs:string*, $quality as xs:int?)"}, {"content":"temporal:document-insert(${1:\\$temporal-collection as xs:string}, ${2:\\$uri as xs:string}, ${3:\\$root as node()}, ${4:\\$permissions as element(sec:permission)*}, ${5:\\$collections as xs:string*}, ${6:\\$quality as xs:int?}, ${7:\\$forest-ids as xs:unsignedLong*})", "trigger":"temporal:document-insert", "description":"($temporal-collection as xs:string, $uri as xs:string, $root as node(), $permissions as element(sec:permission)*, $collections as xs:string*, $quality as xs:int?, $forest-ids as xs:unsignedLong*)"}, {"content":"xdmp:directory-create(${1:\\$uri as xs:string})", "trigger":"xdmp:directory-create", "description":"($uri as xs:string)"}, {"content":"xdmp:directory-create(${1:\\$uri as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "trigger":"xdmp:directory-create", "description":"($uri as xs:string, $permissions as element(sec:permission)*)"}, {"content":"xdmp:directory-create(${1:\\$uri as xs:string}, ${2:\\$permissions as element(sec:permission)*}, ${3:\\$collections as xs:string*})", "trigger":"xdmp:directory-create", "description":"($uri as xs:string, $permissions as element(sec:permission)*, $collections as xs:string*)"}, {"content":"xdmp:directory-create(${1:\\$uri as xs:string}, ${2:\\$permissions as element(sec:permission)*}, ${3:\\$collections as xs:string*}, ${4:\\$quality as xs:int?})", "trigger":"xdmp:directory-create", "description":"($uri as xs:string, $permissions as element(sec:permission)*, $collections as xs:string*, $quality as xs:int?)"}, {"content":"xdmp:directory-create(${1:\\$uri as xs:string}, ${2:\\$permissions as element(sec:permission)*}, ${3:\\$collections as xs:string*}, ${4:\\$quality as xs:int?}, ${5:\\$forest-ids as xs:unsignedLong*})", "trigger":"xdmp:directory-create", "description":"($uri as xs:string, $permissions as element(sec:permission)*, $collections as xs:string*, $quality as xs:int?, $forest-ids as xs:unsignedLong*)"}, {"content":"xdmp:document-delete(${1:\\$uri as xs:string})", "trigger":"xdmp:document-delete", "description":"($uri as xs:string)"}, {"content":"temporal:document-delete(${1:\\$temporal-collection as xs:string}, ${2:\\$uri as xs:string})", "trigger":"temporal:document-delete", "description":"($temporal-collection as xs:string, $uri as xs:string)"}, {"content":"xdmp:directory-delete(${1:\\$uri as xs:string})", "trigger":"xdmp:directory-delete", "description":"($uri as xs:string)"}, {"content":"xdmp:collection-delete(${1:\\$uri as xs:string})", "trigger":"xdmp:collection-delete", "description":"($uri as xs:string)"}, {"content":"xdmp:node-replace(${1:\\$old as node()}, ${2:\\$new as node()})", "trigger":"xdmp:node-replace", "description":"($old as node(), $new as node())"}, {"content":"xdmp:node-delete(${1:\\$old as node()})", "trigger":"xdmp:node-delete", "description":"($old as node())"}, {"content":"xdmp:node-insert-before(${1:\\$sibling as node()}, ${2:\\$new as node()})", "trigger":"xdmp:node-insert-before", "description":"($sibling as node(), $new as node())"}, {"content":"xdmp:node-insert-after(${1:\\$sibling as node()}, ${2:\\$new as node()})", "trigger":"xdmp:node-insert-after", "description":"($sibling as node(), $new as node())"}, {"content":"xdmp:node-insert-child(${1:\\$parent as node()}, ${2:\\$new as node()})", "trigger":"xdmp:node-insert-child", "description":"($parent as node(), $new as node())"}, {"content":"xdmp:document-add-collections(${1:\\$uri as xs:string}, ${2:\\$collections as xs:string*})", "trigger":"xdmp:document-add-collections", "description":"($uri as xs:string, $collections as xs:string*)"}, {"content":"xdmp:document-remove-collections(${1:\\$uri as xs:string}, ${2:\\$collections as xs:string*})", "trigger":"xdmp:document-remove-collections", "description":"($uri as xs:string, $collections as xs:string*)"}, {"content":"xdmp:document-set-collections(${1:\\$uri as xs:string}, ${2:\\$collections as xs:string*})", "trigger":"xdmp:document-set-collections", "description":"($uri as xs:string, $collections as xs:string*)"}, {"content":"xdmp:document-put-metadata(${1:\\$uri as xs:string}, ${2:\\$metadata as map:map})", "trigger":"xdmp:document-put-metadata", "description":"($uri as xs:string, $metadata as map:map)"}, {"content":"xdmp:document-set-metadata(${1:\\$uri as xs:string}, ${2:\\$metadata as map:map})", "trigger":"xdmp:document-set-metadata", "description":"($uri as xs:string, $metadata as map:map)"}, {"content":"xdmp:document-remove-metadata(${1:\\$uri as xs:string}, ${2:\\$metadata as xs:string*})", "trigger":"xdmp:document-remove-metadata", "description":"($uri as xs:string, $metadata as xs:string*)"}, {"content":"xdmp:document-add-permissions(${1:\\$uri as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "trigger":"xdmp:document-add-permissions", "description":"($uri as xs:string, $permissions as element(sec:permission)*)"}, {"content":"xdmp:document-remove-permissions(${1:\\$uri as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "trigger":"xdmp:document-remove-permissions", "description":"($uri as xs:string, $permissions as element(sec:permission)*)"}, {"content":"xdmp:document-set-permissions(${1:\\$uri as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "trigger":"xdmp:document-set-permissions", "description":"($uri as xs:string, $permissions as element(sec:permission)*)"}, {"content":"xdmp:document-set-quality(${1:\\$uri as xs:string}, ${2:\\$quality as xs:integer})", "trigger":"xdmp:document-set-quality", "description":"($uri as xs:string, $quality as xs:integer)"}, {"content":"xdmp:merge()", "trigger":"xdmp:merge", "description":"()"}, {"content":"xdmp:merge(${1:\\$options as (element()|map:map)?})", "trigger":"xdmp:merge", "description":"($options as (element()|map:map)?)"}, {"content":"xdmp:merging()", "trigger":"xdmp:merging", "description":"()"}, {"content":"xdmp:lock-acquire(${1:\\$uri as xs:string})", "trigger":"xdmp:lock-acquire", "description":"($uri as xs:string)"}, {"content":"xdmp:lock-acquire(${1:\\$uri as xs:string}, ${2:\\$scope as xs:string?})", "trigger":"xdmp:lock-acquire", "description":"($uri as xs:string, $scope as xs:string?)"}, {"content":"xdmp:lock-acquire(${1:\\$uri as xs:string}, ${2:\\$scope as xs:string?}, ${3:\\$depth as xs:string?})", "trigger":"xdmp:lock-acquire", "description":"($uri as xs:string, $scope as xs:string?, $depth as xs:string?)"}, {"content":"xdmp:lock-acquire(${1:\\$uri as xs:string}, ${2:\\$scope as xs:string?}, ${3:\\$depth as xs:string?}, ${4:\\$owner as item()*})", "trigger":"xdmp:lock-acquire", "description":"($uri as xs:string, $scope as xs:string?, $depth as xs:string?, $owner as item()*)"}, {"content":"xdmp:lock-acquire(${1:\\$uri as xs:string}, ${2:\\$scope as xs:string?}, ${3:\\$depth as xs:string?}, ${4:\\$owner as item()*}, ${5:\\$timeout as xs:unsignedLong?})", "trigger":"xdmp:lock-acquire", "description":"($uri as xs:string, $scope as xs:string?, $depth as xs:string?, $owner as item()*, $timeout as xs:unsignedLong?)"}, {"content":"xdmp:lock-release(${1:\\$uri as xs:string})", "trigger":"xdmp:lock-release", "description":"($uri as xs:string)"}, {"content":"xdmp:document-set-properties(${1:\\$uri as xs:string}, ${2:\\$props as element()*})", "trigger":"xdmp:document-set-properties", "description":"($uri as xs:string, $props as element()*)"}, {"content":"xdmp:document-add-properties(${1:\\$uri as xs:string}, ${2:\\$props as element()*})", "trigger":"xdmp:document-add-properties", "description":"($uri as xs:string, $props as element()*)"}, {"content":"xdmp:document-remove-properties(${1:\\$uri as xs:string}, ${2:\\$property-names as xs:QName*})", "trigger":"xdmp:document-remove-properties", "description":"($uri as xs:string, $property-names as xs:QName*)"}, {"content":"xdmp:document-set-property(${1:\\$uri as xs:string}, ${2:\\$prop as element()})", "trigger":"xdmp:document-set-property", "description":"($uri as xs:string, $prop as element())"}, {"content":"xdmp:document-assign(${1:\\$uri as xs:string}, ${2:\\$forest-count as xs:positiveInteger})", "trigger":"xdmp:document-assign", "description":"($uri as xs:string, $forest-count as xs:positiveInteger)"}, {"content":"xdmp:document-assign(${1:\\$uri as xs:string}, ${2:\\$forest-count as xs:positiveInteger}, ${3:\\$assignment-policy as xs:string})", "trigger":"xdmp:document-assign", "description":"($uri as xs:string, $forest-count as xs:positiveInteger, $assignment-policy as xs:string)"}, {"content":"xdmp:document-partition-assign(${1:\\$root as node()})", "trigger":"xdmp:document-partition-assign", "description":"($root as node())"}, {"content":"xdmp:document-partition-assign(${1:\\$root as node()}, ${2:\\$partition-queries as map:map})", "trigger":"xdmp:document-partition-assign", "description":"($root as node(), $partition-queries as map:map)"}, {"content":"xdmp:database-partition-forests(${1:\\$value as xs:anyAtomicType})", "trigger":"xdmp:database-partition-forests", "description":"($value as xs:anyAtomicType)"}, {"content":"view:schema-create(${1:\\$schema-name as xs:string}, ${2:\\$permissions as item()*})", "trigger":"view:schema-create", "description":"($schema-name as xs:string, $permissions as item()*)"}, {"content":"view:schema-remove(${1:\\$schema-name as xs:string})", "trigger":"view:schema-remove", "description":"($schema-name as xs:string)"}, {"content":"view:schema-get(${1:\\$schema-name as xs:string})", "trigger":"view:schema-get", "description":"($schema-name as xs:string)"}, {"content":"view:schema-set-permissions(${1:\\$schema-name as xs:string}, ${2:\\$permissions as item()*})", "trigger":"view:schema-set-permissions", "description":"($schema-name as xs:string, $permissions as item()*)"}, {"content":"view:schema-add-permissions(${1:\\$schema-name as xs:string}, ${2:\\$permissions as item()*})", "trigger":"view:schema-add-permissions", "description":"($schema-name as xs:string, $permissions as item()*)"}, {"content":"view:schema-remove-permissions(${1:\\$schema-name as xs:string}, ${2:\\$permissions as item()*})", "trigger":"view:schema-remove-permissions", "description":"($schema-name as xs:string, $permissions as item()*)"}, {"content":"view:create(${1:\\$schema-name as xs:string}, ${2:\\$name as xs:string}, ${3:\\$scope as element(*,view:view-scope)}, ${4:\\$columns as element(view:column)*}, ${5:\\$fields as element(view:field)*}, ${6:\\$permissions as item()*})", "trigger":"view:create", "description":"($schema-name as xs:string, $name as xs:string, $scope as element(*,view:view-scope), $columns as element(view:column)*, $fields as element(view:field)*, $permissions as item()*)"}, {"content":"view:get(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string})", "trigger":"view:get", "description":"($schema-name as xs:string, $view-name as xs:string)"}, {"content":"view:get-by-id(${1:\\$view-id as xs:unsignedLong})", "trigger":"view:get-by-id", "description":"($view-id as xs:unsignedLong)"}, {"content":"view:remove(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string})", "trigger":"view:remove", "description":"($schema-name as xs:string, $view-name as xs:string)"}, {"content":"view:set-name(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string}, ${3:\\$new-name as xs:string})", "trigger":"view:set-name", "description":"($schema-name as xs:string, $view-name as xs:string, $new-name as xs:string)"}, {"content":"view:set-ordered(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string}, ${3:\\$ordered as xs:boolean})", "trigger":"view:set-ordered", "description":"($schema-name as xs:string, $view-name as xs:string, $ordered as xs:boolean)"}, {"content":"view:get-ordered(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string})", "trigger":"view:get-ordered", "description":"($schema-name as xs:string, $view-name as xs:string)"}, {"content":"view:set-view-scope(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string}, ${3:\\$scope as element(*,view:view-scope)})", "trigger":"view:set-view-scope", "description":"($schema-name as xs:string, $view-name as xs:string, $scope as element(*,view:view-scope))"}, {"content":"view:set-permissions(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string}, ${3:\\$permissions as item()*})", "trigger":"view:set-permissions", "description":"($schema-name as xs:string, $view-name as xs:string, $permissions as item()*)"}, {"content":"view:add-permissions(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string}, ${3:\\$permissions as item()*})", "trigger":"view:add-permissions", "description":"($schema-name as xs:string, $view-name as xs:string, $permissions as item()*)"}, {"content":"view:remove-permissions(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string}, ${3:\\$permissions as item()*})", "trigger":"view:remove-permissions", "description":"($schema-name as xs:string, $view-name as xs:string, $permissions as item()*)"}, {"content":"view:set-columns(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string}, ${3:\\$columns as element(view:column)*})", "trigger":"view:set-columns", "description":"($schema-name as xs:string, $view-name as xs:string, $columns as element(view:column)*)"}, {"content":"view:add-column(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string}, ${3:\\$column as element(view:column)})", "trigger":"view:add-column", "description":"($schema-name as xs:string, $view-name as xs:string, $column as element(view:column))"}, {"content":"view:remove-column(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string}, ${3:\\$column-name as xs:string})", "trigger":"view:remove-column", "description":"($schema-name as xs:string, $view-name as xs:string, $column-name as xs:string)"}, {"content":"view:columns(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string})", "trigger":"view:columns", "description":"($schema-name as xs:string, $view-name as xs:string)"}, {"content":"view:get-column(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string}, ${3:\\$column-name as xs:string})", "trigger":"view:get-column", "description":"($schema-name as xs:string, $view-name as xs:string, $column-name as xs:string)"}, {"content":"view:schemas()", "trigger":"view:schemas", "description":"()"}, {"content":"view:views(${1:\\$schema-name as xs:string})", "trigger":"view:views", "description":"($schema-name as xs:string)"}, {"content":"view:element-view-scope(${1:\\$localname as xs:QName})", "trigger":"view:element-view-scope", "description":"($localname as xs:QName)"}, {"content":"view:collection-view-scope(${1:\\$collection as xs:string})", "trigger":"view:collection-view-scope", "description":"($collection as xs:string)"}, {"content":"view:column(${1:\\$name as xs:string}, ${2:\\$range-index as cts:reference})", "trigger":"view:column", "description":"($name as xs:string, $range-index as cts:reference)"}, {"content":"view:collection()", "trigger":"view:collection", "description":"()"}, {"content":"view:get-view-scope(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string})", "trigger":"view:get-view-scope", "description":"($schema-name as xs:string, $view-name as xs:string)"}, {"content":"view:remove-by-id(${1:\\$view-id as xs:unsignedLong})", "trigger":"view:remove-by-id", "description":"($view-id as xs:unsignedLong)"}, {"content":"view:schema-get-permissions(${1:\\$schema-name as xs:string})", "trigger":"view:schema-get-permissions", "description":"($schema-name as xs:string)"}, {"content":"view:get-permissions(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string})", "trigger":"view:get-permissions", "description":"($schema-name as xs:string, $view-name as xs:string)"}, {"content":"view:set-fields(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string}, ${3:\\$fields as element(view:field)*})", "trigger":"view:set-fields", "description":"($schema-name as xs:string, $view-name as xs:string, $fields as element(view:field)*)"}, {"content":"view:add-field(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string}, ${3:\\$field as element(view:field)})", "trigger":"view:add-field", "description":"($schema-name as xs:string, $view-name as xs:string, $field as element(view:field))"}, {"content":"view:remove-field(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string}, ${3:\\$field-name as xs:string})", "trigger":"view:remove-field", "description":"($schema-name as xs:string, $view-name as xs:string, $field-name as xs:string)"}, {"content":"view:fields(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string})", "trigger":"view:fields", "description":"($schema-name as xs:string, $view-name as xs:string)"}, {"content":"view:get-field(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string}, ${3:\\$field-name as xs:string})", "trigger":"view:get-field", "description":"($schema-name as xs:string, $view-name as xs:string, $field-name as xs:string)"}, {"content":"view:get-bindings(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string})", "trigger":"view:get-bindings", "description":"($schema-name as xs:string, $view-name as xs:string)"}, {"content":"view:field(${1:\\$name as xs:string})", "trigger":"view:field", "description":"($name as xs:string)"}, {"content":"cts:walk(${1:\\$node as node()}, ${2:\\$query as cts:query}, ${3:\\$expr as item()*})", "trigger":"cts:walk", "description":"($node as node(), $query as cts:query, $expr as item()*)"}, {"content":"cts:walk(${1:\\$node as node()}, ${2:\\$query as cts:query}, ${3:\\$callback as function(xs:string, text(), cts:query*, xs:integer) as xs:string?})", "trigger":"cts:walk", "description":"($node as node(), $query as cts:query, $callback as function(xs:string, text(), cts:query*, xs:integer) as xs:string?)"}, {"content":"cts:highlight(${1:\\$node as node()}, ${2:\\$query as cts:query}, ${3:\\$expr as item()*})", "trigger":"cts:highlight", "description":"($node as node(), $query as cts:query, $expr as item()*)"}, {"content":"cts:highlight(${1:\\$node as node()}, ${2:\\$query as cts:query}, ${3:\\$callback as function(NodeBuilder, xs:string, text(), cts:query*, xs:integer) as xs:string?}, ${4:\\$builder as NodeBuilder})", "trigger":"cts:highlight", "description":"($node as node(), $query as cts:query, $callback as function(NodeBuilder, xs:string, text(), cts:query*, xs:integer) as xs:string?, $builder as NodeBuilder)"}, {"content":"cts:element-walk(${1:\\$node as node()}, ${2:\\$element as xs:QName*}, ${3:\\$expr as item()*})", "trigger":"cts:element-walk", "description":"($node as node(), $element as xs:QName*, $expr as item()*)"}, {"content":"cts:element-walk(${1:\\$node as node()}, ${2:\\$element as xs:QName*}, ${3:\\$callback as function(NodeBuilder, node()) as xs:string?}, ${4:\\$builder as NodeBuilder})", "trigger":"cts:element-walk", "description":"($node as node(), $element as xs:QName*, $callback as function(NodeBuilder, node()) as xs:string?, $builder as NodeBuilder)"}, {"content":"ooxml:runs-merge(${1:\\$nodes as node()*})", "trigger":"ooxml:runs-merge", "description":"($nodes as node()*)"}, {"content":"xhtml:clean(${1:\\$doc as node()?})", "trigger":"xhtml:clean", "description":"($doc as node()?)"}, {"content":"xhtml:restructure(${1:\\$doc as node()?})", "trigger":"xhtml:restructure", "description":"($doc as node()?)"}, {"content":"xhtml:add-lists(${1:\\$doc as node()?})", "trigger":"xhtml:add-lists", "description":"($doc as node()?)"}, {"content":"xinc:link-expand(${1:\\$context as node()}, ${2:\\$ref as element(xi:include)})", "trigger":"xinc:link-expand", "description":"($context as node(), $ref as element(xi:include))"}, {"content":"xinc:node-expand(${1:\\$node as node()})", "trigger":"xinc:node-expand", "description":"($node as node())"}, {"content":"xinc:link-references(${1:\\$node as node()})", "trigger":"xinc:link-references", "description":"($node as node())"}, {"content":"xp:parse-xpointer(${1:\\$xpointer as xs:string})", "trigger":"xp:parse-xpointer", "description":"($xpointer as xs:string)"}, {"content":"xp:path-from-element-scheme(${1:\\$part as xs:string})", "trigger":"xp:path-from-element-scheme", "description":"($part as xs:string)"}, {"content":"xp:alt-path-from-element-scheme(${1:\\$part as xs:string})", "trigger":"xp:alt-path-from-element-scheme", "description":"($part as xs:string)"}, {"content":"xp:do-dereference(${1:\\$context as node()}, ${2:\\$path as xs:string}, ${3:\\$ns-bindings as xs:string*})", "trigger":"xp:do-dereference", "description":"($context as node(), $path as xs:string, $ns-bindings as xs:string*)"}, {"content":"xp:dereference(${1:\\$context as node()}, ${2:\\$xpointer as xs:string})", "trigger":"xp:dereference", "description":"($context as node(), $xpointer as xs:string)"}, {"content":"fn:regex-group(${1:\\$group-number as xs:integer})", "trigger":"fn:regex-group", "description":"($group-number as xs:integer)"}, {"content":"fn:current()", "trigger":"fn:current", "description":"()"}, {"content":"xdmp:current-position()", "trigger":"xdmp:current-position", "description":"()"}, {"content":"xdmp:current-last()", "trigger":"xdmp:current-last", "description":"()"}, {"content":"fn:system-property(${1:\\$property-name as xs:string})", "trigger":"fn:system-property", "description":"($property-name as xs:string)"}, {"content":"fn:element-available(${1:\\$element-name as xs:string})", "trigger":"fn:element-available", "description":"($element-name as xs:string)"}, {"content":"fn:key(${1:\\$key-name as xs:string}, ${2:\\$key-value as xs:string})", "trigger":"fn:key", "description":"($key-name as xs:string, $key-value as xs:string)"}, {"content":"fn:key(${1:\\$key-name as xs:string}, ${2:\\$key-value as xs:string}, ${3:\\$top as node()})", "trigger":"fn:key", "description":"($key-name as xs:string, $key-value as xs:string, $top as node())"}, {"content":"fn:current-group()", "trigger":"fn:current-group", "description":"()"}, {"content":"fn:current-grouping-key()", "trigger":"fn:current-grouping-key", "description":"()"}, {"content":"fn:type-available(${1:\\$type-name as xs:string})", "trigger":"fn:type-available", "description":"($type-name as xs:string)"}, {"content":"fn:function-available(${1:\\$function-name as xs:string})", "trigger":"fn:function-available", "description":"($function-name as xs:string)"}, {"content":"fn:function-available(${1:\\$function-name as xs:string}, ${2:\\$arity as xs:integer})", "trigger":"fn:function-available", "description":"($function-name as xs:string, $arity as xs:integer)"}, {"content":"fn:unparsed-entity-uri(${1:\\$entity-name as xs:string})", "trigger":"fn:unparsed-entity-uri", "description":"($entity-name as xs:string)"}, {"content":"fn:unparsed-entity-public-id(${1:\\$entity-name as xs:string})", "trigger":"fn:unparsed-entity-public-id", "description":"($entity-name as xs:string)"}, {"content":"xdmp:zip-manifest(${1:\\$zipfile as binary()})", "trigger":"xdmp:zip-manifest", "description":"($zipfile as binary())"}, {"content":"xdmp:zip-get(${1:\\$zipfile as binary()}, ${2:\\$name as xs:string})", "trigger":"xdmp:zip-get", "description":"($zipfile as binary(), $name as xs:string)"}, {"content":"xdmp:zip-get(${1:\\$zipfile as binary()}, ${2:\\$name as xs:string}, ${3:\\$options as (element()|map:map)?})", "trigger":"xdmp:zip-get", "description":"($zipfile as binary(), $name as xs:string, $options as (element()|map:map)?)"}, {"content":"xdmp:zip-create(${1:\\$manifest as node()}, ${2:\\$nodes as node()+})", "trigger":"xdmp:zip-create", "description":"($manifest as node(), $nodes as node()+)"}, {"content":"xdmp:gzip(${1:\\$node as node()})", "trigger":"xdmp:gzip", "description":"($node as node())"}, {"content":"xdmp:gunzip(${1:\\$gzipnode as binary()}, ${2:\\$options as (element()|map:map)?})", "trigger":"xdmp:gunzip", "description":"($gzipnode as binary(), $options as (element()|map:map)?)"}]