[{"content": "admin:appserver-add-module-location(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$module-locations as element(gr:module-location)*})", "description": "($config,$appserver-id,$module-locations)", "trigger": "admin:appserver-add-module-location"}, {"content": "admin:appserver-add-namespace(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$namespaces as element(gr:namespace)*})", "description": "($config,$appserver-id,$namespaces)", "trigger": "admin:appserver-add-namespace"}, {"content": "admin:appserver-add-request-blackout(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$request-blackouts as element(gr:request-blackout)*})", "description": "($config,$appserver-id,$request-blackouts)", "trigger": "admin:appserver-add-request-blackout"}, {"content": "admin:appserver-add-schema(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$schemas as element(gr:schema)*})", "description": "($config,$appserver-id,$schemas)", "trigger": "admin:appserver-add-schema"}, {"content": "admin:appserver-add-using-namespace(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$namespaces as element(gr:using-namespace)*})", "description": "($config,$appserver-id,$namespaces)", "trigger": "admin:appserver-add-using-namespace"}, {"content": "admin:appserver-copy(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$target-group-id as xs:unsignedLong?}, ${4:\\$appserver-name as xs:string}, ${5:\\$port as xs:unsignedLong})", "description": "($config,$appserver-id,$target-group-id,$appserver-name,$port)", "trigger": "admin:appserver-copy"}, {"content": "admin:appserver-delete(${1:\\$config as element(configuration)}, ${2:\\$appserver-ids as xs:unsignedLong*})", "description": "($config,$appserver-ids)", "trigger": "admin:appserver-delete"}, {"content": "admin:appserver-delete-module-location(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$module-locations as element(gr:module-location)*})", "description": "($config,$appserver-id,$module-locations)", "trigger": "admin:appserver-delete-module-location"}, {"content": "admin:appserver-delete-namespace(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$namespaces as element(gr:namespace)*})", "description": "($config,$appserver-id,$namespaces)", "trigger": "admin:appserver-delete-namespace"}, {"content": "admin:appserver-delete-request-blackout(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$blackouts as element(gr:request-blackout)*})", "description": "($config,$appserver-id,$blackouts)", "trigger": "admin:appserver-delete-request-blackout"}, {"content": "admin:appserver-delete-schema(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$schemas as element(gr:schema)*})", "description": "($config,$appserver-id,$schemas)", "trigger": "admin:appserver-delete-schema"}, {"content": "admin:appserver-delete-using-namespace(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$namespaces as element(gr:using-namespace)*})", "description": "($config,$appserver-id,$namespaces)", "trigger": "admin:appserver-delete-using-namespace"}, {"content": "admin:appserver-exists(${1:\\$config as element(configuration)}, ${2:\\$group-ids as xs:unsignedLong*}, ${3:\\$appserver-name as xs:string})", "description": "($config,$group-ids,$appserver-name)", "trigger": "admin:appserver-exists"}, {"content": "admin:appserver-get-address(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-address"}, {"content": "admin:appserver-get-authentication(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-authentication"}, {"content": "admin:appserver-get-backlog(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-backlog"}, {"content": "admin:appserver-get-collation(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-collation"}, {"content": "admin:appserver-get-compute-content-length(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-compute-content-length"}, {"content": "admin:appserver-get-concurrent-request-limit(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-concurrent-request-limit"}, {"content": "admin:appserver-get-connection-timeout(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-connection-timeout"}, {"content": "admin:appserver-get-database(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-database"}, {"content": "admin:appserver-get-debug-allow(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-debug-allow"}, {"content": "admin:appserver-get-default-query-time-limit(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-default-query-time-limit"}, {"content": "admin:appserver-get-default-time-limit(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-default-time-limit"}, {"content": "admin:appserver-get-default-user(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-default-user"}, {"content": "admin:appserver-get-default-xquery-version(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-default-xquery-version"}, {"content": "admin:appserver-get-display-last-login(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-display-last-login"}, {"content": "admin:appserver-get-distribute-timestamps(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-distribute-timestamps"}, {"content": "admin:appserver-get-enabled(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-enabled"}, {"content": "admin:appserver-get-error-handler(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-error-handler"}, {"content": "admin:appserver-get-external-security(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-external-security"}, {"content": "admin:appserver-get-group-id(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-group-id"}, {"content": "admin:appserver-get-host-ids(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-host-ids"}, {"content": "admin:appserver-get-id(${1:\\$config as element(configuration)}, ${2:\\$group-ids as xs:unsignedLong*}, ${3:\\$appserver-name as xs:string})", "description": "($config,$group-ids,$appserver-name)", "trigger": "admin:appserver-get-id"}, {"content": "admin:appserver-get-internal-security(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-internal-security"}, {"content": "admin:appserver-get-keep-alive-timeout(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-keep-alive-timeout"}, {"content": "admin:appserver-get-last-login(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-last-login"}, {"content": "admin:appserver-get-log-errors(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-log-errors"}, {"content": "admin:appserver-get-max-query-time-limit(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-max-query-time-limit"}, {"content": "admin:appserver-get-max-time-limit(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-max-time-limit"}, {"content": "admin:appserver-get-module-locations(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-module-locations"}, {"content": "admin:appserver-get-modules-database(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-modules-database"}, {"content": "admin:appserver-get-multi-version-concurrency-control(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-multi-version-concurrency-control"}, {"content": "admin:appserver-get-name(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-name"}, {"content": "admin:appserver-get-namespaces(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-namespaces"}, {"content": "admin:appserver-get-output-byte-order-mark(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-output-byte-order-mark"}, {"content": "admin:appserver-get-output-cdata-section-localname(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-output-cdata-section-localname"}, {"content": "admin:appserver-get-output-cdata-section-namespace-uri(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-output-cdata-section-namespace-uri"}, {"content": "admin:appserver-get-output-doctype-public(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-output-doctype-public"}, {"content": "admin:appserver-get-output-doctype-system(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-output-doctype-system"}, {"content": "admin:appserver-get-output-encoding(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-output-encoding"}, {"content": "admin:appserver-get-output-escape-uri-attributes(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-output-escape-uri-attributes"}, {"content": "admin:appserver-get-output-include-content-type(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-output-include-content-type"}, {"content": "admin:appserver-get-output-include-default-attributes(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-output-include-default-attributes"}, {"content": "admin:appserver-get-output-indent(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-output-indent"}, {"content": "admin:appserver-get-output-indent-untyped(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-output-indent-untyped"}, {"content": "admin:appserver-get-output-media-type(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-output-media-type"}, {"content": "admin:appserver-get-output-method(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-output-method"}, {"content": "admin:appserver-get-output-normalization-form(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-output-normalization-form"}, {"content": "admin:appserver-get-output-omit-xml-declaration(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-output-omit-xml-declaration"}, {"content": "admin:appserver-get-output-sgml-character-entities(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-output-sgml-character-entities"}, {"content": "admin:appserver-get-output-standalone(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-output-standalone"}, {"content": "admin:appserver-get-output-undeclare-prefixes(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-output-undeclare-prefixes"}, {"content": "admin:appserver-get-output-version(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-output-version"}, {"content": "admin:appserver-get-port(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-port"}, {"content": "admin:appserver-get-pre-commit-trigger-depth(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-pre-commit-trigger-depth"}, {"content": "admin:appserver-get-pre-commit-trigger-limit(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-pre-commit-trigger-limit"}, {"content": "admin:appserver-get-privilege(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-privilege"}, {"content": "admin:appserver-get-profile-allow(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-profile-allow"}, {"content": "admin:appserver-get-request-blackouts(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-request-blackouts"}, {"content": "admin:appserver-get-request-timeout(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-request-timeout"}, {"content": "admin:appserver-get-rewrite-resolves-globally(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-rewrite-resolves-globally"}, {"content": "admin:appserver-get-root(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-root"}, {"content": "admin:appserver-get-schemas(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-schemas"}, {"content": "admin:appserver-get-session-timeout(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-session-timeout"}, {"content": "admin:appserver-get-ssl-allow-sslv3(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-ssl-allow-sslv3"}, {"content": "admin:appserver-get-ssl-allow-tls(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-ssl-allow-tls"}, {"content": "admin:appserver-get-ssl-certificate-template(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-ssl-certificate-template"}, {"content": "admin:appserver-get-ssl-ciphers(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-ssl-ciphers"}, {"content": "admin:appserver-get-ssl-client-certificate-authorities(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-ssl-client-certificate-authorities"}, {"content": "admin:appserver-get-ssl-hostname(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-ssl-hostname"}, {"content": "admin:appserver-get-ssl-require-client-certificate(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-ssl-require-client-certificate"}, {"content": "admin:appserver-get-static-expires(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-static-expires"}, {"content": "admin:appserver-get-threads(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-threads"}, {"content": "admin:appserver-get-type(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-type"}, {"content": "admin:appserver-get-url-rewriter(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-url-rewriter"}, {"content": "admin:appserver-get-using-namespaces(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong})", "description": "($config,$appserver-id)", "trigger": "admin:appserver-get-using-namespaces"}, {"content": "admin:appserver-one-time-request-blackout(${1:\\$users as xs:unsignedLong*}, ${2:\\$roles as xs:unsignedLong*}, ${3:\\$start as xs:dateTime}, ${4:\\$end as xs:dateTime?}, ${5:\\$duration as xs:duration?})", "description": "($users,$roles,$start,$end,$duration)", "trigger": "admin:appserver-one-time-request-blackout"}, {"content": "admin:appserver-recurring-request-blackout(${1:\\$users as xs:unsignedLong*}, ${2:\\$roles as xs:unsignedLong*}, ${3:\\$days as xs:string*}, ${4:\\$start-time as xs:time?}, ${5:\\$end-time as xs:time?}, ${6:\\$duration as xs:duration?})", "description": "($users,$roles,$days,$start-time,$end-time,$duration)", "trigger": "admin:appserver-recurring-request-blackout"}, {"content": "admin:appserver-set-address(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-address"}, {"content": "admin:appserver-set-authentication(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-authentication"}, {"content": "admin:appserver-set-backlog(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-backlog"}, {"content": "admin:appserver-set-collation(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-collation"}, {"content": "admin:appserver-set-compute-content-length(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-compute-content-length"}, {"content": "admin:appserver-set-concurrent-request-limit(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-concurrent-request-limit"}, {"content": "admin:appserver-set-connection-timeout(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-connection-timeout"}, {"content": "admin:appserver-set-database(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedLong})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-database"}, {"content": "admin:appserver-set-debug-allow(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-debug-allow"}, {"content": "admin:appserver-set-default-query-time-limit(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-default-query-time-limit"}, {"content": "admin:appserver-set-default-time-limit(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-default-time-limit"}, {"content": "admin:appserver-set-default-user(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedLong})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-default-user"}, {"content": "admin:appserver-set-default-xquery-version(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-default-xquery-version"}, {"content": "admin:appserver-set-display-last-login(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-display-last-login"}, {"content": "admin:appserver-set-distribute-timestamps(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-distribute-timestamps"}, {"content": "admin:appserver-set-enabled(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-enabled"}, {"content": "admin:appserver-set-error-handler(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-error-handler"}, {"content": "admin:appserver-set-external-security(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string}, ${4:\\$value2 as xs:boolean}, ${5:\\$value3 as xs:string})", "description": "($config,$appserver-id,$value,$value2,$value3)", "trigger": "admin:appserver-set-external-security"}, {"content": "admin:appserver-set-internal-security(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-internal-security"}, {"content": "admin:appserver-set-keep-alive-timeout(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-keep-alive-timeout"}, {"content": "admin:appserver-set-last-login(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedLong?})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-last-login"}, {"content": "admin:appserver-set-log-errors(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-log-errors"}, {"content": "admin:appserver-set-max-query-time-limit(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-max-query-time-limit"}, {"content": "admin:appserver-set-max-time-limit(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-max-time-limit"}, {"content": "admin:appserver-set-modules-database(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as item()})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-modules-database"}, {"content": "admin:appserver-set-multi-version-concurrency-control(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-multi-version-concurrency-control"}, {"content": "admin:appserver-set-name(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-name"}, {"content": "admin:appserver-set-output-byte-order-mark(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-output-byte-order-mark"}, {"content": "admin:appserver-set-output-cdata-section-localname(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-output-cdata-section-localname"}, {"content": "admin:appserver-set-output-cdata-section-namespace-uri(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-output-cdata-section-namespace-uri"}, {"content": "admin:appserver-set-output-doctype-public(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-output-doctype-public"}, {"content": "admin:appserver-set-output-doctype-system(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-output-doctype-system"}, {"content": "admin:appserver-set-output-encoding(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-output-encoding"}, {"content": "admin:appserver-set-output-escape-uri-attributes(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-output-escape-uri-attributes"}, {"content": "admin:appserver-set-output-include-content-type(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-output-include-content-type"}, {"content": "admin:appserver-set-output-include-default-attributes(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-output-include-default-attributes"}, {"content": "admin:appserver-set-output-indent(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-output-indent"}, {"content": "admin:appserver-set-output-indent-untyped(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-output-indent-untyped"}, {"content": "admin:appserver-set-output-media-type(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-output-media-type"}, {"content": "admin:appserver-set-output-method(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-output-method"}, {"content": "admin:appserver-set-output-normalization-form(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-output-normalization-form"}, {"content": "admin:appserver-set-output-omit-xml-declaration(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-output-omit-xml-declaration"}, {"content": "admin:appserver-set-output-sgml-character-entities(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-output-sgml-character-entities"}, {"content": "admin:appserver-set-output-standalone(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-output-standalone"}, {"content": "admin:appserver-set-output-undeclare-prefixes(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-output-undeclare-prefixes"}, {"content": "admin:appserver-set-output-version(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-output-version"}, {"content": "admin:appserver-set-port(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-port"}, {"content": "admin:appserver-set-pre-commit-trigger-depth(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-pre-commit-trigger-depth"}, {"content": "admin:appserver-set-pre-commit-trigger-limit(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-pre-commit-trigger-limit"}, {"content": "admin:appserver-set-privilege(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedLong})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-privilege"}, {"content": "admin:appserver-set-profile-allow(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-profile-allow"}, {"content": "admin:appserver-set-request-timeout(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-request-timeout"}, {"content": "admin:appserver-set-rewrite-resolves-globally(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-rewrite-resolves-globally"}, {"content": "admin:appserver-set-root(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-root"}, {"content": "admin:appserver-set-session-timeout(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-session-timeout"}, {"content": "admin:appserver-set-ssl-allow-sslv3(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-ssl-allow-sslv3"}, {"content": "admin:appserver-set-ssl-allow-tls(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-ssl-allow-tls"}, {"content": "admin:appserver-set-ssl-certificate-template(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedLong})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-ssl-certificate-template"}, {"content": "admin:appserver-set-ssl-ciphers(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-ssl-ciphers"}, {"content": "admin:appserver-set-ssl-client-certificate-authorities(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedLong*})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-ssl-client-certificate-authorities"}, {"content": "admin:appserver-set-ssl-hostname(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-ssl-hostname"}, {"content": "admin:appserver-set-ssl-require-client-certificate(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-ssl-require-client-certificate"}, {"content": "admin:appserver-set-static-expires(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-static-expires"}, {"content": "admin:appserver-set-threads(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-threads"}, {"content": "admin:appserver-set-url-rewriter(${1:\\$config as element(configuration)}, ${2:\\$appserver-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$appserver-id,$value)", "trigger": "admin:appserver-set-url-rewriter"}, {"content": "admin:bucket-assignment-policy()", "trigger": "admin:bucket-assignment-policy"}, {"content": "admin:cluster-get-foreign-cluster-id(${1:\\$config as element(configuration)}, ${2:\\$name as xs:string})", "description": "($config,$name)", "trigger": "admin:cluster-get-foreign-cluster-id"}, {"content": "admin:cluster-get-foreign-cluster-ids(${1:\\$config as element(configuration)})", "description": "($config)", "trigger": "admin:cluster-get-foreign-cluster-ids"}, {"content": "admin:cluster-get-foreign-master-database(${1:\\$config as element(configuration)}, ${2:\\$foreign-cluster-id as xs:unsignedLong}, ${3:\\$database-ids as xs:unsignedLong*})", "description": "($config,$foreign-cluster-id,$database-ids)", "trigger": "admin:cluster-get-foreign-master-database"}, {"content": "admin:cluster-get-foreign-replica-databases(${1:\\$config as element(configuration)}, ${2:\\$foreign-cluster-id as xs:unsignedLong}, ${3:\\$database-ids as xs:unsignedLong*})", "description": "($config,$foreign-cluster-id,$database-ids)", "trigger": "admin:cluster-get-foreign-replica-databases"}, {"content": "admin:cluster-get-id(${1:\\$config as element(configuration)})", "description": "($config)", "trigger": "admin:cluster-get-id"}, {"content": "admin:cluster-get-name(${1:\\$config as element(configuration)})", "description": "($config)", "trigger": "admin:cluster-get-name"}, {"content": "admin:cluster-get-ssl-fips-enabled(${1:\\$config as element(configuration)})", "description": "($config)", "trigger": "admin:cluster-get-ssl-fips-enabled"}, {"content": "admin:cluster-get-xdqp-bootstrap-hosts(${1:\\$config as element(configuration)})", "description": "($config)", "trigger": "admin:cluster-get-xdqp-bootstrap-hosts"}, {"content": "admin:cluster-get-xdqp-ssl-certificate(${1:\\$config as element(configuration)})", "description": "($config)", "trigger": "admin:cluster-get-xdqp-ssl-certificate"}, {"content": "admin:cluster-get-xdqp-ssl-private-key(${1:\\$config as element(configuration)})", "description": "($config)", "trigger": "admin:cluster-get-xdqp-ssl-private-key"}, {"content": "admin:cluster-set-name(${1:\\$config as element(configuration)}, ${2:\\$name as xs:string})", "description": "($config,$name)", "trigger": "admin:cluster-set-name"}, {"content": "admin:cluster-set-ssl-fips-enabled(${1:\\$config as element(configuration)}, ${2:\\$flag as xs:boolean})", "description": "($config,$flag)", "trigger": "admin:cluster-set-ssl-fips-enabled"}, {"content": "admin:cluster-set-xdqp-bootstrap-hosts(${1:\\$config as element(configuration)}, ${2:\\$host-ids as xs:unsignedLong*})", "description": "($config,$host-ids)", "trigger": "admin:cluster-set-xdqp-bootstrap-hosts"}, {"content": "admin:cluster-set-xdqp-ssl-certificate(${1:\\$config as element(configuration)}, ${2:\\$value as xs:string})", "description": "($config,$value)", "trigger": "admin:cluster-set-xdqp-ssl-certificate"}, {"content": "admin:database-add-backup(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$backups as element(db:database-backup)*})", "description": "($config,$database-id,$backups)", "trigger": "admin:database-add-backup"}, {"content": "admin:database-add-element-attribute-word-lexicon(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$element-attribute-word-lexicons as element(db:element-attribute-word-lexicon)*})", "description": "($config,$database-id,$element-attribute-word-lexicons)", "trigger": "admin:database-add-element-attribute-word-lexicon"}, {"content": "admin:database-add-element-word-lexicon(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$element-word-lexicons as element(db:element-word-lexicon)*})", "description": "($config,$database-id,$element-word-lexicons)", "trigger": "admin:database-add-element-word-lexicon"}, {"content": "admin:database-add-element-word-query-through(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$element-word-query-throughs as element(db:element-word-query-through)*})", "description": "($config,$database-id,$element-word-query-throughs)", "trigger": "admin:database-add-element-word-query-through"}, {"content": "admin:database-add-field(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$fields as element(db:field)*})", "description": "($config,$database-id,$fields)", "trigger": "admin:database-add-field"}, {"content": "admin:database-add-field-excluded-element(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$excluded-elements as element(db:excluded-element)*})", "description": "($config,$database-id,$field-name,$excluded-elements)", "trigger": "admin:database-add-field-excluded-element"}, {"content": "admin:database-add-field-included-element(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$included-elements as element(db:included-element)*})", "description": "($config,$database-id,$field-name,$included-elements)", "trigger": "admin:database-add-field-included-element"}, {"content": "admin:database-add-field-paths(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$field-paths as element(db:field-path)*})", "description": "($config,$database-id,$field-name,$field-paths)", "trigger": "admin:database-add-field-paths"}, {"content": "admin:database-add-field-tokenizer-override(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$tokenizer-overrides as element(db:tokenizer-override)*})", "description": "($config,$database-id,$field-name,$tokenizer-overrides)", "trigger": "admin:database-add-field-tokenizer-override"}, {"content": "admin:database-add-field-word-lexicon(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$word-lexicons as element(db:word-lexicon)*})", "description": "($config,$database-id,$field-name,$word-lexicons)", "trigger": "admin:database-add-field-word-lexicon"}, {"content": "admin:database-add-foreign-replicas(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$replicas as element(db:foreign-replica)*})", "description": "($config,$database-id,$replicas)", "trigger": "admin:database-add-foreign-replicas"}, {"content": "admin:database-add-fragment-parent(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$fragment-parents as element(db:fragment-parent)*})", "description": "($config,$database-id,$fragment-parents)", "trigger": "admin:database-add-fragment-parent"}, {"content": "admin:database-add-fragment-root(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$fragment-roots as element(db:fragment-root)*})", "description": "($config,$database-id,$fragment-roots)", "trigger": "admin:database-add-fragment-root"}, {"content": "admin:database-add-geospatial-element-attribute-pair-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$geospatial-element-attribute-pair-indexes as element(db:geospatial-element-attribute-pair-index)*})", "description": "($config,$database-id,$geospatial-element-attribute-pair-indexes)", "trigger": "admin:database-add-geospatial-element-attribute-pair-index"}, {"content": "admin:database-add-geospatial-element-child-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$geospatial-element-child-indexes as element(db:geospatial-element-child-index)*})", "description": "($config,$database-id,$geospatial-element-child-indexes)", "trigger": "admin:database-add-geospatial-element-child-index"}, {"content": "admin:database-add-geospatial-element-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$geospatial-element-indexes as element(db:geospatial-element-index)*})", "description": "($config,$database-id,$geospatial-element-indexes)", "trigger": "admin:database-add-geospatial-element-index"}, {"content": "admin:database-add-geospatial-element-pair-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$geospatial-element-pair-indexes as element(db:geospatial-element-pair-index)*})", "description": "($config,$database-id,$geospatial-element-pair-indexes)", "trigger": "admin:database-add-geospatial-element-pair-index"}, {"content": "admin:database-add-geospatial-path-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$geospatial-path-indexes as element(db:geospatial-path-index)*})", "description": "($config,$database-id,$geospatial-path-indexes)", "trigger": "admin:database-add-geospatial-path-index"}, {"content": "admin:database-add-merge-blackout(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$merge-blackouts as element(db:merge-blackout)*})", "description": "($config,$database-id,$merge-blackouts)", "trigger": "admin:database-add-merge-blackout"}, {"content": "admin:database-add-path-namespace(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$path-namespaces as element(db:path-namespace)*})", "description": "($config,$database-id,$path-namespaces)", "trigger": "admin:database-add-path-namespace"}, {"content": "admin:database-add-phrase-around(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$phrase-arounds as element(db:phrase-around)*})", "description": "($config,$database-id,$phrase-arounds)", "trigger": "admin:database-add-phrase-around"}, {"content": "admin:database-add-phrase-through(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$phrase-throughs as element(db:phrase-through)*})", "description": "($config,$database-id,$phrase-throughs)", "trigger": "admin:database-add-phrase-through"}, {"content": "admin:database-add-range-element-attribute-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$attribute-indexes as element(db:range-element-attribute-index)*})", "description": "($config,$database-id,$attribute-indexes)", "trigger": "admin:database-add-range-element-attribute-index"}, {"content": "admin:database-add-range-element-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$range-indexes as element(db:range-element-index)*})", "description": "($config,$database-id,$range-indexes)", "trigger": "admin:database-add-range-element-index"}, {"content": "admin:database-add-range-field-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$range-indexes as element(db:range-field-index)*})", "description": "($config,$database-id,$range-indexes)", "trigger": "admin:database-add-range-field-index"}, {"content": "admin:database-add-range-path-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$range-indexes as element(db:range-path-index)*})", "description": "($config,$database-id,$range-indexes)", "trigger": "admin:database-add-range-path-index"}, {"content": "admin:database-add-word-lexicon(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$word-lexicons as element(db:word-lexicon)*})", "description": "($config,$database-id,$word-lexicons)", "trigger": "admin:database-add-word-lexicon"}, {"content": "admin:database-add-word-query-excluded-element(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$excluded-elements as element(db:excluded-element)*})", "description": "($config,$database-id,$excluded-elements)", "trigger": "admin:database-add-word-query-excluded-element"}, {"content": "admin:database-add-word-query-included-element(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$included-elements as element(db:included-element)*})", "description": "($config,$database-id,$included-elements)", "trigger": "admin:database-add-word-query-included-element"}, {"content": "admin:database-attach-forest(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$forest-id as xs:unsignedLong})", "description": "($config,$database-id,$forest-id)", "trigger": "admin:database-attach-forest"}, {"content": "admin:database-attach-sub-database(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$subdatabase-id as xs:unsignedLong})", "description": "($config,$database-id,$subdatabase-id)", "trigger": "admin:database-attach-sub-database"}, {"content": "admin:database-attach-sub-database(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$subdatabase-id as xs:unsignedLong}, ${4:\\$foreign-cluster-id as xs:unsignedLong})", "description": "($config,$database-id,$subdatabase-id,$foreign-cluster-id)", "trigger": "admin:database-attach-sub-database"}, {"content": "admin:database-copy(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$database-name as xs:string})", "description": "($config,$database-id,$database-name)", "trigger": "admin:database-copy"}, {"content": "admin:database-create(${1:\\$config as element(configuration)}, ${2:\\$database-name as xs:string}, ${3:\\$security-db as xs:unsignedLong}, ${4:\\$schema-db as xs:unsignedLong})", "description": "($config,$database-name,$security-db,$schema-db)", "trigger": "admin:database-create"}, {"content": "admin:database-daily-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-time as xs:time}, ${4:\\$max-backups as xs:unsignedLong}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean})", "description": "($backup-dir,$backup-period,$start-time,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db)", "trigger": "admin:database-daily-backup"}, {"content": "admin:database-daily-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-time as xs:time}, ${4:\\$max-backups as xs:unsignedLong}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean}, ${8:\\$include-replicas as xs:boolean})", "description": "($backup-dir,$backup-period,$start-time,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db,$include-replicas)", "trigger": "admin:database-daily-backup"}, {"content": "admin:database-daily-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-time as xs:time}, ${4:\\$max-backups as xs:unsignedLong}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean}, ${8:\\$include-replicas as xs:boolean}, ${9:\\$journal-archiving as xs:boolean?})", "description": "($backup-dir,$backup-period,$start-time,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db,$include-replicas,$journal-archiving)", "trigger": "admin:database-daily-backup"}, {"content": "admin:database-daily-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-time as xs:time}, ${4:\\$max-backups as xs:unsignedLong}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean}, ${8:\\$include-replicas as xs:boolean}, ${9:\\$journal-archiving as xs:boolean?}, ${10:\\$journal-archive-path as xs:string?})", "description": "($backup-dir,$backup-period,$start-time,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db,$include-replicas,$journal-archiving,$journal-archive-path)", "trigger": "admin:database-daily-backup"}, {"content": "admin:database-daily-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-time as xs:time}, ${4:\\$max-backups as xs:unsignedLong}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean}, ${8:\\$include-replicas as xs:boolean}, ${9:\\$journal-archiving as xs:boolean?}, ${10:\\$journal-archive-path as xs:string?}, ${11:\\$lag-limit as xs:unsignedLong?})", "description": "($backup-dir,$backup-period,$start-time,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db,$include-replicas,$journal-archiving,$journal-archive-path,$lag-limit)", "trigger": "admin:database-daily-backup"}, {"content": "admin:database-delete(${1:\\$config as element(configuration)}, ${2:\\$database-ids as xs:unsignedLong*})", "description": "($config,$database-ids)", "trigger": "admin:database-delete"}, {"content": "admin:database-delete-all-range-field-indexes(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$fieldnames as xs:string*})", "description": "($config,$database-id,$fieldnames)", "trigger": "admin:database-delete-all-range-field-indexes"}, {"content": "admin:database-delete-backup(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$backups as element(db:database-backup)*})", "description": "($config,$database-id,$backups)", "trigger": "admin:database-delete-backup"}, {"content": "admin:database-delete-element-attribute-word-lexicon(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$lexicons as element(db:element-attribute-word-lexicon)*})", "description": "($config,$database-id,$lexicons)", "trigger": "admin:database-delete-element-attribute-word-lexicon"}, {"content": "admin:database-delete-element-word-lexicon(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$element-word-lexicons as element(db:element-word-lexicon)*})", "description": "($config,$database-id,$element-word-lexicons)", "trigger": "admin:database-delete-element-word-lexicon"}, {"content": "admin:database-delete-element-word-query-through(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$throughs as element(db:element-word-query-through)*})", "description": "($config,$database-id,$throughs)", "trigger": "admin:database-delete-element-word-query-through"}, {"content": "admin:database-delete-field(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-names as xs:string*})", "description": "($config,$database-id,$field-names)", "trigger": "admin:database-delete-field"}, {"content": "admin:database-delete-field-excluded-element(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$excluded-elements as element(db:excluded-element)*})", "description": "($config,$database-id,$field-name,$excluded-elements)", "trigger": "admin:database-delete-field-excluded-element"}, {"content": "admin:database-delete-field-included-element(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$included-elements as element(db:included-element)*})", "description": "($config,$database-id,$field-name,$included-elements)", "trigger": "admin:database-delete-field-included-element"}, {"content": "admin:database-delete-field-paths(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$field-paths as element(db:field-path)*})", "description": "($config,$database-id,$field-name,$field-paths)", "trigger": "admin:database-delete-field-paths"}, {"content": "admin:database-delete-field-tokenizer-override(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$tokenizer-overrides as element(db:tokenizer-override)*})", "description": "($config,$database-id,$field-name,$tokenizer-overrides)", "trigger": "admin:database-delete-field-tokenizer-override"}, {"content": "admin:database-delete-field-word-lexicon(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$word-lexicons as element(db:word-lexicon)*})", "description": "($config,$database-id,$field-name,$word-lexicons)", "trigger": "admin:database-delete-field-word-lexicon"}, {"content": "admin:database-delete-foreign-master(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-delete-foreign-master"}, {"content": "admin:database-delete-foreign-replicas(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$foreign-replicas as element(db:foreign-replica)*})", "description": "($config,$database-id,$foreign-replicas)", "trigger": "admin:database-delete-foreign-replicas"}, {"content": "admin:database-delete-fragment-parent(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$fragment-parents as element(db:fragment-parent)*})", "description": "($config,$database-id,$fragment-parents)", "trigger": "admin:database-delete-fragment-parent"}, {"content": "admin:database-delete-fragment-root(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$fragment-roots as element(db:fragment-root)*})", "description": "($config,$database-id,$fragment-roots)", "trigger": "admin:database-delete-fragment-root"}, {"content": "admin:database-delete-geospatial-element-attribute-pair-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$indexes as element(db:geospatial-element-attribute-pair-index)*})", "description": "($config,$database-id,$indexes)", "trigger": "admin:database-delete-geospatial-element-attribute-pair-index"}, {"content": "admin:database-delete-geospatial-element-child-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$geospatial-element-child-indexes as element(db:geospatial-element-child-index)*})", "description": "($config,$database-id,$geospatial-element-child-indexes)", "trigger": "admin:database-delete-geospatial-element-child-index"}, {"content": "admin:database-delete-geospatial-element-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$geospatial-element-indexes as element(db:geospatial-element-index)*})", "description": "($config,$database-id,$geospatial-element-indexes)", "trigger": "admin:database-delete-geospatial-element-index"}, {"content": "admin:database-delete-geospatial-element-pair-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$geospatial-element-pair-indexes as element(db:geospatial-element-pair-index)*})", "description": "($config,$database-id,$geospatial-element-pair-indexes)", "trigger": "admin:database-delete-geospatial-element-pair-index"}, {"content": "admin:database-delete-geospatial-path-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$geospatial-path-indexes as element(db:geospatial-path-index)*})", "description": "($config,$database-id,$geospatial-path-indexes)", "trigger": "admin:database-delete-geospatial-path-index"}, {"content": "admin:database-delete-merge-blackout(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$blackouts as element(db:merge-blackout)*})", "description": "($config,$database-id,$blackouts)", "trigger": "admin:database-delete-merge-blackout"}, {"content": "admin:database-delete-path-namespace(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$path-namespaces as element(db:path-namespace)*})", "description": "($config,$database-id,$path-namespaces)", "trigger": "admin:database-delete-path-namespace"}, {"content": "admin:database-delete-phrase-around(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$phrase-arounds as element(db:phrase-around)*})", "description": "($config,$database-id,$phrase-arounds)", "trigger": "admin:database-delete-phrase-around"}, {"content": "admin:database-delete-phrase-through(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$phrase-throughs as element(db:phrase-through)*})", "description": "($config,$database-id,$phrase-throughs)", "trigger": "admin:database-delete-phrase-through"}, {"content": "admin:database-delete-range-element-attribute-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$attribute-indexes as element(db:range-element-attribute-index)*})", "description": "($config,$database-id,$attribute-indexes)", "trigger": "admin:database-delete-range-element-attribute-index"}, {"content": "admin:database-delete-range-element-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$range-indexes as element(db:range-element-index)*})", "description": "($config,$database-id,$range-indexes)", "trigger": "admin:database-delete-range-element-index"}, {"content": "admin:database-delete-range-field-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$range-indexes as element(db:range-field-index)*})", "description": "($config,$database-id,$range-indexes)", "trigger": "admin:database-delete-range-field-index"}, {"content": "admin:database-delete-range-path-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$range-indexes as element(db:range-path-index)*})", "description": "($config,$database-id,$range-indexes)", "trigger": "admin:database-delete-range-path-index"}, {"content": "admin:database-delete-word-lexicon(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$word-lexicons as element(db:word-lexicon)*})", "description": "($config,$database-id,$word-lexicons)", "trigger": "admin:database-delete-word-lexicon"}, {"content": "admin:database-delete-word-query-excluded-element(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$excluded-elements as element(db:excluded-element)*})", "description": "($config,$database-id,$excluded-elements)", "trigger": "admin:database-delete-word-query-excluded-element"}, {"content": "admin:database-delete-word-query-included-element(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$included-elements as element(db:included-element)*})", "description": "($config,$database-id,$included-elements)", "trigger": "admin:database-delete-word-query-included-element"}, {"content": "admin:database-detach-forest(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$forest-id as xs:unsignedLong})", "description": "($config,$database-id,$forest-id)", "trigger": "admin:database-detach-forest"}, {"content": "admin:database-detach-sub-database(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$subdatabase-id as xs:unsignedLong})", "description": "($config,$database-id,$subdatabase-id)", "trigger": "admin:database-detach-sub-database"}, {"content": "admin:database-detach-sub-database(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$subdatabase-id as xs:unsignedLong}, ${4:\\$foreign-cluster-id as xs:unsignedLong})", "description": "($config,$database-id,$subdatabase-id,$foreign-cluster-id)", "trigger": "admin:database-detach-sub-database"}, {"content": "admin:database-element-attribute-word-lexicon(${1:\\$parent-namespace as xs:string?}, ${2:\\$parent-localname as xs:string}, ${3:\\$namespace as xs:string?}, ${4:\\$localname as xs:string}, ${5:\\$collation as xs:string})", "description": "($parent-namespace,$parent-localname,$namespace,$localname,$collation)", "trigger": "admin:database-element-attribute-word-lexicon"}, {"content": "admin:database-element-word-lexicon(${1:\\$namespace as xs:string?}, ${2:\\$localname as xs:string}, ${3:\\$collation as xs:string})", "description": "($namespace,$localname,$collation)", "trigger": "admin:database-element-word-lexicon"}, {"content": "admin:database-element-word-query-through(${1:\\$namespace as xs:string?}, ${2:\\$localname as xs:string})", "description": "($namespace,$localname)", "trigger": "admin:database-element-word-query-through"}, {"content": "admin:database-employ-forest(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$forest-id as xs:unsignedLong})", "description": "($config,$database-id,$forest-id)", "trigger": "admin:database-employ-forest"}, {"content": "admin:database-excluded-element(${1:\\$namespace as xs:string?}, ${2:\\$localname as xs:string})", "description": "($namespace,$localname)", "trigger": "admin:database-excluded-element"}, {"content": "admin:database-excluded-element(${1:\\$namespace as xs:string?}, ${2:\\$localname as xs:string}, ${3:\\$attribute-namespace as xs:string?})", "description": "($namespace,$localname,$attribute-namespace)", "trigger": "admin:database-excluded-element"}, {"content": "admin:database-excluded-element(${1:\\$namespace as xs:string?}, ${2:\\$localname as xs:string}, ${3:\\$attribute-namespace as xs:string?}, ${4:\\$attribute-localname as xs:string})", "description": "($namespace,$localname,$attribute-namespace,$attribute-localname)", "trigger": "admin:database-excluded-element"}, {"content": "admin:database-excluded-element(${1:\\$namespace as xs:string?}, ${2:\\$localname as xs:string}, ${3:\\$attribute-namespace as xs:string?}, ${4:\\$attribute-localname as xs:string}, ${5:\\$attribute-value as xs:string})", "description": "($namespace,$localname,$attribute-namespace,$attribute-localname,$attribute-value)", "trigger": "admin:database-excluded-element"}, {"content": "admin:database-exists(${1:\\$config as element(configuration)}, ${2:\\$database-name as xs:string})", "description": "($config,$database-name)", "trigger": "admin:database-exists"}, {"content": "admin:database-field(${1:\\$field-name as xs:string}, ${2:\\$include-root as xs:boolean})", "description": "($field-name,$include-root)", "trigger": "admin:database-field"}, {"content": "admin:database-field-path(${1:\\$field-path as xs:string}, ${2:\\$weight as xs:double})", "description": "($field-path,$weight)", "trigger": "admin:database-field-path"}, {"content": "admin:database-foreign-master(${1:\\$foreign-cluster-id as xs:unsignedLong}, ${2:\\$foreign-database-id as xs:unsignedLong}, ${3:\\$connect-forests-by-name as xs:boolean})", "description": "($foreign-cluster-id,$foreign-database-id,$connect-forests-by-name)", "trigger": "admin:database-foreign-master"}, {"content": "admin:database-foreign-master-get-cluster-id(${1:\\$foreign-master as element(db:foreign-master)})", "description": "($foreign-master)", "trigger": "admin:database-foreign-master-get-cluster-id"}, {"content": "admin:database-foreign-master-get-connect-forests-by-name(${1:\\$foreign-master as element(db:foreign-master)})", "description": "($foreign-master)", "trigger": "admin:database-foreign-master-get-connect-forests-by-name"}, {"content": "admin:database-foreign-master-get-database-id(${1:\\$foreign-master as element(db:foreign-master)})", "description": "($foreign-master)", "trigger": "admin:database-foreign-master-get-database-id"}, {"content": "admin:database-foreign-replica(${1:\\$foreign-cluster-id as xs:unsignedLong}, ${2:\\$foreign-database-id as xs:unsignedLong}, ${3:\\$connect-forests-by-name as xs:boolean}, ${4:\\$lag-limit as xs:unsignedInt})", "description": "($foreign-cluster-id,$foreign-database-id,$connect-forests-by-name,$lag-limit)", "trigger": "admin:database-foreign-replica"}, {"content": "admin:database-foreign-replica(${1:\\$foreign-cluster-id as xs:unsignedLong}, ${2:\\$foreign-database-id as xs:unsignedLong}, ${3:\\$connect-forests-by-name as xs:boolean}, ${4:\\$lag-limit as xs:unsignedInt}, ${5:\\$replication-enabled as xs:boolean})", "description": "($foreign-cluster-id,$foreign-database-id,$connect-forests-by-name,$lag-limit,$replication-enabled)", "trigger": "admin:database-foreign-replica"}, {"content": "admin:database-foreign-replica-get-cluster-id(${1:\\$foreign-replica as element(db:foreign-replica)})", "description": "($foreign-replica)", "trigger": "admin:database-foreign-replica-get-cluster-id"}, {"content": "admin:database-foreign-replica-get-connect-forests-by-name(${1:\\$foreign-replica as element(db:foreign-replica)})", "description": "($foreign-replica)", "trigger": "admin:database-foreign-replica-get-connect-forests-by-name"}, {"content": "admin:database-foreign-replica-get-database-id(${1:\\$foreign-replica as element(db:foreign-replica)})", "description": "($foreign-replica)", "trigger": "admin:database-foreign-replica-get-database-id"}, {"content": "admin:database-foreign-replica-get-lag-limit(${1:\\$foreign-replica as element(db:foreign-replica)})", "description": "($foreign-replica)", "trigger": "admin:database-foreign-replica-get-lag-limit"}, {"content": "admin:database-foreign-replica-get-replication-enabled(${1:\\$foreign-replica as element(db:foreign-replica)})", "description": "($foreign-replica)", "trigger": "admin:database-foreign-replica-get-replication-enabled"}, {"content": "admin:database-foreign-replica-set-lag-limit(${1:\\$foreign-replica as element(db:foreign-replica)}, ${2:\\$lag-limit as xs:unsignedInt})", "description": "($foreign-replica,$lag-limit)", "trigger": "admin:database-foreign-replica-set-lag-limit"}, {"content": "admin:database-foreign-replica-set-replication-enabled(${1:\\$foreign-replica as element(db:foreign-replica)}, ${2:\\$enabled as xs:boolean})", "description": "($foreign-replica,$enabled)", "trigger": "admin:database-foreign-replica-set-replication-enabled"}, {"content": "admin:database-fragment-parent(${1:\\$namespace as xs:string?}, ${2:\\$localname as xs:string})", "description": "($namespace,$localname)", "trigger": "admin:database-fragment-parent"}, {"content": "admin:database-fragment-root(${1:\\$namespace as xs:string?}, ${2:\\$localname as xs:string})", "description": "($namespace,$localname)", "trigger": "admin:database-fragment-root"}, {"content": "admin:database-geospatial-element-attribute-pair-index(${1:\\$parent-namespace as xs:string?}, ${2:\\$parent-localname as xs:string}, ${3:\\$latitude-namespace as xs:string?}, ${4:\\$latitude-localname as xs:string}, ${5:\\$longitude-namespace as xs:string?}, ${6:\\$longitude-localname as xs:string}, ${7:\\$coordinate-system as xs:string}, ${8:\\$range-value-positions as xs:boolean})", "description": "($parent-namespace,$parent-localname,$latitude-namespace,$latitude-localname,$longitude-namespace,$longitude-localname,$coordinate-system,$range-value-positions)", "trigger": "admin:database-geospatial-element-attribute-pair-index"}, {"content": "admin:database-geospatial-element-attribute-pair-index(${1:\\$parent-namespace as xs:string?}, ${2:\\$parent-localname as xs:string}, ${3:\\$latitude-namespace as xs:string?}, ${4:\\$latitude-localname as xs:string}, ${5:\\$longitude-namespace as xs:string?}, ${6:\\$longitude-localname as xs:string}, ${7:\\$coordinate-system as xs:string}, ${8:\\$range-value-positions as xs:boolean}, ${9:\\$invalid-values as xs:string})", "description": "($parent-namespace,$parent-localname,$latitude-namespace,$latitude-localname,$longitude-namespace,$longitude-localname,$coordinate-system,$range-value-positions,$invalid-values)", "trigger": "admin:database-geospatial-element-attribute-pair-index"}, {"content": "admin:database-geospatial-element-child-index(${1:\\$parent-namespace as xs:string?}, ${2:\\$parent-localname as xs:string}, ${3:\\$namespace as xs:string?}, ${4:\\$localname as xs:string}, ${5:\\$coordinate-system as xs:string}, ${6:\\$range-value-positions as xs:boolean})", "description": "($parent-namespace,$parent-localname,$namespace,$localname,$coordinate-system,$range-value-positions)", "trigger": "admin:database-geospatial-element-child-index"}, {"content": "admin:database-geospatial-element-child-index(${1:\\$parent-namespace as xs:string?}, ${2:\\$parent-localname as xs:string}, ${3:\\$namespace as xs:string?}, ${4:\\$localname as xs:string}, ${5:\\$coordinate-system as xs:string}, ${6:\\$range-value-positions as xs:boolean}, ${7:\\$point-format as xs:string})", "description": "($parent-namespace,$parent-localname,$namespace,$localname,$coordinate-system,$range-value-positions,$point-format)", "trigger": "admin:database-geospatial-element-child-index"}, {"content": "admin:database-geospatial-element-child-index(${1:\\$parent-namespace as xs:string?}, ${2:\\$parent-localname as xs:string}, ${3:\\$namespace as xs:string?}, ${4:\\$localname as xs:string}, ${5:\\$coordinate-system as xs:string}, ${6:\\$range-value-positions as xs:boolean}, ${7:\\$point-format as xs:string}, ${8:\\$invalid-values as xs:string})", "description": "($parent-namespace,$parent-localname,$namespace,$localname,$coordinate-system,$range-value-positions,$point-format,$invalid-values)", "trigger": "admin:database-geospatial-element-child-index"}, {"content": "admin:database-geospatial-element-index(${1:\\$namespace as xs:string?}, ${2:\\$localname as xs:string}, ${3:\\$coordinate-system as xs:string}, ${4:\\$range-value-positions as xs:boolean})", "description": "($namespace,$localname,$coordinate-system,$range-value-positions)", "trigger": "admin:database-geospatial-element-index"}, {"content": "admin:database-geospatial-element-index(${1:\\$namespace as xs:string?}, ${2:\\$localname as xs:string}, ${3:\\$coordinate-system as xs:string}, ${4:\\$range-value-positions as xs:boolean}, ${5:\\$point-format as xs:string})", "description": "($namespace,$localname,$coordinate-system,$range-value-positions,$point-format)", "trigger": "admin:database-geospatial-element-index"}, {"content": "admin:database-geospatial-element-index(${1:\\$namespace as xs:string?}, ${2:\\$localname as xs:string}, ${3:\\$coordinate-system as xs:string}, ${4:\\$range-value-positions as xs:boolean}, ${5:\\$point-format as xs:string}, ${6:\\$invalid-values as xs:string})", "description": "($namespace,$localname,$coordinate-system,$range-value-positions,$point-format,$invalid-values)", "trigger": "admin:database-geospatial-element-index"}, {"content": "admin:database-geospatial-element-pair-index(${1:\\$parent-namespace as xs:string?}, ${2:\\$parent-localname as xs:string}, ${3:\\$latitude-namespace as xs:string?}, ${4:\\$latitude-localname as xs:string}, ${5:\\$longitude-namespace as xs:string?}, ${6:\\$longitude-localname as xs:string}, ${7:\\$coordinate-system as xs:string}, ${8:\\$range-value-positions as xs:boolean})", "description": "($parent-namespace,$parent-localname,$latitude-namespace,$latitude-localname,$longitude-namespace,$longitude-localname,$coordinate-system,$range-value-positions)", "trigger": "admin:database-geospatial-element-pair-index"}, {"content": "admin:database-geospatial-element-pair-index(${1:\\$parent-namespace as xs:string?}, ${2:\\$parent-localname as xs:string}, ${3:\\$latitude-namespace as xs:string?}, ${4:\\$latitude-localname as xs:string}, ${5:\\$longitude-namespace as xs:string?}, ${6:\\$longitude-localname as xs:string}, ${7:\\$coordinate-system as xs:string}, ${8:\\$range-value-positions as xs:boolean}, ${9:\\$invalid-values as xs:string})", "description": "($parent-namespace,$parent-localname,$latitude-namespace,$latitude-localname,$longitude-namespace,$longitude-localname,$coordinate-system,$range-value-positions,$invalid-values)", "trigger": "admin:database-geospatial-element-pair-index"}, {"content": "admin:database-geospatial-path-index(${1:\\$pathexpr as xs:string}, ${2:\\$coordinate-system as xs:string}, ${3:\\$range-value-positions as xs:boolean}, ${4:\\$point-format as xs:string}, ${5:\\$invalid-values as xs:string})", "description": "($pathexpr,$coordinate-system,$range-value-positions,$point-format,$invalid-values)", "trigger": "admin:database-geospatial-path-index"}, {"content": "admin:database-get-assignment-policy(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-assignment-policy"}, {"content": "admin:database-get-attached-forests(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-attached-forests"}, {"content": "admin:database-get-attribute-value-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-attribute-value-positions"}, {"content": "admin:database-get-backups(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-backups"}, {"content": "admin:database-get-collection-lexicon(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-collection-lexicon"}, {"content": "admin:database-get-config-for-foreign-master-on-foreign-cluster(${1:\\$config as element(configuration)}, ${2:\\$foreign-cluster-id as xs:unsignedLong})", "description": "($config,$foreign-cluster-id)", "trigger": "admin:database-get-config-for-foreign-master-on-foreign-cluster"}, {"content": "admin:database-get-config-for-foreign-replicas-on-foreign-cluster(${1:\\$config as element(configuration)}, ${2:\\$foreign-cluster-id as xs:unsignedLong})", "description": "($config,$foreign-cluster-id)", "trigger": "admin:database-get-config-for-foreign-replicas-on-foreign-cluster"}, {"content": "admin:database-get-directory-creation(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-directory-creation"}, {"content": "admin:database-get-element-attribute-word-lexicons(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-element-attribute-word-lexicons"}, {"content": "admin:database-get-element-value-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-element-value-positions"}, {"content": "admin:database-get-element-word-lexicons(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-element-word-lexicons"}, {"content": "admin:database-get-element-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-element-word-positions"}, {"content": "admin:database-get-element-word-query-throughs(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-element-word-query-throughs"}, {"content": "admin:database-get-enabled(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-enabled"}, {"content": "admin:database-get-expunge-locks(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-expunge-locks"}, {"content": "admin:database-get-fast-case-sensitive-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-fast-case-sensitive-searches"}, {"content": "admin:database-get-fast-diacritic-sensitive-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-fast-diacritic-sensitive-searches"}, {"content": "admin:database-get-fast-element-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-fast-element-character-searches"}, {"content": "admin:database-get-fast-element-phrase-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-fast-element-phrase-searches"}, {"content": "admin:database-get-fast-element-trailing-wildcard-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-fast-element-trailing-wildcard-searches"}, {"content": "admin:database-get-fast-element-word-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-fast-element-word-searches"}, {"content": "admin:database-get-fast-phrase-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-fast-phrase-searches"}, {"content": "admin:database-get-fast-reverse-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-fast-reverse-searches"}, {"content": "admin:database-get-field(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "description": "($config,$database-id,$field-name)", "trigger": "admin:database-get-field"}, {"content": "admin:database-get-field-excluded-elements(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "description": "($config,$database-id,$field-name)", "trigger": "admin:database-get-field-excluded-elements"}, {"content": "admin:database-get-field-fast-case-sensitive-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "description": "($config,$database-id,$field-name)", "trigger": "admin:database-get-field-fast-case-sensitive-searches"}, {"content": "admin:database-get-field-fast-diacritic-sensitive-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "description": "($config,$database-id,$field-name)", "trigger": "admin:database-get-field-fast-diacritic-sensitive-searches"}, {"content": "admin:database-get-field-fast-phrase-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "description": "($config,$database-id,$field-name)", "trigger": "admin:database-get-field-fast-phrase-searches"}, {"content": "admin:database-get-field-include-document-root(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "description": "($config,$database-id,$field-name)", "trigger": "admin:database-get-field-include-document-root"}, {"content": "admin:database-get-field-included-elements(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "description": "($config,$database-id,$field-name)", "trigger": "admin:database-get-field-included-elements"}, {"content": "admin:database-get-field-one-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "description": "($config,$database-id,$field-name)", "trigger": "admin:database-get-field-one-character-searches"}, {"content": "admin:database-get-field-paths(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "description": "($config,$database-id,$field-name)", "trigger": "admin:database-get-field-paths"}, {"content": "admin:database-get-field-stemmed-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "description": "($config,$database-id,$field-name)", "trigger": "admin:database-get-field-stemmed-searches"}, {"content": "admin:database-get-field-three-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "description": "($config,$database-id,$field-name)", "trigger": "admin:database-get-field-three-character-searches"}, {"content": "admin:database-get-field-three-character-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "description": "($config,$database-id,$field-name)", "trigger": "admin:database-get-field-three-character-word-positions"}, {"content": "admin:database-get-field-tokenizer-overrides(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "description": "($config,$database-id,$field-name)", "trigger": "admin:database-get-field-tokenizer-overrides"}, {"content": "admin:database-get-field-trailing-wildcard-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "description": "($config,$database-id,$field-name)", "trigger": "admin:database-get-field-trailing-wildcard-searches"}, {"content": "admin:database-get-field-trailing-wildcard-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "description": "($config,$database-id,$field-name)", "trigger": "admin:database-get-field-trailing-wildcard-word-positions"}, {"content": "admin:database-get-field-two-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "description": "($config,$database-id,$field-name)", "trigger": "admin:database-get-field-two-character-searches"}, {"content": "admin:database-get-field-value-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "description": "($config,$database-id,$field-name)", "trigger": "admin:database-get-field-value-positions"}, {"content": "admin:database-get-field-value-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "description": "($config,$database-id,$field-name)", "trigger": "admin:database-get-field-value-searches"}, {"content": "admin:database-get-field-word-lexicons(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "description": "($config,$database-id,$field-name)", "trigger": "admin:database-get-field-word-lexicons"}, {"content": "admin:database-get-field-word-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string})", "description": "($config,$database-id,$field-name)", "trigger": "admin:database-get-field-word-searches"}, {"content": "admin:database-get-fields(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-fields"}, {"content": "admin:database-get-foreign-master(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-foreign-master"}, {"content": "admin:database-get-foreign-replicas(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-foreign-replicas"}, {"content": "admin:database-get-format-compatibility(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-format-compatibility"}, {"content": "admin:database-get-fragment-parents(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-fragment-parents"}, {"content": "admin:database-get-fragment-roots(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-fragment-roots"}, {"content": "admin:database-get-geospatial-element-attribute-pair-indexes(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-geospatial-element-attribute-pair-indexes"}, {"content": "admin:database-get-geospatial-element-child-indexes(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-geospatial-element-child-indexes"}, {"content": "admin:database-get-geospatial-element-indexes(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-geospatial-element-indexes"}, {"content": "admin:database-get-geospatial-element-pair-indexes(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-geospatial-element-pair-indexes"}, {"content": "admin:database-get-geospatial-path-indexes(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-geospatial-path-indexes"}, {"content": "admin:database-get-id(${1:\\$config as element(configuration)}, ${2:\\$database-name as xs:string})", "description": "($config,$database-name)", "trigger": "admin:database-get-id"}, {"content": "admin:database-get-in-memory-limit(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-in-memory-limit"}, {"content": "admin:database-get-in-memory-list-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-in-memory-list-size"}, {"content": "admin:database-get-in-memory-range-index-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-in-memory-range-index-size"}, {"content": "admin:database-get-in-memory-reverse-index-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-in-memory-reverse-index-size"}, {"content": "admin:database-get-in-memory-tree-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-in-memory-tree-size"}, {"content": "admin:database-get-in-memory-triple-index-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-in-memory-triple-index-size"}, {"content": "admin:database-get-index-detection(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-index-detection"}, {"content": "admin:database-get-inherit-collections(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-inherit-collections"}, {"content": "admin:database-get-inherit-permissions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-inherit-permissions"}, {"content": "admin:database-get-inherit-quality(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-inherit-quality"}, {"content": "admin:database-get-journal-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-journal-size"}, {"content": "admin:database-get-journaling(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-journaling"}, {"content": "admin:database-get-language(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-language"}, {"content": "admin:database-get-large-size-threshold(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-large-size-threshold"}, {"content": "admin:database-get-locking(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-locking"}, {"content": "admin:database-get-maintain-directory-last-modified(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-maintain-directory-last-modified"}, {"content": "admin:database-get-maintain-last-modified(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-maintain-last-modified"}, {"content": "admin:database-get-merge-blackouts(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-merge-blackouts"}, {"content": "admin:database-get-merge-max-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-merge-max-size"}, {"content": "admin:database-get-merge-min-ratio(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-merge-min-ratio"}, {"content": "admin:database-get-merge-min-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-merge-min-size"}, {"content": "admin:database-get-merge-priority(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-merge-priority"}, {"content": "admin:database-get-merge-timestamp(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-merge-timestamp"}, {"content": "admin:database-get-name(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-name"}, {"content": "admin:database-get-one-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-one-character-searches"}, {"content": "admin:database-get-path-namespaces(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-path-namespaces"}, {"content": "admin:database-get-phrase-arounds(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-phrase-arounds"}, {"content": "admin:database-get-phrase-throughs(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-phrase-throughs"}, {"content": "admin:database-get-positions-list-max-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-positions-list-max-size"}, {"content": "admin:database-get-preallocate-journals(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-preallocate-journals"}, {"content": "admin:database-get-preload-mapped-data(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-preload-mapped-data"}, {"content": "admin:database-get-preload-replica-mapped-data(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-preload-replica-mapped-data"}, {"content": "admin:database-get-range-element-attribute-indexes(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-range-element-attribute-indexes"}, {"content": "admin:database-get-range-element-indexes(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-range-element-indexes"}, {"content": "admin:database-get-range-field-indexes(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-range-field-indexes"}, {"content": "admin:database-get-range-index-optimize(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-range-index-optimize"}, {"content": "admin:database-get-range-path-indexes(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-range-path-indexes"}, {"content": "admin:database-get-range-policy-partition-key(${1:\\$range-policy as element(db:assignment-policy)})", "description": "($range-policy)", "trigger": "admin:database-get-range-policy-partition-key"}, {"content": "admin:database-get-rebalancer-enable(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-rebalancer-enable"}, {"content": "admin:database-get-rebalancer-throttle(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-rebalancer-throttle"}, {"content": "admin:database-get-reindexer-enable(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-reindexer-enable"}, {"content": "admin:database-get-reindexer-throttle(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-reindexer-throttle"}, {"content": "admin:database-get-reindexer-timestamp(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-reindexer-timestamp"}, {"content": "admin:database-get-retired-forests(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-retired-forests"}, {"content": "admin:database-get-schema-database(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-schema-database"}, {"content": "admin:database-get-security-database(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-security-database"}, {"content": "admin:database-get-stemmed-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-stemmed-searches"}, {"content": "admin:database-get-tf-normalization(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-tf-normalization"}, {"content": "admin:database-get-three-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-three-character-searches"}, {"content": "admin:database-get-three-character-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-three-character-word-positions"}, {"content": "admin:database-get-trailing-wildcard-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-trailing-wildcard-searches"}, {"content": "admin:database-get-trailing-wildcard-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-trailing-wildcard-word-positions"}, {"content": "admin:database-get-triggers-database(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-triggers-database"}, {"content": "admin:database-get-triple-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-triple-index"}, {"content": "admin:database-get-triple-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-triple-positions"}, {"content": "admin:database-get-two-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-two-character-searches"}, {"content": "admin:database-get-uri-lexicon(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-uri-lexicon"}, {"content": "admin:database-get-word-lexicons(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-word-lexicons"}, {"content": "admin:database-get-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-word-positions"}, {"content": "admin:database-get-word-query-excluded-elements(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-word-query-excluded-elements"}, {"content": "admin:database-get-word-query-fast-case-sensitive-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-word-query-fast-case-sensitive-searches"}, {"content": "admin:database-get-word-query-fast-diacritic-sensitive-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-word-query-fast-diacritic-sensitive-searches"}, {"content": "admin:database-get-word-query-fast-phrase-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-word-query-fast-phrase-searches"}, {"content": "admin:database-get-word-query-include-document-root(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-word-query-include-document-root"}, {"content": "admin:database-get-word-query-included-elements(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-word-query-included-elements"}, {"content": "admin:database-get-word-query-one-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-word-query-one-character-searches"}, {"content": "admin:database-get-word-query-stemmed-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-word-query-stemmed-searches"}, {"content": "admin:database-get-word-query-three-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-word-query-three-character-searches"}, {"content": "admin:database-get-word-query-three-character-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-word-query-three-character-word-positions"}, {"content": "admin:database-get-word-query-trailing-wildcard-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-word-query-trailing-wildcard-searches"}, {"content": "admin:database-get-word-query-trailing-wildcard-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-word-query-trailing-wildcard-word-positions"}, {"content": "admin:database-get-word-query-two-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-word-query-two-character-searches"}, {"content": "admin:database-get-word-query-word-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-word-query-word-searches"}, {"content": "admin:database-get-word-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-get-word-searches"}, {"content": "admin:database-hourly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-minute as xs:nonNegativeInteger}, ${4:\\$max-backups as xs:unsignedLong}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean})", "description": "($backup-dir,$backup-period,$start-minute,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db)", "trigger": "admin:database-hourly-backup"}, {"content": "admin:database-hourly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-minute as xs:nonNegativeInteger}, ${4:\\$max-backups as xs:unsignedLong}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean}, ${8:\\$include-replicas as xs:boolean})", "description": "($backup-dir,$backup-period,$start-minute,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db,$include-replicas)", "trigger": "admin:database-hourly-backup"}, {"content": "admin:database-hourly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-minute as xs:nonNegativeInteger}, ${4:\\$max-backups as xs:unsignedLong}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean}, ${8:\\$include-replicas as xs:boolean}, ${9:\\$journal-archiving as xs:boolean?})", "description": "($backup-dir,$backup-period,$start-minute,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db,$include-replicas,$journal-archiving)", "trigger": "admin:database-hourly-backup"}, {"content": "admin:database-hourly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-minute as xs:nonNegativeInteger}, ${4:\\$max-backups as xs:unsignedLong}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean}, ${8:\\$include-replicas as xs:boolean}, ${9:\\$journal-archiving as xs:boolean?}, ${10:\\$journal-archive-path as xs:string?})", "description": "($backup-dir,$backup-period,$start-minute,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db,$include-replicas,$journal-archiving,$journal-archive-path)", "trigger": "admin:database-hourly-backup"}, {"content": "admin:database-hourly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-minute as xs:nonNegativeInteger}, ${4:\\$max-backups as xs:unsignedLong}, ${5:\\$backup-security-db as xs:boolean}, ${6:\\$backup-schemas-db as xs:boolean}, ${7:\\$backup-triggers-db as xs:boolean}, ${8:\\$include-replicas as xs:boolean}, ${9:\\$journal-archiving as xs:boolean?}, ${10:\\$journal-archive-path as xs:string?}, ${11:\\$lag-limit as xs:unsignedLong?})", "description": "($backup-dir,$backup-period,$start-minute,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db,$include-replicas,$journal-archiving,$journal-archive-path,$lag-limit)", "trigger": "admin:database-hourly-backup"}, {"content": "admin:database-in-use-path-namespace-prefixes(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-in-use-path-namespace-prefixes"}, {"content": "admin:database-included-element(${1:\\$namespace as xs:string?}, ${2:\\$localname as xs:string}, ${3:\\$weight as xs:double}, ${4:\\$attribute-namespace as xs:string?}, ${5:\\$attribute-localname as xs:string}, ${6:\\$attribute-value as xs:string})", "description": "($namespace,$localname,$weight,$attribute-namespace,$attribute-localname,$attribute-value)", "trigger": "admin:database-included-element"}, {"content": "admin:database-is-forest-employed(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$forest-id as xs:unsignedLong})", "description": "($config,$database-id,$forest-id)", "trigger": "admin:database-is-forest-employed"}, {"content": "admin:database-is-forest-retired(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$forest-id as xs:unsignedLong})", "description": "($config,$database-id,$forest-id)", "trigger": "admin:database-is-forest-retired"}, {"content": "admin:database-minutely-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$max-backups as xs:unsignedLong}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean})", "description": "($backup-dir,$backup-period,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db)", "trigger": "admin:database-minutely-backup"}, {"content": "admin:database-minutely-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$max-backups as xs:unsignedLong}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean}, ${7:\\$include-replicas as xs:boolean})", "description": "($backup-dir,$backup-period,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db,$include-replicas)", "trigger": "admin:database-minutely-backup"}, {"content": "admin:database-minutely-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$max-backups as xs:unsignedLong}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean}, ${7:\\$include-replicas as xs:boolean}, ${8:\\$journal-archiving as xs:boolean?})", "description": "($backup-dir,$backup-period,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db,$include-replicas,$journal-archiving)", "trigger": "admin:database-minutely-backup"}, {"content": "admin:database-minutely-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$max-backups as xs:unsignedLong}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean}, ${7:\\$include-replicas as xs:boolean}, ${8:\\$journal-archiving as xs:boolean?}, ${9:\\$journal-archive-path as xs:string?})", "description": "($backup-dir,$backup-period,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db,$include-replicas,$journal-archiving,$journal-archive-path)", "trigger": "admin:database-minutely-backup"}, {"content": "admin:database-minutely-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$max-backups as xs:unsignedLong}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean}, ${7:\\$include-replicas as xs:boolean}, ${8:\\$journal-archiving as xs:boolean?}, ${9:\\$journal-archive-path as xs:string?}, ${10:\\$lag-limit as xs:unsignedLong?})", "description": "($backup-dir,$backup-period,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db,$include-replicas,$journal-archiving,$journal-archive-path,$lag-limit)", "trigger": "admin:database-minutely-backup"}, {"content": "admin:database-monthly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$backup-month-day as xs:unsignedLong}, ${4:\\$start-time as xs:time}, ${5:\\$max-backups as xs:unsignedLong}, ${6:\\$backup-security-db as xs:boolean}, ${7:\\$backup-schemas-db as xs:boolean}, ${8:\\$backup-triggers-db as xs:boolean})", "description": "($backup-dir,$backup-period,$backup-month-day,$start-time,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db)", "trigger": "admin:database-monthly-backup"}, {"content": "admin:database-monthly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$backup-month-day as xs:unsignedLong}, ${4:\\$start-time as xs:time}, ${5:\\$max-backups as xs:unsignedLong}, ${6:\\$backup-security-db as xs:boolean}, ${7:\\$backup-schemas-db as xs:boolean}, ${8:\\$backup-triggers-db as xs:boolean}, ${9:\\$include-replicas as xs:boolean})", "description": "($backup-dir,$backup-period,$backup-month-day,$start-time,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db,$include-replicas)", "trigger": "admin:database-monthly-backup"}, {"content": "admin:database-monthly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$backup-month-day as xs:unsignedLong}, ${4:\\$start-time as xs:time}, ${5:\\$max-backups as xs:unsignedLong}, ${6:\\$backup-security-db as xs:boolean}, ${7:\\$backup-schemas-db as xs:boolean}, ${8:\\$backup-triggers-db as xs:boolean}, ${9:\\$include-replicas as xs:boolean}, ${10:\\$journal-archiving as xs:boolean?})", "description": "($backup-dir,$backup-period,$backup-month-day,$start-time,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db,$include-replicas,$journal-archiving)", "trigger": "admin:database-monthly-backup"}, {"content": "admin:database-monthly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$backup-month-day as xs:unsignedLong}, ${4:\\$start-time as xs:time}, ${5:\\$max-backups as xs:unsignedLong}, ${6:\\$backup-security-db as xs:boolean}, ${7:\\$backup-schemas-db as xs:boolean}, ${8:\\$backup-triggers-db as xs:boolean}, ${9:\\$include-replicas as xs:boolean}, ${10:\\$journal-archiving as xs:boolean?}, ${11:\\$journal-archive-path as xs:string?})", "description": "($backup-dir,$backup-period,$backup-month-day,$start-time,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db,$include-replicas,$journal-archiving,$journal-archive-path)", "trigger": "admin:database-monthly-backup"}, {"content": "admin:database-monthly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$backup-month-day as xs:unsignedLong}, ${4:\\$start-time as xs:time}, ${5:\\$max-backups as xs:unsignedLong}, ${6:\\$backup-security-db as xs:boolean}, ${7:\\$backup-schemas-db as xs:boolean}, ${8:\\$backup-triggers-db as xs:boolean}, ${9:\\$include-replicas as xs:boolean}, ${10:\\$journal-archiving as xs:boolean?}, ${11:\\$journal-archive-path as xs:string?}, ${12:\\$lag-limit as xs:unsignedLong?})", "description": "($backup-dir,$backup-period,$backup-month-day,$start-time,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db,$include-replicas,$journal-archiving,$journal-archive-path,$lag-limit)", "trigger": "admin:database-monthly-backup"}, {"content": "admin:database-one-time-backup(${1:\\$backup-dir as xs:string}, ${2:\\$start as xs:dateTime}, ${3:\\$max-backups as xs:unsignedLong}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean})", "description": "($backup-dir,$start,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db)", "trigger": "admin:database-one-time-backup"}, {"content": "admin:database-one-time-backup(${1:\\$backup-dir as xs:string}, ${2:\\$start as xs:dateTime}, ${3:\\$max-backups as xs:unsignedLong}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean}, ${7:\\$include-replicas as xs:boolean})", "description": "($backup-dir,$start,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db,$include-replicas)", "trigger": "admin:database-one-time-backup"}, {"content": "admin:database-one-time-backup(${1:\\$backup-dir as xs:string}, ${2:\\$start as xs:dateTime}, ${3:\\$max-backups as xs:unsignedLong}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean}, ${7:\\$include-replicas as xs:boolean}, ${8:\\$journal-archiving as xs:boolean?})", "description": "($backup-dir,$start,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db,$include-replicas,$journal-archiving)", "trigger": "admin:database-one-time-backup"}, {"content": "admin:database-one-time-backup(${1:\\$backup-dir as xs:string}, ${2:\\$start as xs:dateTime}, ${3:\\$max-backups as xs:unsignedLong}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean}, ${7:\\$include-replicas as xs:boolean}, ${8:\\$journal-archiving as xs:boolean?}, ${9:\\$journal-archive-path as xs:string?})", "description": "($backup-dir,$start,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db,$include-replicas,$journal-archiving,$journal-archive-path)", "trigger": "admin:database-one-time-backup"}, {"content": "admin:database-one-time-backup(${1:\\$backup-dir as xs:string}, ${2:\\$start as xs:dateTime}, ${3:\\$max-backups as xs:unsignedLong}, ${4:\\$backup-security-db as xs:boolean}, ${5:\\$backup-schemas-db as xs:boolean}, ${6:\\$backup-triggers-db as xs:boolean}, ${7:\\$include-replicas as xs:boolean}, ${8:\\$journal-archiving as xs:boolean?}, ${9:\\$journal-archive-path as xs:string?}, ${10:\\$lag-limit as xs:unsignedLong?})", "description": "($backup-dir,$start,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db,$include-replicas,$journal-archiving,$journal-archive-path,$lag-limit)", "trigger": "admin:database-one-time-backup"}, {"content": "admin:database-one-time-merge-blackout(${1:\\$limit as xs:unsignedInt}, ${2:\\$merge-priority as xs:string}, ${3:\\$start as xs:dateTime}, ${4:\\$end as xs:dateTime?}, ${5:\\$duration as xs:duration?})", "description": "($limit,$merge-priority,$start,$end,$duration)", "trigger": "admin:database-one-time-merge-blackout"}, {"content": "admin:database-path-field(${1:\\$field-name as xs:string}, ${2:\\$field-paths as element(db:field-path)+})", "description": "($field-name,$field-paths)", "trigger": "admin:database-path-field"}, {"content": "admin:database-path-namespace(${1:\\$prefix as xs:string}, ${2:\\$namespace-uri as xs:string})", "description": "($prefix,$namespace-uri)", "trigger": "admin:database-path-namespace"}, {"content": "admin:database-phrase-around(${1:\\$namespace as xs:string?}, ${2:\\$localname as xs:string})", "description": "($namespace,$localname)", "trigger": "admin:database-phrase-around"}, {"content": "admin:database-phrase-through(${1:\\$namespace as xs:string?}, ${2:\\$localname as xs:string})", "description": "($namespace,$localname)", "trigger": "admin:database-phrase-through"}, {"content": "admin:database-range-element-attribute-index(${1:\\$scalar-type as xs:string}, ${2:\\$parent-namespace as xs:string?}, ${3:\\$parent-localname as xs:string}, ${4:\\$namespace as xs:string?}, ${5:\\$localname as xs:string}, ${6:\\$collation as xs:string?}, ${7:\\$range-value-positions as xs:boolean})", "description": "($scalar-type,$parent-namespace,$parent-localname,$namespace,$localname,$collation,$range-value-positions)", "trigger": "admin:database-range-element-attribute-index"}, {"content": "admin:database-range-element-attribute-index(${1:\\$scalar-type as xs:string}, ${2:\\$parent-namespace as xs:string?}, ${3:\\$parent-localname as xs:string}, ${4:\\$namespace as xs:string?}, ${5:\\$localname as xs:string}, ${6:\\$collation as xs:string?}, ${7:\\$range-value-positions as xs:boolean}, ${8:\\$invalid-values as xs:string})", "description": "($scalar-type,$parent-namespace,$parent-localname,$namespace,$localname,$collation,$range-value-positions,$invalid-values)", "trigger": "admin:database-range-element-attribute-index"}, {"content": "admin:database-range-element-index(${1:\\$scalar-type as xs:string}, ${2:\\$namespace as xs:string?}, ${3:\\$localname as xs:string}, ${4:\\$collation as xs:string?}, ${5:\\$range-value-positions as xs:boolean})", "description": "($scalar-type,$namespace,$localname,$collation,$range-value-positions)", "trigger": "admin:database-range-element-index"}, {"content": "admin:database-range-element-index(${1:\\$scalar-type as xs:string}, ${2:\\$namespace as xs:string?}, ${3:\\$localname as xs:string}, ${4:\\$collation as xs:string?}, ${5:\\$range-value-positions as xs:boolean}, ${6:\\$invalid-values as xs:string})", "description": "($scalar-type,$namespace,$localname,$collation,$range-value-positions,$invalid-values)", "trigger": "admin:database-range-element-index"}, {"content": "admin:database-range-field-index(${1:\\$scalar-type as xs:string}, ${2:\\$fieldname as xs:string}, ${3:\\$collation as xs:string?}, ${4:\\$range-value-positions as xs:boolean})", "description": "($scalar-type,$fieldname,$collation,$range-value-positions)", "trigger": "admin:database-range-field-index"}, {"content": "admin:database-range-field-index(${1:\\$scalar-type as xs:string}, ${2:\\$fieldname as xs:string}, ${3:\\$collation as xs:string?}, ${4:\\$range-value-positions as xs:boolean}, ${5:\\$invalid-values as xs:string})", "description": "($scalar-type,$fieldname,$collation,$range-value-positions,$invalid-values)", "trigger": "admin:database-range-field-index"}, {"content": "admin:database-range-path-index(${1:\\$database-id as xs:unsignedLong}, ${2:\\$scalar-type as xs:string}, ${3:\\$pathexpr as xs:string}, ${4:\\$collation as xs:string?}, ${5:\\$range-value-positions as xs:boolean}, ${6:\\$invalid-values as xs:string})", "description": "($database-id,$scalar-type,$pathexpr,$collation,$range-value-positions,$invalid-values)", "trigger": "admin:database-range-path-index"}, {"content": "admin:database-recurring-merge-blackout(${1:\\$limit as xs:unsignedInt}, ${2:\\$merge-priority as xs:string}, ${3:\\$days as xs:string+}, ${4:\\$start-time as xs:time?}, ${5:\\$end-time as xs:time?}, ${6:\\$duration as xs:duration?})", "description": "($limit,$merge-priority,$days,$start-time,$end-time,$duration)", "trigger": "admin:database-recurring-merge-blackout"}, {"content": "admin:database-reorder-forests(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$forest-ids as xs:unsignedLong*})", "description": "($config,$database-id,$forest-ids)", "trigger": "admin:database-reorder-forests"}, {"content": "admin:database-retire-forest(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$forest-id as xs:unsignedLong})", "description": "($config,$database-id,$forest-id)", "trigger": "admin:database-retire-forest"}, {"content": "admin:database-set-assignment-policy(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$policy as element(db:assignment-policy)})", "description": "($config,$database-id,$policy)", "trigger": "admin:database-set-assignment-policy"}, {"content": "admin:database-set-attribute-value-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-attribute-value-positions"}, {"content": "admin:database-set-collection-lexicon(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-collection-lexicon"}, {"content": "admin:database-set-directory-creation(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-directory-creation"}, {"content": "admin:database-set-element-value-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-element-value-positions"}, {"content": "admin:database-set-element-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-element-word-positions"}, {"content": "admin:database-set-enabled(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-enabled"}, {"content": "admin:database-set-expunge-locks(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-expunge-locks"}, {"content": "admin:database-set-fast-case-sensitive-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-fast-case-sensitive-searches"}, {"content": "admin:database-set-fast-diacritic-sensitive-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-fast-diacritic-sensitive-searches"}, {"content": "admin:database-set-fast-element-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-fast-element-character-searches"}, {"content": "admin:database-set-fast-element-phrase-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-fast-element-phrase-searches"}, {"content": "admin:database-set-fast-element-trailing-wildcard-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-fast-element-trailing-wildcard-searches"}, {"content": "admin:database-set-fast-element-word-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-fast-element-word-searches"}, {"content": "admin:database-set-fast-phrase-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-fast-phrase-searches"}, {"content": "admin:database-set-fast-reverse-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-fast-reverse-searches"}, {"content": "admin:database-set-field-fast-case-sensitive-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:boolean?})", "description": "($config,$database-id,$field-name,$value)", "trigger": "admin:database-set-field-fast-case-sensitive-searches"}, {"content": "admin:database-set-field-fast-diacritic-sensitive-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:boolean?})", "description": "($config,$database-id,$field-name,$value)", "trigger": "admin:database-set-field-fast-diacritic-sensitive-searches"}, {"content": "admin:database-set-field-fast-phrase-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:boolean?})", "description": "($config,$database-id,$field-name,$value)", "trigger": "admin:database-set-field-fast-phrase-searches"}, {"content": "admin:database-set-field-include-document-root(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:boolean})", "description": "($config,$database-id,$field-name,$value)", "trigger": "admin:database-set-field-include-document-root"}, {"content": "admin:database-set-field-name(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:string})", "description": "($config,$database-id,$field-name,$value)", "trigger": "admin:database-set-field-name"}, {"content": "admin:database-set-field-one-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:boolean?})", "description": "($config,$database-id,$field-name,$value)", "trigger": "admin:database-set-field-one-character-searches"}, {"content": "admin:database-set-field-stemmed-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:string?})", "description": "($config,$database-id,$field-name,$value)", "trigger": "admin:database-set-field-stemmed-searches"}, {"content": "admin:database-set-field-three-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:boolean?})", "description": "($config,$database-id,$field-name,$value)", "trigger": "admin:database-set-field-three-character-searches"}, {"content": "admin:database-set-field-three-character-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:boolean?})", "description": "($config,$database-id,$field-name,$value)", "trigger": "admin:database-set-field-three-character-word-positions"}, {"content": "admin:database-set-field-trailing-wildcard-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:boolean?})", "description": "($config,$database-id,$field-name,$value)", "trigger": "admin:database-set-field-trailing-wildcard-searches"}, {"content": "admin:database-set-field-trailing-wildcard-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:boolean?})", "description": "($config,$database-id,$field-name,$value)", "trigger": "admin:database-set-field-trailing-wildcard-word-positions"}, {"content": "admin:database-set-field-two-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:boolean?})", "description": "($config,$database-id,$field-name,$value)", "trigger": "admin:database-set-field-two-character-searches"}, {"content": "admin:database-set-field-value-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:boolean?})", "description": "($config,$database-id,$field-name,$value)", "trigger": "admin:database-set-field-value-positions"}, {"content": "admin:database-set-field-value-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:boolean?})", "description": "($config,$database-id,$field-name,$value)", "trigger": "admin:database-set-field-value-searches"}, {"content": "admin:database-set-field-word-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-name as xs:string}, ${4:\\$value as xs:boolean?})", "description": "($config,$database-id,$field-name,$value)", "trigger": "admin:database-set-field-word-searches"}, {"content": "admin:database-set-foreign-master(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$foreign-master as element(db:foreign-master)})", "description": "($config,$database-id,$foreign-master)", "trigger": "admin:database-set-foreign-master"}, {"content": "admin:database-set-foreign-replicas(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$replicas as element(db:foreign-replica)*})", "description": "($config,$database-id,$replicas)", "trigger": "admin:database-set-foreign-replicas"}, {"content": "admin:database-set-format-compatibility(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-format-compatibility"}, {"content": "admin:database-set-in-memory-limit(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-in-memory-limit"}, {"content": "admin:database-set-in-memory-list-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-in-memory-list-size"}, {"content": "admin:database-set-in-memory-range-index-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-in-memory-range-index-size"}, {"content": "admin:database-set-in-memory-reverse-index-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-in-memory-reverse-index-size"}, {"content": "admin:database-set-in-memory-tree-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-in-memory-tree-size"}, {"content": "admin:database-set-in-memory-triple-index-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-in-memory-triple-index-size"}, {"content": "admin:database-set-index-detection(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-index-detection"}, {"content": "admin:database-set-inherit-collections(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-inherit-collections"}, {"content": "admin:database-set-inherit-permissions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-inherit-permissions"}, {"content": "admin:database-set-inherit-quality(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-inherit-quality"}, {"content": "admin:database-set-journal-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-journal-size"}, {"content": "admin:database-set-journaling(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-journaling"}, {"content": "admin:database-set-language(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-language"}, {"content": "admin:database-set-large-size-threshold(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-large-size-threshold"}, {"content": "admin:database-set-locking(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-locking"}, {"content": "admin:database-set-maintain-directory-last-modified(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-maintain-directory-last-modified"}, {"content": "admin:database-set-maintain-last-modified(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-maintain-last-modified"}, {"content": "admin:database-set-merge-max-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-merge-max-size"}, {"content": "admin:database-set-merge-min-ratio(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-merge-min-ratio"}, {"content": "admin:database-set-merge-min-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-merge-min-size"}, {"content": "admin:database-set-merge-priority(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-merge-priority"}, {"content": "admin:database-set-merge-timestamp(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:long})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-merge-timestamp"}, {"content": "admin:database-set-name(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-name"}, {"content": "admin:database-set-one-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-one-character-searches"}, {"content": "admin:database-set-positions-list-max-size(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-positions-list-max-size"}, {"content": "admin:database-set-preallocate-journals(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-preallocate-journals"}, {"content": "admin:database-set-preload-mapped-data(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-preload-mapped-data"}, {"content": "admin:database-set-preload-replica-mapped-data(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-preload-replica-mapped-data"}, {"content": "admin:database-set-range-index-optimize(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-range-index-optimize"}, {"content": "admin:database-set-rebalancer-enable(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-rebalancer-enable"}, {"content": "admin:database-set-rebalancer-throttle(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-rebalancer-throttle"}, {"content": "admin:database-set-reindexer-enable(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-reindexer-enable"}, {"content": "admin:database-set-reindexer-throttle(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-reindexer-throttle"}, {"content": "admin:database-set-reindexer-timestamp(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedLong})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-reindexer-timestamp"}, {"content": "admin:database-set-schema-database(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedLong})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-schema-database"}, {"content": "admin:database-set-security-database(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedLong})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-security-database"}, {"content": "admin:database-set-stemmed-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-stemmed-searches"}, {"content": "admin:database-set-tf-normalization(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-tf-normalization"}, {"content": "admin:database-set-three-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-three-character-searches"}, {"content": "admin:database-set-three-character-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-three-character-word-positions"}, {"content": "admin:database-set-trailing-wildcard-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-trailing-wildcard-searches"}, {"content": "admin:database-set-trailing-wildcard-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-trailing-wildcard-word-positions"}, {"content": "admin:database-set-triggers-database(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedLong})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-triggers-database"}, {"content": "admin:database-set-triple-index(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-triple-index"}, {"content": "admin:database-set-triple-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-triple-positions"}, {"content": "admin:database-set-two-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-two-character-searches"}, {"content": "admin:database-set-uri-lexicon(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-uri-lexicon"}, {"content": "admin:database-set-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-word-positions"}, {"content": "admin:database-set-word-query-fast-case-sensitive-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean?})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-word-query-fast-case-sensitive-searches"}, {"content": "admin:database-set-word-query-fast-diacritic-sensitive-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean?})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-word-query-fast-diacritic-sensitive-searches"}, {"content": "admin:database-set-word-query-fast-phrase-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean?})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-word-query-fast-phrase-searches"}, {"content": "admin:database-set-word-query-include-document-root(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-word-query-include-document-root"}, {"content": "admin:database-set-word-query-one-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean?})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-word-query-one-character-searches"}, {"content": "admin:database-set-word-query-stemmed-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:string?})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-word-query-stemmed-searches"}, {"content": "admin:database-set-word-query-three-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean?})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-word-query-three-character-searches"}, {"content": "admin:database-set-word-query-three-character-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean?})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-word-query-three-character-word-positions"}, {"content": "admin:database-set-word-query-trailing-wildcard-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean?})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-word-query-trailing-wildcard-searches"}, {"content": "admin:database-set-word-query-trailing-wildcard-word-positions(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean?})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-word-query-trailing-wildcard-word-positions"}, {"content": "admin:database-set-word-query-two-character-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean?})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-word-query-two-character-searches"}, {"content": "admin:database-set-word-query-word-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean?})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-word-query-word-searches"}, {"content": "admin:database-set-word-searches(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$database-id,$value)", "trigger": "admin:database-set-word-searches"}, {"content": "admin:database-sub-databases(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-sub-databases"}, {"content": "admin:database-super-databases(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong})", "description": "($config,$database-id)", "trigger": "admin:database-super-databases"}, {"content": "admin:database-tokenizer-override(${1:\\$character as xs:string}, ${2:\\$class as xs:string})", "description": "($character,$class)", "trigger": "admin:database-tokenizer-override"}, {"content": "admin:database-validate-field-path(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-path as element(db:field-path)})", "description": "($config,$database-id,$field-path)", "trigger": "admin:database-validate-field-path"}, {"content": "admin:database-validate-field-paths(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$field-paths as element(db:field-path)*})", "description": "($config,$database-id,$field-paths)", "trigger": "admin:database-validate-field-paths"}, {"content": "admin:database-validate-path-fields(${1:\\$config as element(configuration)}, ${2:\\$database-id as xs:unsignedLong}, ${3:\\$fields as element(db:field)*})", "description": "($config,$database-id,$fields)", "trigger": "admin:database-validate-path-fields"}, {"content": "admin:database-weekly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$days as xs:string+}, ${4:\\$start-time as xs:time}, ${5:\\$max-backups as xs:unsignedLong}, ${6:\\$backup-security-db as xs:boolean}, ${7:\\$backup-schemas-db as xs:boolean}, ${8:\\$backup-triggers-db as xs:boolean})", "description": "($backup-dir,$backup-period,$days,$start-time,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db)", "trigger": "admin:database-weekly-backup"}, {"content": "admin:database-weekly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$days as xs:string+}, ${4:\\$start-time as xs:time}, ${5:\\$max-backups as xs:unsignedLong}, ${6:\\$backup-security-db as xs:boolean}, ${7:\\$backup-schemas-db as xs:boolean}, ${8:\\$backup-triggers-db as xs:boolean}, ${9:\\$include-replicas as xs:boolean})", "description": "($backup-dir,$backup-period,$days,$start-time,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db,$include-replicas)", "trigger": "admin:database-weekly-backup"}, {"content": "admin:database-weekly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$days as xs:string+}, ${4:\\$start-time as xs:time}, ${5:\\$max-backups as xs:unsignedLong}, ${6:\\$backup-security-db as xs:boolean}, ${7:\\$backup-schemas-db as xs:boolean}, ${8:\\$backup-triggers-db as xs:boolean}, ${9:\\$include-replicas as xs:boolean}, ${10:\\$journal-archiving as xs:boolean})", "description": "($backup-dir,$backup-period,$days,$start-time,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db,$include-replicas,$journal-archiving)", "trigger": "admin:database-weekly-backup"}, {"content": "admin:database-weekly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$days as xs:string+}, ${4:\\$start-time as xs:time}, ${5:\\$max-backups as xs:unsignedLong}, ${6:\\$backup-security-db as xs:boolean}, ${7:\\$backup-schemas-db as xs:boolean}, ${8:\\$backup-triggers-db as xs:boolean}, ${9:\\$include-replicas as xs:boolean}, ${10:\\$journal-archiving as xs:boolean}, ${11:\\$journal-archive-path as xs:string})", "description": "($backup-dir,$backup-period,$days,$start-time,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db,$include-replicas,$journal-archiving,$journal-archive-path)", "trigger": "admin:database-weekly-backup"}, {"content": "admin:database-weekly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$days as xs:string+}, ${4:\\$start-time as xs:time}, ${5:\\$max-backups as xs:unsignedLong}, ${6:\\$backup-security-db as xs:boolean}, ${7:\\$backup-schemas-db as xs:boolean}, ${8:\\$backup-triggers-db as xs:boolean}, ${9:\\$include-replicas as xs:boolean}, ${10:\\$journal-archiving as xs:boolean}, ${11:\\$journal-archive-path as xs:string}, ${12:\\$lag-limit as xs:unsignedLong})", "description": "($backup-dir,$backup-period,$days,$start-time,$max-backups,$backup-security-db,$backup-schemas-db,$backup-triggers-db,$include-replicas,$journal-archiving,$journal-archive-path,$lag-limit)", "trigger": "admin:database-weekly-backup"}, {"content": "admin:database-word-lexicon(${1:\\$collation as xs:string})", "description": "($collation)", "trigger": "admin:database-word-lexicon"}, {"content": "admin:foreign-cluster-create(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong}, ${3:\\$cluster-name as xs:string}, ${4:\\$xdqp-timeout as xs:unsignedInt?}, ${5:\\$host-timeout as xs:unsignedInt?}, ${6:\\$ssl-certificate as xs:string?}, ${7:\\$xdqp-ssl-enabled as xs:boolean?}, ${8:\\$xdqp-ssl-allow-sslv3 as xs:boolean?}, ${9:\\$xdqp-ssl-allow-tls as xs:boolean?}, ${10:\\$xdqp-ssl-ciphers as xs:string?}, ${11:\\$foreign-bootstrap-hosts as element(cl:foreign-host)*})", "description": "($config,$cluster-id,$cluster-name,$xdqp-timeout,$host-timeout,$ssl-certificate,$xdqp-ssl-enabled,$xdqp-ssl-allow-sslv3,$xdqp-ssl-allow-tls,$xdqp-ssl-ciphers,$foreign-bootstrap-hosts)", "trigger": "admin:foreign-cluster-create"}, {"content": "admin:foreign-cluster-delete(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong})", "description": "($config,$cluster-id)", "trigger": "admin:foreign-cluster-delete"}, {"content": "admin:foreign-cluster-get-bootstrap-hosts(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong})", "description": "($config,$cluster-id)", "trigger": "admin:foreign-cluster-get-bootstrap-hosts"}, {"content": "admin:foreign-cluster-get-host-timeout(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong})", "description": "($config,$cluster-id)", "trigger": "admin:foreign-cluster-get-host-timeout"}, {"content": "admin:foreign-cluster-get-name(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong})", "description": "($config,$cluster-id)", "trigger": "admin:foreign-cluster-get-name"}, {"content": "admin:foreign-cluster-get-ssl-certificate(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong})", "description": "($config,$cluster-id)", "trigger": "admin:foreign-cluster-get-ssl-certificate"}, {"content": "admin:foreign-cluster-get-xdqp-ssl-allow-sslv3(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong})", "description": "($config,$cluster-id)", "trigger": "admin:foreign-cluster-get-xdqp-ssl-allow-sslv3"}, {"content": "admin:foreign-cluster-get-xdqp-ssl-allow-tls(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong})", "description": "($config,$cluster-id)", "trigger": "admin:foreign-cluster-get-xdqp-ssl-allow-tls"}, {"content": "admin:foreign-cluster-get-xdqp-ssl-ciphers(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong})", "description": "($config,$cluster-id)", "trigger": "admin:foreign-cluster-get-xdqp-ssl-ciphers"}, {"content": "admin:foreign-cluster-get-xdqp-ssl-enabled(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong})", "description": "($config,$cluster-id)", "trigger": "admin:foreign-cluster-get-xdqp-ssl-enabled"}, {"content": "admin:foreign-cluster-get-xdqp-timeout(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong})", "description": "($config,$cluster-id)", "trigger": "admin:foreign-cluster-get-xdqp-timeout"}, {"content": "admin:foreign-cluster-replace(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong}, ${3:\\$cluster-name as xs:string}, ${4:\\$xdqp-timeout as xs:unsignedInt?}, ${5:\\$host-timeout as xs:unsignedInt?}, ${6:\\$ssl-certificate as xs:string?}, ${7:\\$xdqp-ssl-enabled as xs:boolean?}, ${8:\\$xdqp-ssl-allow-sslv3 as xs:boolean?}, ${9:\\$xdqp-ssl-allow-tls as xs:boolean?}, ${10:\\$xdqp-ssl-ciphers as xs:string?}, ${11:\\$foreign-bootstrap-hosts as element(cl:foreign-host)*})", "description": "($config,$cluster-id,$cluster-name,$xdqp-timeout,$host-timeout,$ssl-certificate,$xdqp-ssl-enabled,$xdqp-ssl-allow-sslv3,$xdqp-ssl-allow-tls,$xdqp-ssl-ciphers,$foreign-bootstrap-hosts)", "trigger": "admin:foreign-cluster-replace"}, {"content": "admin:foreign-cluster-set-bootstrap-hosts(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong}, ${3:\\$bootstrap-hosts as element(cl:foreign-host)*})", "description": "($config,$cluster-id,$bootstrap-hosts)", "trigger": "admin:foreign-cluster-set-bootstrap-hosts"}, {"content": "admin:foreign-cluster-set-host-timeout(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong}, ${3:\\$host-timeout as xs:unsignedInt})", "description": "($config,$cluster-id,$host-timeout)", "trigger": "admin:foreign-cluster-set-host-timeout"}, {"content": "admin:foreign-cluster-set-name(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong}, ${3:\\$cluster-name as xs:string})", "description": "($config,$cluster-id,$cluster-name)", "trigger": "admin:foreign-cluster-set-name"}, {"content": "admin:foreign-cluster-set-ssl-certificate(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong}, ${3:\\$ssl-certificate as xs:string?})", "description": "($config,$cluster-id,$ssl-certificate)", "trigger": "admin:foreign-cluster-set-ssl-certificate"}, {"content": "admin:foreign-cluster-set-xdqp-ssl-allow-sslv3(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$cluster-id,$value)", "trigger": "admin:foreign-cluster-set-xdqp-ssl-allow-sslv3"}, {"content": "admin:foreign-cluster-set-xdqp-ssl-allow-tls(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$cluster-id,$value)", "trigger": "admin:foreign-cluster-set-xdqp-ssl-allow-tls"}, {"content": "admin:foreign-cluster-set-xdqp-ssl-ciphers(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$cluster-id,$value)", "trigger": "admin:foreign-cluster-set-xdqp-ssl-ciphers"}, {"content": "admin:foreign-cluster-set-xdqp-ssl-enabled(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$cluster-id,$value)", "trigger": "admin:foreign-cluster-set-xdqp-ssl-enabled"}, {"content": "admin:foreign-cluster-set-xdqp-timeout(${1:\\$config as element(configuration)}, ${2:\\$cluster-id as xs:unsignedLong}, ${3:\\$xdqp-timeout as xs:unsignedInt})", "description": "($config,$cluster-id,$xdqp-timeout)", "trigger": "admin:foreign-cluster-set-xdqp-timeout"}, {"content": "admin:foreign-host(${1:\\$host-id as xs:unsignedLong}, ${2:\\$host-name as xs:string}, ${3:\\$connect-port as xs:unsignedInt})", "description": "($host-id,$host-name,$connect-port)", "trigger": "admin:foreign-host"}, {"content": "admin:foreign-host-get-connect-port(${1:\\$fh as element(cl:foreign-host)})", "description": "($fh)", "trigger": "admin:foreign-host-get-connect-port"}, {"content": "admin:foreign-host-get-id(${1:\\$fh as element(cl:foreign-host)})", "description": "($fh)", "trigger": "admin:foreign-host-get-id"}, {"content": "admin:foreign-host-get-name(${1:\\$fh as element(cl:foreign-host)})", "description": "($fh)", "trigger": "admin:foreign-host-get-name"}, {"content": "admin:forest-add-backup(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$backups as element(as:forest-backup)*})", "description": "($config,$forest-id,$backups)", "trigger": "admin:forest-add-backup"}, {"content": "admin:forest-add-failover-host(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$hosts as xs:unsignedLong*})", "description": "($config,$forest-id,$hosts)", "trigger": "admin:forest-add-failover-host"}, {"content": "admin:forest-add-foreign-replicas(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$foreign-replicas as element(as:foreign-replica)*})", "description": "($config,$forest-id,$foreign-replicas)", "trigger": "admin:forest-add-foreign-replicas"}, {"content": "admin:forest-add-replica(${1:\\$config as element(configuration)}, ${2:\\$master-id as xs:unsignedLong}, ${3:\\$replica-id as xs:unsignedLong})", "description": "($config,$master-id,$replica-id)", "trigger": "admin:forest-add-replica"}, {"content": "admin:forest-copy(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$forest-name as xs:string}, ${4:\\$data-directory as xs:string?})", "description": "($config,$forest-id,$forest-name,$data-directory)", "trigger": "admin:forest-copy"}, {"content": "admin:forest-copy(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$forest-name as xs:string}, ${4:\\$data-directory as xs:string?}, ${5:\\$large-data-directory as xs:string?})", "description": "($config,$forest-id,$forest-name,$data-directory,$large-data-directory)", "trigger": "admin:forest-copy"}, {"content": "admin:forest-copy(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$forest-name as xs:string}, ${4:\\$data-directory as xs:string?}, ${5:\\$large-data-directory as xs:string?}, ${6:\\$fast-data-directory as xs:string?})", "description": "($config,$forest-id,$forest-name,$data-directory,$large-data-directory,$fast-data-directory)", "trigger": "admin:forest-copy"}, {"content": "admin:forest-create(${1:\\$config as element(configuration)}, ${2:\\$forest-name as xs:string}, ${3:\\$host-id as xs:unsignedLong}, ${4:\\$data-directory as xs:string?})", "description": "($config,$forest-name,$host-id,$data-directory)", "trigger": "admin:forest-create"}, {"content": "admin:forest-create(${1:\\$config as element(configuration)}, ${2:\\$forest-name as xs:string}, ${3:\\$host-id as xs:unsignedLong}, ${4:\\$data-directory as xs:string?}, ${5:\\$large-data-directory as xs:string?})", "description": "($config,$forest-name,$host-id,$data-directory,$large-data-directory)", "trigger": "admin:forest-create"}, {"content": "admin:forest-create(${1:\\$config as element(configuration)}, ${2:\\$forest-name as xs:string}, ${3:\\$host-id as xs:unsignedLong}, ${4:\\$data-directory as xs:string?}, ${5:\\$large-data-directory as xs:string?}, ${6:\\$fast-data-directory as xs:string?})", "description": "($config,$forest-name,$host-id,$data-directory,$large-data-directory,$fast-data-directory)", "trigger": "admin:forest-create"}, {"content": "admin:forest-daily-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-time as xs:time})", "description": "($backup-dir,$backup-period,$start-time)", "trigger": "admin:forest-daily-backup"}, {"content": "admin:forest-delete(${1:\\$config as element(configuration)}, ${2:\\$forest-ids as xs:unsignedLong*}, ${3:\\$delete-data as xs:boolean})", "description": "($config,$forest-ids,$delete-data)", "trigger": "admin:forest-delete"}, {"content": "admin:forest-delete-backup(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$backups as element(as:forest-backup)*})", "description": "($config,$forest-id,$backups)", "trigger": "admin:forest-delete-backup"}, {"content": "admin:forest-delete-failover-host(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$hosts as xs:unsignedLong*})", "description": "($config,$forest-id,$hosts)", "trigger": "admin:forest-delete-failover-host"}, {"content": "admin:forest-delete-foreign-master(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "description": "($config,$forest-id)", "trigger": "admin:forest-delete-foreign-master"}, {"content": "admin:forest-delete-foreign-replicas(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$foreign-replicas as element(as:foreign-replica)*})", "description": "($config,$forest-id,$foreign-replicas)", "trigger": "admin:forest-delete-foreign-replicas"}, {"content": "admin:forest-exists(${1:\\$config as element(configuration)}, ${2:\\$forest-name as xs:string})", "description": "($config,$forest-name)", "trigger": "admin:forest-exists"}, {"content": "admin:forest-foreign-master(${1:\\$foreign-cluster-id as xs:unsignedLong}, ${2:\\$foreign-database-id as xs:unsignedLong}, ${3:\\$foreign-forest-id as xs:unsignedLong})", "description": "($foreign-cluster-id,$foreign-database-id,$foreign-forest-id)", "trigger": "admin:forest-foreign-master"}, {"content": "admin:forest-foreign-master-get-cluster-id(${1:\\$foreign-master as element(as:foreign-master)})", "description": "($foreign-master)", "trigger": "admin:forest-foreign-master-get-cluster-id"}, {"content": "admin:forest-foreign-master-get-database-id(${1:\\$foreign-master as element(as:foreign-master)})", "description": "($foreign-master)", "trigger": "admin:forest-foreign-master-get-database-id"}, {"content": "admin:forest-foreign-master-get-forest-id(${1:\\$foreign-master as element(as:foreign-master)})", "description": "($foreign-master)", "trigger": "admin:forest-foreign-master-get-forest-id"}, {"content": "admin:forest-foreign-replica(${1:\\$foreign-cluster-id as xs:unsignedLong}, ${2:\\$foreign-database-id as xs:unsignedLong}, ${3:\\$foreign-forest-id as xs:unsignedLong})", "description": "($foreign-cluster-id,$foreign-database-id,$foreign-forest-id)", "trigger": "admin:forest-foreign-replica"}, {"content": "admin:forest-foreign-replica-get-cluster-id(${1:\\$foreign-replica as element(as:foreign-replica)})", "description": "($foreign-replica)", "trigger": "admin:forest-foreign-replica-get-cluster-id"}, {"content": "admin:forest-foreign-replica-get-database-id(${1:\\$foreign-replica as element(as:foreign-replica)})", "description": "($foreign-replica)", "trigger": "admin:forest-foreign-replica-get-database-id"}, {"content": "admin:forest-foreign-replica-get-forest-id(${1:\\$foreign-replica as element(as:foreign-replica)})", "description": "($foreign-replica)", "trigger": "admin:forest-foreign-replica-get-forest-id"}, {"content": "admin:forest-get-availability(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "description": "($config,$forest-id)", "trigger": "admin:forest-get-availability"}, {"content": "admin:forest-get-backups(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "description": "($config,$forest-id)", "trigger": "admin:forest-get-backups"}, {"content": "admin:forest-get-data-directory(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "description": "($config,$forest-id)", "trigger": "admin:forest-get-data-directory"}, {"content": "admin:forest-get-database(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "description": "($config,$forest-id)", "trigger": "admin:forest-get-database"}, {"content": "admin:forest-get-enabled(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "description": "($config,$forest-id)", "trigger": "admin:forest-get-enabled"}, {"content": "admin:forest-get-failover-enable(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "description": "($config,$forest-id)", "trigger": "admin:forest-get-failover-enable"}, {"content": "admin:forest-get-failover-hosts(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "description": "($config,$forest-id)", "trigger": "admin:forest-get-failover-hosts"}, {"content": "admin:forest-get-fast-data-directory(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "description": "($config,$forest-id)", "trigger": "admin:forest-get-fast-data-directory"}, {"content": "admin:forest-get-foreign-master(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "description": "($config,$forest-id)", "trigger": "admin:forest-get-foreign-master"}, {"content": "admin:forest-get-foreign-replicas(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "description": "($config,$forest-id)", "trigger": "admin:forest-get-foreign-replicas"}, {"content": "admin:forest-get-host(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "description": "($config,$forest-id)", "trigger": "admin:forest-get-host"}, {"content": "admin:forest-get-id(${1:\\$config as element(configuration)}, ${2:\\$forest-name as xs:string})", "description": "($config,$forest-name)", "trigger": "admin:forest-get-id"}, {"content": "admin:forest-get-large-data-directory(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "description": "($config,$forest-id)", "trigger": "admin:forest-get-large-data-directory"}, {"content": "admin:forest-get-name(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "description": "($config,$forest-id)", "trigger": "admin:forest-get-name"}, {"content": "admin:forest-get-range-policy-lower-bound(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "description": "($config,$forest-id)", "trigger": "admin:forest-get-range-policy-lower-bound"}, {"content": "admin:forest-get-range-policy-upper-bound(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "description": "($config,$forest-id)", "trigger": "admin:forest-get-range-policy-upper-bound"}, {"content": "admin:forest-get-rebalancer-enable(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "description": "($config,$forest-id)", "trigger": "admin:forest-get-rebalancer-enable"}, {"content": "admin:forest-get-replicas(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "description": "($config,$forest-id)", "trigger": "admin:forest-get-replicas"}, {"content": "admin:forest-get-updates-allowed(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "description": "($config,$forest-id)", "trigger": "admin:forest-get-updates-allowed"}, {"content": "admin:forest-hourly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$start-minute as xs:nonNegativeInteger})", "description": "($backup-dir,$backup-period,$start-minute)", "trigger": "admin:forest-hourly-backup"}, {"content": "admin:forest-is-range-policy-range-set(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong})", "description": "($config,$forest-id)", "trigger": "admin:forest-is-range-policy-range-set"}, {"content": "admin:forest-minutely-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger})", "description": "($backup-dir,$backup-period)", "trigger": "admin:forest-minutely-backup"}, {"content": "admin:forest-monthly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$backup-month-day as xs:unsignedInt}, ${4:\\$start-time as xs:time})", "description": "($backup-dir,$backup-period,$backup-month-day,$start-time)", "trigger": "admin:forest-monthly-backup"}, {"content": "admin:forest-one-time-backup(${1:\\$backup-dir as xs:string}, ${2:\\$start as xs:dateTime})", "description": "($backup-dir,$start)", "trigger": "admin:forest-one-time-backup"}, {"content": "admin:forest-remove-replica(${1:\\$config as element(configuration)}, ${2:\\$master-id as xs:unsignedLong}, ${3:\\$replica-id as xs:unsignedLong})", "description": "($config,$master-id,$replica-id)", "trigger": "admin:forest-remove-replica"}, {"content": "admin:forest-rename(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$new-name as xs:string})", "description": "($config,$forest-id,$new-name)", "trigger": "admin:forest-rename"}, {"content": "admin:forest-set-availability(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$forest-id,$value)", "trigger": "admin:forest-set-availability"}, {"content": "admin:forest-set-enabled(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$forest-id,$value)", "trigger": "admin:forest-set-enabled"}, {"content": "admin:forest-set-failover-enable(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$forest-id,$value)", "trigger": "admin:forest-set-failover-enable"}, {"content": "admin:forest-set-foreign-master(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$foreign-master as element(as:foreign-master)})", "description": "($config,$forest-id,$foreign-master)", "trigger": "admin:forest-set-foreign-master"}, {"content": "admin:forest-set-foreign-replicas(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$foreign-replicas as element(as:foreign-replica)*})", "description": "($config,$forest-id,$foreign-replicas)", "trigger": "admin:forest-set-foreign-replicas"}, {"content": "admin:forest-set-host(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedLong})", "description": "($config,$forest-id,$value)", "trigger": "admin:forest-set-host"}, {"content": "admin:forest-set-range-policy-range(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$lower-bound as item()?}, ${4:\\$upper-bound as item()?})", "description": "($config,$forest-id,$lower-bound,$upper-bound)", "trigger": "admin:forest-set-range-policy-range"}, {"content": "admin:forest-set-rebalancer-enable(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$forest-id,$value)", "trigger": "admin:forest-set-rebalancer-enable"}, {"content": "admin:forest-set-updates-allowed(${1:\\$config as element(configuration)}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$forest-id,$value)", "trigger": "admin:forest-set-updates-allowed"}, {"content": "admin:forest-weekly-backup(${1:\\$backup-dir as xs:string}, ${2:\\$backup-period as xs:positiveInteger}, ${3:\\$days as xs:string+}, ${4:\\$start-time as xs:time})", "description": "($backup-dir,$backup-period,$days,$start-time)", "trigger": "admin:forest-weekly-backup"}, {"content": "admin:get-appserver-ids(${1:\\$config as element(configuration)})", "description": "($config)", "trigger": "admin:get-appserver-ids"}, {"content": "admin:get-configuration()", "trigger": "admin:get-configuration"}, {"content": "admin:get-database-ids(${1:\\$config as element(configuration)})", "description": "($config)", "trigger": "admin:get-database-ids"}, {"content": "admin:get-forest-ids(${1:\\$config as element(configuration)})", "description": "($config)", "trigger": "admin:get-forest-ids"}, {"content": "admin:get-group-ids(${1:\\$config as element(configuration)})", "description": "($config)", "trigger": "admin:get-group-ids"}, {"content": "admin:get-host-ids(${1:\\$config as element(configuration)})", "description": "($config)", "trigger": "admin:get-host-ids"}, {"content": "admin:group-add-module-location(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$module-locations as element(gr:module-location)*})", "description": "($config,$group-id,$module-locations)", "trigger": "admin:group-add-module-location"}, {"content": "admin:group-add-namespace(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$namespaces as element(gr:namespace)*})", "description": "($config,$group-id,$namespaces)", "trigger": "admin:group-add-namespace"}, {"content": "admin:group-add-scheduled-task(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$scheduled-tasks as element(gr:scheduled-task)*})", "description": "($config,$group-id,$scheduled-tasks)", "trigger": "admin:group-add-scheduled-task"}, {"content": "admin:group-add-schema(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$schemas as element(gr:schema)*})", "description": "($config,$group-id,$schemas)", "trigger": "admin:group-add-schema"}, {"content": "admin:group-add-trace-event(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$events as element(gr:event)*})", "description": "($config,$group-id,$events)", "trigger": "admin:group-add-trace-event"}, {"content": "admin:group-add-using-namespace(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$namespaces as element(gr:using-namespace)*})", "description": "($config,$group-id,$namespaces)", "trigger": "admin:group-add-using-namespace"}, {"content": "admin:group-copy(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$group-name as xs:string})", "description": "($config,$group-id,$group-name)", "trigger": "admin:group-copy"}, {"content": "admin:group-create(${1:\\$config as element(configuration)}, ${2:\\$group-name as xs:string})", "description": "($config,$group-name)", "trigger": "admin:group-create"}, {"content": "admin:group-daily-scheduled-task(${1:\\$task-path as xs:string}, ${2:\\$task-root as xs:string}, ${3:\\$task-period as xs:positiveInteger}, ${4:\\$task-start-time as xs:time}, ${5:\\$task-database as xs:unsignedLong}, ${6:\\$task-modules as xs:unsignedLong}, ${7:\\$task-user as xs:unsignedLong}, ${8:\\$task-host as xs:unsignedLong?})", "description": "($task-path,$task-root,$task-period,$task-start-time,$task-database,$task-modules,$task-user,$task-host)", "trigger": "admin:group-daily-scheduled-task"}, {"content": "admin:group-daily-scheduled-task(${1:\\$task-path as xs:string}, ${2:\\$task-root as xs:string}, ${3:\\$task-period as xs:positiveInteger}, ${4:\\$task-start-time as xs:time}, ${5:\\$task-database as xs:unsignedLong}, ${6:\\$task-modules as xs:unsignedLong}, ${7:\\$task-user as xs:unsignedLong}, ${8:\\$task-host as xs:unsignedLong?}, ${9:\\$task-priority as xs:string?})", "description": "($task-path,$task-root,$task-period,$task-start-time,$task-database,$task-modules,$task-user,$task-host,$task-priority)", "trigger": "admin:group-daily-scheduled-task"}, {"content": "admin:group-delete(${1:\\$config as element(configuration)}, ${2:\\$group-ids as xs:unsignedLong*})", "description": "($config,$group-ids)", "trigger": "admin:group-delete"}, {"content": "admin:group-delete-module-location(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$module-locations as element(gr:module-location)*})", "description": "($config,$group-id,$module-locations)", "trigger": "admin:group-delete-module-location"}, {"content": "admin:group-delete-namespace(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$namespaces as element(gr:namespace)*})", "description": "($config,$group-id,$namespaces)", "trigger": "admin:group-delete-namespace"}, {"content": "admin:group-delete-scheduled-task(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$scheduled-tasks as element(gr:scheduled-task)*})", "description": "($config,$group-id,$scheduled-tasks)", "trigger": "admin:group-delete-scheduled-task"}, {"content": "admin:group-delete-schema(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$schemas as element(gr:schema)*})", "description": "($config,$group-id,$schemas)", "trigger": "admin:group-delete-schema"}, {"content": "admin:group-delete-trace-event(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$events as element(gr:event)*})", "description": "($config,$group-id,$events)", "trigger": "admin:group-delete-trace-event"}, {"content": "admin:group-delete-using-namespace(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$namespaces as element(gr:using-namespace)*})", "description": "($config,$group-id,$namespaces)", "trigger": "admin:group-delete-using-namespace"}, {"content": "admin:group-disable-audit-event-type(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$event-type as xs:string*})", "description": "($config,$group-id,$event-type)", "trigger": "admin:group-disable-audit-event-type"}, {"content": "admin:group-enable-audit-event-type(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$event-type as xs:string*})", "description": "($config,$group-id,$event-type)", "trigger": "admin:group-enable-audit-event-type"}, {"content": "admin:group-exists(${1:\\$config as element(configuration)}, ${2:\\$group-name as xs:string})", "description": "($config,$group-name)", "trigger": "admin:group-exists"}, {"content": "admin:group-get-appserver-ids(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-appserver-ids"}, {"content": "admin:group-get-audit-enabled(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-audit-enabled"}, {"content": "admin:group-get-audit-event-type-enabled(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$event-type as xs:string})", "description": "($config,$group-id,$event-type)", "trigger": "admin:group-get-audit-event-type-enabled"}, {"content": "admin:group-get-audit-excluded-roles(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-audit-excluded-roles"}, {"content": "admin:group-get-audit-excluded-uris(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-audit-excluded-uris"}, {"content": "admin:group-get-audit-excluded-users(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-audit-excluded-users"}, {"content": "admin:group-get-audit-included-roles(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-audit-included-roles"}, {"content": "admin:group-get-audit-included-uris(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-audit-included-uris"}, {"content": "admin:group-get-audit-included-users(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-audit-included-users"}, {"content": "admin:group-get-audit-outcome-restriction(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-audit-outcome-restriction"}, {"content": "admin:group-get-background-io-limit(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-background-io-limit"}, {"content": "admin:group-get-compressed-tree-cache-partitions(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-compressed-tree-cache-partitions"}, {"content": "admin:group-get-compressed-tree-cache-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-compressed-tree-cache-size"}, {"content": "admin:group-get-compressed-tree-read-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-compressed-tree-read-size"}, {"content": "admin:group-get-expanded-tree-cache-partitions(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-expanded-tree-cache-partitions"}, {"content": "admin:group-get-expanded-tree-cache-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-expanded-tree-cache-size"}, {"content": "admin:group-get-failover-enable(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-failover-enable"}, {"content": "admin:group-get-file-log-level(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-file-log-level"}, {"content": "admin:group-get-host-ids(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-host-ids"}, {"content": "admin:group-get-host-initial-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-host-initial-timeout"}, {"content": "admin:group-get-host-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-host-timeout"}, {"content": "admin:group-get-http-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-http-timeout"}, {"content": "admin:group-get-http-user-agent(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-http-user-agent"}, {"content": "admin:group-get-httpserver-ids(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-httpserver-ids"}, {"content": "admin:group-get-id(${1:\\$config as element(configuration)}, ${2:\\$group-name as xs:string})", "description": "($config,$group-name)", "trigger": "admin:group-get-id"}, {"content": "admin:group-get-keep-audit-files(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-keep-audit-files"}, {"content": "admin:group-get-keep-log-files(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-keep-log-files"}, {"content": "admin:group-get-list-cache-partitions(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-list-cache-partitions"}, {"content": "admin:group-get-list-cache-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-list-cache-size"}, {"content": "admin:group-get-metering-enabled(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-metering-enabled"}, {"content": "admin:group-get-meters-database(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-meters-database"}, {"content": "admin:group-get-module-cache-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-module-cache-timeout"}, {"content": "admin:group-get-module-locations(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-module-locations"}, {"content": "admin:group-get-name(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-name"}, {"content": "admin:group-get-namespaces(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-namespaces"}, {"content": "admin:group-get-odbcserver-ids(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-odbcserver-ids"}, {"content": "admin:group-get-performance-metering-enabled(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-performance-metering-enabled"}, {"content": "admin:group-get-performance-metering-period(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-performance-metering-period"}, {"content": "admin:group-get-performance-metering-retain-daily(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-performance-metering-retain-daily"}, {"content": "admin:group-get-performance-metering-retain-hourly(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-performance-metering-retain-hourly"}, {"content": "admin:group-get-performance-metering-retain-raw(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-performance-metering-retain-raw"}, {"content": "admin:group-get-retry-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-retry-timeout"}, {"content": "admin:group-get-rotate-audit-files(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-rotate-audit-files"}, {"content": "admin:group-get-rotate-log-files(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-rotate-log-files"}, {"content": "admin:group-get-s3-domain(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-s3-domain"}, {"content": "admin:group-get-s3-protocol(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-s3-protocol"}, {"content": "admin:group-get-s3-server-side-encryption(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-s3-server-side-encryption"}, {"content": "admin:group-get-scheduled-tasks(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-scheduled-tasks"}, {"content": "admin:group-get-schemas(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-schemas"}, {"content": "admin:group-get-security-database(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-security-database"}, {"content": "admin:group-get-smtp-relay(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-smtp-relay"}, {"content": "admin:group-get-smtp-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-smtp-timeout"}, {"content": "admin:group-get-system-log-level(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-system-log-level"}, {"content": "admin:group-get-taskserver-id(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-taskserver-id"}, {"content": "admin:group-get-trace-events(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-trace-events"}, {"content": "admin:group-get-trace-events-activated(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-trace-events-activated"}, {"content": "admin:group-get-triple-cache-partitions(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-triple-cache-partitions"}, {"content": "admin:group-get-triple-cache-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-triple-cache-size"}, {"content": "admin:group-get-triple-cache-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-triple-cache-timeout"}, {"content": "admin:group-get-triple-value-cache-partitions(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-triple-value-cache-partitions"}, {"content": "admin:group-get-triple-value-cache-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-triple-value-cache-size"}, {"content": "admin:group-get-triple-value-cache-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-triple-value-cache-timeout"}, {"content": "admin:group-get-using-namespaces(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-using-namespaces"}, {"content": "admin:group-get-webdavserver-ids(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-webdavserver-ids"}, {"content": "admin:group-get-xdbcserver-ids(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-xdbcserver-ids"}, {"content": "admin:group-get-xdqp-ssl-allow-sslv3(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-xdqp-ssl-allow-sslv3"}, {"content": "admin:group-get-xdqp-ssl-allow-tls(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-xdqp-ssl-allow-tls"}, {"content": "admin:group-get-xdqp-ssl-ciphers(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-xdqp-ssl-ciphers"}, {"content": "admin:group-get-xdqp-ssl-enabled(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-xdqp-ssl-enabled"}, {"content": "admin:group-get-xdqp-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:group-get-xdqp-timeout"}, {"content": "admin:group-hourly-scheduled-task(${1:\\$task-path as xs:string}, ${2:\\$task-root as xs:string}, ${3:\\$task-period as xs:positiveInteger}, ${4:\\$task-minute as xs:nonNegativeInteger}, ${5:\\$task-database as xs:unsignedLong}, ${6:\\$task-modules as xs:unsignedLong}, ${7:\\$task-user as xs:unsignedLong}, ${8:\\$task-host as xs:unsignedLong?})", "description": "($task-path,$task-root,$task-period,$task-minute,$task-database,$task-modules,$task-user,$task-host)", "trigger": "admin:group-hourly-scheduled-task"}, {"content": "admin:group-hourly-scheduled-task(${1:\\$task-path as xs:string}, ${2:\\$task-root as xs:string}, ${3:\\$task-period as xs:positiveInteger}, ${4:\\$task-minute as xs:nonNegativeInteger}, ${5:\\$task-database as xs:unsignedLong}, ${6:\\$task-modules as xs:unsignedLong}, ${7:\\$task-user as xs:unsignedLong}, ${8:\\$task-host as xs:unsignedLong?}, ${9:\\$task-priority as xs:string?})", "description": "($task-path,$task-root,$task-period,$task-minute,$task-database,$task-modules,$task-user,$task-host,$task-priority)", "trigger": "admin:group-hourly-scheduled-task"}, {"content": "admin:group-minutely-scheduled-task(${1:\\$task-path as xs:string}, ${2:\\$task-root as xs:string}, ${3:\\$task-period as xs:positiveInteger}, ${4:\\$task-database as xs:unsignedLong}, ${5:\\$task-modules as xs:unsignedLong}, ${6:\\$task-user as xs:unsignedLong}, ${7:\\$task-host as xs:unsignedLong?})", "description": "($task-path,$task-root,$task-period,$task-database,$task-modules,$task-user,$task-host)", "trigger": "admin:group-minutely-scheduled-task"}, {"content": "admin:group-minutely-scheduled-task(${1:\\$task-path as xs:string}, ${2:\\$task-root as xs:string}, ${3:\\$task-period as xs:positiveInteger}, ${4:\\$task-database as xs:unsignedLong}, ${5:\\$task-modules as xs:unsignedLong}, ${6:\\$task-user as xs:unsignedLong}, ${7:\\$task-host as xs:unsignedLong?}, ${8:\\$task-priority as xs:string?})", "description": "($task-path,$task-root,$task-period,$task-database,$task-modules,$task-user,$task-host,$task-priority)", "trigger": "admin:group-minutely-scheduled-task"}, {"content": "admin:group-module-location(${1:\\$namespace-uri as xs:string}, ${2:\\$location as xs:string})", "description": "($namespace-uri,$location)", "trigger": "admin:group-module-location"}, {"content": "admin:group-monthly-scheduled-task(${1:\\$task-path as xs:string}, ${2:\\$task-root as xs:string}, ${3:\\$task-period as xs:positiveInteger}, ${4:\\$task-month-day as xs:unsignedLong}, ${5:\\$task-start-time as xs:time}, ${6:\\$task-database as xs:unsignedLong}, ${7:\\$task-modules as xs:unsignedLong}, ${8:\\$task-user as xs:unsignedLong}, ${9:\\$task-host as xs:unsignedLong?})", "description": "($task-path,$task-root,$task-period,$task-month-day,$task-start-time,$task-database,$task-modules,$task-user,$task-host)", "trigger": "admin:group-monthly-scheduled-task"}, {"content": "admin:group-monthly-scheduled-task(${1:\\$task-path as xs:string}, ${2:\\$task-root as xs:string}, ${3:\\$task-period as xs:positiveInteger}, ${4:\\$task-month-day as xs:unsignedLong}, ${5:\\$task-start-time as xs:time}, ${6:\\$task-database as xs:unsignedLong}, ${7:\\$task-modules as xs:unsignedLong}, ${8:\\$task-user as xs:unsignedLong}, ${9:\\$task-host as xs:unsignedLong?}, ${10:\\$task-priority as xs:string?})", "description": "($task-path,$task-root,$task-period,$task-month-day,$task-start-time,$task-database,$task-modules,$task-user,$task-host,$task-priority)", "trigger": "admin:group-monthly-scheduled-task"}, {"content": "admin:group-namespace(${1:\\$prefix as xs:string}, ${2:\\$namespace-uri as xs:string})", "description": "($prefix,$namespace-uri)", "trigger": "admin:group-namespace"}, {"content": "admin:group-one-time-scheduled-task(${1:\\$task-path as xs:string}, ${2:\\$task-root as xs:string}, ${3:\\$task-start as xs:dateTime}, ${4:\\$task-database as xs:unsignedLong}, ${5:\\$task-modules as xs:unsignedLong}, ${6:\\$task-user as xs:unsignedLong}, ${7:\\$task-host as xs:unsignedLong?})", "description": "($task-path,$task-root,$task-start,$task-database,$task-modules,$task-user,$task-host)", "trigger": "admin:group-one-time-scheduled-task"}, {"content": "admin:group-one-time-scheduled-task(${1:\\$task-path as xs:string}, ${2:\\$task-root as xs:string}, ${3:\\$task-start as xs:dateTime}, ${4:\\$task-database as xs:unsignedLong}, ${5:\\$task-modules as xs:unsignedLong}, ${6:\\$task-user as xs:unsignedLong}, ${7:\\$task-host as xs:unsignedLong?}, ${8:\\$task-priority as xs:string?})", "description": "($task-path,$task-root,$task-start,$task-database,$task-modules,$task-user,$task-host,$task-priority)", "trigger": "admin:group-one-time-scheduled-task"}, {"content": "admin:group-schema(${1:\\$namespace-uri as xs:string}, ${2:\\$schema-location as xs:string})", "description": "($namespace-uri,$schema-location)", "trigger": "admin:group-schema"}, {"content": "admin:group-set-audit-enabled(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-audit-enabled"}, {"content": "admin:group-set-audit-outcome-restriction(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$outcome as xs:string*})", "description": "($config,$group-id,$outcome)", "trigger": "admin:group-set-audit-outcome-restriction"}, {"content": "admin:group-set-audit-role-restriction(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$restriction-type as xs:string}, ${4:\\$roles as xs:string*})", "description": "($config,$group-id,$restriction-type,$roles)", "trigger": "admin:group-set-audit-role-restriction"}, {"content": "admin:group-set-audit-uri-restriction(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$restriction-type as xs:string}, ${4:\\$uris as xs:string*})", "description": "($config,$group-id,$restriction-type,$uris)", "trigger": "admin:group-set-audit-uri-restriction"}, {"content": "admin:group-set-audit-user-restriction(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$restriction-type as xs:string}, ${4:\\$users as xs:string*})", "description": "($config,$group-id,$restriction-type,$users)", "trigger": "admin:group-set-audit-user-restriction"}, {"content": "admin:group-set-background-io-limit(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$max-megabytes-per-second as xs:unsignedInt})", "description": "($config,$group-id,$max-megabytes-per-second)", "trigger": "admin:group-set-background-io-limit"}, {"content": "admin:group-set-compressed-tree-cache-partitions(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-compressed-tree-cache-partitions"}, {"content": "admin:group-set-compressed-tree-cache-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-compressed-tree-cache-size"}, {"content": "admin:group-set-compressed-tree-read-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-compressed-tree-read-size"}, {"content": "admin:group-set-expanded-tree-cache-partitions(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-expanded-tree-cache-partitions"}, {"content": "admin:group-set-expanded-tree-cache-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-expanded-tree-cache-size"}, {"content": "admin:group-set-failover-enable(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-failover-enable"}, {"content": "admin:group-set-file-log-level(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-file-log-level"}, {"content": "admin:group-set-host-initial-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-host-initial-timeout"}, {"content": "admin:group-set-host-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-host-timeout"}, {"content": "admin:group-set-http-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-http-timeout"}, {"content": "admin:group-set-http-user-agent(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-http-user-agent"}, {"content": "admin:group-set-keep-audit-files(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-keep-audit-files"}, {"content": "admin:group-set-keep-log-files(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-keep-log-files"}, {"content": "admin:group-set-list-cache-partitions(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-list-cache-partitions"}, {"content": "admin:group-set-list-cache-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-list-cache-size"}, {"content": "admin:group-set-metering-enabled(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-metering-enabled"}, {"content": "admin:group-set-meters-database(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedLong})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-meters-database"}, {"content": "admin:group-set-module-cache-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-module-cache-timeout"}, {"content": "admin:group-set-name(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-name"}, {"content": "admin:group-set-performance-metering-enabled(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-performance-metering-enabled"}, {"content": "admin:group-set-performance-metering-period(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-performance-metering-period"}, {"content": "admin:group-set-performance-metering-retain-daily(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-performance-metering-retain-daily"}, {"content": "admin:group-set-performance-metering-retain-hourly(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-performance-metering-retain-hourly"}, {"content": "admin:group-set-performance-metering-retain-raw(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-performance-metering-retain-raw"}, {"content": "admin:group-set-retry-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-retry-timeout"}, {"content": "admin:group-set-rotate-audit-files(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-rotate-audit-files"}, {"content": "admin:group-set-rotate-log-files(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-rotate-log-files"}, {"content": "admin:group-set-s3-domain(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$domain as xs:string})", "description": "($config,$group-id,$domain)", "trigger": "admin:group-set-s3-domain"}, {"content": "admin:group-set-s3-protocol(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$protocol as xs:string})", "description": "($config,$group-id,$protocol)", "trigger": "admin:group-set-s3-protocol"}, {"content": "admin:group-set-s3-server-side-encryption(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$protocol as xs:string})", "description": "($config,$group-id,$protocol)", "trigger": "admin:group-set-s3-server-side-encryption"}, {"content": "admin:group-set-security-database(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedLong})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-security-database"}, {"content": "admin:group-set-smtp-relay(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-smtp-relay"}, {"content": "admin:group-set-smtp-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-smtp-timeout"}, {"content": "admin:group-set-system-log-level(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-system-log-level"}, {"content": "admin:group-set-trace-events-activated(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-trace-events-activated"}, {"content": "admin:group-set-triple-cache-partitions(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-triple-cache-partitions"}, {"content": "admin:group-set-triple-cache-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-triple-cache-size"}, {"content": "admin:group-set-triple-cache-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-triple-cache-timeout"}, {"content": "admin:group-set-triple-value-cache-partitions(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-triple-value-cache-partitions"}, {"content": "admin:group-set-triple-value-cache-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-triple-value-cache-size"}, {"content": "admin:group-set-triple-value-cache-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-triple-value-cache-timeout"}, {"content": "admin:group-set-xdqp-ssl-allow-sslv3(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-xdqp-ssl-allow-sslv3"}, {"content": "admin:group-set-xdqp-ssl-allow-tls(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-xdqp-ssl-allow-tls"}, {"content": "admin:group-set-xdqp-ssl-ciphers(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-xdqp-ssl-ciphers"}, {"content": "admin:group-set-xdqp-ssl-enabled(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-xdqp-ssl-enabled"}, {"content": "admin:group-set-xdqp-timeout(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:group-set-xdqp-timeout"}, {"content": "admin:group-trace-event(${1:\\$event-id as xs:string})", "description": "($event-id)", "trigger": "admin:group-trace-event"}, {"content": "admin:group-using-namespace(${1:\\$namespace-uri as xs:string})", "description": "($namespace-uri)", "trigger": "admin:group-using-namespace"}, {"content": "admin:group-weekly-scheduled-task(${1:\\$task-path as xs:string}, ${2:\\$task-root as xs:string}, ${3:\\$task-period as xs:positiveInteger}, ${4:\\$task-days as xs:string+}, ${5:\\$task-start-time as xs:time}, ${6:\\$task-database as xs:unsignedLong}, ${7:\\$task-modules as xs:unsignedLong}, ${8:\\$task-user as xs:unsignedLong}, ${9:\\$task-host as xs:unsignedLong?})", "description": "($task-path,$task-root,$task-period,$task-days,$task-start-time,$task-database,$task-modules,$task-user,$task-host)", "trigger": "admin:group-weekly-scheduled-task"}, {"content": "admin:group-weekly-scheduled-task(${1:\\$task-path as xs:string}, ${2:\\$task-root as xs:string}, ${3:\\$task-period as xs:positiveInteger}, ${4:\\$task-days as xs:string+}, ${5:\\$task-start-time as xs:time}, ${6:\\$task-database as xs:unsignedLong}, ${7:\\$task-modules as xs:unsignedLong}, ${8:\\$task-user as xs:unsignedLong}, ${9:\\$task-host as xs:unsignedLong?}, ${10:\\$task-priority as xs:string?})", "description": "($task-path,$task-root,$task-period,$task-days,$task-start-time,$task-database,$task-modules,$task-user,$task-host,$task-priority)", "trigger": "admin:group-weekly-scheduled-task"}, {"content": "admin:host-exists(${1:\\$config as element(configuration)}, ${2:\\$host-name as xs:string})", "description": "($config,$host-name)", "trigger": "admin:host-exists"}, {"content": "admin:host-get-foreign-port(${1:\\$config as element(configuration)}, ${2:\\$host-id as xs:unsignedLong})", "description": "($config,$host-id)", "trigger": "admin:host-get-foreign-port"}, {"content": "admin:host-get-group(${1:\\$config as element(configuration)}, ${2:\\$host-id as xs:unsignedLong})", "description": "($config,$host-id)", "trigger": "admin:host-get-group"}, {"content": "admin:host-get-id(${1:\\$config as element(configuration)}, ${2:\\$host-name as xs:string})", "description": "($config,$host-name)", "trigger": "admin:host-get-id"}, {"content": "admin:host-get-name(${1:\\$config as element(configuration)}, ${2:\\$host-id as xs:unsignedLong})", "description": "($config,$host-id)", "trigger": "admin:host-get-name"}, {"content": "admin:host-get-port(${1:\\$config as element(configuration)}, ${2:\\$host-id as xs:unsignedLong})", "description": "($config,$host-id)", "trigger": "admin:host-get-port"}, {"content": "admin:host-get-zone(${1:\\$config as element(configuration)}, ${2:\\$host-id as xs:unsignedLong})", "description": "($config,$host-id)", "trigger": "admin:host-get-zone"}, {"content": "admin:host-set-foreign-port(${1:\\$config as element(configuration)}, ${2:\\$host-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$host-id,$value)", "trigger": "admin:host-set-foreign-port"}, {"content": "admin:host-set-group(${1:\\$config as element(configuration)}, ${2:\\$host-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedLong})", "description": "($config,$host-id,$value)", "trigger": "admin:host-set-group"}, {"content": "admin:host-set-name(${1:\\$config as element(configuration)}, ${2:\\$host-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$host-id,$value)", "trigger": "admin:host-set-name"}, {"content": "admin:host-set-port(${1:\\$config as element(configuration)}, ${2:\\$host-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$host-id,$value)", "trigger": "admin:host-set-port"}, {"content": "admin:host-set-zone(${1:\\$config as element(configuration)}, ${2:\\$host-id as xs:unsignedLong}, ${3:\\$value as xs:string})", "description": "($config,$host-id,$value)", "trigger": "admin:host-set-zone"}, {"content": "admin:http-server-create(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$appserver-name as xs:string}, ${4:\\$root as xs:string}, ${5:\\$port as xs:unsignedLong}, ${6:\\$modules-id as item()}, ${7:\\$database-id as xs:unsignedLong})", "description": "($config,$group-id,$appserver-name,$root,$port,$modules-id,$database-id)", "trigger": "admin:http-server-create"}, {"content": "admin:legacy-assignment-policy()", "trigger": "admin:legacy-assignment-policy"}, {"content": "admin:mimetype(${1:\\$name as xs:string}, ${2:\\$extensions as xs:string}, ${3:\\$format as xs:string})", "description": "($name,$extensions,$format)", "trigger": "admin:mimetype"}, {"content": "admin:mimetypes-add(${1:\\$config as element(configuration)}, ${2:\\$mimetypes as element(mt:mimetype)*})", "description": "($config,$mimetypes)", "trigger": "admin:mimetypes-add"}, {"content": "admin:mimetypes-delete(${1:\\$config as element(configuration)}, ${2:\\$mimetypes as element(mt:mimetype)*})", "description": "($config,$mimetypes)", "trigger": "admin:mimetypes-delete"}, {"content": "admin:mimetypes-get(${1:\\$config as element(configuration)})", "description": "($config)", "trigger": "admin:mimetypes-get"}, {"content": "admin:odbc-server-create(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$appserver-name as xs:string}, ${4:\\$root as xs:string}, ${5:\\$port as xs:unsignedLong}, ${6:\\$modules-id as item()}, ${7:\\$database-id as xs:unsignedLong})", "description": "($config,$group-id,$appserver-name,$root,$port,$modules-id,$database-id)", "trigger": "admin:odbc-server-create"}, {"content": "admin:range-assignment-policy(${1:\\$partition-key as cts:reference}, ${2:\\$lower-bound-included as xs:boolean})", "description": "($partition-key,$lower-bound-included)", "trigger": "admin:range-assignment-policy"}, {"content": "admin:restart-hosts(${1:\\$hosts as xs:unsignedLong*})", "description": "($hosts)", "trigger": "admin:restart-hosts"}, {"content": "admin:save-configuration(${1:\\$config as element(configuration)})", "description": "($config)", "trigger": "admin:save-configuration"}, {"content": "admin:save-configuration-without-restart(${1:\\$config as element(configuration)})", "description": "($config)", "trigger": "admin:save-configuration-without-restart"}, {"content": "admin:statistical-assignment-policy()", "trigger": "admin:statistical-assignment-policy"}, {"content": "admin:taskserver-get-debug-allow(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:taskserver-get-debug-allow"}, {"content": "admin:taskserver-get-debug-threads(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:taskserver-get-debug-threads"}, {"content": "admin:taskserver-get-default-time-limit(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:taskserver-get-default-time-limit"}, {"content": "admin:taskserver-get-log-errors(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:taskserver-get-log-errors"}, {"content": "admin:taskserver-get-max-time-limit(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:taskserver-get-max-time-limit"}, {"content": "admin:taskserver-get-name(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:taskserver-get-name"}, {"content": "admin:taskserver-get-post-commit-trigger-depth(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:taskserver-get-post-commit-trigger-depth"}, {"content": "admin:taskserver-get-pre-commit-trigger-depth(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:taskserver-get-pre-commit-trigger-depth"}, {"content": "admin:taskserver-get-pre-commit-trigger-limit(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:taskserver-get-pre-commit-trigger-limit"}, {"content": "admin:taskserver-get-profile-allow(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:taskserver-get-profile-allow"}, {"content": "admin:taskserver-get-queue-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:taskserver-get-queue-size"}, {"content": "admin:taskserver-get-threads(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong})", "description": "($config,$group-id)", "trigger": "admin:taskserver-get-threads"}, {"content": "admin:taskserver-set-debug-allow(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$group-id,$value)", "trigger": "admin:taskserver-set-debug-allow"}, {"content": "admin:taskserver-set-debug-threads(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:taskserver-set-debug-threads"}, {"content": "admin:taskserver-set-default-time-limit(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:taskserver-set-default-time-limit"}, {"content": "admin:taskserver-set-log-errors(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$group-id,$value)", "trigger": "admin:taskserver-set-log-errors"}, {"content": "admin:taskserver-set-max-time-limit(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:taskserver-set-max-time-limit"}, {"content": "admin:taskserver-set-post-commit-trigger-depth(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:taskserver-set-post-commit-trigger-depth"}, {"content": "admin:taskserver-set-pre-commit-trigger-depth(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:taskserver-set-pre-commit-trigger-depth"}, {"content": "admin:taskserver-set-pre-commit-trigger-limit(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:taskserver-set-pre-commit-trigger-limit"}, {"content": "admin:taskserver-set-profile-allow(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:boolean})", "description": "($config,$group-id,$value)", "trigger": "admin:taskserver-set-profile-allow"}, {"content": "admin:taskserver-set-queue-size(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:taskserver-set-queue-size"}, {"content": "admin:taskserver-set-threads(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$value as xs:unsignedInt})", "description": "($config,$group-id,$value)", "trigger": "admin:taskserver-set-threads"}, {"content": "admin:webdav-server-create(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$appserver-name as xs:string}, ${4:\\$root as xs:string}, ${5:\\$port as xs:unsignedLong}, ${6:\\$database-id as xs:unsignedLong})", "description": "($config,$group-id,$appserver-name,$root,$port,$database-id)", "trigger": "admin:webdav-server-create"}, {"content": "admin:xdbc-server-create(${1:\\$config as element(configuration)}, ${2:\\$group-id as xs:unsignedLong}, ${3:\\$appserver-name as xs:string}, ${4:\\$root as xs:string}, ${5:\\$port as xs:unsignedLong}, ${6:\\$modules-id as item()}, ${7:\\$database-id as xs:unsignedLong})", "description": "($config,$group-id,$appserver-name,$root,$port,$modules-id,$database-id)", "trigger": "admin:xdbc-server-create"}, {"content": "alert:action-get-description(${1:\\$action as element(alert:action)})", "description": "($action)", "trigger": "alert:action-get-description"}, {"content": "alert:action-get-module(${1:\\$action as element(alert:action)})", "description": "($action)", "trigger": "alert:action-get-module"}, {"content": "alert:action-get-module-db(${1:\\$action as element(alert:action)})", "description": "($action)", "trigger": "alert:action-get-module-db"}, {"content": "alert:action-get-module-root(${1:\\$action as element(alert:action)})", "description": "($action)", "trigger": "alert:action-get-module-root"}, {"content": "alert:action-get-name(${1:\\$action as element(alert:action)})", "description": "($action)", "trigger": "alert:action-get-name"}, {"content": "alert:action-get-options(${1:\\$action as element(alert:action)})", "description": "($action)", "trigger": "alert:action-get-options"}, {"content": "alert:action-insert(${1:\\$collection-uri as xs:string}, ${2:\\$action as element(alert:action)})", "description": "($collection-uri,$action)", "trigger": "alert:action-insert"}, {"content": "alert:action-remove(${1:\\$collection-uri as xs:string}, ${2:\\$name as xs:string})", "description": "($collection-uri,$name)", "trigger": "alert:action-remove"}, {"content": "alert:action-set-description(${1:\\$action as element(alert:action)}, ${2:\\$description as xs:string})", "description": "($action,$description)", "trigger": "alert:action-set-description"}, {"content": "alert:action-set-module(${1:\\$action as element(alert:action)}, ${2:\\$module as xs:string})", "description": "($action,$module)", "trigger": "alert:action-set-module"}, {"content": "alert:action-set-module-db(${1:\\$action as element(alert:action)}, ${2:\\$module-db as xs:unsignedLong})", "description": "($action,$module-db)", "trigger": "alert:action-set-module-db"}, {"content": "alert:action-set-module-root(${1:\\$action as element(alert:action)}, ${2:\\$module-root as xs:string})", "description": "($action,$module-root)", "trigger": "alert:action-set-module-root"}, {"content": "alert:action-set-name(${1:\\$action as element(alert:action)}, ${2:\\$name as xs:string})", "description": "($action,$name)", "trigger": "alert:action-set-name"}, {"content": "alert:action-set-options(${1:\\$action as element(alert:action)}, ${2:\\$options as element(alert:options)})", "description": "($action,$options)", "trigger": "alert:action-set-options"}, {"content": "alert:config-delete(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "alert:config-delete"}, {"content": "alert:config-get(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "alert:config-get"}, {"content": "alert:config-get-cpf-domain-names(${1:\\$config as element(alert:config)})", "description": "($config)", "trigger": "alert:config-get-cpf-domain-names"}, {"content": "alert:config-get-description(${1:\\$config as element(alert:config)})", "description": "($config)", "trigger": "alert:config-get-description"}, {"content": "alert:config-get-id(${1:\\$config as element(alert:config)})", "description": "($config)", "trigger": "alert:config-get-id"}, {"content": "alert:config-get-name(${1:\\$config as element(alert:config)})", "description": "($config)", "trigger": "alert:config-get-name"}, {"content": "alert:config-get-options(${1:\\$config as element(alert:config)})", "description": "($config)", "trigger": "alert:config-get-options"}, {"content": "alert:config-get-trigger-ids(${1:\\$config as element(alert:config)})", "description": "($config)", "trigger": "alert:config-get-trigger-ids"}, {"content": "alert:config-get-uri(${1:\\$config as element(alert:config)})", "description": "($config)", "trigger": "alert:config-get-uri"}, {"content": "alert:config-insert(${1:\\$config as element(alert:config)})", "description": "($config)", "trigger": "alert:config-insert"}, {"content": "alert:config-set-cpf-domain-names(${1:\\$config as element(alert:config)}, ${2:\\$names as xs:string*})", "description": "($config,$names)", "trigger": "alert:config-set-cpf-domain-names"}, {"content": "alert:config-set-description(${1:\\$config as element(alert:config)}, ${2:\\$description as xs:string})", "description": "($config,$description)", "trigger": "alert:config-set-description"}, {"content": "alert:config-set-name(${1:\\$config as element(alert:config)}, ${2:\\$name as xs:string})", "description": "($config,$name)", "trigger": "alert:config-set-name"}, {"content": "alert:config-set-options(${1:\\$config as element(alert:config)}, ${2:\\$options as element(alert:options)})", "description": "($config,$options)", "trigger": "alert:config-set-options"}, {"content": "alert:config-set-trigger-ids(${1:\\$config as element(alert:config)}, ${2:\\$ids as xs:unsignedLong*})", "description": "($config,$ids)", "trigger": "alert:config-set-trigger-ids"}, {"content": "alert:create-triggers(${1:\\$uri as xs:string}, ${2:\\$events as element(trgr:data-event)*})", "description": "($uri,$events)", "trigger": "alert:create-triggers"}, {"content": "alert:find-matching-rules(${1:\\$config-uri as xs:string}, ${2:\\$doc as node()})", "description": "($config-uri,$doc)", "trigger": "alert:find-matching-rules"}, {"content": "alert:get-actions(${1:\\$collection-uri as xs:string}, ${2:\\$names as xs:string*})", "description": "($collection-uri,$names)", "trigger": "alert:get-actions"}, {"content": "alert:get-all-rules(${1:\\$collection-uri as xs:string}, ${2:\\$query as cts:query})", "description": "($collection-uri,$query)", "trigger": "alert:get-all-rules"}, {"content": "alert:get-my-rules(${1:\\$collection-uri as xs:string}, ${2:\\$query as cts:query})", "description": "($collection-uri,$query)", "trigger": "alert:get-my-rules"}, {"content": "alert:invoke-matching-actions(${1:\\$config-uri as xs:string}, ${2:\\$doc as node()}, ${3:\\$options as node()})", "description": "($config-uri,$doc,$options)", "trigger": "alert:invoke-matching-actions"}, {"content": "alert:make-action(${1:\\$name as xs:string}, ${2:\\$description as xs:string}, ${3:\\$module-db as xs:unsignedLong}, ${4:\\$module-root as xs:string}, ${5:\\$module as xs:string}, ${6:\\$options as element(alert:options)})", "description": "($name,$description,$module-db,$module-root,$module,$options)", "trigger": "alert:make-action"}, {"content": "alert:make-config(${1:\\$uri as xs:string}, ${2:\\$name as xs:string}, ${3:\\$description as xs:string}, ${4:\\$options as element(alert:options)})", "description": "($uri,$name,$description,$options)", "trigger": "alert:make-config"}, {"content": "alert:make-log-action()", "trigger": "alert:make-log-action"}, {"content": "alert:make-rule(${1:\\$name as xs:string}, ${2:\\$description as xs:string}, ${3:\\$user-id as xs:unsignedLong}, ${4:\\$query as cts:query}, ${5:\\$action as xs:string}, ${6:\\$options as element(alert:options)})", "description": "($name,$description,$user-id,$query,$action,$options)", "trigger": "alert:make-rule"}, {"content": "alert:remove-triggers(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "alert:remove-triggers"}, {"content": "alert:rule-action-query(${1:\\$actions as xs:string*})", "description": "($actions)", "trigger": "alert:rule-action-query"}, {"content": "alert:rule-get-action(${1:\\$rule as element(alert:rule)})", "description": "($rule)", "trigger": "alert:rule-get-action"}, {"content": "alert:rule-get-description(${1:\\$rule as element(alert:rule)})", "description": "($rule)", "trigger": "alert:rule-get-description"}, {"content": "alert:rule-get-id(${1:\\$rule as element(alert:rule)})", "description": "($rule)", "trigger": "alert:rule-get-id"}, {"content": "alert:rule-get-name(${1:\\$rule as element(alert:rule)})", "description": "($rule)", "trigger": "alert:rule-get-name"}, {"content": "alert:rule-get-options(${1:\\$rule as element(alert:rule)})", "description": "($rule)", "trigger": "alert:rule-get-options"}, {"content": "alert:rule-get-query(${1:\\$rule as element(alert:rule)})", "description": "($rule)", "trigger": "alert:rule-get-query"}, {"content": "alert:rule-get-user-id(${1:\\$rule as element(alert:rule)})", "description": "($rule)", "trigger": "alert:rule-get-user-id"}, {"content": "alert:rule-id-query(${1:\\$ids as xs:unsignedLong*})", "description": "($ids)", "trigger": "alert:rule-id-query"}, {"content": "alert:rule-insert(${1:\\$collection-uri as xs:string}, ${2:\\$rule as element(alert:rule)})", "description": "($collection-uri,$rule)", "trigger": "alert:rule-insert"}, {"content": "alert:rule-name-query(${1:\\$names as xs:string*})", "description": "($names)", "trigger": "alert:rule-name-query"}, {"content": "alert:rule-remove(${1:\\$collection-uri as xs:string}, ${2:\\$id as xs:unsignedLong})", "description": "($collection-uri,$id)", "trigger": "alert:rule-remove"}, {"content": "alert:rule-set-action(${1:\\$rule as element(alert:rule)}, ${2:\\$action as xs:string})", "description": "($rule,$action)", "trigger": "alert:rule-set-action"}, {"content": "alert:rule-set-description(${1:\\$rule as element(alert:rule)}, ${2:\\$description as xs:string})", "description": "($rule,$description)", "trigger": "alert:rule-set-description"}, {"content": "alert:rule-set-name(${1:\\$rule as element(alert:rule)}, ${2:\\$name as xs:string})", "description": "($rule,$name)", "trigger": "alert:rule-set-name"}, {"content": "alert:rule-set-options(${1:\\$rule as element(alert:rule)}, ${2:\\$options as element(alert:options)})", "description": "($rule,$options)", "trigger": "alert:rule-set-options"}, {"content": "alert:rule-set-query(${1:\\$rule as element(alert:rule)}, ${2:\\$query as cts:query})", "description": "($rule,$query)", "trigger": "alert:rule-set-query"}, {"content": "alert:rule-set-user-id(${1:\\$rule as element(alert:rule)}, ${2:\\$user-id as xs:unsignedLong})", "description": "($rule,$user-id)", "trigger": "alert:rule-set-user-id"}, {"content": "alert:rule-user-id-query(${1:\\$user-ids as xs:unsignedLong*})", "description": "($user-ids)", "trigger": "alert:rule-user-id-query"}, {"content": "alert:spawn-matching-actions(${1:\\$config-uri as xs:string}, ${2:\\$doc as node()}, ${3:\\$options as node()})", "description": "($config-uri,$doc,$options)", "trigger": "alert:spawn-matching-actions"}, {"content": "cdict:dictionary-delete(${1:\\$lang as xs:string})", "description": "($lang)", "trigger": "cdict:dictionary-delete"}, {"content": "cdict:dictionary-read(${1:\\$lang as xs:string})", "description": "($lang)", "trigger": "cdict:dictionary-read"}, {"content": "cdict:dictionary-write(${1:\\$lang as xs:string}, ${2:\\$dict as element(cdict:dictionary)})", "description": "($lang,$dict)", "trigger": "cdict:dictionary-write"}, {"content": "cdict:get-languages()", "trigger": "cdict:get-languages"}, {"content": "cpf:check-transition(${1:\\$docid as xs:string}, ${2:\\$transition as element(*}, p:transition)?})", "description": "($docid,$transition,p:transition)?)", "trigger": "cpf:check-transition"}, {"content": "cpf:document-get-error(${1:\\$doc as xs:string})", "description": "($doc)", "trigger": "cpf:document-get-error"}, {"content": "cpf:document-get-last-updated(${1:\\$doc as xs:string})", "description": "($doc)", "trigger": "cpf:document-get-last-updated"}, {"content": "cpf:document-get-processing-status(${1:\\$doc as xs:string})", "description": "($doc)", "trigger": "cpf:document-get-processing-status"}, {"content": "cpf:document-get-state(${1:\\$doc as xs:string})", "description": "($doc)", "trigger": "cpf:document-get-state"}, {"content": "cpf:document-set-error(${1:\\$doc as xs:string}, ${2:\\$error as node()?})", "description": "($doc,$error)", "trigger": "cpf:document-set-error"}, {"content": "cpf:document-set-last-updated(${1:\\$doc as xs:string}, ${2:\\$last-updated as xs:dateTime})", "description": "($doc,$last-updated)", "trigger": "cpf:document-set-last-updated"}, {"content": "cpf:document-set-processing-status(${1:\\$doc as xs:string}, ${2:\\$processing-status as xs:string})", "description": "($doc,$processing-status)", "trigger": "cpf:document-set-processing-status"}, {"content": "cpf:document-set-state(${1:\\$doc as xs:string}, ${2:\\$state as xs:anyURI})", "description": "($doc,$state)", "trigger": "cpf:document-set-state"}, {"content": "cpf:failure(${1:\\$docid as xs:string}, ${2:\\$transition as element(*}, p:transition)?}, ${3:\\$exception as node()?}, ${4:\\$override-state as xs:anyURI?})", "description": "($docid,$transition,p:transition)?,$exception,$override-state)", "trigger": "cpf:failure"}, {"content": "cpf:success(${1:\\$docid as xs:string}, ${2:\\$transition as element(*}, p:transition)?}, ${3:\\$override-state as xs:anyURI?})", "description": "($docid,$transition,p:transition)?,$override-state)", "trigger": "cpf:success"}, {"content": "css:convert(${1:\\$css as xs:string}, ${2:\\$options as element()?})", "description": "($css,$options)", "trigger": "css:convert"}, {"content": "css:get(${1:\\$doc as xs:string})", "description": "($doc)", "trigger": "css:get"}, {"content": "cts:aggregate(${1:\\$native-plugin as xs:string}, ${2:\\$aggregate-name as xs:string}, ${3:\\$range-indexes as cts:reference*}, ${4:\\$argument as item()*})", "description": "($native-plugin,$aggregate-name,$range-indexes,$argument)", "trigger": "cts:aggregate"}, {"content": "cts:aggregate(${1:\\$native-plugin as xs:string}, ${2:\\$aggregate-name as xs:string}, ${3:\\$range-indexes as cts:reference*}, ${4:\\$argument as item()*}, ${5:\\$options as xs:string*})", "description": "($native-plugin,$aggregate-name,$range-indexes,$argument,$options)", "trigger": "cts:aggregate"}, {"content": "cts:aggregate(${1:\\$native-plugin as xs:string}, ${2:\\$aggregate-name as xs:string}, ${3:\\$range-indexes as cts:reference*}, ${4:\\$argument as item()*}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?})", "description": "($native-plugin,$aggregate-name,$range-indexes,$argument,$options,$query)", "trigger": "cts:aggregate"}, {"content": "cts:aggregate(${1:\\$native-plugin as xs:string}, ${2:\\$aggregate-name as xs:string}, ${3:\\$range-indexes as cts:reference*}, ${4:\\$argument as item()*}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$forest-ids as xs:unsignedLong*})", "description": "($native-plugin,$aggregate-name,$range-indexes,$argument,$options,$query,$forest-ids)", "trigger": "cts:aggregate"}, {"content": "cts:and-not-query(${1:\\$positive-query as cts:query}, ${2:\\$negative-query as cts:query})", "description": "($positive-query,$negative-query)", "trigger": "cts:and-not-query"}, {"content": "cts:and-not-query-negative-query(${1:\\$query as cts:and-not-query})", "description": "($query)", "trigger": "cts:and-not-query-negative-query"}, {"content": "cts:and-not-query-positive-query(${1:\\$query as cts:and-not-query})", "description": "($query)", "trigger": "cts:and-not-query-positive-query"}, {"content": "cts:and-query(${1:\\$queries as cts:query*})", "description": "($queries)", "trigger": "cts:and-query"}, {"content": "cts:and-query(${1:\\$queries as cts:query*}, ${2:\\$options as xs:string*})", "description": "($queries,$options)", "trigger": "cts:and-query"}, {"content": "cts:and-query-options(${1:\\$query as cts:and-query})", "description": "($query)", "trigger": "cts:and-query-options"}, {"content": "cts:and-query-queries(${1:\\$query as cts:and-query})", "description": "($query)", "trigger": "cts:and-query-queries"}, {"content": "cts:arc-intersection(${1:\\$p1 as cts:point}, ${2:\\$p2 as cts:point}, ${3:\\$q1 as cts:point}, ${4:\\$q2 as cts:point})", "description": "($p1,$p2,$q1,$q2)", "trigger": "cts:arc-intersection"}, {"content": "cts:arc-intersection(${1:\\$p1 as cts:point}, ${2:\\$p2 as cts:point}, ${3:\\$q1 as cts:point}, ${4:\\$q2 as cts:point}, ${5:\\$options as xs:string*})", "description": "($p1,$p2,$q1,$q2,$options)", "trigger": "cts:arc-intersection"}, {"content": "cts:avg(${1:\\$arg as xs:anyAtomicType*})", "description": "($arg)", "trigger": "cts:avg"}, {"content": "cts:avg-aggregate(${1:\\$range-index as cts:reference})", "description": "($range-index)", "trigger": "cts:avg-aggregate"}, {"content": "cts:avg-aggregate(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*})", "description": "($range-index,$options)", "trigger": "cts:avg-aggregate"}, {"content": "cts:avg-aggregate(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "description": "($range-index,$options,$query)", "trigger": "cts:avg-aggregate"}, {"content": "cts:avg-aggregate(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$forest-ids as xs:unsignedLong*})", "description": "($range-index,$options,$query,$forest-ids)", "trigger": "cts:avg-aggregate"}, {"content": "cts:bearing(${1:\\$p1 as cts:point}, ${2:\\$p2 as cts:point})", "description": "($p1,$p2)", "trigger": "cts:bearing"}, {"content": "cts:bearing(${1:\\$p1 as cts:point}, ${2:\\$p2 as cts:point}, ${3:\\$options as xs:string*})", "description": "($p1,$p2,$options)", "trigger": "cts:bearing"}, {"content": "cts:boost-query(${1:\\$matching-query as cts:query*}, ${2:\\$boosting-query as cts:query*})", "description": "($matching-query,$boosting-query)", "trigger": "cts:boost-query"}, {"content": "cts:boost-query-boosting-query(${1:\\$query as cts:boost-query})", "description": "($query)", "trigger": "cts:boost-query-boosting-query"}, {"content": "cts:boost-query-matching-query(${1:\\$query as cts:boost-query})", "description": "($query)", "trigger": "cts:boost-query-matching-query"}, {"content": "cts:bounding-boxes(${1:\\$region as cts:region})", "description": "($region)", "trigger": "cts:bounding-boxes"}, {"content": "cts:bounding-boxes(${1:\\$region as cts:region}, ${2:\\$options as xs:string*})", "description": "($region,$options)", "trigger": "cts:bounding-boxes"}, {"content": "cts:box(${1:\\$south as xs:float}, ${2:\\$west as xs:float}, ${3:\\$north as xs:float}, ${4:\\$east as xs:float})", "description": "($south,$west,$north,$east)", "trigger": "cts:box"}, {"content": "cts:box-east(${1:\\$box as cts:box})", "description": "($box)", "trigger": "cts:box-east"}, {"content": "cts:box-intersects(${1:\\$box as cts:box}, ${2:\\$region as cts:region*})", "description": "($box,$region)", "trigger": "cts:box-intersects"}, {"content": "cts:box-intersects(${1:\\$box as cts:box}, ${2:\\$region as cts:region*}, ${3:\\$options as xs:string*})", "description": "($box,$region,$options)", "trigger": "cts:box-intersects"}, {"content": "cts:box-north(${1:\\$box as cts:box})", "description": "($box)", "trigger": "cts:box-north"}, {"content": "cts:box-south(${1:\\$box as cts:box})", "description": "($box)", "trigger": "cts:box-south"}, {"content": "cts:box-west(${1:\\$box as cts:box})", "description": "($box)", "trigger": "cts:box-west"}, {"content": "cts:circle(${1:\\$radius as xs:float}, ${2:\\$center as cts:point})", "description": "($radius,$center)", "trigger": "cts:circle"}, {"content": "cts:circle-center(${1:\\$circle as cts:circle})", "description": "($circle)", "trigger": "cts:circle-center"}, {"content": "cts:circle-intersects(${1:\\$circle as cts:circle}, ${2:\\$region as cts:region*})", "description": "($circle,$region)", "trigger": "cts:circle-intersects"}, {"content": "cts:circle-intersects(${1:\\$circle as cts:circle}, ${2:\\$region as cts:region*}, ${3:\\$options as xs:string*})", "description": "($circle,$region,$options)", "trigger": "cts:circle-intersects"}, {"content": "cts:circle-radius(${1:\\$circle as cts:circle})", "description": "($circle)", "trigger": "cts:circle-radius"}, {"content": "cts:classify(${1:\\$data-nodes as node()*}, ${2:\\$classifier as element(cts:classifier)}, ${3:\\$options as element()?}, ${4:\\$training-nodes as node()*})", "description": "($data-nodes,$classifier,$options,$training-nodes)", "trigger": "cts:classify"}, {"content": "cts:cluster(${1:\\$nodes as node()*})", "description": "($nodes)", "trigger": "cts:cluster"}, {"content": "cts:cluster(${1:\\$nodes as node()*}, ${2:\\$options as element()?})", "description": "($nodes,$options)", "trigger": "cts:cluster"}, {"content": "cts:collection-match(${1:\\$pattern as xs:string})", "description": "($pattern)", "trigger": "cts:collection-match"}, {"content": "cts:collection-match(${1:\\$pattern as xs:string}, ${2:\\$options as xs:string*})", "description": "($pattern,$options)", "trigger": "cts:collection-match"}, {"content": "cts:collection-match(${1:\\$pattern as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "description": "($pattern,$options,$query)", "trigger": "cts:collection-match"}, {"content": "cts:collection-match(${1:\\$pattern as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$quality-weight as xs:double?})", "description": "($pattern,$options,$query,$quality-weight)", "trigger": "cts:collection-match"}, {"content": "cts:collection-match(${1:\\$pattern as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$quality-weight as xs:double?}, ${5:\\$forest-ids as xs:unsignedLong*})", "description": "($pattern,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:collection-match"}, {"content": "cts:collection-query(${1:\\$uris as xs:string*})", "description": "($uris)", "trigger": "cts:collection-query"}, {"content": "cts:collection-query-uris(${1:\\$query as cts:collection-query})", "description": "($query)", "trigger": "cts:collection-query-uris"}, {"content": "cts:collection-reference(${1:\\$options as xs:string})", "description": "($options)", "trigger": "cts:collection-reference"}, {"content": "cts:collection-reference()", "trigger": "cts:collection-reference"}, {"content": "cts:collections(${1:\\$start as xs:string?})", "description": "($start)", "trigger": "cts:collections"}, {"content": "cts:collections(${1:\\$start as xs:string?}, ${2:\\$options as xs:string*})", "description": "($start,$options)", "trigger": "cts:collections"}, {"content": "cts:collections(${1:\\$start as xs:string?}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "description": "($start,$options,$query)", "trigger": "cts:collections"}, {"content": "cts:collections(${1:\\$start as xs:string?}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$quality-weight as xs:double?})", "description": "($start,$options,$query,$quality-weight)", "trigger": "cts:collections"}, {"content": "cts:collections(${1:\\$start as xs:string?}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$quality-weight as xs:double?}, ${5:\\$forest-ids as xs:unsignedLong*})", "description": "($start,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:collections"}, {"content": "cts:collections()", "trigger": "cts:collections"}, {"content": "cts:complex-polygon(${1:\\$outer as cts:polygon}, ${2:\\$inner as cts:polygon*})", "description": "($outer,$inner)", "trigger": "cts:complex-polygon"}, {"content": "cts:complex-polygon-contains(${1:\\$complex-polygon as cts:complex-polygon}, ${2:\\$region as cts:region*})", "description": "($complex-polygon,$region)", "trigger": "cts:complex-polygon-contains"}, {"content": "cts:complex-polygon-contains(${1:\\$complex-polygon as cts:complex-polygon}, ${2:\\$region as cts:region*}, ${3:\\$options as xs:string*})", "description": "($complex-polygon,$region,$options)", "trigger": "cts:complex-polygon-contains"}, {"content": "cts:complex-polygon-inner(${1:\\$complexPolygon as cts:complex-polygon})", "description": "($complexPolygon)", "trigger": "cts:complex-polygon-inner"}, {"content": "cts:complex-polygon-intersects(${1:\\$complex-polygon as cts:complex-polygon}, ${2:\\$region as cts:region*})", "description": "($complex-polygon,$region)", "trigger": "cts:complex-polygon-intersects"}, {"content": "cts:complex-polygon-intersects(${1:\\$complex-polygon as cts:complex-polygon}, ${2:\\$region as cts:region*}, ${3:\\$options as xs:string*})", "description": "($complex-polygon,$region,$options)", "trigger": "cts:complex-polygon-intersects"}, {"content": "cts:complex-polygon-outer(${1:\\$complexPolygon as cts:complex-polygon})", "description": "($complexPolygon)", "trigger": "cts:complex-polygon-outer"}, {"content": "cts:confidence(${1:\\$node as node()})", "description": "($node)", "trigger": "cts:confidence"}, {"content": "cts:confidence()", "trigger": "cts:confidence"}, {"content": "cts:contains(${1:\\$nodes as item()*}, ${2:\\$query as cts:query})", "description": "($nodes,$query)", "trigger": "cts:contains"}, {"content": "cts:correlation(${1:\\$value1 as cts:reference}, ${2:\\$value2 as cts:reference})", "description": "($value1,$value2)", "trigger": "cts:correlation"}, {"content": "cts:correlation(${1:\\$value1 as cts:reference}, ${2:\\$value2 as cts:reference}, ${3:\\$options as xs:string*})", "description": "($value1,$value2,$options)", "trigger": "cts:correlation"}, {"content": "cts:correlation(${1:\\$value1 as cts:reference}, ${2:\\$value2 as cts:reference}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "description": "($value1,$value2,$options,$query)", "trigger": "cts:correlation"}, {"content": "cts:correlation(${1:\\$value1 as cts:reference}, ${2:\\$value2 as cts:reference}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$forest-ids as xs:unsignedLong*})", "description": "($value1,$value2,$options,$query,$forest-ids)", "trigger": "cts:correlation"}, {"content": "cts:count(${1:\\$arg as item()*})", "description": "($arg)", "trigger": "cts:count"}, {"content": "cts:count(${1:\\$arg as item()*}, ${2:\\$maximum as xs:double})", "description": "($arg,$maximum)", "trigger": "cts:count"}, {"content": "cts:count-aggregate(${1:\\$range-index as cts:reference})", "description": "($range-index)", "trigger": "cts:count-aggregate"}, {"content": "cts:count-aggregate(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*})", "description": "($range-index,$options)", "trigger": "cts:count-aggregate"}, {"content": "cts:count-aggregate(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "description": "($range-index,$options,$query)", "trigger": "cts:count-aggregate"}, {"content": "cts:count-aggregate(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$forest-ids as xs:unsignedLong*})", "description": "($range-index,$options,$query,$forest-ids)", "trigger": "cts:count-aggregate"}, {"content": "cts:covariance(${1:\\$value1 as cts:reference}, ${2:\\$value2 as cts:reference})", "description": "($value1,$value2)", "trigger": "cts:covariance"}, {"content": "cts:covariance(${1:\\$value1 as cts:reference}, ${2:\\$value2 as cts:reference}, ${3:\\$options as xs:string*})", "description": "($value1,$value2,$options)", "trigger": "cts:covariance"}, {"content": "cts:covariance(${1:\\$value1 as cts:reference}, ${2:\\$value2 as cts:reference}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "description": "($value1,$value2,$options,$query)", "trigger": "cts:covariance"}, {"content": "cts:covariance(${1:\\$value1 as cts:reference}, ${2:\\$value2 as cts:reference}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$forest-ids as xs:unsignedLong*})", "description": "($value1,$value2,$options,$query,$forest-ids)", "trigger": "cts:covariance"}, {"content": "cts:covariance-p(${1:\\$value1 as cts:reference}, ${2:\\$value2 as cts:reference})", "description": "($value1,$value2)", "trigger": "cts:covariance-p"}, {"content": "cts:covariance-p(${1:\\$value1 as cts:reference}, ${2:\\$value2 as cts:reference}, ${3:\\$options as xs:string*})", "description": "($value1,$value2,$options)", "trigger": "cts:covariance-p"}, {"content": "cts:covariance-p(${1:\\$value1 as cts:reference}, ${2:\\$value2 as cts:reference}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "description": "($value1,$value2,$options,$query)", "trigger": "cts:covariance-p"}, {"content": "cts:covariance-p(${1:\\$value1 as cts:reference}, ${2:\\$value2 as cts:reference}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$forest-ids as xs:unsignedLong*})", "description": "($value1,$value2,$options,$query,$forest-ids)", "trigger": "cts:covariance-p"}, {"content": "cts:deregister(${1:\\$id as xs:unsignedLong})", "description": "($id)", "trigger": "cts:deregister"}, {"content": "cts:destination(${1:\\$p as cts:point}, ${2:\\$bearing as xs:double}, ${3:\\$distance as xs:double})", "description": "($p,$bearing,$distance)", "trigger": "cts:destination"}, {"content": "cts:destination(${1:\\$p as cts:point}, ${2:\\$bearing as xs:double}, ${3:\\$distance as xs:double}, ${4:\\$options as xs:string*})", "description": "($p,$bearing,$distance,$options)", "trigger": "cts:destination"}, {"content": "cts:directory-query(${1:\\$uris as xs:string*})", "description": "($uris)", "trigger": "cts:directory-query"}, {"content": "cts:directory-query(${1:\\$uris as xs:string*}, ${2:\\$depth as xs:string?})", "description": "($uris,$depth)", "trigger": "cts:directory-query"}, {"content": "cts:directory-query-depth(${1:\\$query as cts:directory-query})", "description": "($query)", "trigger": "cts:directory-query-depth"}, {"content": "cts:directory-query-uris(${1:\\$query as cts:directory-query})", "description": "($query)", "trigger": "cts:directory-query-uris"}, {"content": "cts:distance(${1:\\$p1 as cts:point}, ${2:\\$p2 as cts:point})", "description": "($p1,$p2)", "trigger": "cts:distance"}, {"content": "cts:distance(${1:\\$p1 as cts:point}, ${2:\\$p2 as cts:point}, ${3:\\$options as xs:string*})", "description": "($p1,$p2,$options)", "trigger": "cts:distance"}, {"content": "cts:distinctive-terms(${1:\\$nodes as node()*})", "description": "($nodes)", "trigger": "cts:distinctive-terms"}, {"content": "cts:distinctive-terms(${1:\\$nodes as node()*}, ${2:\\$options as element()?})", "description": "($nodes,$options)", "trigger": "cts:distinctive-terms"}, {"content": "cts:document-fragment-query(${1:\\$query as cts:query})", "description": "($query)", "trigger": "cts:document-fragment-query"}, {"content": "cts:document-fragment-query-query(${1:\\$query as cts:document-fragment-query})", "description": "($query)", "trigger": "cts:document-fragment-query-query"}, {"content": "cts:document-query(${1:\\$uris as xs:string*})", "description": "($uris)", "trigger": "cts:document-query"}, {"content": "cts:document-query-uris(${1:\\$query as cts:document-query})", "description": "($query)", "trigger": "cts:document-query-uris"}, {"content": "cts:element-attribute-pair-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*})", "description": "($parent-element-names,$latitude-names,$longitude-names)", "trigger": "cts:element-attribute-pair-geospatial-boxes"}, {"content": "cts:element-attribute-pair-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$latitude-bounds as xs:double*})", "description": "($parent-element-names,$latitude-names,$longitude-names,$latitude-bounds)", "trigger": "cts:element-attribute-pair-geospatial-boxes"}, {"content": "cts:element-attribute-pair-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$latitude-bounds as xs:double*}, ${5:\\$longitude-bounds as xs:double*})", "description": "($parent-element-names,$latitude-names,$longitude-names,$latitude-bounds,$longitude-bounds)", "trigger": "cts:element-attribute-pair-geospatial-boxes"}, {"content": "cts:element-attribute-pair-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$latitude-bounds as xs:double*}, ${5:\\$longitude-bounds as xs:double*}, ${6:\\$options as xs:string*})", "description": "($parent-element-names,$latitude-names,$longitude-names,$latitude-bounds,$longitude-bounds,$options)", "trigger": "cts:element-attribute-pair-geospatial-boxes"}, {"content": "cts:element-attribute-pair-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$latitude-bounds as xs:double*}, ${5:\\$longitude-bounds as xs:double*}, ${6:\\$options as xs:string*}, ${7:\\$query as cts:query?})", "description": "($parent-element-names,$latitude-names,$longitude-names,$latitude-bounds,$longitude-bounds,$options,$query)", "trigger": "cts:element-attribute-pair-geospatial-boxes"}, {"content": "cts:element-attribute-pair-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$latitude-bounds as xs:double*}, ${5:\\$longitude-bounds as xs:double*}, ${6:\\$options as xs:string*}, ${7:\\$query as cts:query?}, ${8:\\$quality-weight as xs:double?})", "description": "($parent-element-names,$latitude-names,$longitude-names,$latitude-bounds,$longitude-bounds,$options,$query,$quality-weight)", "trigger": "cts:element-attribute-pair-geospatial-boxes"}, {"content": "cts:element-attribute-pair-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$latitude-bounds as xs:double*}, ${5:\\$longitude-bounds as xs:double*}, ${6:\\$options as xs:string*}, ${7:\\$query as cts:query?}, ${8:\\$quality-weight as xs:double?}, ${9:\\$forest-ids as xs:unsignedLong*})", "description": "($parent-element-names,$latitude-names,$longitude-names,$latitude-bounds,$longitude-bounds,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:element-attribute-pair-geospatial-boxes"}, {"content": "cts:element-attribute-pair-geospatial-query(${1:\\$element-name as xs:QName*}, ${2:\\$latitude-attribute-names as xs:QName*}, ${3:\\$longitude-attribute-names as xs:QName*}, ${4:\\$regions as cts:region*})", "description": "($element-name,$latitude-attribute-names,$longitude-attribute-names,$regions)", "trigger": "cts:element-attribute-pair-geospatial-query"}, {"content": "cts:element-attribute-pair-geospatial-query(${1:\\$element-name as xs:QName*}, ${2:\\$latitude-attribute-names as xs:QName*}, ${3:\\$longitude-attribute-names as xs:QName*}, ${4:\\$regions as cts:region*}, ${5:\\$options as xs:string*})", "description": "($element-name,$latitude-attribute-names,$longitude-attribute-names,$regions,$options)", "trigger": "cts:element-attribute-pair-geospatial-query"}, {"content": "cts:element-attribute-pair-geospatial-query(${1:\\$element-name as xs:QName*}, ${2:\\$latitude-attribute-names as xs:QName*}, ${3:\\$longitude-attribute-names as xs:QName*}, ${4:\\$regions as cts:region*}, ${5:\\$options as xs:string*}, ${6:\\$weight as xs:double?})", "description": "($element-name,$latitude-attribute-names,$longitude-attribute-names,$regions,$options,$weight)", "trigger": "cts:element-attribute-pair-geospatial-query"}, {"content": "cts:element-attribute-pair-geospatial-query-element-name(${1:\\$query as cts:element-attribute-pair-geospatial-query})", "description": "($query)", "trigger": "cts:element-attribute-pair-geospatial-query-element-name"}, {"content": "cts:element-attribute-pair-geospatial-query-latitude-name(${1:\\$query as cts:element-attribute-pair-geospatial-query})", "description": "($query)", "trigger": "cts:element-attribute-pair-geospatial-query-latitude-name"}, {"content": "cts:element-attribute-pair-geospatial-query-longitude-name(${1:\\$query as cts:element-attribute-pair-geospatial-query})", "description": "($query)", "trigger": "cts:element-attribute-pair-geospatial-query-longitude-name"}, {"content": "cts:element-attribute-pair-geospatial-query-options(${1:\\$query as cts:element-attribute-pair-geospatial-query})", "description": "($query)", "trigger": "cts:element-attribute-pair-geospatial-query-options"}, {"content": "cts:element-attribute-pair-geospatial-query-region(${1:\\$query as cts:element-attribute-pair-geospatial-query})", "description": "($query)", "trigger": "cts:element-attribute-pair-geospatial-query-region"}, {"content": "cts:element-attribute-pair-geospatial-query-weight(${1:\\$query as cts:element-attribute-pair-geospatial-query})", "description": "($query)", "trigger": "cts:element-attribute-pair-geospatial-query-weight"}, {"content": "cts:element-attribute-pair-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$pattern as xs:anyAtomicType})", "description": "($element-names,$latitude-names,$longitude-names,$pattern)", "trigger": "cts:element-attribute-pair-geospatial-value-match"}, {"content": "cts:element-attribute-pair-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$pattern as xs:anyAtomicType}, ${5:\\$options as xs:string*})", "description": "($element-names,$latitude-names,$longitude-names,$pattern,$options)", "trigger": "cts:element-attribute-pair-geospatial-value-match"}, {"content": "cts:element-attribute-pair-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$pattern as xs:anyAtomicType}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?})", "description": "($element-names,$latitude-names,$longitude-names,$pattern,$options,$query)", "trigger": "cts:element-attribute-pair-geospatial-value-match"}, {"content": "cts:element-attribute-pair-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$pattern as xs:anyAtomicType}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$quality-weight as xs:double?})", "description": "($element-names,$latitude-names,$longitude-names,$pattern,$options,$query,$quality-weight)", "trigger": "cts:element-attribute-pair-geospatial-value-match"}, {"content": "cts:element-attribute-pair-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$pattern as xs:anyAtomicType}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$quality-weight as xs:double?}, ${8:\\$forest-ids as xs:unsignedLong*})", "description": "($element-names,$latitude-names,$longitude-names,$pattern,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:element-attribute-pair-geospatial-value-match"}, {"content": "cts:element-attribute-pair-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*})", "description": "($element-names,$latitude-names,$longitude-names)", "trigger": "cts:element-attribute-pair-geospatial-values"}, {"content": "cts:element-attribute-pair-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$start as cts:point?})", "description": "($element-names,$latitude-names,$longitude-names,$start)", "trigger": "cts:element-attribute-pair-geospatial-values"}, {"content": "cts:element-attribute-pair-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$start as cts:point?}, ${5:\\$options as xs:string*})", "description": "($element-names,$latitude-names,$longitude-names,$start,$options)", "trigger": "cts:element-attribute-pair-geospatial-values"}, {"content": "cts:element-attribute-pair-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$start as cts:point?}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?})", "description": "($element-names,$latitude-names,$longitude-names,$start,$options,$query)", "trigger": "cts:element-attribute-pair-geospatial-values"}, {"content": "cts:element-attribute-pair-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$start as cts:point?}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$quality-weight as xs:double?})", "description": "($element-names,$latitude-names,$longitude-names,$start,$options,$query,$quality-weight)", "trigger": "cts:element-attribute-pair-geospatial-values"}, {"content": "cts:element-attribute-pair-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$start as cts:point?}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$quality-weight as xs:double?}, ${8:\\$forest-ids as xs:unsignedLong*})", "description": "($element-names,$latitude-names,$longitude-names,$start,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:element-attribute-pair-geospatial-values"}, {"content": "cts:element-attribute-range-query(${1:\\$element-name as xs:QName*}, ${2:\\$attribute-name as xs:QName*}, ${3:\\$operator as xs:string}, ${4:\\$value as xs:anyAtomicType*})", "description": "($element-name,$attribute-name,$operator,$value)", "trigger": "cts:element-attribute-range-query"}, {"content": "cts:element-attribute-range-query(${1:\\$element-name as xs:QName*}, ${2:\\$attribute-name as xs:QName*}, ${3:\\$operator as xs:string}, ${4:\\$value as xs:anyAtomicType*}, ${5:\\$options as xs:string*})", "description": "($element-name,$attribute-name,$operator,$value,$options)", "trigger": "cts:element-attribute-range-query"}, {"content": "cts:element-attribute-range-query(${1:\\$element-name as xs:QName*}, ${2:\\$attribute-name as xs:QName*}, ${3:\\$operator as xs:string}, ${4:\\$value as xs:anyAtomicType*}, ${5:\\$options as xs:string*}, ${6:\\$weight as xs:double?})", "description": "($element-name,$attribute-name,$operator,$value,$options,$weight)", "trigger": "cts:element-attribute-range-query"}, {"content": "cts:element-attribute-range-query-attribute-name(${1:\\$query as cts:element-attribute-range-query})", "description": "($query)", "trigger": "cts:element-attribute-range-query-attribute-name"}, {"content": "cts:element-attribute-range-query-element-name(${1:\\$query as cts:element-attribute-range-query})", "description": "($query)", "trigger": "cts:element-attribute-range-query-element-name"}, {"content": "cts:element-attribute-range-query-operator(${1:\\$query as cts:element-attribute-range-query})", "description": "($query)", "trigger": "cts:element-attribute-range-query-operator"}, {"content": "cts:element-attribute-range-query-options(${1:\\$query as cts:element-attribute-range-query})", "description": "($query)", "trigger": "cts:element-attribute-range-query-options"}, {"content": "cts:element-attribute-range-query-value(${1:\\$query as cts:element-attribute-range-query})", "description": "($query)", "trigger": "cts:element-attribute-range-query-value"}, {"content": "cts:element-attribute-range-query-weight(${1:\\$query as cts:element-attribute-range-query})", "description": "($query)", "trigger": "cts:element-attribute-range-query-weight"}, {"content": "cts:element-attribute-reference(${1:\\$element as xs:QName}, ${2:\\$attribute as xs:QName})", "description": "($element,$attribute)", "trigger": "cts:element-attribute-reference"}, {"content": "cts:element-attribute-reference(${1:\\$element as xs:QName}, ${2:\\$attribute as xs:QName}, ${3:\\$options as xs:string})", "description": "($element,$attribute,$options)", "trigger": "cts:element-attribute-reference"}, {"content": "cts:element-attribute-value-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$attribute-name-1 as xs:QName?}, ${3:\\$element-name-2 as xs:QName}, ${4:\\$attribute-name-2 as xs:QName?})", "description": "($element-name-1,$attribute-name-1,$element-name-2,$attribute-name-2)", "trigger": "cts:element-attribute-value-co-occurrences"}, {"content": "cts:element-attribute-value-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$attribute-name-1 as xs:QName?}, ${3:\\$element-name-2 as xs:QName}, ${4:\\$attribute-name-2 as xs:QName?}, ${5:\\$options as xs:string*})", "description": "($element-name-1,$attribute-name-1,$element-name-2,$attribute-name-2,$options)", "trigger": "cts:element-attribute-value-co-occurrences"}, {"content": "cts:element-attribute-value-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$attribute-name-1 as xs:QName?}, ${3:\\$element-name-2 as xs:QName}, ${4:\\$attribute-name-2 as xs:QName?}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?})", "description": "($element-name-1,$attribute-name-1,$element-name-2,$attribute-name-2,$options,$query)", "trigger": "cts:element-attribute-value-co-occurrences"}, {"content": "cts:element-attribute-value-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$attribute-name-1 as xs:QName?}, ${3:\\$element-name-2 as xs:QName}, ${4:\\$attribute-name-2 as xs:QName?}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$quality-weight as xs:double?})", "description": "($element-name-1,$attribute-name-1,$element-name-2,$attribute-name-2,$options,$query,$quality-weight)", "trigger": "cts:element-attribute-value-co-occurrences"}, {"content": "cts:element-attribute-value-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$attribute-name-1 as xs:QName?}, ${3:\\$element-name-2 as xs:QName}, ${4:\\$attribute-name-2 as xs:QName?}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$quality-weight as xs:double?}, ${8:\\$forest-ids as xs:unsignedLong*})", "description": "($element-name-1,$attribute-name-1,$element-name-2,$attribute-name-2,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:element-attribute-value-co-occurrences"}, {"content": "cts:element-attribute-value-geospatial-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$attribute-name-1 as xs:QName?}, ${3:\\$geo-element-name as xs:QName}, ${4:\\$child-name-1 as xs:QName?}, ${5:\\$child-name-2 as xs:QName?})", "description": "($element-name-1,$attribute-name-1,$geo-element-name,$child-name-1,$child-name-2)", "trigger": "cts:element-attribute-value-geospatial-co-occurrences"}, {"content": "cts:element-attribute-value-geospatial-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$attribute-name-1 as xs:QName?}, ${3:\\$geo-element-name as xs:QName}, ${4:\\$child-name-1 as xs:QName?}, ${5:\\$child-name-2 as xs:QName?}, ${6:\\$options as xs:string*})", "description": "($element-name-1,$attribute-name-1,$geo-element-name,$child-name-1,$child-name-2,$options)", "trigger": "cts:element-attribute-value-geospatial-co-occurrences"}, {"content": "cts:element-attribute-value-geospatial-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$attribute-name-1 as xs:QName?}, ${3:\\$geo-element-name as xs:QName}, ${4:\\$child-name-1 as xs:QName?}, ${5:\\$child-name-2 as xs:QName?}, ${6:\\$options as xs:string*}, ${7:\\$query as cts:query?})", "description": "($element-name-1,$attribute-name-1,$geo-element-name,$child-name-1,$child-name-2,$options,$query)", "trigger": "cts:element-attribute-value-geospatial-co-occurrences"}, {"content": "cts:element-attribute-value-geospatial-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$attribute-name-1 as xs:QName?}, ${3:\\$geo-element-name as xs:QName}, ${4:\\$child-name-1 as xs:QName?}, ${5:\\$child-name-2 as xs:QName?}, ${6:\\$options as xs:string*}, ${7:\\$query as cts:query?}, ${8:\\$quality-weight as xs:double?})", "description": "($element-name-1,$attribute-name-1,$geo-element-name,$child-name-1,$child-name-2,$options,$query,$quality-weight)", "trigger": "cts:element-attribute-value-geospatial-co-occurrences"}, {"content": "cts:element-attribute-value-geospatial-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$attribute-name-1 as xs:QName?}, ${3:\\$geo-element-name as xs:QName}, ${4:\\$child-name-1 as xs:QName?}, ${5:\\$child-name-2 as xs:QName?}, ${6:\\$options as xs:string*}, ${7:\\$query as cts:query?}, ${8:\\$quality-weight as xs:double?}, ${9:\\$forest-ids as xs:unsignedLong*})", "description": "($element-name-1,$attribute-name-1,$geo-element-name,$child-name-1,$child-name-2,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:element-attribute-value-geospatial-co-occurrences"}, {"content": "cts:element-attribute-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$pattern as xs:anyAtomicType})", "description": "($element-names,$attribute-names,$pattern)", "trigger": "cts:element-attribute-value-match"}, {"content": "cts:element-attribute-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$pattern as xs:anyAtomicType}, ${4:\\$options as xs:string*})", "description": "($element-names,$attribute-names,$pattern,$options)", "trigger": "cts:element-attribute-value-match"}, {"content": "cts:element-attribute-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$pattern as xs:anyAtomicType}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?})", "description": "($element-names,$attribute-names,$pattern,$options,$query)", "trigger": "cts:element-attribute-value-match"}, {"content": "cts:element-attribute-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$pattern as xs:anyAtomicType}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?})", "description": "($element-names,$attribute-names,$pattern,$options,$query,$quality-weight)", "trigger": "cts:element-attribute-value-match"}, {"content": "cts:element-attribute-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$pattern as xs:anyAtomicType}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?}, ${7:\\$forest-ids as xs:unsignedLong*})", "description": "($element-names,$attribute-names,$pattern,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:element-attribute-value-match"}, {"content": "cts:element-attribute-value-query(${1:\\$element-name as xs:QName*}, ${2:\\$attribute-name as xs:QName*}, ${3:\\$text as xs:string*})", "description": "($element-name,$attribute-name,$text)", "trigger": "cts:element-attribute-value-query"}, {"content": "cts:element-attribute-value-query(${1:\\$element-name as xs:QName*}, ${2:\\$attribute-name as xs:QName*}, ${3:\\$text as xs:string*}, ${4:\\$options as xs:string*})", "description": "($element-name,$attribute-name,$text,$options)", "trigger": "cts:element-attribute-value-query"}, {"content": "cts:element-attribute-value-query(${1:\\$element-name as xs:QName*}, ${2:\\$attribute-name as xs:QName*}, ${3:\\$text as xs:string*}, ${4:\\$options as xs:string*}, ${5:\\$weight as xs:double?})", "description": "($element-name,$attribute-name,$text,$options,$weight)", "trigger": "cts:element-attribute-value-query"}, {"content": "cts:element-attribute-value-query-attribute-name(${1:\\$query as cts:element-attribute-value-query})", "description": "($query)", "trigger": "cts:element-attribute-value-query-attribute-name"}, {"content": "cts:element-attribute-value-query-element-name(${1:\\$query as cts:element-attribute-value-query})", "description": "($query)", "trigger": "cts:element-attribute-value-query-element-name"}, {"content": "cts:element-attribute-value-query-options(${1:\\$query as cts:element-attribute-value-query})", "description": "($query)", "trigger": "cts:element-attribute-value-query-options"}, {"content": "cts:element-attribute-value-query-text(${1:\\$query as cts:element-attribute-value-query})", "description": "($query)", "trigger": "cts:element-attribute-value-query-text"}, {"content": "cts:element-attribute-value-query-weight(${1:\\$query as cts:element-attribute-value-query})", "description": "($query)", "trigger": "cts:element-attribute-value-query-weight"}, {"content": "cts:element-attribute-value-ranges(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*})", "description": "($element-names,$attribute-names)", "trigger": "cts:element-attribute-value-ranges"}, {"content": "cts:element-attribute-value-ranges(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$bounds as xs:anyAtomicType*})", "description": "($element-names,$attribute-names,$bounds)", "trigger": "cts:element-attribute-value-ranges"}, {"content": "cts:element-attribute-value-ranges(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$bounds as xs:anyAtomicType*}, ${4:\\$options as xs:string*})", "description": "($element-names,$attribute-names,$bounds,$options)", "trigger": "cts:element-attribute-value-ranges"}, {"content": "cts:element-attribute-value-ranges(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$bounds as xs:anyAtomicType*}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?})", "description": "($element-names,$attribute-names,$bounds,$options,$query)", "trigger": "cts:element-attribute-value-ranges"}, {"content": "cts:element-attribute-value-ranges(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$bounds as xs:anyAtomicType*}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?})", "description": "($element-names,$attribute-names,$bounds,$options,$query,$quality-weight)", "trigger": "cts:element-attribute-value-ranges"}, {"content": "cts:element-attribute-value-ranges(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$bounds as xs:anyAtomicType*}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?}, ${7:\\$forest-ids as xs:unsignedLong*})", "description": "($element-names,$attribute-names,$bounds,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:element-attribute-value-ranges"}, {"content": "cts:element-attribute-values(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*})", "description": "($element-names,$attribute-names)", "trigger": "cts:element-attribute-values"}, {"content": "cts:element-attribute-values(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$start as xs:anyAtomicType?})", "description": "($element-names,$attribute-names,$start)", "trigger": "cts:element-attribute-values"}, {"content": "cts:element-attribute-values(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$start as xs:anyAtomicType?}, ${4:\\$options as xs:string*})", "description": "($element-names,$attribute-names,$start,$options)", "trigger": "cts:element-attribute-values"}, {"content": "cts:element-attribute-values(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$start as xs:anyAtomicType?}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?})", "description": "($element-names,$attribute-names,$start,$options,$query)", "trigger": "cts:element-attribute-values"}, {"content": "cts:element-attribute-values(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$start as xs:anyAtomicType?}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?})", "description": "($element-names,$attribute-names,$start,$options,$query,$quality-weight)", "trigger": "cts:element-attribute-values"}, {"content": "cts:element-attribute-values(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$start as xs:anyAtomicType?}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?}, ${7:\\$forest-ids as xs:unsignedLong*})", "description": "($element-names,$attribute-names,$start,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:element-attribute-values"}, {"content": "cts:element-attribute-word-match(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$pattern as xs:string})", "description": "($element-names,$attribute-names,$pattern)", "trigger": "cts:element-attribute-word-match"}, {"content": "cts:element-attribute-word-match(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$pattern as xs:string}, ${4:\\$options as xs:string*})", "description": "($element-names,$attribute-names,$pattern,$options)", "trigger": "cts:element-attribute-word-match"}, {"content": "cts:element-attribute-word-match(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$pattern as xs:string}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?})", "description": "($element-names,$attribute-names,$pattern,$options,$query)", "trigger": "cts:element-attribute-word-match"}, {"content": "cts:element-attribute-word-match(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$pattern as xs:string}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?})", "description": "($element-names,$attribute-names,$pattern,$options,$query,$quality-weight)", "trigger": "cts:element-attribute-word-match"}, {"content": "cts:element-attribute-word-match(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$pattern as xs:string}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?}, ${7:\\$forest-ids as xs:unsignedLong*})", "description": "($element-names,$attribute-names,$pattern,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:element-attribute-word-match"}, {"content": "cts:element-attribute-word-query(${1:\\$element-name as xs:QName*}, ${2:\\$attribute-name as xs:QName*}, ${3:\\$text as xs:string*})", "description": "($element-name,$attribute-name,$text)", "trigger": "cts:element-attribute-word-query"}, {"content": "cts:element-attribute-word-query(${1:\\$element-name as xs:QName*}, ${2:\\$attribute-name as xs:QName*}, ${3:\\$text as xs:string*}, ${4:\\$options as xs:string*})", "description": "($element-name,$attribute-name,$text,$options)", "trigger": "cts:element-attribute-word-query"}, {"content": "cts:element-attribute-word-query(${1:\\$element-name as xs:QName*}, ${2:\\$attribute-name as xs:QName*}, ${3:\\$text as xs:string*}, ${4:\\$options as xs:string*}, ${5:\\$weight as xs:double?})", "description": "($element-name,$attribute-name,$text,$options,$weight)", "trigger": "cts:element-attribute-word-query"}, {"content": "cts:element-attribute-word-query-attribute-name(${1:\\$query as cts:element-attribute-word-query})", "description": "($query)", "trigger": "cts:element-attribute-word-query-attribute-name"}, {"content": "cts:element-attribute-word-query-element-name(${1:\\$query as cts:element-attribute-word-query})", "description": "($query)", "trigger": "cts:element-attribute-word-query-element-name"}, {"content": "cts:element-attribute-word-query-options(${1:\\$query as cts:element-attribute-word-query})", "description": "($query)", "trigger": "cts:element-attribute-word-query-options"}, {"content": "cts:element-attribute-word-query-text(${1:\\$query as cts:element-attribute-word-query})", "description": "($query)", "trigger": "cts:element-attribute-word-query-text"}, {"content": "cts:element-attribute-word-query-weight(${1:\\$query as cts:element-attribute-word-query})", "description": "($query)", "trigger": "cts:element-attribute-word-query-weight"}, {"content": "cts:element-attribute-words(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*})", "description": "($element-names,$attribute-names)", "trigger": "cts:element-attribute-words"}, {"content": "cts:element-attribute-words(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$start as xs:string?})", "description": "($element-names,$attribute-names,$start)", "trigger": "cts:element-attribute-words"}, {"content": "cts:element-attribute-words(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$start as xs:string?}, ${4:\\$options as xs:string*})", "description": "($element-names,$attribute-names,$start,$options)", "trigger": "cts:element-attribute-words"}, {"content": "cts:element-attribute-words(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$start as xs:string?}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?})", "description": "($element-names,$attribute-names,$start,$options,$query)", "trigger": "cts:element-attribute-words"}, {"content": "cts:element-attribute-words(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$start as xs:string?}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?})", "description": "($element-names,$attribute-names,$start,$options,$query,$quality-weight)", "trigger": "cts:element-attribute-words"}, {"content": "cts:element-attribute-words(${1:\\$element-names as xs:QName*}, ${2:\\$attribute-names as xs:QName*}, ${3:\\$start as xs:string?}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?}, ${7:\\$forest-ids as xs:unsignedLong*})", "description": "($element-names,$attribute-names,$start,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:element-attribute-words"}, {"content": "cts:element-child-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$child-element-names as xs:QName*})", "description": "($parent-element-names,$child-element-names)", "trigger": "cts:element-child-geospatial-boxes"}, {"content": "cts:element-child-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$child-element-names as xs:QName*}, ${3:\\$latitude-bounds as xs:double*})", "description": "($parent-element-names,$child-element-names,$latitude-bounds)", "trigger": "cts:element-child-geospatial-boxes"}, {"content": "cts:element-child-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$child-element-names as xs:QName*}, ${3:\\$latitude-bounds as xs:double*}, ${4:\\$longitude-bounds as xs:double*})", "description": "($parent-element-names,$child-element-names,$latitude-bounds,$longitude-bounds)", "trigger": "cts:element-child-geospatial-boxes"}, {"content": "cts:element-child-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$child-element-names as xs:QName*}, ${3:\\$latitude-bounds as xs:double*}, ${4:\\$longitude-bounds as xs:double*}, ${5:\\$options as xs:string*})", "description": "($parent-element-names,$child-element-names,$latitude-bounds,$longitude-bounds,$options)", "trigger": "cts:element-child-geospatial-boxes"}, {"content": "cts:element-child-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$child-element-names as xs:QName*}, ${3:\\$latitude-bounds as xs:double*}, ${4:\\$longitude-bounds as xs:double*}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?})", "description": "($parent-element-names,$child-element-names,$latitude-bounds,$longitude-bounds,$options,$query)", "trigger": "cts:element-child-geospatial-boxes"}, {"content": "cts:element-child-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$child-element-names as xs:QName*}, ${3:\\$latitude-bounds as xs:double*}, ${4:\\$longitude-bounds as xs:double*}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$quality-weight as xs:double?})", "description": "($parent-element-names,$child-element-names,$latitude-bounds,$longitude-bounds,$options,$query,$quality-weight)", "trigger": "cts:element-child-geospatial-boxes"}, {"content": "cts:element-child-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$child-element-names as xs:QName*}, ${3:\\$latitude-bounds as xs:double*}, ${4:\\$longitude-bounds as xs:double*}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$quality-weight as xs:double?}, ${8:\\$forest-ids as xs:unsignedLong*})", "description": "($parent-element-names,$child-element-names,$latitude-bounds,$longitude-bounds,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:element-child-geospatial-boxes"}, {"content": "cts:element-child-geospatial-query(${1:\\$parent-element-name as xs:QName*}, ${2:\\$child-element-names as xs:QName*}, ${3:\\$regions as cts:region*})", "description": "($parent-element-name,$child-element-names,$regions)", "trigger": "cts:element-child-geospatial-query"}, {"content": "cts:element-child-geospatial-query(${1:\\$parent-element-name as xs:QName*}, ${2:\\$child-element-names as xs:QName*}, ${3:\\$regions as cts:region*}, ${4:\\$options as xs:string*})", "description": "($parent-element-name,$child-element-names,$regions,$options)", "trigger": "cts:element-child-geospatial-query"}, {"content": "cts:element-child-geospatial-query(${1:\\$parent-element-name as xs:QName*}, ${2:\\$child-element-names as xs:QName*}, ${3:\\$regions as cts:region*}, ${4:\\$options as xs:string*}, ${5:\\$weight as xs:double?})", "description": "($parent-element-name,$child-element-names,$regions,$options,$weight)", "trigger": "cts:element-child-geospatial-query"}, {"content": "cts:element-child-geospatial-query-child-name(${1:\\$query as cts:element-child-geospatial-query})", "description": "($query)", "trigger": "cts:element-child-geospatial-query-child-name"}, {"content": "cts:element-child-geospatial-query-element-name(${1:\\$query as cts:element-child-geospatial-query})", "description": "($query)", "trigger": "cts:element-child-geospatial-query-element-name"}, {"content": "cts:element-child-geospatial-query-options(${1:\\$query as cts:element-child-geospatial-query})", "description": "($query)", "trigger": "cts:element-child-geospatial-query-options"}, {"content": "cts:element-child-geospatial-query-region(${1:\\$query as cts:element-child-geospatial-query})", "description": "($query)", "trigger": "cts:element-child-geospatial-query-region"}, {"content": "cts:element-child-geospatial-query-weight(${1:\\$query as cts:element-child-geospatial-query})", "description": "($query)", "trigger": "cts:element-child-geospatial-query-weight"}, {"content": "cts:element-child-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$child-names as xs:QName*}, ${3:\\$pattern as xs:anyAtomicType})", "description": "($element-names,$child-names,$pattern)", "trigger": "cts:element-child-geospatial-value-match"}, {"content": "cts:element-child-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$child-names as xs:QName*}, ${3:\\$pattern as xs:anyAtomicType}, ${4:\\$options as xs:string*})", "description": "($element-names,$child-names,$pattern,$options)", "trigger": "cts:element-child-geospatial-value-match"}, {"content": "cts:element-child-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$child-names as xs:QName*}, ${3:\\$pattern as xs:anyAtomicType}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?})", "description": "($element-names,$child-names,$pattern,$options,$query)", "trigger": "cts:element-child-geospatial-value-match"}, {"content": "cts:element-child-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$child-names as xs:QName*}, ${3:\\$pattern as xs:anyAtomicType}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?})", "description": "($element-names,$child-names,$pattern,$options,$query,$quality-weight)", "trigger": "cts:element-child-geospatial-value-match"}, {"content": "cts:element-child-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$child-names as xs:QName*}, ${3:\\$pattern as xs:anyAtomicType}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?}, ${7:\\$forest-ids as xs:unsignedLong*})", "description": "($element-names,$child-names,$pattern,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:element-child-geospatial-value-match"}, {"content": "cts:element-child-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$child-names as xs:QName*})", "description": "($element-names,$child-names)", "trigger": "cts:element-child-geospatial-values"}, {"content": "cts:element-child-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$child-names as xs:QName*}, ${3:\\$start as cts:point?})", "description": "($element-names,$child-names,$start)", "trigger": "cts:element-child-geospatial-values"}, {"content": "cts:element-child-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$child-names as xs:QName*}, ${3:\\$start as cts:point?}, ${4:\\$options as xs:string*})", "description": "($element-names,$child-names,$start,$options)", "trigger": "cts:element-child-geospatial-values"}, {"content": "cts:element-child-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$child-names as xs:QName*}, ${3:\\$start as cts:point?}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?})", "description": "($element-names,$child-names,$start,$options,$query)", "trigger": "cts:element-child-geospatial-values"}, {"content": "cts:element-child-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$child-names as xs:QName*}, ${3:\\$start as cts:point?}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?})", "description": "($element-names,$child-names,$start,$options,$query,$quality-weight)", "trigger": "cts:element-child-geospatial-values"}, {"content": "cts:element-child-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$child-names as xs:QName*}, ${3:\\$start as cts:point?}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?}, ${7:\\$forest-ids as xs:unsignedLong*})", "description": "($element-names,$child-names,$start,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:element-child-geospatial-values"}, {"content": "cts:element-geospatial-boxes(${1:\\$element-names as xs:QName*})", "description": "($element-names)", "trigger": "cts:element-geospatial-boxes"}, {"content": "cts:element-geospatial-boxes(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-bounds as xs:double*})", "description": "($element-names,$latitude-bounds)", "trigger": "cts:element-geospatial-boxes"}, {"content": "cts:element-geospatial-boxes(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-bounds as xs:double*}, ${3:\\$longitude-bounds as xs:double*})", "description": "($element-names,$latitude-bounds,$longitude-bounds)", "trigger": "cts:element-geospatial-boxes"}, {"content": "cts:element-geospatial-boxes(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-bounds as xs:double*}, ${3:\\$longitude-bounds as xs:double*}, ${4:\\$options as xs:string*})", "description": "($element-names,$latitude-bounds,$longitude-bounds,$options)", "trigger": "cts:element-geospatial-boxes"}, {"content": "cts:element-geospatial-boxes(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-bounds as xs:double*}, ${3:\\$longitude-bounds as xs:double*}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?})", "description": "($element-names,$latitude-bounds,$longitude-bounds,$options,$query)", "trigger": "cts:element-geospatial-boxes"}, {"content": "cts:element-geospatial-boxes(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-bounds as xs:double*}, ${3:\\$longitude-bounds as xs:double*}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?})", "description": "($element-names,$latitude-bounds,$longitude-bounds,$options,$query,$quality-weight)", "trigger": "cts:element-geospatial-boxes"}, {"content": "cts:element-geospatial-boxes(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-bounds as xs:double*}, ${3:\\$longitude-bounds as xs:double*}, ${4:\\$options as xs:string*}, ${5:\\$query as cts:query?}, ${6:\\$quality-weight as xs:double?}, ${7:\\$forest-ids as xs:unsignedLong*})", "description": "($element-names,$latitude-bounds,$longitude-bounds,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:element-geospatial-boxes"}, {"content": "cts:element-geospatial-query(${1:\\$element-name as xs:QName*}, ${2:\\$regions as cts:region*})", "description": "($element-name,$regions)", "trigger": "cts:element-geospatial-query"}, {"content": "cts:element-geospatial-query(${1:\\$element-name as xs:QName*}, ${2:\\$regions as cts:region*}, ${3:\\$options as xs:string*})", "description": "($element-name,$regions,$options)", "trigger": "cts:element-geospatial-query"}, {"content": "cts:element-geospatial-query(${1:\\$element-name as xs:QName*}, ${2:\\$regions as cts:region*}, ${3:\\$options as xs:string*}, ${4:\\$weight as xs:double?})", "description": "($element-name,$regions,$options,$weight)", "trigger": "cts:element-geospatial-query"}, {"content": "cts:element-geospatial-query-element-name(${1:\\$query as cts:element-geospatial-query})", "description": "($query)", "trigger": "cts:element-geospatial-query-element-name"}, {"content": "cts:element-geospatial-query-options(${1:\\$query as cts:element-geospatial-query})", "description": "($query)", "trigger": "cts:element-geospatial-query-options"}, {"content": "cts:element-geospatial-query-region(${1:\\$query as cts:element-geospatial-query})", "description": "($query)", "trigger": "cts:element-geospatial-query-region"}, {"content": "cts:element-geospatial-query-weight(${1:\\$query as cts:element-geospatial-query})", "description": "($query)", "trigger": "cts:element-geospatial-query-weight"}, {"content": "cts:element-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:anyAtomicType})", "description": "($element-names,$pattern)", "trigger": "cts:element-geospatial-value-match"}, {"content": "cts:element-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*})", "description": "($element-names,$pattern,$options)", "trigger": "cts:element-geospatial-value-match"}, {"content": "cts:element-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "description": "($element-names,$pattern,$options,$query)", "trigger": "cts:element-geospatial-value-match"}, {"content": "cts:element-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "description": "($element-names,$pattern,$options,$query,$quality-weight)", "trigger": "cts:element-geospatial-value-match"}, {"content": "cts:element-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "description": "($element-names,$pattern,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:element-geospatial-value-match"}, {"content": "cts:element-geospatial-values(${1:\\$element-names as xs:QName*})", "description": "($element-names)", "trigger": "cts:element-geospatial-values"}, {"content": "cts:element-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$start as cts:point?})", "description": "($element-names,$start)", "trigger": "cts:element-geospatial-values"}, {"content": "cts:element-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$start as cts:point?}, ${3:\\$options as xs:string*})", "description": "($element-names,$start,$options)", "trigger": "cts:element-geospatial-values"}, {"content": "cts:element-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$start as cts:point?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "description": "($element-names,$start,$options,$query)", "trigger": "cts:element-geospatial-values"}, {"content": "cts:element-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$start as cts:point?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "description": "($element-names,$start,$options,$query,$quality-weight)", "trigger": "cts:element-geospatial-values"}, {"content": "cts:element-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$start as cts:point?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "description": "($element-names,$start,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:element-geospatial-values"}, {"content": "cts:element-pair-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*})", "description": "($parent-element-names,$latitude-names,$longitude-names)", "trigger": "cts:element-pair-geospatial-boxes"}, {"content": "cts:element-pair-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$latitude-bounds as xs:double*})", "description": "($parent-element-names,$latitude-names,$longitude-names,$latitude-bounds)", "trigger": "cts:element-pair-geospatial-boxes"}, {"content": "cts:element-pair-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$latitude-bounds as xs:double*}, ${5:\\$longitude-bounds as xs:double*})", "description": "($parent-element-names,$latitude-names,$longitude-names,$latitude-bounds,$longitude-bounds)", "trigger": "cts:element-pair-geospatial-boxes"}, {"content": "cts:element-pair-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$latitude-bounds as xs:double*}, ${5:\\$longitude-bounds as xs:double*}, ${6:\\$options as xs:string*})", "description": "($parent-element-names,$latitude-names,$longitude-names,$latitude-bounds,$longitude-bounds,$options)", "trigger": "cts:element-pair-geospatial-boxes"}, {"content": "cts:element-pair-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$latitude-bounds as xs:double*}, ${5:\\$longitude-bounds as xs:double*}, ${6:\\$options as xs:string*}, ${7:\\$query as cts:query?})", "description": "($parent-element-names,$latitude-names,$longitude-names,$latitude-bounds,$longitude-bounds,$options,$query)", "trigger": "cts:element-pair-geospatial-boxes"}, {"content": "cts:element-pair-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$latitude-bounds as xs:double*}, ${5:\\$longitude-bounds as xs:double*}, ${6:\\$options as xs:string*}, ${7:\\$query as cts:query?}, ${8:\\$quality-weight as xs:double?})", "description": "($parent-element-names,$latitude-names,$longitude-names,$latitude-bounds,$longitude-bounds,$options,$query,$quality-weight)", "trigger": "cts:element-pair-geospatial-boxes"}, {"content": "cts:element-pair-geospatial-boxes(${1:\\$parent-element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$latitude-bounds as xs:double*}, ${5:\\$longitude-bounds as xs:double*}, ${6:\\$options as xs:string*}, ${7:\\$query as cts:query?}, ${8:\\$quality-weight as xs:double?}, ${9:\\$forest-ids as xs:unsignedLong*})", "description": "($parent-element-names,$latitude-names,$longitude-names,$latitude-bounds,$longitude-bounds,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:element-pair-geospatial-boxes"}, {"content": "cts:element-pair-geospatial-query(${1:\\$element-name as xs:QName*}, ${2:\\$latitude-element-names as xs:QName*}, ${3:\\$longitude-element-names as xs:QName*}, ${4:\\$regions as cts:region*})", "description": "($element-name,$latitude-element-names,$longitude-element-names,$regions)", "trigger": "cts:element-pair-geospatial-query"}, {"content": "cts:element-pair-geospatial-query(${1:\\$element-name as xs:QName*}, ${2:\\$latitude-element-names as xs:QName*}, ${3:\\$longitude-element-names as xs:QName*}, ${4:\\$regions as cts:region*}, ${5:\\$options as xs:string*})", "description": "($element-name,$latitude-element-names,$longitude-element-names,$regions,$options)", "trigger": "cts:element-pair-geospatial-query"}, {"content": "cts:element-pair-geospatial-query(${1:\\$element-name as xs:QName*}, ${2:\\$latitude-element-names as xs:QName*}, ${3:\\$longitude-element-names as xs:QName*}, ${4:\\$regions as cts:region*}, ${5:\\$options as xs:string*}, ${6:\\$weight as xs:double?})", "description": "($element-name,$latitude-element-names,$longitude-element-names,$regions,$options,$weight)", "trigger": "cts:element-pair-geospatial-query"}, {"content": "cts:element-pair-geospatial-query-element-name(${1:\\$query as cts:element-pair-geospatial-query})", "description": "($query)", "trigger": "cts:element-pair-geospatial-query-element-name"}, {"content": "cts:element-pair-geospatial-query-latitude-name(${1:\\$query as cts:element-pair-geospatial-query})", "description": "($query)", "trigger": "cts:element-pair-geospatial-query-latitude-name"}, {"content": "cts:element-pair-geospatial-query-longitude-name(${1:\\$query as cts:element-pair-geospatial-query})", "description": "($query)", "trigger": "cts:element-pair-geospatial-query-longitude-name"}, {"content": "cts:element-pair-geospatial-query-options(${1:\\$query as cts:element-pair-geospatial-query})", "description": "($query)", "trigger": "cts:element-pair-geospatial-query-options"}, {"content": "cts:element-pair-geospatial-query-region(${1:\\$query as cts:element-pair-geospatial-query})", "description": "($query)", "trigger": "cts:element-pair-geospatial-query-region"}, {"content": "cts:element-pair-geospatial-query-weight(${1:\\$query as cts:element-pair-geospatial-query})", "description": "($query)", "trigger": "cts:element-pair-geospatial-query-weight"}, {"content": "cts:element-pair-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$pattern as xs:anyAtomicType})", "description": "($element-names,$latitude-names,$longitude-names,$pattern)", "trigger": "cts:element-pair-geospatial-value-match"}, {"content": "cts:element-pair-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$pattern as xs:anyAtomicType}, ${5:\\$options as xs:string*})", "description": "($element-names,$latitude-names,$longitude-names,$pattern,$options)", "trigger": "cts:element-pair-geospatial-value-match"}, {"content": "cts:element-pair-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$pattern as xs:anyAtomicType}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?})", "description": "($element-names,$latitude-names,$longitude-names,$pattern,$options,$query)", "trigger": "cts:element-pair-geospatial-value-match"}, {"content": "cts:element-pair-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$pattern as xs:anyAtomicType}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$quality-weight as xs:double?})", "description": "($element-names,$latitude-names,$longitude-names,$pattern,$options,$query,$quality-weight)", "trigger": "cts:element-pair-geospatial-value-match"}, {"content": "cts:element-pair-geospatial-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$pattern as xs:anyAtomicType}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$quality-weight as xs:double?}, ${8:\\$forest-ids as xs:unsignedLong*})", "description": "($element-names,$latitude-names,$longitude-names,$pattern,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:element-pair-geospatial-value-match"}, {"content": "cts:element-pair-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*})", "description": "($element-names,$latitude-names,$longitude-names)", "trigger": "cts:element-pair-geospatial-values"}, {"content": "cts:element-pair-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$start as cts:point?})", "description": "($element-names,$latitude-names,$longitude-names,$start)", "trigger": "cts:element-pair-geospatial-values"}, {"content": "cts:element-pair-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$start as cts:point?}, ${5:\\$options as xs:string*})", "description": "($element-names,$latitude-names,$longitude-names,$start,$options)", "trigger": "cts:element-pair-geospatial-values"}, {"content": "cts:element-pair-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$start as cts:point?}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?})", "description": "($element-names,$latitude-names,$longitude-names,$start,$options,$query)", "trigger": "cts:element-pair-geospatial-values"}, {"content": "cts:element-pair-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$start as cts:point?}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$quality-weight as xs:double?})", "description": "($element-names,$latitude-names,$longitude-names,$start,$options,$query,$quality-weight)", "trigger": "cts:element-pair-geospatial-values"}, {"content": "cts:element-pair-geospatial-values(${1:\\$element-names as xs:QName*}, ${2:\\$latitude-names as xs:QName*}, ${3:\\$longitude-names as xs:QName*}, ${4:\\$start as cts:point?}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$quality-weight as xs:double?}, ${8:\\$forest-ids as xs:unsignedLong*})", "description": "($element-names,$latitude-names,$longitude-names,$start,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:element-pair-geospatial-values"}, {"content": "cts:element-query(${1:\\$element-name as xs:QName*}, ${2:\\$query as cts:query})", "description": "($element-name,$query)", "trigger": "cts:element-query"}, {"content": "cts:element-query-element-name(${1:\\$query as cts:element-query})", "description": "($query)", "trigger": "cts:element-query-element-name"}, {"content": "cts:element-query-query(${1:\\$query as cts:element-query})", "description": "($query)", "trigger": "cts:element-query-query"}, {"content": "cts:element-range-query(${1:\\$element-name as xs:QName*}, ${2:\\$operator as xs:string}, ${3:\\$value as xs:anyAtomicType*})", "description": "($element-name,$operator,$value)", "trigger": "cts:element-range-query"}, {"content": "cts:element-range-query(${1:\\$element-name as xs:QName*}, ${2:\\$operator as xs:string}, ${3:\\$value as xs:anyAtomicType*}, ${4:\\$options as xs:string*})", "description": "($element-name,$operator,$value,$options)", "trigger": "cts:element-range-query"}, {"content": "cts:element-range-query(${1:\\$element-name as xs:QName*}, ${2:\\$operator as xs:string}, ${3:\\$value as xs:anyAtomicType*}, ${4:\\$options as xs:string*}, ${5:\\$weight as xs:double?})", "description": "($element-name,$operator,$value,$options,$weight)", "trigger": "cts:element-range-query"}, {"content": "cts:element-range-query-element-name(${1:\\$query as cts:element-range-query})", "description": "($query)", "trigger": "cts:element-range-query-element-name"}, {"content": "cts:element-range-query-operator(${1:\\$query as cts:element-range-query})", "description": "($query)", "trigger": "cts:element-range-query-operator"}, {"content": "cts:element-range-query-options(${1:\\$query as cts:element-range-query})", "description": "($query)", "trigger": "cts:element-range-query-options"}, {"content": "cts:element-range-query-value(${1:\\$query as cts:element-range-query})", "description": "($query)", "trigger": "cts:element-range-query-value"}, {"content": "cts:element-range-query-weight(${1:\\$query as cts:element-range-query})", "description": "($query)", "trigger": "cts:element-range-query-weight"}, {"content": "cts:element-reference(${1:\\$element as xs:QName})", "description": "($element)", "trigger": "cts:element-reference"}, {"content": "cts:element-reference(${1:\\$element as xs:QName}, ${2:\\$options as xs:string})", "description": "($element,$options)", "trigger": "cts:element-reference"}, {"content": "cts:element-value-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$element-name-2 as xs:QName})", "description": "($element-name-1,$element-name-2)", "trigger": "cts:element-value-co-occurrences"}, {"content": "cts:element-value-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$element-name-2 as xs:QName}, ${3:\\$options as xs:string*})", "description": "($element-name-1,$element-name-2,$options)", "trigger": "cts:element-value-co-occurrences"}, {"content": "cts:element-value-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$element-name-2 as xs:QName}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "description": "($element-name-1,$element-name-2,$options,$query)", "trigger": "cts:element-value-co-occurrences"}, {"content": "cts:element-value-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$element-name-2 as xs:QName}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "description": "($element-name-1,$element-name-2,$options,$query,$quality-weight)", "trigger": "cts:element-value-co-occurrences"}, {"content": "cts:element-value-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$element-name-2 as xs:QName}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "description": "($element-name-1,$element-name-2,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:element-value-co-occurrences"}, {"content": "cts:element-value-geospatial-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$geo-element-name as xs:QName}, ${3:\\$child-name-1 as xs:QName?}, ${4:\\$child-name-2 as xs:QName?})", "description": "($element-name-1,$geo-element-name,$child-name-1,$child-name-2)", "trigger": "cts:element-value-geospatial-co-occurrences"}, {"content": "cts:element-value-geospatial-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$geo-element-name as xs:QName}, ${3:\\$child-name-1 as xs:QName?}, ${4:\\$child-name-2 as xs:QName?}, ${5:\\$options as xs:string*})", "description": "($element-name-1,$geo-element-name,$child-name-1,$child-name-2,$options)", "trigger": "cts:element-value-geospatial-co-occurrences"}, {"content": "cts:element-value-geospatial-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$geo-element-name as xs:QName}, ${3:\\$child-name-1 as xs:QName?}, ${4:\\$child-name-2 as xs:QName?}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?})", "description": "($element-name-1,$geo-element-name,$child-name-1,$child-name-2,$options,$query)", "trigger": "cts:element-value-geospatial-co-occurrences"}, {"content": "cts:element-value-geospatial-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$geo-element-name as xs:QName}, ${3:\\$child-name-1 as xs:QName?}, ${4:\\$child-name-2 as xs:QName?}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$quality-weight as xs:double?})", "description": "($element-name-1,$geo-element-name,$child-name-1,$child-name-2,$options,$query,$quality-weight)", "trigger": "cts:element-value-geospatial-co-occurrences"}, {"content": "cts:element-value-geospatial-co-occurrences(${1:\\$element-name-1 as xs:QName}, ${2:\\$geo-element-name as xs:QName}, ${3:\\$child-name-1 as xs:QName?}, ${4:\\$child-name-2 as xs:QName?}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$quality-weight as xs:double?}, ${8:\\$forest-ids as xs:unsignedLong*})", "description": "($element-name-1,$geo-element-name,$child-name-1,$child-name-2,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:element-value-geospatial-co-occurrences"}, {"content": "cts:element-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:anyAtomicType})", "description": "($element-names,$pattern)", "trigger": "cts:element-value-match"}, {"content": "cts:element-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*})", "description": "($element-names,$pattern,$options)", "trigger": "cts:element-value-match"}, {"content": "cts:element-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "description": "($element-names,$pattern,$options,$query)", "trigger": "cts:element-value-match"}, {"content": "cts:element-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "description": "($element-names,$pattern,$options,$query,$quality-weight)", "trigger": "cts:element-value-match"}, {"content": "cts:element-value-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "description": "($element-names,$pattern,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:element-value-match"}, {"content": "cts:element-value-query(${1:\\$element-name as xs:QName*}, ${2:\\$text as xs:string*})", "description": "($element-name,$text)", "trigger": "cts:element-value-query"}, {"content": "cts:element-value-query(${1:\\$element-name as xs:QName*}, ${2:\\$text as xs:string*}, ${3:\\$options as xs:string*})", "description": "($element-name,$text,$options)", "trigger": "cts:element-value-query"}, {"content": "cts:element-value-query(${1:\\$element-name as xs:QName*}, ${2:\\$text as xs:string*}, ${3:\\$options as xs:string*}, ${4:\\$weight as xs:double?})", "description": "($element-name,$text,$options,$weight)", "trigger": "cts:element-value-query"}, {"content": "cts:element-value-query-element-name(${1:\\$query as cts:element-value-query})", "description": "($query)", "trigger": "cts:element-value-query-element-name"}, {"content": "cts:element-value-query-options(${1:\\$query as cts:element-value-query})", "description": "($query)", "trigger": "cts:element-value-query-options"}, {"content": "cts:element-value-query-text(${1:\\$query as cts:element-value-query})", "description": "($query)", "trigger": "cts:element-value-query-text"}, {"content": "cts:element-value-query-weight(${1:\\$query as cts:element-value-query})", "description": "($query)", "trigger": "cts:element-value-query-weight"}, {"content": "cts:element-value-ranges(${1:\\$element-names as xs:QName*})", "description": "($element-names)", "trigger": "cts:element-value-ranges"}, {"content": "cts:element-value-ranges(${1:\\$element-names as xs:QName*}, ${2:\\$bounds as xs:anyAtomicType*})", "description": "($element-names,$bounds)", "trigger": "cts:element-value-ranges"}, {"content": "cts:element-value-ranges(${1:\\$element-names as xs:QName*}, ${2:\\$bounds as xs:anyAtomicType*}, ${3:\\$options as xs:string*})", "description": "($element-names,$bounds,$options)", "trigger": "cts:element-value-ranges"}, {"content": "cts:element-value-ranges(${1:\\$element-names as xs:QName*}, ${2:\\$bounds as xs:anyAtomicType*}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "description": "($element-names,$bounds,$options,$query)", "trigger": "cts:element-value-ranges"}, {"content": "cts:element-value-ranges(${1:\\$element-names as xs:QName*}, ${2:\\$bounds as xs:anyAtomicType*}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "description": "($element-names,$bounds,$options,$query,$quality-weight)", "trigger": "cts:element-value-ranges"}, {"content": "cts:element-value-ranges(${1:\\$element-names as xs:QName*}, ${2:\\$bounds as xs:anyAtomicType*}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "description": "($element-names,$bounds,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:element-value-ranges"}, {"content": "cts:element-values(${1:\\$element-names as xs:QName*})", "description": "($element-names)", "trigger": "cts:element-values"}, {"content": "cts:element-values(${1:\\$element-names as xs:QName*}, ${2:\\$start as xs:anyAtomicType?})", "description": "($element-names,$start)", "trigger": "cts:element-values"}, {"content": "cts:element-values(${1:\\$element-names as xs:QName*}, ${2:\\$start as xs:anyAtomicType?}, ${3:\\$options as xs:string*})", "description": "($element-names,$start,$options)", "trigger": "cts:element-values"}, {"content": "cts:element-values(${1:\\$element-names as xs:QName*}, ${2:\\$start as xs:anyAtomicType?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "description": "($element-names,$start,$options,$query)", "trigger": "cts:element-values"}, {"content": "cts:element-values(${1:\\$element-names as xs:QName*}, ${2:\\$start as xs:anyAtomicType?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "description": "($element-names,$start,$options,$query,$quality-weight)", "trigger": "cts:element-values"}, {"content": "cts:element-values(${1:\\$element-names as xs:QName*}, ${2:\\$start as xs:anyAtomicType?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "description": "($element-names,$start,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:element-values"}, {"content": "cts:element-walk(${1:\\$node as node()}, ${2:\\$element as xs:QName*}, ${3:\\$expr as item()*})", "description": "($node,$element,$expr)", "trigger": "cts:element-walk"}, {"content": "cts:element-word-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:string})", "description": "($element-names,$pattern)", "trigger": "cts:element-word-match"}, {"content": "cts:element-word-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:string}, ${3:\\$options as xs:string*})", "description": "($element-names,$pattern,$options)", "trigger": "cts:element-word-match"}, {"content": "cts:element-word-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:string}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "description": "($element-names,$pattern,$options,$query)", "trigger": "cts:element-word-match"}, {"content": "cts:element-word-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:string}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "description": "($element-names,$pattern,$options,$query,$quality-weight)", "trigger": "cts:element-word-match"}, {"content": "cts:element-word-match(${1:\\$element-names as xs:QName*}, ${2:\\$pattern as xs:string}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "description": "($element-names,$pattern,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:element-word-match"}, {"content": "cts:element-word-query(${1:\\$element-name as xs:QName*}, ${2:\\$text as xs:string*})", "description": "($element-name,$text)", "trigger": "cts:element-word-query"}, {"content": "cts:element-word-query(${1:\\$element-name as xs:QName*}, ${2:\\$text as xs:string*}, ${3:\\$options as xs:string*})", "description": "($element-name,$text,$options)", "trigger": "cts:element-word-query"}, {"content": "cts:element-word-query(${1:\\$element-name as xs:QName*}, ${2:\\$text as xs:string*}, ${3:\\$options as xs:string*}, ${4:\\$weight as xs:double?})", "description": "($element-name,$text,$options,$weight)", "trigger": "cts:element-word-query"}, {"content": "cts:element-word-query-element-name(${1:\\$query as cts:element-word-query})", "description": "($query)", "trigger": "cts:element-word-query-element-name"}, {"content": "cts:element-word-query-options(${1:\\$query as cts:element-word-query})", "description": "($query)", "trigger": "cts:element-word-query-options"}, {"content": "cts:element-word-query-text(${1:\\$query as cts:element-word-query})", "description": "($query)", "trigger": "cts:element-word-query-text"}, {"content": "cts:element-word-query-weight(${1:\\$query as cts:element-word-query})", "description": "($query)", "trigger": "cts:element-word-query-weight"}, {"content": "cts:element-words(${1:\\$element-names as xs:QName*})", "description": "($element-names)", "trigger": "cts:element-words"}, {"content": "cts:element-words(${1:\\$element-names as xs:QName*}, ${2:\\$start as xs:string?})", "description": "($element-names,$start)", "trigger": "cts:element-words"}, {"content": "cts:element-words(${1:\\$element-names as xs:QName*}, ${2:\\$start as xs:string?}, ${3:\\$options as xs:string*})", "description": "($element-names,$start,$options)", "trigger": "cts:element-words"}, {"content": "cts:element-words(${1:\\$element-names as xs:QName*}, ${2:\\$start as xs:string?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "description": "($element-names,$start,$options,$query)", "trigger": "cts:element-words"}, {"content": "cts:element-words(${1:\\$element-names as xs:QName*}, ${2:\\$start as xs:string?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "description": "($element-names,$start,$options,$query,$quality-weight)", "trigger": "cts:element-words"}, {"content": "cts:element-words(${1:\\$element-names as xs:QName*}, ${2:\\$start as xs:string?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "description": "($element-names,$start,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:element-words"}, {"content": "cts:entity-highlight(${1:\\$node as node()}, ${2:\\$expr as item()*})", "description": "($node,$expr)", "trigger": "cts:entity-highlight"}, {"content": "cts:field-range-query(${1:\\$field-name as xs:string*}, ${2:\\$operator as xs:string}, ${3:\\$value as xs:anyAtomicType*})", "description": "($field-name,$operator,$value)", "trigger": "cts:field-range-query"}, {"content": "cts:field-range-query(${1:\\$field-name as xs:string*}, ${2:\\$operator as xs:string}, ${3:\\$value as xs:anyAtomicType*}, ${4:\\$options as xs:string*})", "description": "($field-name,$operator,$value,$options)", "trigger": "cts:field-range-query"}, {"content": "cts:field-range-query(${1:\\$field-name as xs:string*}, ${2:\\$operator as xs:string}, ${3:\\$value as xs:anyAtomicType*}, ${4:\\$options as xs:string*}, ${5:\\$weight as xs:double?})", "description": "($field-name,$operator,$value,$options,$weight)", "trigger": "cts:field-range-query"}, {"content": "cts:field-range-query-field-name(${1:\\$query as cts:field-range-query})", "description": "($query)", "trigger": "cts:field-range-query-field-name"}, {"content": "cts:field-range-query-operator(${1:\\$query as cts:field-range-query})", "description": "($query)", "trigger": "cts:field-range-query-operator"}, {"content": "cts:field-range-query-options(${1:\\$query as cts:field-range-query})", "description": "($query)", "trigger": "cts:field-range-query-options"}, {"content": "cts:field-range-query-value(${1:\\$query as cts:field-range-query})", "description": "($query)", "trigger": "cts:field-range-query-value"}, {"content": "cts:field-range-query-weight(${1:\\$query as cts:field-range-query})", "description": "($query)", "trigger": "cts:field-range-query-weight"}, {"content": "cts:field-reference(${1:\\$field as xs:string})", "description": "($field)", "trigger": "cts:field-reference"}, {"content": "cts:field-reference(${1:\\$field as xs:string}, ${2:\\$options as xs:string})", "description": "($field,$options)", "trigger": "cts:field-reference"}, {"content": "cts:field-value-co-occurrences(${1:\\$field-name-1 as xs:string}, ${2:\\$field-name-2 as xs:string})", "description": "($field-name-1,$field-name-2)", "trigger": "cts:field-value-co-occurrences"}, {"content": "cts:field-value-co-occurrences(${1:\\$field-name-1 as xs:string}, ${2:\\$field-name-2 as xs:string}, ${3:\\$options as xs:string*})", "description": "($field-name-1,$field-name-2,$options)", "trigger": "cts:field-value-co-occurrences"}, {"content": "cts:field-value-co-occurrences(${1:\\$field-name-1 as xs:string}, ${2:\\$field-name-2 as xs:string}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "description": "($field-name-1,$field-name-2,$options,$query)", "trigger": "cts:field-value-co-occurrences"}, {"content": "cts:field-value-co-occurrences(${1:\\$field-name-1 as xs:string}, ${2:\\$field-name-2 as xs:string}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "description": "($field-name-1,$field-name-2,$options,$query,$quality-weight)", "trigger": "cts:field-value-co-occurrences"}, {"content": "cts:field-value-co-occurrences(${1:\\$field-name-1 as xs:string}, ${2:\\$field-name-2 as xs:string}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "description": "($field-name-1,$field-name-2,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:field-value-co-occurrences"}, {"content": "cts:field-value-match(${1:\\$field-names as xs:string*}, ${2:\\$pattern as xs:anyAtomicType})", "description": "($field-names,$pattern)", "trigger": "cts:field-value-match"}, {"content": "cts:field-value-match(${1:\\$field-names as xs:string*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*})", "description": "($field-names,$pattern,$options)", "trigger": "cts:field-value-match"}, {"content": "cts:field-value-match(${1:\\$field-names as xs:string*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "description": "($field-names,$pattern,$options,$query)", "trigger": "cts:field-value-match"}, {"content": "cts:field-value-match(${1:\\$field-names as xs:string*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "description": "($field-names,$pattern,$options,$query,$quality-weight)", "trigger": "cts:field-value-match"}, {"content": "cts:field-value-match(${1:\\$field-names as xs:string*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "description": "($field-names,$pattern,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:field-value-match"}, {"content": "cts:field-value-query(${1:\\$field-name as xs:string*}, ${2:\\$text as xs:string*})", "description": "($field-name,$text)", "trigger": "cts:field-value-query"}, {"content": "cts:field-value-query(${1:\\$field-name as xs:string*}, ${2:\\$text as xs:string*}, ${3:\\$options as xs:string*})", "description": "($field-name,$text,$options)", "trigger": "cts:field-value-query"}, {"content": "cts:field-value-query(${1:\\$field-name as xs:string*}, ${2:\\$text as xs:string*}, ${3:\\$options as xs:string*}, ${4:\\$weight as xs:double?})", "description": "($field-name,$text,$options,$weight)", "trigger": "cts:field-value-query"}, {"content": "cts:field-value-query-field-name(${1:\\$query as cts:field-value-query})", "description": "($query)", "trigger": "cts:field-value-query-field-name"}, {"content": "cts:field-value-query-options(${1:\\$query as cts:field-value-query})", "description": "($query)", "trigger": "cts:field-value-query-options"}, {"content": "cts:field-value-query-text(${1:\\$query as cts:field-value-query})", "description": "($query)", "trigger": "cts:field-value-query-text"}, {"content": "cts:field-value-query-weight(${1:\\$query as cts:field-value-query})", "description": "($query)", "trigger": "cts:field-value-query-weight"}, {"content": "cts:field-value-ranges(${1:\\$field-names as xs:string*})", "description": "($field-names)", "trigger": "cts:field-value-ranges"}, {"content": "cts:field-value-ranges(${1:\\$field-names as xs:string*}, ${2:\\$bounds as xs:anyAtomicType*})", "description": "($field-names,$bounds)", "trigger": "cts:field-value-ranges"}, {"content": "cts:field-value-ranges(${1:\\$field-names as xs:string*}, ${2:\\$bounds as xs:anyAtomicType*}, ${3:\\$options as xs:string*})", "description": "($field-names,$bounds,$options)", "trigger": "cts:field-value-ranges"}, {"content": "cts:field-value-ranges(${1:\\$field-names as xs:string*}, ${2:\\$bounds as xs:anyAtomicType*}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "description": "($field-names,$bounds,$options,$query)", "trigger": "cts:field-value-ranges"}, {"content": "cts:field-value-ranges(${1:\\$field-names as xs:string*}, ${2:\\$bounds as xs:anyAtomicType*}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "description": "($field-names,$bounds,$options,$query,$quality-weight)", "trigger": "cts:field-value-ranges"}, {"content": "cts:field-value-ranges(${1:\\$field-names as xs:string*}, ${2:\\$bounds as xs:anyAtomicType*}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "description": "($field-names,$bounds,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:field-value-ranges"}, {"content": "cts:field-values(${1:\\$field-names as xs:string*})", "description": "($field-names)", "trigger": "cts:field-values"}, {"content": "cts:field-values(${1:\\$field-names as xs:string*}, ${2:\\$start as xs:anyAtomicType?})", "description": "($field-names,$start)", "trigger": "cts:field-values"}, {"content": "cts:field-values(${1:\\$field-names as xs:string*}, ${2:\\$start as xs:anyAtomicType?}, ${3:\\$options as xs:string*})", "description": "($field-names,$start,$options)", "trigger": "cts:field-values"}, {"content": "cts:field-values(${1:\\$field-names as xs:string*}, ${2:\\$start as xs:anyAtomicType?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "description": "($field-names,$start,$options,$query)", "trigger": "cts:field-values"}, {"content": "cts:field-values(${1:\\$field-names as xs:string*}, ${2:\\$start as xs:anyAtomicType?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "description": "($field-names,$start,$options,$query,$quality-weight)", "trigger": "cts:field-values"}, {"content": "cts:field-values(${1:\\$field-names as xs:string*}, ${2:\\$start as xs:anyAtomicType?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "description": "($field-names,$start,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:field-values"}, {"content": "cts:field-word-match(${1:\\$field-names as xs:string*}, ${2:\\$pattern as xs:string})", "description": "($field-names,$pattern)", "trigger": "cts:field-word-match"}, {"content": "cts:field-word-match(${1:\\$field-names as xs:string*}, ${2:\\$pattern as xs:string}, ${3:\\$options as xs:string*})", "description": "($field-names,$pattern,$options)", "trigger": "cts:field-word-match"}, {"content": "cts:field-word-match(${1:\\$field-names as xs:string*}, ${2:\\$pattern as xs:string}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "description": "($field-names,$pattern,$options,$query)", "trigger": "cts:field-word-match"}, {"content": "cts:field-word-match(${1:\\$field-names as xs:string*}, ${2:\\$pattern as xs:string}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "description": "($field-names,$pattern,$options,$query,$quality-weight)", "trigger": "cts:field-word-match"}, {"content": "cts:field-word-match(${1:\\$field-names as xs:string*}, ${2:\\$pattern as xs:string}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "description": "($field-names,$pattern,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:field-word-match"}, {"content": "cts:field-word-query(${1:\\$field-name as xs:string*}, ${2:\\$text as xs:string*})", "description": "($field-name,$text)", "trigger": "cts:field-word-query"}, {"content": "cts:field-word-query(${1:\\$field-name as xs:string*}, ${2:\\$text as xs:string*}, ${3:\\$options as xs:string*})", "description": "($field-name,$text,$options)", "trigger": "cts:field-word-query"}, {"content": "cts:field-word-query(${1:\\$field-name as xs:string*}, ${2:\\$text as xs:string*}, ${3:\\$options as xs:string*}, ${4:\\$weight as xs:double?})", "description": "($field-name,$text,$options,$weight)", "trigger": "cts:field-word-query"}, {"content": "cts:field-word-query-field-name(${1:\\$query as cts:field-word-query})", "description": "($query)", "trigger": "cts:field-word-query-field-name"}, {"content": "cts:field-word-query-options(${1:\\$query as cts:field-word-query})", "description": "($query)", "trigger": "cts:field-word-query-options"}, {"content": "cts:field-word-query-text(${1:\\$query as cts:field-word-query})", "description": "($query)", "trigger": "cts:field-word-query-text"}, {"content": "cts:field-word-query-weight(${1:\\$query as cts:field-word-query})", "description": "($query)", "trigger": "cts:field-word-query-weight"}, {"content": "cts:field-words(${1:\\$field-names as xs:string*})", "description": "($field-names)", "trigger": "cts:field-words"}, {"content": "cts:field-words(${1:\\$field-names as xs:string*}, ${2:\\$start as xs:string?})", "description": "($field-names,$start)", "trigger": "cts:field-words"}, {"content": "cts:field-words(${1:\\$field-names as xs:string*}, ${2:\\$start as xs:string?}, ${3:\\$options as xs:string*})", "description": "($field-names,$start,$options)", "trigger": "cts:field-words"}, {"content": "cts:field-words(${1:\\$field-names as xs:string*}, ${2:\\$start as xs:string?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "description": "($field-names,$start,$options,$query)", "trigger": "cts:field-words"}, {"content": "cts:field-words(${1:\\$field-names as xs:string*}, ${2:\\$start as xs:string?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "description": "($field-names,$start,$options,$query,$quality-weight)", "trigger": "cts:field-words"}, {"content": "cts:field-words(${1:\\$field-names as xs:string*}, ${2:\\$start as xs:string?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "description": "($field-names,$start,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:field-words"}, {"content": "cts:fitness(${1:\\$node as node()})", "description": "($node)", "trigger": "cts:fitness"}, {"content": "cts:fitness()", "trigger": "cts:fitness"}, {"content": "cts:frequency(${1:\\$value as item()})", "description": "($value)", "trigger": "cts:frequency"}, {"content": "cts:geospatial-attribute-pair-reference(${1:\\$element as xs:string}, ${2:\\$lat as xs:string}, ${3:\\$long as xs:string}, ${4:\\$options as xs:string})", "description": "($element,$lat,$long,$options)", "trigger": "cts:geospatial-attribute-pair-reference"}, {"content": "cts:geospatial-co-occurrences(${1:\\$geo-element-name-1 as xs:QName}, ${2:\\$child-1-name-1 as xs:QName?}, ${3:\\$child-1-name-2 as xs:QName?}, ${4:\\$geo-element-name-2 as xs:QName}, ${5:\\$child-2-name-1 as xs:QName?}, ${6:\\$child-2-name-2 as xs:QName?})", "description": "($geo-element-name-1,$child-1-name-1,$child-1-name-2,$geo-element-name-2,$child-2-name-1,$child-2-name-2)", "trigger": "cts:geospatial-co-occurrences"}, {"content": "cts:geospatial-co-occurrences(${1:\\$geo-element-name-1 as xs:QName}, ${2:\\$child-1-name-1 as xs:QName?}, ${3:\\$child-1-name-2 as xs:QName?}, ${4:\\$geo-element-name-2 as xs:QName}, ${5:\\$child-2-name-1 as xs:QName?}, ${6:\\$child-2-name-2 as xs:QName?}, ${7:\\$options as xs:string*})", "description": "($geo-element-name-1,$child-1-name-1,$child-1-name-2,$geo-element-name-2,$child-2-name-1,$child-2-name-2,$options)", "trigger": "cts:geospatial-co-occurrences"}, {"content": "cts:geospatial-co-occurrences(${1:\\$geo-element-name-1 as xs:QName}, ${2:\\$child-1-name-1 as xs:QName?}, ${3:\\$child-1-name-2 as xs:QName?}, ${4:\\$geo-element-name-2 as xs:QName}, ${5:\\$child-2-name-1 as xs:QName?}, ${6:\\$child-2-name-2 as xs:QName?}, ${7:\\$options as xs:string*}, ${8:\\$query as cts:query?})", "description": "($geo-element-name-1,$child-1-name-1,$child-1-name-2,$geo-element-name-2,$child-2-name-1,$child-2-name-2,$options,$query)", "trigger": "cts:geospatial-co-occurrences"}, {"content": "cts:geospatial-co-occurrences(${1:\\$geo-element-name-1 as xs:QName}, ${2:\\$child-1-name-1 as xs:QName?}, ${3:\\$child-1-name-2 as xs:QName?}, ${4:\\$geo-element-name-2 as xs:QName}, ${5:\\$child-2-name-1 as xs:QName?}, ${6:\\$child-2-name-2 as xs:QName?}, ${7:\\$options as xs:string*}, ${8:\\$query as cts:query?}, ${9:\\$quality-weight as xs:double?})", "description": "($geo-element-name-1,$child-1-name-1,$child-1-name-2,$geo-element-name-2,$child-2-name-1,$child-2-name-2,$options,$query,$quality-weight)", "trigger": "cts:geospatial-co-occurrences"}, {"content": "cts:geospatial-co-occurrences(${1:\\$geo-element-name-1 as xs:QName}, ${2:\\$child-1-name-1 as xs:QName?}, ${3:\\$child-1-name-2 as xs:QName?}, ${4:\\$geo-element-name-2 as xs:QName}, ${5:\\$child-2-name-1 as xs:QName?}, ${6:\\$child-2-name-2 as xs:QName?}, ${7:\\$options as xs:string*}, ${8:\\$query as cts:query?}, ${9:\\$quality-weight as xs:double?}, ${10:\\$forest-ids as xs:unsignedLong*})", "description": "($geo-element-name-1,$child-1-name-1,$child-1-name-2,$geo-element-name-2,$child-2-name-1,$child-2-name-2,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:geospatial-co-occurrences"}, {"content": "cts:geospatial-element-child-reference(${1:\\$element as xs:string}, ${2:\\$child as xs:string}, ${3:\\$options as xs:string})", "description": "($element,$child,$options)", "trigger": "cts:geospatial-element-child-reference"}, {"content": "cts:geospatial-element-pair-reference(${1:\\$element as xs:string}, ${2:\\$lat as xs:string}, ${3:\\$long as xs:string}, ${4:\\$options as xs:string})", "description": "($element,$lat,$long,$options)", "trigger": "cts:geospatial-element-pair-reference"}, {"content": "cts:geospatial-element-reference(${1:\\$element as xs:string}, ${2:\\$options as xs:string})", "description": "($element,$options)", "trigger": "cts:geospatial-element-reference"}, {"content": "cts:geospatial-path-reference(${1:\\$path-expression as xs:string}, ${2:\\$options as xs:string})", "description": "($path-expression,$options)", "trigger": "cts:geospatial-path-reference"}, {"content": "cts:highlight(${1:\\$node as node()}, ${2:\\$query as cts:query}, ${3:\\$expr as item()*})", "description": "($node,$query,$expr)", "trigger": "cts:highlight"}, {"content": "cts:linear-model(${1:\\$values as cts:reference*})", "description": "($values)", "trigger": "cts:linear-model"}, {"content": "cts:linear-model(${1:\\$values as cts:reference*}, ${2:\\$options as xs:string*})", "description": "($values,$options)", "trigger": "cts:linear-model"}, {"content": "cts:linear-model(${1:\\$values as cts:reference*}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "description": "($values,$options,$query)", "trigger": "cts:linear-model"}, {"content": "cts:linear-model(${1:\\$values as cts:reference*}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$forest-ids as xs:unsignedLong*})", "description": "($values,$options,$query,$forest-ids)", "trigger": "cts:linear-model"}, {"content": "cts:linestring(${1:\\$vertices as cts:point*})", "description": "($vertices)", "trigger": "cts:linestring"}, {"content": "cts:linestring-vertices(${1:\\$linestring as cts:linestring})", "description": "($linestring)", "trigger": "cts:linestring-vertices"}, {"content": "cts:locks-query(${1:\\$query as cts:query})", "description": "($query)", "trigger": "cts:locks-query"}, {"content": "cts:locks-query-query(${1:\\$query as cts:locks-query})", "description": "($query)", "trigger": "cts:locks-query-query"}, {"content": "cts:max(${1:\\$range-index as cts:reference})", "description": "($range-index)", "trigger": "cts:max"}, {"content": "cts:max(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*})", "description": "($range-index,$options)", "trigger": "cts:max"}, {"content": "cts:max(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "description": "($range-index,$options,$query)", "trigger": "cts:max"}, {"content": "cts:max(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$forest-ids as xs:unsignedLong*})", "description": "($range-index,$options,$query,$forest-ids)", "trigger": "cts:max"}, {"content": "cts:median(${1:\\$arg as xs:double*})", "description": "($arg)", "trigger": "cts:median"}, {"content": "cts:min(${1:\\$range-index as cts:reference})", "description": "($range-index)", "trigger": "cts:min"}, {"content": "cts:min(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*})", "description": "($range-index,$options)", "trigger": "cts:min"}, {"content": "cts:min(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "description": "($range-index,$options,$query)", "trigger": "cts:min"}, {"content": "cts:min(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$forest-ids as xs:unsignedLong*})", "description": "($range-index,$options,$query,$forest-ids)", "trigger": "cts:min"}, {"content": "cts:near-query(${1:\\$queries as cts:query*})", "description": "($queries)", "trigger": "cts:near-query"}, {"content": "cts:near-query(${1:\\$queries as cts:query*}, ${2:\\$distance as xs:double?})", "description": "($queries,$distance)", "trigger": "cts:near-query"}, {"content": "cts:near-query(${1:\\$queries as cts:query*}, ${2:\\$distance as xs:double?}, ${3:\\$options as xs:string*})", "description": "($queries,$distance,$options)", "trigger": "cts:near-query"}, {"content": "cts:near-query(${1:\\$queries as cts:query*}, ${2:\\$distance as xs:double?}, ${3:\\$options as xs:string*}, ${4:\\$distance-weight as xs:double?})", "description": "($queries,$distance,$options,$distance-weight)", "trigger": "cts:near-query"}, {"content": "cts:near-query-distance(${1:\\$query as cts:near-query})", "description": "($query)", "trigger": "cts:near-query-distance"}, {"content": "cts:near-query-options(${1:\\$query as cts:near-query})", "description": "($query)", "trigger": "cts:near-query-options"}, {"content": "cts:near-query-queries(${1:\\$query as cts:near-query})", "description": "($query)", "trigger": "cts:near-query-queries"}, {"content": "cts:near-query-weight(${1:\\$query as cts:near-query})", "description": "($query)", "trigger": "cts:near-query-weight"}, {"content": "cts:not-in-query(${1:\\$positive-query as cts:query}, ${2:\\$negative-query as cts:query})", "description": "($positive-query,$negative-query)", "trigger": "cts:not-in-query"}, {"content": "cts:not-in-query-negative-query(${1:\\$query as cts:not-in-query})", "description": "($query)", "trigger": "cts:not-in-query-negative-query"}, {"content": "cts:not-in-query-positive-query(${1:\\$query as cts:not-in-query})", "description": "($query)", "trigger": "cts:not-in-query-positive-query"}, {"content": "cts:not-query(${1:\\$query as cts:query})", "description": "($query)", "trigger": "cts:not-query"}, {"content": "cts:not-query-query(${1:\\$query as cts:not-query})", "description": "($query)", "trigger": "cts:not-query-query"}, {"content": "cts:not-query-weight(${1:\\$query as cts:element-query})", "description": "($query)", "trigger": "cts:not-query-weight"}, {"content": "cts:or-query(${1:\\$queries as cts:query*})", "description": "($queries)", "trigger": "cts:or-query"}, {"content": "cts:or-query-queries(${1:\\$query as cts:or-query})", "description": "($query)", "trigger": "cts:or-query-queries"}, {"content": "cts:parse-wkt(${1:\\$wtk as xs:string*})", "description": "($wtk)", "trigger": "cts:parse-wkt"}, {"content": "cts:path-geospatial-query(${1:\\$path-expression as xs:string*}, ${2:\\$regions as cts:region*})", "description": "($path-expression,$regions)", "trigger": "cts:path-geospatial-query"}, {"content": "cts:path-geospatial-query(${1:\\$path-expression as xs:string*}, ${2:\\$regions as cts:region*}, ${3:\\$options as xs:string*})", "description": "($path-expression,$regions,$options)", "trigger": "cts:path-geospatial-query"}, {"content": "cts:path-geospatial-query(${1:\\$path-expression as xs:string*}, ${2:\\$regions as cts:region*}, ${3:\\$options as xs:string*}, ${4:\\$weight as xs:double?})", "description": "($path-expression,$regions,$options,$weight)", "trigger": "cts:path-geospatial-query"}, {"content": "cts:path-geospatial-query-options(${1:\\$query as cts:path-geospatial-query})", "description": "($query)", "trigger": "cts:path-geospatial-query-options"}, {"content": "cts:path-geospatial-query-path-expression(${1:\\$query as cts:path-geospatial-query})", "description": "($query)", "trigger": "cts:path-geospatial-query-path-expression"}, {"content": "cts:path-geospatial-query-region(${1:\\$query as cts:path-geospatial-query})", "description": "($query)", "trigger": "cts:path-geospatial-query-region"}, {"content": "cts:path-geospatial-query-weight(${1:\\$query as cts:path-geospatial-query})", "description": "($query)", "trigger": "cts:path-geospatial-query-weight"}, {"content": "cts:path-range-query(${1:\\$path-expression as xs:string*}, ${2:\\$operator as xs:string}, ${3:\\$value as xs:anyAtomicType*})", "description": "($path-expression,$operator,$value)", "trigger": "cts:path-range-query"}, {"content": "cts:path-range-query(${1:\\$path-expression as xs:string*}, ${2:\\$operator as xs:string}, ${3:\\$value as xs:anyAtomicType*}, ${4:\\$options as xs:string*})", "description": "($path-expression,$operator,$value,$options)", "trigger": "cts:path-range-query"}, {"content": "cts:path-range-query(${1:\\$path-expression as xs:string*}, ${2:\\$operator as xs:string}, ${3:\\$value as xs:anyAtomicType*}, ${4:\\$options as xs:string*}, ${5:\\$weight as xs:double?})", "description": "($path-expression,$operator,$value,$options,$weight)", "trigger": "cts:path-range-query"}, {"content": "cts:path-range-query-operator(${1:\\$query as cts:path-range-query})", "description": "($query)", "trigger": "cts:path-range-query-operator"}, {"content": "cts:path-range-query-options(${1:\\$query as cts:path-range-query})", "description": "($query)", "trigger": "cts:path-range-query-options"}, {"content": "cts:path-range-query-path-name(${1:\\$query as cts:path-range-query})", "description": "($query)", "trigger": "cts:path-range-query-path-name"}, {"content": "cts:path-range-query-value(${1:\\$query as cts:path-range-query})", "description": "($query)", "trigger": "cts:path-range-query-value"}, {"content": "cts:path-range-query-weight(${1:\\$query as cts:path-range-query})", "description": "($query)", "trigger": "cts:path-range-query-weight"}, {"content": "cts:path-reference(${1:\\$path-expression as xs:string})", "description": "($path-expression)", "trigger": "cts:path-reference"}, {"content": "cts:path-reference(${1:\\$path-expression as xs:string}, ${2:\\$options as xs:string})", "description": "($path-expression,$options)", "trigger": "cts:path-reference"}, {"content": "cts:percent-rank(${1:\\$arg as xs:anyAtomicType*}, ${2:\\$value as xs:anyAtomicType})", "description": "($arg,$value)", "trigger": "cts:percent-rank"}, {"content": "cts:percent-rank(${1:\\$arg as xs:anyAtomicType*}, ${2:\\$value as xs:anyAtomicType}, ${3:\\$options as xs:string*})", "description": "($arg,$value,$options)", "trigger": "cts:percent-rank"}, {"content": "cts:percentile(${1:\\$arg as xs:double*}, ${2:\\$p as xs:double*})", "description": "($arg,$p)", "trigger": "cts:percentile"}, {"content": "cts:point(${1:\\$latitude as xs:float}, ${2:\\$longitude as xs:float})", "description": "($latitude,$longitude)", "trigger": "cts:point"}, {"content": "cts:point-latitude(${1:\\$point as cts:point})", "description": "($point)", "trigger": "cts:point-latitude"}, {"content": "cts:point-longitude(${1:\\$point as cts:point})", "description": "($point)", "trigger": "cts:point-longitude"}, {"content": "cts:polygon(${1:\\$vertices as cts:point*})", "description": "($vertices)", "trigger": "cts:polygon"}, {"content": "cts:polygon-contains(${1:\\$polygon as cts:polygon}, ${2:\\$region as cts:region*})", "description": "($polygon,$region)", "trigger": "cts:polygon-contains"}, {"content": "cts:polygon-contains(${1:\\$polygon as cts:polygon}, ${2:\\$region as cts:region*}, ${3:\\$options as xs:string*})", "description": "($polygon,$region,$options)", "trigger": "cts:polygon-contains"}, {"content": "cts:polygon-intersects(${1:\\$polygon as cts:polygon}, ${2:\\$region as cts:region*})", "description": "($polygon,$region)", "trigger": "cts:polygon-intersects"}, {"content": "cts:polygon-intersects(${1:\\$polygon as cts:polygon}, ${2:\\$region as cts:region*}, ${3:\\$options as xs:string*})", "description": "($polygon,$region,$options)", "trigger": "cts:polygon-intersects"}, {"content": "cts:polygon-vertices(${1:\\$polygon as cts:polygon})", "description": "($polygon)", "trigger": "cts:polygon-vertices"}, {"content": "cts:properties-query(${1:\\$query as cts:query})", "description": "($query)", "trigger": "cts:properties-query"}, {"content": "cts:properties-query-query(${1:\\$query as cts:properties-query})", "description": "($query)", "trigger": "cts:properties-query-query"}, {"content": "cts:quality(${1:\\$node as node()})", "description": "($node)", "trigger": "cts:quality"}, {"content": "cts:quality()", "trigger": "cts:quality"}, {"content": "cts:query(${1:\\$query as element()})", "description": "($query)", "trigger": "cts:query"}, {"content": "cts:query()", "trigger": "cts:query"}, {"content": "cts:rank(${1:\\$arg as xs:anyAtomicType*}, ${2:\\$value as xs:anyAtomicType})", "description": "($arg,$value)", "trigger": "cts:rank"}, {"content": "cts:rank(${1:\\$arg as xs:anyAtomicType*}, ${2:\\$value as xs:anyAtomicType}, ${3:\\$options as xs:string*})", "description": "($arg,$value,$options)", "trigger": "cts:rank"}, {"content": "cts:reference-parse(${1:\\$reference as element()})", "description": "($reference)", "trigger": "cts:reference-parse"}, {"content": "cts:reference-parse()", "trigger": "cts:reference-parse"}, {"content": "cts:register(${1:\\$query as cts:query})", "description": "($query)", "trigger": "cts:register"}, {"content": "cts:registered-query(${1:\\$ids as xs:unsignedLong*})", "description": "($ids)", "trigger": "cts:registered-query"}, {"content": "cts:registered-query(${1:\\$ids as xs:unsignedLong*}, ${2:\\$options as xs:string*})", "description": "($ids,$options)", "trigger": "cts:registered-query"}, {"content": "cts:registered-query(${1:\\$ids as xs:unsignedLong*}, ${2:\\$options as xs:string*}, ${3:\\$weight as xs:double?})", "description": "($ids,$options,$weight)", "trigger": "cts:registered-query"}, {"content": "cts:registered-query-ids(${1:\\$query as cts:registered-query})", "description": "($query)", "trigger": "cts:registered-query-ids"}, {"content": "cts:registered-query-options(${1:\\$query as cts:registered-query})", "description": "($query)", "trigger": "cts:registered-query-options"}, {"content": "cts:registered-query-weight(${1:\\$query as cts:registered-query})", "description": "($query)", "trigger": "cts:registered-query-weight"}, {"content": "cts:relevance-info(${1:\\$node as node()})", "description": "($node)", "trigger": "cts:relevance-info"}, {"content": "cts:relevance-info()", "trigger": "cts:relevance-info"}, {"content": "cts:remainder(${1:\\$node as node()})", "description": "($node)", "trigger": "cts:remainder"}, {"content": "cts:remainder()", "trigger": "cts:remainder"}, {"content": "cts:reverse-query(${1:\\$nodes as node()*})", "description": "($nodes)", "trigger": "cts:reverse-query"}, {"content": "cts:reverse-query(${1:\\$nodes as node()*}, ${2:\\$weight as xs:double?})", "description": "($nodes,$weight)", "trigger": "cts:reverse-query"}, {"content": "cts:reverse-query-nodes(${1:\\$query as cts:reverse-query})", "description": "($query)", "trigger": "cts:reverse-query-nodes"}, {"content": "cts:reverse-query-weight(${1:\\$query as cts:reverse-query})", "description": "($query)", "trigger": "cts:reverse-query-weight"}, {"content": "cts:score(${1:\\$node as node()})", "description": "($node)", "trigger": "cts:score"}, {"content": "cts:score()", "trigger": "cts:score"}, {"content": "cts:search(${1:\\$expression as node()*}, ${2:\\$query as cts:query?})", "description": "($expression,$query)", "trigger": "cts:search"}, {"content": "cts:search(${1:\\$expression as node()*}, ${2:\\$query as cts:query?}, ${3:\\$options as xs:string*})", "description": "($expression,$query,$options)", "trigger": "cts:search"}, {"content": "cts:search(${1:\\$expression as node()*}, ${2:\\$query as cts:query?}, ${3:\\$options as xs:string*}, ${4:\\$quality-weight as xs:double?})", "description": "($expression,$query,$options,$quality-weight)", "trigger": "cts:search"}, {"content": "cts:search(${1:\\$expression as node()*}, ${2:\\$query as cts:query?}, ${3:\\$options as xs:string*}, ${4:\\$quality-weight as xs:double?}, ${5:\\$forest-ids as xs:unsignedLong*})", "description": "($expression,$query,$options,$quality-weight,$forest-ids)", "trigger": "cts:search"}, {"content": "cts:shortest-distance(${1:\\$p1 as cts:point}, ${2:\\$region as cts:region+})", "description": "($p1,$region)", "trigger": "cts:shortest-distance"}, {"content": "cts:shortest-distance(${1:\\$p1 as cts:point}, ${2:\\$region as cts:region+}, ${3:\\$options as xs:string*})", "description": "($p1,$region,$options)", "trigger": "cts:shortest-distance"}, {"content": "cts:similar-query(${1:\\$nodes as node()*})", "description": "($nodes)", "trigger": "cts:similar-query"}, {"content": "cts:similar-query(${1:\\$nodes as node()*}, ${2:\\$weight as xs:double?})", "description": "($nodes,$weight)", "trigger": "cts:similar-query"}, {"content": "cts:similar-query(${1:\\$nodes as node()*}, ${2:\\$weight as xs:double?}, ${3:\\$options as element()?})", "description": "($nodes,$weight,$options)", "trigger": "cts:similar-query"}, {"content": "cts:similar-query-nodes(${1:\\$query as cts:similar-query})", "description": "($query)", "trigger": "cts:similar-query-nodes"}, {"content": "cts:similar-query-weight(${1:\\$query as cts:similar-query})", "description": "($query)", "trigger": "cts:similar-query-weight"}, {"content": "cts:stddev(${1:\\$range-index as cts:reference})", "description": "($range-index)", "trigger": "cts:stddev"}, {"content": "cts:stddev(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*})", "description": "($range-index,$options)", "trigger": "cts:stddev"}, {"content": "cts:stddev(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "description": "($range-index,$options,$query)", "trigger": "cts:stddev"}, {"content": "cts:stddev(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$forest-ids as xs:unsignedLong*})", "description": "($range-index,$options,$query,$forest-ids)", "trigger": "cts:stddev"}, {"content": "cts:stddev-p(${1:\\$range-index as cts:reference})", "description": "($range-index)", "trigger": "cts:stddev-p"}, {"content": "cts:stddev-p(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*})", "description": "($range-index,$options)", "trigger": "cts:stddev-p"}, {"content": "cts:stddev-p(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "description": "($range-index,$options,$query)", "trigger": "cts:stddev-p"}, {"content": "cts:stddev-p(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$forest-ids as xs:unsignedLong*})", "description": "($range-index,$options,$query,$forest-ids)", "trigger": "cts:stddev-p"}, {"content": "cts:stem(${1:\\$text as xs:string})", "description": "($text)", "trigger": "cts:stem"}, {"content": "cts:stem(${1:\\$text as xs:string}, ${2:\\$language as xs:string?})", "description": "($text,$language)", "trigger": "cts:stem"}, {"content": "cts:sum(${1:\\$arg as xs:anyAtomicType*})", "description": "($arg)", "trigger": "cts:sum"}, {"content": "cts:sum(${1:\\$arg as xs:anyAtomicType*}, ${2:\\$zero as xs:anyAtomicType?})", "description": "($arg,$zero)", "trigger": "cts:sum"}, {"content": "cts:sum-aggregate(${1:\\$range-index as cts:reference})", "description": "($range-index)", "trigger": "cts:sum-aggregate"}, {"content": "cts:sum-aggregate(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*})", "description": "($range-index,$options)", "trigger": "cts:sum-aggregate"}, {"content": "cts:sum-aggregate(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "description": "($range-index,$options,$query)", "trigger": "cts:sum-aggregate"}, {"content": "cts:sum-aggregate(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$forest-ids as xs:unsignedLong*})", "description": "($range-index,$options,$query,$forest-ids)", "trigger": "cts:sum-aggregate"}, {"content": "cts:thresholds(${1:\\$computed-labels as element(cts:label)*}, ${2:\\$known-labels as element(cts:label)*})", "description": "($computed-labels,$known-labels)", "trigger": "cts:thresholds"}, {"content": "cts:thresholds(${1:\\$computed-labels as element(cts:label)*}, ${2:\\$known-labels as element(cts:label)*}, ${3:\\$recall-weight as xs:double?})", "description": "($computed-labels,$known-labels,$recall-weight)", "trigger": "cts:thresholds"}, {"content": "cts:to-wkt(${1:\\$wtk as cts:region*})", "description": "($wtk)", "trigger": "cts:to-wkt"}, {"content": "cts:tokenize(${1:\\$text as xs:string})", "description": "($text)", "trigger": "cts:tokenize"}, {"content": "cts:tokenize(${1:\\$text as xs:string}, ${2:\\$language as xs:string?})", "description": "($text,$language)", "trigger": "cts:tokenize"}, {"content": "cts:tokenize(${1:\\$text as xs:string}, ${2:\\$language as xs:string?}, ${3:\\$field as xs:string?})", "description": "($text,$language,$field)", "trigger": "cts:tokenize"}, {"content": "cts:train(${1:\\$training-nodes as node()*}, ${2:\\$labels as element(cts:label)*})", "description": "($training-nodes,$labels)", "trigger": "cts:train"}, {"content": "cts:train(${1:\\$training-nodes as node()*}, ${2:\\$labels as element(cts:label)*}, ${3:\\$options as element()?})", "description": "($training-nodes,$labels,$options)", "trigger": "cts:train"}, {"content": "cts:triple-range-query(${1:\\$subject as xs:anyAtomicType*}, ${2:\\$predicate as xs:anyAtomicType*}, ${3:\\$object as xs:anyAtomicType*})", "description": "($subject,$predicate,$object)", "trigger": "cts:triple-range-query"}, {"content": "cts:triple-range-query(${1:\\$subject as xs:anyAtomicType*}, ${2:\\$predicate as xs:anyAtomicType*}, ${3:\\$object as xs:anyAtomicType*}, ${4:\\$operator as xs:string*})", "description": "($subject,$predicate,$object,$operator)", "trigger": "cts:triple-range-query"}, {"content": "cts:triple-range-query(${1:\\$subject as xs:anyAtomicType*}, ${2:\\$predicate as xs:anyAtomicType*}, ${3:\\$object as xs:anyAtomicType*}, ${4:\\$operator as xs:string*}, ${5:\\$options as xs:string*})", "description": "($subject,$predicate,$object,$operator,$options)", "trigger": "cts:triple-range-query"}, {"content": "cts:triple-range-query(${1:\\$subject as xs:anyAtomicType*}, ${2:\\$predicate as xs:anyAtomicType*}, ${3:\\$object as xs:anyAtomicType*}, ${4:\\$operator as xs:string*}, ${5:\\$options as xs:string*}, ${6:\\$weight as xs:double?})", "description": "($subject,$predicate,$object,$operator,$options,$weight)", "trigger": "cts:triple-range-query"}, {"content": "cts:triple-range-query-object(${1:\\$query as cts:triple-range-query})", "description": "($query)", "trigger": "cts:triple-range-query-object"}, {"content": "cts:triple-range-query-operator(${1:\\$query as cts:triple-range-query})", "description": "($query)", "trigger": "cts:triple-range-query-operator"}, {"content": "cts:triple-range-query-options(${1:\\$query as cts:triple-range-query})", "description": "($query)", "trigger": "cts:triple-range-query-options"}, {"content": "cts:triple-range-query-predicate(${1:\\$query as cts:triple-range-query})", "description": "($query)", "trigger": "cts:triple-range-query-predicate"}, {"content": "cts:triple-range-query-subject(${1:\\$query as cts:triple-range-query})", "description": "($query)", "trigger": "cts:triple-range-query-subject"}, {"content": "cts:triple-range-query-weight(${1:\\$query as cts:triple-range-query})", "description": "($query)", "trigger": "cts:triple-range-query-weight"}, {"content": "cts:triples(${1:\\$subject as xs:anyAtomicType*})", "description": "($subject)", "trigger": "cts:triples"}, {"content": "cts:triples(${1:\\$subject as xs:anyAtomicType*}, ${2:\\$predicate as xs:anyAtomicType*})", "description": "($subject,$predicate)", "trigger": "cts:triples"}, {"content": "cts:triples(${1:\\$subject as xs:anyAtomicType*}, ${2:\\$predicate as xs:anyAtomicType*}, ${3:\\$object as xs:anyAtomicType*})", "description": "($subject,$predicate,$object)", "trigger": "cts:triples"}, {"content": "cts:triples(${1:\\$subject as xs:anyAtomicType*}, ${2:\\$predicate as xs:anyAtomicType*}, ${3:\\$object as xs:anyAtomicType*}, ${4:\\$operator as xs:string*})", "description": "($subject,$predicate,$object,$operator)", "trigger": "cts:triples"}, {"content": "cts:triples(${1:\\$subject as xs:anyAtomicType*}, ${2:\\$predicate as xs:anyAtomicType*}, ${3:\\$object as xs:anyAtomicType*}, ${4:\\$operator as xs:string*}, ${5:\\$options as xs:string*})", "description": "($subject,$predicate,$object,$operator,$options)", "trigger": "cts:triples"}, {"content": "cts:triples(${1:\\$subject as xs:anyAtomicType*}, ${2:\\$predicate as xs:anyAtomicType*}, ${3:\\$object as xs:anyAtomicType*}, ${4:\\$operator as xs:string*}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?})", "description": "($subject,$predicate,$object,$operator,$options,$query)", "trigger": "cts:triples"}, {"content": "cts:triples(${1:\\$subject as xs:anyAtomicType*}, ${2:\\$predicate as xs:anyAtomicType*}, ${3:\\$object as xs:anyAtomicType*}, ${4:\\$operator as xs:string*}, ${5:\\$options as xs:string*}, ${6:\\$query as cts:query?}, ${7:\\$forest-ids as xs:unsignedLong*})", "description": "($subject,$predicate,$object,$operator,$options,$query,$forest-ids)", "trigger": "cts:triples"}, {"content": "cts:triples()", "trigger": "cts:triples"}, {"content": "cts:uri-match(${1:\\$pattern as xs:string})", "description": "($pattern)", "trigger": "cts:uri-match"}, {"content": "cts:uri-match(${1:\\$pattern as xs:string}, ${2:\\$options as xs:string*})", "description": "($pattern,$options)", "trigger": "cts:uri-match"}, {"content": "cts:uri-match(${1:\\$pattern as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "description": "($pattern,$options,$query)", "trigger": "cts:uri-match"}, {"content": "cts:uri-match(${1:\\$pattern as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$quality-weight as xs:double?})", "description": "($pattern,$options,$query,$quality-weight)", "trigger": "cts:uri-match"}, {"content": "cts:uri-match(${1:\\$pattern as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$quality-weight as xs:double?}, ${5:\\$forest-ids as xs:unsignedLong*})", "description": "($pattern,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:uri-match"}, {"content": "cts:uri-reference()", "trigger": "cts:uri-reference"}, {"content": "cts:uris(${1:\\$start as xs:string?})", "description": "($start)", "trigger": "cts:uris"}, {"content": "cts:uris(${1:\\$start as xs:string?}, ${2:\\$options as xs:string*})", "description": "($start,$options)", "trigger": "cts:uris"}, {"content": "cts:uris(${1:\\$start as xs:string?}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "description": "($start,$options,$query)", "trigger": "cts:uris"}, {"content": "cts:uris(${1:\\$start as xs:string?}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$quality-weight as xs:double?})", "description": "($start,$options,$query,$quality-weight)", "trigger": "cts:uris"}, {"content": "cts:uris(${1:\\$start as xs:string?}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$quality-weight as xs:double?}, ${5:\\$forest-ids as xs:unsignedLong*})", "description": "($start,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:uris"}, {"content": "cts:uris()", "trigger": "cts:uris"}, {"content": "cts:valid-index-path(${1:\\$string as xs:string}, ${2:\\$ignorens as xs:boolean})", "description": "($string,$ignorens)", "trigger": "cts:valid-index-path"}, {"content": "cts:value-co-occurrences(${1:\\$range-index-1 as cts:reference}, ${2:\\$range-index-2 as cts:reference})", "description": "($range-index-1,$range-index-2)", "trigger": "cts:value-co-occurrences"}, {"content": "cts:value-co-occurrences(${1:\\$range-index-1 as cts:reference}, ${2:\\$range-index-2 as cts:reference}, ${3:\\$options as xs:string*})", "description": "($range-index-1,$range-index-2,$options)", "trigger": "cts:value-co-occurrences"}, {"content": "cts:value-co-occurrences(${1:\\$range-index-1 as cts:reference}, ${2:\\$range-index-2 as cts:reference}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "description": "($range-index-1,$range-index-2,$options,$query)", "trigger": "cts:value-co-occurrences"}, {"content": "cts:value-co-occurrences(${1:\\$range-index-1 as cts:reference}, ${2:\\$range-index-2 as cts:reference}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "description": "($range-index-1,$range-index-2,$options,$query,$quality-weight)", "trigger": "cts:value-co-occurrences"}, {"content": "cts:value-co-occurrences(${1:\\$range-index-1 as cts:reference}, ${2:\\$range-index-2 as cts:reference}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "description": "($range-index-1,$range-index-2,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:value-co-occurrences"}, {"content": "cts:value-match(${1:\\$range-indexes as cts:reference*}, ${2:\\$pattern as xs:anyAtomicType})", "description": "($range-indexes,$pattern)", "trigger": "cts:value-match"}, {"content": "cts:value-match(${1:\\$range-indexes as cts:reference*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*})", "description": "($range-indexes,$pattern,$options)", "trigger": "cts:value-match"}, {"content": "cts:value-match(${1:\\$range-indexes as cts:reference*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "description": "($range-indexes,$pattern,$options,$query)", "trigger": "cts:value-match"}, {"content": "cts:value-match(${1:\\$range-indexes as cts:reference*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "description": "($range-indexes,$pattern,$options,$query,$quality-weight)", "trigger": "cts:value-match"}, {"content": "cts:value-match(${1:\\$range-indexes as cts:reference*}, ${2:\\$pattern as xs:anyAtomicType}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "description": "($range-indexes,$pattern,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:value-match"}, {"content": "cts:value-ranges(${1:\\$range-indexes as cts:reference*})", "description": "($range-indexes)", "trigger": "cts:value-ranges"}, {"content": "cts:value-ranges(${1:\\$range-indexes as cts:reference*}, ${2:\\$bounds as xs:anyAtomicType*})", "description": "($range-indexes,$bounds)", "trigger": "cts:value-ranges"}, {"content": "cts:value-ranges(${1:\\$range-indexes as cts:reference*}, ${2:\\$bounds as xs:anyAtomicType*}, ${3:\\$options as xs:string*})", "description": "($range-indexes,$bounds,$options)", "trigger": "cts:value-ranges"}, {"content": "cts:value-ranges(${1:\\$range-indexes as cts:reference*}, ${2:\\$bounds as xs:anyAtomicType*}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "description": "($range-indexes,$bounds,$options,$query)", "trigger": "cts:value-ranges"}, {"content": "cts:value-ranges(${1:\\$range-indexes as cts:reference*}, ${2:\\$bounds as xs:anyAtomicType*}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "description": "($range-indexes,$bounds,$options,$query,$quality-weight)", "trigger": "cts:value-ranges"}, {"content": "cts:value-ranges(${1:\\$range-indexes as cts:reference*}, ${2:\\$bounds as xs:anyAtomicType*}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "description": "($range-indexes,$bounds,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:value-ranges"}, {"content": "cts:value-tuples(${1:\\$range-indexes as cts:reference*})", "description": "($range-indexes)", "trigger": "cts:value-tuples"}, {"content": "cts:value-tuples(${1:\\$range-indexes as cts:reference*}, ${2:\\$options as xs:string*})", "description": "($range-indexes,$options)", "trigger": "cts:value-tuples"}, {"content": "cts:value-tuples(${1:\\$range-indexes as cts:reference*}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "description": "($range-indexes,$options,$query)", "trigger": "cts:value-tuples"}, {"content": "cts:value-tuples(${1:\\$range-indexes as cts:reference*}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$quality-weight as xs:double?})", "description": "($range-indexes,$options,$query,$quality-weight)", "trigger": "cts:value-tuples"}, {"content": "cts:value-tuples(${1:\\$range-indexes as cts:reference*}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$quality-weight as xs:double?}, ${5:\\$forest-ids as xs:unsignedLong*})", "description": "($range-indexes,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:value-tuples"}, {"content": "cts:values(${1:\\$range-indexes as cts:reference*})", "description": "($range-indexes)", "trigger": "cts:values"}, {"content": "cts:values(${1:\\$range-indexes as cts:reference*}, ${2:\\$start as xs:anyAtomicType?})", "description": "($range-indexes,$start)", "trigger": "cts:values"}, {"content": "cts:values(${1:\\$range-indexes as cts:reference*}, ${2:\\$start as xs:anyAtomicType?}, ${3:\\$options as xs:string*})", "description": "($range-indexes,$start,$options)", "trigger": "cts:values"}, {"content": "cts:values(${1:\\$range-indexes as cts:reference*}, ${2:\\$start as xs:anyAtomicType?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "description": "($range-indexes,$start,$options,$query)", "trigger": "cts:values"}, {"content": "cts:values(${1:\\$range-indexes as cts:reference*}, ${2:\\$start as xs:anyAtomicType?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?})", "description": "($range-indexes,$start,$options,$query,$quality-weight)", "trigger": "cts:values"}, {"content": "cts:values(${1:\\$range-indexes as cts:reference*}, ${2:\\$start as xs:anyAtomicType?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$quality-weight as xs:double?}, ${6:\\$forest-ids as xs:unsignedLong*})", "description": "($range-indexes,$start,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:values"}, {"content": "cts:variance(${1:\\$range-index as cts:reference})", "description": "($range-index)", "trigger": "cts:variance"}, {"content": "cts:variance(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*})", "description": "($range-index,$options)", "trigger": "cts:variance"}, {"content": "cts:variance(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "description": "($range-index,$options,$query)", "trigger": "cts:variance"}, {"content": "cts:variance(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$forest-ids as xs:unsignedLong*})", "description": "($range-index,$options,$query,$forest-ids)", "trigger": "cts:variance"}, {"content": "cts:variance-p(${1:\\$range-index as cts:reference})", "description": "($range-index)", "trigger": "cts:variance-p"}, {"content": "cts:variance-p(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*})", "description": "($range-index,$options)", "trigger": "cts:variance-p"}, {"content": "cts:variance-p(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "description": "($range-index,$options,$query)", "trigger": "cts:variance-p"}, {"content": "cts:variance-p(${1:\\$range-index as cts:reference}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$forest-ids as xs:unsignedLong*})", "description": "($range-index,$options,$query,$forest-ids)", "trigger": "cts:variance-p"}, {"content": "cts:walk(${1:\\$node as node()}, ${2:\\$query as cts:query}, ${3:\\$expr as item()*})", "description": "($node,$query,$expr)", "trigger": "cts:walk"}, {"content": "cts:word-match(${1:\\$pattern as xs:string})", "description": "($pattern)", "trigger": "cts:word-match"}, {"content": "cts:word-match(${1:\\$pattern as xs:string}, ${2:\\$options as xs:string*})", "description": "($pattern,$options)", "trigger": "cts:word-match"}, {"content": "cts:word-match(${1:\\$pattern as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "description": "($pattern,$options,$query)", "trigger": "cts:word-match"}, {"content": "cts:word-match(${1:\\$pattern as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$quality-weight as xs:double?})", "description": "($pattern,$options,$query,$quality-weight)", "trigger": "cts:word-match"}, {"content": "cts:word-match(${1:\\$pattern as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$quality-weight as xs:double?}, ${5:\\$forest-ids as xs:unsignedLong*})", "description": "($pattern,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:word-match"}, {"content": "cts:word-query(${1:\\$text as xs:string*})", "description": "($text)", "trigger": "cts:word-query"}, {"content": "cts:word-query(${1:\\$text as xs:string*}, ${2:\\$options as xs:string*})", "description": "($text,$options)", "trigger": "cts:word-query"}, {"content": "cts:word-query(${1:\\$text as xs:string*}, ${2:\\$options as xs:string*}, ${3:\\$weight as xs:double?})", "description": "($text,$options,$weight)", "trigger": "cts:word-query"}, {"content": "cts:word-query-options(${1:\\$query as cts:word-query})", "description": "($query)", "trigger": "cts:word-query-options"}, {"content": "cts:word-query-text(${1:\\$query as cts:word-query})", "description": "($query)", "trigger": "cts:word-query-text"}, {"content": "cts:word-query-weight(${1:\\$query as cts:word-query})", "description": "($query)", "trigger": "cts:word-query-weight"}, {"content": "cts:words(${1:\\$start as xs:string?})", "description": "($start)", "trigger": "cts:words"}, {"content": "cts:words(${1:\\$start as xs:string?}, ${2:\\$options as xs:string*})", "description": "($start,$options)", "trigger": "cts:words"}, {"content": "cts:words(${1:\\$start as xs:string?}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "description": "($start,$options,$query)", "trigger": "cts:words"}, {"content": "cts:words(${1:\\$start as xs:string?}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$quality-weight as xs:double?})", "description": "($start,$options,$query,$quality-weight)", "trigger": "cts:words"}, {"content": "cts:words(${1:\\$start as xs:string?}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?}, ${4:\\$quality-weight as xs:double?}, ${5:\\$forest-ids as xs:unsignedLong*})", "description": "($start,$options,$query,$quality-weight,$forest-ids)", "trigger": "cts:words"}, {"content": "cts:words()", "trigger": "cts:words"}, {"content": "cvt:basename(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "cvt:basename"}, {"content": "cvt:basepath(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "cvt:basepath"}, {"content": "cvt:destination-uri(${1:\\$uri as xs:string}, ${2:\\$extension as xs:string})", "description": "($uri,$extension)", "trigger": "cvt:destination-uri"}, {"content": "cvt:part-uri(${1:\\$uri as xs:string}, ${2:\\$part as xs:string})", "description": "($uri,$part)", "trigger": "cvt:part-uri"}, {"content": "cvt:save-converted-documents(${1:\\$source-uri as xs:string}, ${2:\\$destination-uri as xs:string}, ${3:\\$manifest as element()}, ${4:\\$docs as document-node()*})", "description": "($source-uri,$destination-uri,$manifest,$docs)", "trigger": "cvt:save-converted-documents"}, {"content": "cvt:save-converted-documents(${1:\\$source-uri as xs:string}, ${2:\\$destination-uri as xs:string}, ${3:\\$manifest as element()}, ${4:\\$docs as document-node()*}, ${5:\\$destination-collections as xs:string*})", "description": "($source-uri,$destination-uri,$manifest,$docs,$destination-collections)", "trigger": "cvt:save-converted-documents"}, {"content": "dbg:attach(${1:\\$request-id as xs:unsignedLong})", "description": "($request-id)", "trigger": "dbg:attach"}, {"content": "dbg:attached(${1:\\$server as xs:unsignedLong})", "description": "($server)", "trigger": "dbg:attached"}, {"content": "dbg:attached()", "trigger": "dbg:attached"}, {"content": "dbg:break(${1:\\$request as xs:unsignedLong})", "description": "($request)", "trigger": "dbg:break"}, {"content": "dbg:break(${1:\\$request as xs:unsignedLong}, ${2:\\$expression as xs:unsignedLong})", "description": "($request,$expression)", "trigger": "dbg:break"}, {"content": "dbg:breakpoints(${1:\\$request as xs:unsignedLong})", "description": "($request)", "trigger": "dbg:breakpoints"}, {"content": "dbg:clear(${1:\\$request as xs:unsignedLong}, ${2:\\$expression as xs:unsignedLong})", "description": "($request,$expression)", "trigger": "dbg:clear"}, {"content": "dbg:connect(${1:\\$server as xs:unsignedLong})", "description": "($server)", "trigger": "dbg:connect"}, {"content": "dbg:connected()", "trigger": "dbg:connected"}, {"content": "dbg:continue(${1:\\$request as xs:unsignedLong})", "description": "($request)", "trigger": "dbg:continue"}, {"content": "dbg:detach(${1:\\$request-id as xs:unsignedLong})", "description": "($request-id)", "trigger": "dbg:detach"}, {"content": "dbg:disconnect(${1:\\$server as xs:unsignedLong})", "description": "($server)", "trigger": "dbg:disconnect"}, {"content": "dbg:eval(${1:\\$xquery as xs:string})", "description": "($xquery)", "trigger": "dbg:eval"}, {"content": "dbg:eval(${1:\\$xquery as xs:string}, ${2:\\$vars as item()*})", "description": "($xquery,$vars)", "trigger": "dbg:eval"}, {"content": "dbg:eval(${1:\\$xquery as xs:string}, ${2:\\$vars as item()*}, ${3:\\$options as node()?})", "description": "($xquery,$vars,$options)", "trigger": "dbg:eval"}, {"content": "dbg:expr(${1:\\$request as xs:unsignedLong}, ${2:\\$expression as xs:unsignedLong})", "description": "($request,$expression)", "trigger": "dbg:expr"}, {"content": "dbg:finish(${1:\\$request as xs:unsignedLong})", "description": "($request)", "trigger": "dbg:finish"}, {"content": "dbg:function(${1:\\$request as xs:unsignedLong}, ${2:\\$uri as xs:string}, ${3:\\$function as xs:QName})", "description": "($request,$uri,$function)", "trigger": "dbg:function"}, {"content": "dbg:invoke(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "dbg:invoke"}, {"content": "dbg:invoke(${1:\\$uri as xs:string}, ${2:\\$vars as item()*})", "description": "($uri,$vars)", "trigger": "dbg:invoke"}, {"content": "dbg:invoke(${1:\\$uri as xs:string}, ${2:\\$vars as item()*}, ${3:\\$options as node()?})", "description": "($uri,$vars,$options)", "trigger": "dbg:invoke"}, {"content": "dbg:line(${1:\\$request as xs:unsignedLong}, ${2:\\$uri as xs:string}, ${3:\\$line as xs:unsigned})", "description": "($request,$uri,$line)", "trigger": "dbg:line"}, {"content": "dbg:next(${1:\\$request as xs:unsignedLong})", "description": "($request)", "trigger": "dbg:next"}, {"content": "dbg:out(${1:\\$request as xs:unsignedLong})", "description": "($request)", "trigger": "dbg:out"}, {"content": "dbg:stack(${1:\\$request as xs:unsignedLong})", "description": "($request)", "trigger": "dbg:stack"}, {"content": "dbg:status(${1:\\$request-id as xs:unsignedLong*})", "description": "($request-id)", "trigger": "dbg:status"}, {"content": "dbg:step(${1:\\$request as xs:unsignedLong})", "description": "($request)", "trigger": "dbg:step"}, {"content": "dbg:stop()", "trigger": "dbg:stop"}, {"content": "dbg:stopped(${1:\\$server as xs:unsignedLong})", "description": "($server)", "trigger": "dbg:stopped"}, {"content": "dbg:stopped()", "trigger": "dbg:stopped"}, {"content": "dbg:value(${1:\\$request as xs:unsignedLong})", "description": "($request)", "trigger": "dbg:value"}, {"content": "dbg:value(${1:\\$request as xs:unsignedLong}, ${2:\\$expr as xs:string})", "description": "($request,$expr)", "trigger": "dbg:value"}, {"content": "dbg:wait(${1:\\$request-id as xs:unsignedLong*}, ${2:\\$timeout as xs:unsignedLong})", "description": "($request-id,$timeout)", "trigger": "dbg:wait"}, {"content": "dbk:convert(${1:\\$doc as node()?}, ${2:\\$options as element()?})", "description": "($doc,$options)", "trigger": "dbk:convert"}, {"content": "dls:as-of-query(${1:\\$when as xs:dateTime})", "description": "($when)", "trigger": "dls:as-of-query"}, {"content": "dls:author-query(${1:\\$author as xs:unsignedLong})", "description": "($author)", "trigger": "dls:author-query"}, {"content": "dls:break-checkout(${1:\\$uri as xs:string}, ${2:\\$deep as xs:boolean})", "description": "($uri,$deep)", "trigger": "dls:break-checkout"}, {"content": "dls:document-add-collections(${1:\\$uri as xs:string}, ${2:\\$collections as xs:string*})", "description": "($uri,$collections)", "trigger": "dls:document-add-collections"}, {"content": "dls:document-add-permissions(${1:\\$uri as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "description": "($uri,$permissions)", "trigger": "dls:document-add-permissions"}, {"content": "dls:document-add-properties(${1:\\$uri as xs:string}, ${2:\\$properties as element()*})", "description": "($uri,$properties)", "trigger": "dls:document-add-properties"}, {"content": "dls:document-checkin(${1:\\$uri as xs:string}, ${2:\\$deep as xs:boolean})", "description": "($uri,$deep)", "trigger": "dls:document-checkin"}, {"content": "dls:document-checkout(${1:\\$uri as xs:string}, ${2:\\$deep as xs:boolean})", "description": "($uri,$deep)", "trigger": "dls:document-checkout"}, {"content": "dls:document-checkout(${1:\\$uri as xs:string}, ${2:\\$deep as xs:boolean}, ${3:\\$annotation as item()?})", "description": "($uri,$deep,$annotation)", "trigger": "dls:document-checkout"}, {"content": "dls:document-checkout(${1:\\$uri as xs:string}, ${2:\\$deep as xs:boolean}, ${3:\\$annotation as item()?}, ${4:\\$timeout as xs:unsignedLong?})", "description": "($uri,$deep,$annotation,$timeout)", "trigger": "dls:document-checkout"}, {"content": "dls:document-checkout-status(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "dls:document-checkout-status"}, {"content": "dls:document-checkout-update-checkin(${1:\\$uri as xs:string}, ${2:\\$doc as node()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean})", "description": "($uri,$doc,$annotation,$retain-history)", "trigger": "dls:document-checkout-update-checkin"}, {"content": "dls:document-checkout-update-checkin(${1:\\$uri as xs:string}, ${2:\\$doc as node()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean}, ${5:\\$permissions as element(sec:permission)*})", "description": "($uri,$doc,$annotation,$retain-history,$permissions)", "trigger": "dls:document-checkout-update-checkin"}, {"content": "dls:document-checkout-update-checkin(${1:\\$uri as xs:string}, ${2:\\$doc as node()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean}, ${5:\\$permissions as element(sec:permission)*}, ${6:\\$collections as xs:string*})", "description": "($uri,$doc,$annotation,$retain-history,$permissions,$collections)", "trigger": "dls:document-checkout-update-checkin"}, {"content": "dls:document-checkout-update-checkin(${1:\\$uri as xs:string}, ${2:\\$doc as node()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean}, ${5:\\$permissions as element(sec:permission)*}, ${6:\\$collections as xs:string*}, ${7:\\$quality as xs:integer?})", "description": "($uri,$doc,$annotation,$retain-history,$permissions,$collections,$quality)", "trigger": "dls:document-checkout-update-checkin"}, {"content": "dls:document-checkout-update-checkin(${1:\\$uri as xs:string}, ${2:\\$doc as node()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean}, ${5:\\$permissions as element(sec:permission)*}, ${6:\\$collections as xs:string*}, ${7:\\$quality as xs:integer?}, ${8:\\$forest-ids as xs:unsignedLong*})", "description": "($uri,$doc,$annotation,$retain-history,$permissions,$collections,$quality,$forest-ids)", "trigger": "dls:document-checkout-update-checkin"}, {"content": "dls:document-delete(${1:\\$uri as xs:string}, ${2:\\$keep-old-versions as xs:boolean}, ${3:\\$retain-history as xs:boolean})", "description": "($uri,$keep-old-versions,$retain-history)", "trigger": "dls:document-delete"}, {"content": "dls:document-extract-part(${1:\\$new-uri as xs:string}, ${2:\\$element as element()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean})", "description": "($new-uri,$element,$annotation,$retain-history)", "trigger": "dls:document-extract-part"}, {"content": "dls:document-extract-part(${1:\\$new-uri as xs:string}, ${2:\\$element as element()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean}, ${5:\\$permissions as element(sec:permission)*})", "description": "($new-uri,$element,$annotation,$retain-history,$permissions)", "trigger": "dls:document-extract-part"}, {"content": "dls:document-extract-part(${1:\\$new-uri as xs:string}, ${2:\\$element as element()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean}, ${5:\\$permissions as element(sec:permission)*}, ${6:\\$collections as xs:string*})", "description": "($new-uri,$element,$annotation,$retain-history,$permissions,$collections)", "trigger": "dls:document-extract-part"}, {"content": "dls:document-extract-part(${1:\\$new-uri as xs:string}, ${2:\\$element as element()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean}, ${5:\\$permissions as element(sec:permission)*}, ${6:\\$collections as xs:string*}, ${7:\\$quality as xs:integer?})", "description": "($new-uri,$element,$annotation,$retain-history,$permissions,$collections,$quality)", "trigger": "dls:document-extract-part"}, {"content": "dls:document-extract-part(${1:\\$new-uri as xs:string}, ${2:\\$element as element()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean}, ${5:\\$permissions as element(sec:permission)*}, ${6:\\$collections as xs:string*}, ${7:\\$quality as xs:integer?}, ${8:\\$forest-ids as xs:unsignedLong*})", "description": "($new-uri,$element,$annotation,$retain-history,$permissions,$collections,$quality,$forest-ids)", "trigger": "dls:document-extract-part"}, {"content": "dls:document-get-permissions(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "dls:document-get-permissions"}, {"content": "dls:document-history(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "dls:document-history"}, {"content": "dls:document-include-query(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "dls:document-include-query"}, {"content": "dls:document-insert-and-manage(${1:\\$uri as xs:string}, ${2:\\$deep as xs:boolean}, ${3:\\$doc as node()})", "description": "($uri,$deep,$doc)", "trigger": "dls:document-insert-and-manage"}, {"content": "dls:document-insert-and-manage(${1:\\$uri as xs:string}, ${2:\\$deep as xs:boolean}, ${3:\\$doc as node()}, ${4:\\$annotation as item()*})", "description": "($uri,$deep,$doc,$annotation)", "trigger": "dls:document-insert-and-manage"}, {"content": "dls:document-insert-and-manage(${1:\\$uri as xs:string}, ${2:\\$deep as xs:boolean}, ${3:\\$doc as node()}, ${4:\\$annotation as item()*}, ${5:\\$permissions as element(sec:permission)*})", "description": "($uri,$deep,$doc,$annotation,$permissions)", "trigger": "dls:document-insert-and-manage"}, {"content": "dls:document-insert-and-manage(${1:\\$uri as xs:string}, ${2:\\$deep as xs:boolean}, ${3:\\$doc as node()}, ${4:\\$annotation as item()*}, ${5:\\$permissions as element(sec:permission)*}, ${6:\\$collections as xs:string*})", "description": "($uri,$deep,$doc,$annotation,$permissions,$collections)", "trigger": "dls:document-insert-and-manage"}, {"content": "dls:document-insert-and-manage(${1:\\$uri as xs:string}, ${2:\\$deep as xs:boolean}, ${3:\\$doc as node()}, ${4:\\$annotation as item()*}, ${5:\\$permissions as element(sec:permission)*}, ${6:\\$collections as xs:string*}, ${7:\\$quality as xs:integer?})", "description": "($uri,$deep,$doc,$annotation,$permissions,$collections,$quality)", "trigger": "dls:document-insert-and-manage"}, {"content": "dls:document-insert-and-manage(${1:\\$uri as xs:string}, ${2:\\$deep as xs:boolean}, ${3:\\$doc as node()}, ${4:\\$annotation as item()*}, ${5:\\$permissions as element(sec:permission)*}, ${6:\\$collections as xs:string*}, ${7:\\$quality as xs:integer?}, ${8:\\$forest-ids as xs:unsignedLong*})", "description": "($uri,$deep,$doc,$annotation,$permissions,$collections,$quality,$forest-ids)", "trigger": "dls:document-insert-and-manage"}, {"content": "dls:document-is-managed(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "dls:document-is-managed"}, {"content": "dls:document-manage(${1:\\$uri as xs:string}, ${2:\\$deep as xs:boolean})", "description": "($uri,$deep)", "trigger": "dls:document-manage"}, {"content": "dls:document-manage(${1:\\$uri as xs:string}, ${2:\\$deep as xs:boolean}, ${3:\\$annotation as item()*})", "description": "($uri,$deep,$annotation)", "trigger": "dls:document-manage"}, {"content": "dls:document-purge(${1:\\$uri as xs:string}, ${2:\\$delete as xs:boolean}, ${3:\\$retain-history as xs:boolean})", "description": "($uri,$delete,$retain-history)", "trigger": "dls:document-purge"}, {"content": "dls:document-remove-collections(${1:\\$uri as xs:string}, ${2:\\$collections as xs:string*})", "description": "($uri,$collections)", "trigger": "dls:document-remove-collections"}, {"content": "dls:document-remove-permissions(${1:\\$uri as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "description": "($uri,$permissions)", "trigger": "dls:document-remove-permissions"}, {"content": "dls:document-remove-properties(${1:\\$uri as xs:string}, ${2:\\$property-names as xs:QName*})", "description": "($uri,$property-names)", "trigger": "dls:document-remove-properties"}, {"content": "dls:document-retention-rules(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "dls:document-retention-rules"}, {"content": "dls:document-set-collections(${1:\\$uri as xs:string}, ${2:\\$collections as xs:string*})", "description": "($uri,$collections)", "trigger": "dls:document-set-collections"}, {"content": "dls:document-set-permissions(${1:\\$uri as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "description": "($uri,$permissions)", "trigger": "dls:document-set-permissions"}, {"content": "dls:document-set-properties(${1:\\$uri as xs:string}, ${2:\\$properties as element()*})", "description": "($uri,$properties)", "trigger": "dls:document-set-properties"}, {"content": "dls:document-set-property(${1:\\$uri as xs:string}, ${2:\\$property as element()})", "description": "($uri,$property)", "trigger": "dls:document-set-property"}, {"content": "dls:document-set-quality(${1:\\$uri as xs:string}, ${2:\\$quality as xs:int})", "description": "($uri,$quality)", "trigger": "dls:document-set-quality"}, {"content": "dls:document-unmanage(${1:\\$uri as xs:string}, ${2:\\$deep as xs:boolean}, ${3:\\$remove-versions as xs:boolean})", "description": "($uri,$deep,$remove-versions)", "trigger": "dls:document-unmanage"}, {"content": "dls:document-update(${1:\\$uri as xs:string}, ${2:\\$doc as node()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean})", "description": "($uri,$doc,$annotation,$retain-history)", "trigger": "dls:document-update"}, {"content": "dls:document-update(${1:\\$uri as xs:string}, ${2:\\$doc as node()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean}, ${5:\\$permissions as element(sec:permission)*})", "description": "($uri,$doc,$annotation,$retain-history,$permissions)", "trigger": "dls:document-update"}, {"content": "dls:document-update(${1:\\$uri as xs:string}, ${2:\\$doc as node()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean}, ${5:\\$permissions as element(sec:permission)*}, ${6:\\$collections as xs:string*})", "description": "($uri,$doc,$annotation,$retain-history,$permissions,$collections)", "trigger": "dls:document-update"}, {"content": "dls:document-update(${1:\\$uri as xs:string}, ${2:\\$doc as node()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean}, ${5:\\$permissions as element(sec:permission)*}, ${6:\\$collections as xs:string*}, ${7:\\$quality as xs:integer?})", "description": "($uri,$doc,$annotation,$retain-history,$permissions,$collections,$quality)", "trigger": "dls:document-update"}, {"content": "dls:document-update(${1:\\$uri as xs:string}, ${2:\\$doc as node()}, ${3:\\$annotation as item()*}, ${4:\\$retain-history as xs:boolean}, ${5:\\$permissions as element(sec:permission)*}, ${6:\\$collections as xs:string*}, ${7:\\$quality as xs:integer?}, ${8:\\$forest-ids as xs:unsignedLong*})", "description": "($uri,$doc,$annotation,$retain-history,$permissions,$collections,$quality,$forest-ids)", "trigger": "dls:document-update"}, {"content": "dls:document-version(${1:\\$uri as xs:string}, ${2:\\$version-number as xs:unsignedInt})", "description": "($uri,$version-number)", "trigger": "dls:document-version"}, {"content": "dls:document-version-as-of(${1:\\$uri as xs:string}, ${2:\\$as-of as xs:dateTime})", "description": "($uri,$as-of)", "trigger": "dls:document-version-as-of"}, {"content": "dls:document-version-delete(${1:\\$uri as xs:string}, ${2:\\$version as xs:integer}, ${3:\\$retain-history as xs:boolean})", "description": "($uri,$version,$retain-history)", "trigger": "dls:document-version-delete"}, {"content": "dls:document-version-query(${1:\\$version as xs:unsignedLong})", "description": "($version)", "trigger": "dls:document-version-query"}, {"content": "dls:document-version-uri(${1:\\$document-uri as xs:string}, ${2:\\$version as xs:integer})", "description": "($document-uri,$version)", "trigger": "dls:document-version-uri"}, {"content": "dls:document-version-uris(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "dls:document-version-uris"}, {"content": "dls:document-versions-query(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "dls:document-versions-query"}, {"content": "dls:documents-query()", "trigger": "dls:documents-query"}, {"content": "dls:link-expand(${1:\\$context as node()}, ${2:\\$ref as element(xi:include)}, ${3:\\$restriction as cts:query?})", "description": "($context,$ref,$restriction)", "trigger": "dls:link-expand"}, {"content": "dls:link-references(${1:\\$node as node()}, ${2:\\$restriction as cts:query?})", "description": "($node,$restriction)", "trigger": "dls:link-references"}, {"content": "dls:node-expand(${1:\\$node as node()}, ${2:\\$restriction as cts:query?})", "description": "($node,$restriction)", "trigger": "dls:node-expand"}, {"content": "dls:purge(${1:\\$delete as xs:boolean}, ${2:\\$retain-history as xs:boolean})", "description": "($delete,$retain-history)", "trigger": "dls:purge"}, {"content": "dls:retention-rule(${1:\\$name as xs:string}, ${2:\\$comment as item()*}, ${3:\\$num-versions as xs:unsignedInt?}, ${4:\\$duration as xs:duration?}, ${5:\\$document-query-text as xs:string?}, ${6:\\$document-query as cts:query?})", "description": "($name,$comment,$num-versions,$duration,$document-query-text,$document-query)", "trigger": "dls:retention-rule"}, {"content": "dls:retention-rule-insert(${1:\\$rules as element(dls:retention-rule)*})", "description": "($rules)", "trigger": "dls:retention-rule-insert"}, {"content": "dls:retention-rule-remove(${1:\\$names as xs:string*})", "description": "($names)", "trigger": "dls:retention-rule-remove"}, {"content": "dls:retention-rules(${1:\\$names as xs:string*})", "description": "($names)", "trigger": "dls:retention-rules"}, {"content": "dom:add-permissions(${1:\\$domain-name as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "description": "($domain-name,$permissions)", "trigger": "dom:add-permissions"}, {"content": "dom:add-pipeline(${1:\\$domain-name as xs:string}, ${2:\\$pipeline-id as xs:unsignedLong})", "description": "($domain-name,$pipeline-id)", "trigger": "dom:add-pipeline"}, {"content": "dom:collection()", "trigger": "dom:collection"}, {"content": "dom:configuration-create(${1:\\$restart-user as xs:string}, ${2:\\$evaluation-context as element(dom:evaluation-context)}, ${3:\\$default-domain as xs:unsignedLong}, ${4:\\$permissions as element(sec:permission)*})", "description": "($restart-user,$evaluation-context,$default-domain,$permissions)", "trigger": "dom:configuration-create"}, {"content": "dom:configuration-get()", "trigger": "dom:configuration-get"}, {"content": "dom:configuration-set-default-domain(${1:\\$domain-id as xs:unsignedLong})", "description": "($domain-id)", "trigger": "dom:configuration-set-default-domain"}, {"content": "dom:configuration-set-evaluation-context(${1:\\$context as element(dom:evaluation-context)})", "description": "($context)", "trigger": "dom:configuration-set-evaluation-context"}, {"content": "dom:configuration-set-permissions(${1:\\$permissions as element(sec:permission)*})", "description": "($permissions)", "trigger": "dom:configuration-set-permissions"}, {"content": "dom:configuration-set-restart-user(${1:\\$restart-user as xs:string})", "description": "($restart-user)", "trigger": "dom:configuration-set-restart-user"}, {"content": "dom:create(${1:\\$name as xs:string}, ${2:\\$description as xs:string}, ${3:\\$scope as element(dom:domain-scope)}, ${4:\\$context as element(dom:evaluation-context)}, ${5:\\$pipelines as xs:unsignedLong*}, ${6:\\$permissions as element(sec:permission)*})", "description": "($name,$description,$scope,$context,$pipelines,$permissions)", "trigger": "dom:create"}, {"content": "dom:domain-scope(${1:\\$document-scope as xs:string}, ${2:\\$uri as xs:string}, ${3:\\$depth as xs:string?})", "description": "($document-scope,$uri,$depth)", "trigger": "dom:domain-scope"}, {"content": "dom:domains()", "trigger": "dom:domains"}, {"content": "dom:evaluation-context(${1:\\$database as xs:unsignedLong}, ${2:\\$root as xs:string})", "description": "($database,$root)", "trigger": "dom:evaluation-context"}, {"content": "dom:get(${1:\\$domain-name as xs:string})", "description": "($domain-name)", "trigger": "dom:get"}, {"content": "dom:remove(${1:\\$domain-name as xs:string})", "description": "($domain-name)", "trigger": "dom:remove"}, {"content": "dom:remove-permissions(${1:\\$domain-name as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "description": "($domain-name,$permissions)", "trigger": "dom:remove-permissions"}, {"content": "dom:remove-pipeline(${1:\\$domain-name as xs:string}, ${2:\\$pipeline-id as xs:unsignedLong})", "description": "($domain-name,$pipeline-id)", "trigger": "dom:remove-pipeline"}, {"content": "dom:set-description(${1:\\$domain-name as xs:string}, ${2:\\$description as xs:string})", "description": "($domain-name,$description)", "trigger": "dom:set-description"}, {"content": "dom:set-domain-scope(${1:\\$domain-name as xs:string}, ${2:\\$scope as element(dom:domain-scope)})", "description": "($domain-name,$scope)", "trigger": "dom:set-domain-scope"}, {"content": "dom:set-evaluation-context(${1:\\$domain-name as xs:string}, ${2:\\$context as element(dom:evaluation-context)})", "description": "($domain-name,$context)", "trigger": "dom:set-evaluation-context"}, {"content": "dom:set-name(${1:\\$domain-name as xs:string}, ${2:\\$new-name as xs:string})", "description": "($domain-name,$new-name)", "trigger": "dom:set-name"}, {"content": "dom:set-permissions(${1:\\$domain-name as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "description": "($domain-name,$permissions)", "trigger": "dom:set-permissions"}, {"content": "dom:set-pipelines(${1:\\$domain-name as xs:string}, ${2:\\$pipelines as xs:unsignedLong*})", "description": "($domain-name,$pipelines)", "trigger": "dom:set-pipelines"}, {"content": "ec2:add-snapshot-create-volume-permission-groups(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$snapshot-ids as xs:string*}, ${5:\\$user-groups as xs:string*})", "description": "($access-key,$secret-key,$ec2-region,$snapshot-ids,$user-groups)", "trigger": "ec2:add-snapshot-create-volume-permission-groups"}, {"content": "ec2:add-snapshot-create-volume-permission-users(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$snapshot-ids as xs:string*}, ${5:\\$user-ids as xs:string*})", "description": "($access-key,$secret-key,$ec2-region,$snapshot-ids,$user-ids)", "trigger": "ec2:add-snapshot-create-volume-permission-users"}, {"content": "ec2:allocate-address(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string})", "description": "($access-key,$secret-key,$ec2-region)", "trigger": "ec2:allocate-address"}, {"content": "ec2:associate-address(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$public-ip as xs:string}, ${5:\\$instance-id as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$public-ip,$instance-id)", "trigger": "ec2:associate-address"}, {"content": "ec2:attach-volume(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$volume-id as xs:string}, ${5:\\$instance-id as xs:string}, ${6:\\$device as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$volume-id,$instance-id,$device)", "trigger": "ec2:attach-volume"}, {"content": "ec2:authorize-group-ingress(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$group-name as xs:string}, ${5:\\$source-group-owner-id as xs:string}, ${6:\\$source-group-name as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$group-name,$source-group-owner-id,$source-group-name)", "trigger": "ec2:authorize-group-ingress"}, {"content": "ec2:authorize-icmp-ingress(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$group-name as xs:string}, ${5:\\$icmp-type as xs:integer}, ${6:\\$icmp-code as xs:integer}, ${7:\\$cidr-ip as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$group-name,$icmp-type,$icmp-code,$cidr-ip)", "trigger": "ec2:authorize-icmp-ingress"}, {"content": "ec2:authorize-tcp-ingress(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$group-name as xs:string}, ${5:\\$port-range as xs:integer+}, ${6:\\$cidr-ip as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$group-name,$port-range,$cidr-ip)", "trigger": "ec2:authorize-tcp-ingress"}, {"content": "ec2:authorize-udp-ingress(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$group-name as xs:string}, ${5:\\$port-range as xs:integer+}, ${6:\\$cidr-ip as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$group-name,$port-range,$cidr-ip)", "trigger": "ec2:authorize-udp-ingress"}, {"content": "ec2:create-key-pair(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$key-name as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$key-name)", "trigger": "ec2:create-key-pair"}, {"content": "ec2:create-security-group(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$group-name as xs:string}, ${5:\\$group-description as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$group-name,$group-description)", "trigger": "ec2:create-security-group"}, {"content": "ec2:create-snapshot(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$volume-id as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$volume-id)", "trigger": "ec2:create-snapshot"}, {"content": "ec2:create-snapshot(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$volume-id as xs:string}, ${5:\\$description as xs:string?})", "description": "($access-key,$secret-key,$ec2-region,$volume-id,$description)", "trigger": "ec2:create-snapshot"}, {"content": "ec2:create-volume(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$availability-zone as xs:string}, ${5:\\$size as xs:integer})", "description": "($access-key,$secret-key,$ec2-region,$availability-zone,$size)", "trigger": "ec2:create-volume"}, {"content": "ec2:create-volume-from-snapshot(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$availability-zone as xs:string}, ${5:\\$snapshot-id as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$availability-zone,$snapshot-id)", "trigger": "ec2:create-volume-from-snapshot"}, {"content": "ec2:create-volume-from-snapshot(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$availability-zone as xs:string}, ${5:\\$snapshot-id as xs:string}, ${6:\\$size as xs:integer?})", "description": "($access-key,$secret-key,$ec2-region,$availability-zone,$snapshot-id,$size)", "trigger": "ec2:create-volume-from-snapshot"}, {"content": "ec2:delete-key-pair(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$key-name as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$key-name)", "trigger": "ec2:delete-key-pair"}, {"content": "ec2:delete-security-group(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$group-name as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$group-name)", "trigger": "ec2:delete-security-group"}, {"content": "ec2:delete-snapshot(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$snapshot-id as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$snapshot-id)", "trigger": "ec2:delete-snapshot"}, {"content": "ec2:delete-volume(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$volume-id as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$volume-id)", "trigger": "ec2:delete-volume"}, {"content": "ec2:describe-addresses(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string})", "description": "($access-key,$secret-key,$ec2-region)", "trigger": "ec2:describe-addresses"}, {"content": "ec2:describe-addresses(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$public-ips as xs:string*})", "description": "($access-key,$secret-key,$ec2-region,$public-ips)", "trigger": "ec2:describe-addresses"}, {"content": "ec2:describe-availability-zones(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string})", "description": "($access-key,$secret-key,$ec2-region)", "trigger": "ec2:describe-availability-zones"}, {"content": "ec2:describe-availability-zones(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$zone-name as xs:string*})", "description": "($access-key,$secret-key,$ec2-region,$zone-name)", "trigger": "ec2:describe-availability-zones"}, {"content": "ec2:describe-images(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string})", "description": "($access-key,$secret-key,$ec2-region)", "trigger": "ec2:describe-images"}, {"content": "ec2:describe-images(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$image-ids as xs:string*})", "description": "($access-key,$secret-key,$ec2-region,$image-ids)", "trigger": "ec2:describe-images"}, {"content": "ec2:describe-images(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$image-ids as xs:string*}, ${5:\\$executable-by as xs:string*})", "description": "($access-key,$secret-key,$ec2-region,$image-ids,$executable-by)", "trigger": "ec2:describe-images"}, {"content": "ec2:describe-images(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$image-ids as xs:string*}, ${5:\\$executable-by as xs:string*}, ${6:\\$owners as xs:string*})", "description": "($access-key,$secret-key,$ec2-region,$image-ids,$executable-by,$owners)", "trigger": "ec2:describe-images"}, {"content": "ec2:describe-instance-block-device-mapping(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$instance-ids)", "trigger": "ec2:describe-instance-block-device-mapping"}, {"content": "ec2:describe-instance-disable-api-termination(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$instance-ids)", "trigger": "ec2:describe-instance-disable-api-termination"}, {"content": "ec2:describe-instance-initiated-shutdown-behavior(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$instance-ids)", "trigger": "ec2:describe-instance-initiated-shutdown-behavior"}, {"content": "ec2:describe-instance-kernel(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$instance-ids)", "trigger": "ec2:describe-instance-kernel"}, {"content": "ec2:describe-instance-ramdisk(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$instance-ids)", "trigger": "ec2:describe-instance-ramdisk"}, {"content": "ec2:describe-instance-root-device-name(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$instance-ids)", "trigger": "ec2:describe-instance-root-device-name"}, {"content": "ec2:describe-instance-type(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$instance-ids)", "trigger": "ec2:describe-instance-type"}, {"content": "ec2:describe-instance-user-data(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$instance-ids)", "trigger": "ec2:describe-instance-user-data"}, {"content": "ec2:describe-instances(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string})", "description": "($access-key,$secret-key,$ec2-region)", "trigger": "ec2:describe-instances"}, {"content": "ec2:describe-instances(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string*})", "description": "($access-key,$secret-key,$ec2-region,$instance-ids)", "trigger": "ec2:describe-instances"}, {"content": "ec2:describe-key-pairs(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string})", "description": "($access-key,$secret-key,$ec2-region)", "trigger": "ec2:describe-key-pairs"}, {"content": "ec2:describe-key-pairs(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$key-names as xs:string*})", "description": "($access-key,$secret-key,$ec2-region,$key-names)", "trigger": "ec2:describe-key-pairs"}, {"content": "ec2:describe-regions(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string})", "description": "($access-key,$secret-key,$ec2-region)", "trigger": "ec2:describe-regions"}, {"content": "ec2:describe-regions(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$region-names as xs:string*})", "description": "($access-key,$secret-key,$ec2-region,$region-names)", "trigger": "ec2:describe-regions"}, {"content": "ec2:describe-security-groups(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string})", "description": "($access-key,$secret-key,$ec2-region)", "trigger": "ec2:describe-security-groups"}, {"content": "ec2:describe-security-groups(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$group-names as xs:string*})", "description": "($access-key,$secret-key,$ec2-region,$group-names)", "trigger": "ec2:describe-security-groups"}, {"content": "ec2:describe-snapshot-create-volume-permission(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$snapshot-ids as xs:string*})", "description": "($access-key,$secret-key,$ec2-region,$snapshot-ids)", "trigger": "ec2:describe-snapshot-create-volume-permission"}, {"content": "ec2:describe-snapshots(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string})", "description": "($access-key,$secret-key,$ec2-region)", "trigger": "ec2:describe-snapshots"}, {"content": "ec2:describe-snapshots(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$snapshot-ids as xs:string*})", "description": "($access-key,$secret-key,$ec2-region,$snapshot-ids)", "trigger": "ec2:describe-snapshots"}, {"content": "ec2:describe-snapshots(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$snapshot-ids as xs:string*}, ${5:\\$owners as xs:string*})", "description": "($access-key,$secret-key,$ec2-region,$snapshot-ids,$owners)", "trigger": "ec2:describe-snapshots"}, {"content": "ec2:describe-snapshots(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$snapshot-ids as xs:string*}, ${5:\\$owners as xs:string*}, ${6:\\$restorable-bys as xs:string*})", "description": "($access-key,$secret-key,$ec2-region,$snapshot-ids,$owners,$restorable-bys)", "trigger": "ec2:describe-snapshots"}, {"content": "ec2:describe-volumes(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string})", "description": "($access-key,$secret-key,$ec2-region)", "trigger": "ec2:describe-volumes"}, {"content": "ec2:describe-volumes(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$volume-ids as xs:string*})", "description": "($access-key,$secret-key,$ec2-region,$volume-ids)", "trigger": "ec2:describe-volumes"}, {"content": "ec2:detach-volume(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$volume-id as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$volume-id)", "trigger": "ec2:detach-volume"}, {"content": "ec2:detach-volume(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$volume-id as xs:string}, ${5:\\$instance-id as xs:string?})", "description": "($access-key,$secret-key,$ec2-region,$volume-id,$instance-id)", "trigger": "ec2:detach-volume"}, {"content": "ec2:detach-volume(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$volume-id as xs:string}, ${5:\\$instance-id as xs:string?}, ${6:\\$device as xs:string?})", "description": "($access-key,$secret-key,$ec2-region,$volume-id,$instance-id,$device)", "trigger": "ec2:detach-volume"}, {"content": "ec2:detach-volume(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$volume-id as xs:string}, ${5:\\$instance-id as xs:string?}, ${6:\\$device as xs:string?}, ${7:\\$force as xs:boolean?})", "description": "($access-key,$secret-key,$ec2-region,$volume-id,$instance-id,$device,$force)", "trigger": "ec2:detach-volume"}, {"content": "ec2:disassociate-address(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$public-ip as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$public-ip)", "trigger": "ec2:disassociate-address"}, {"content": "ec2:get-console-output(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-id as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$instance-id)", "trigger": "ec2:get-console-output"}, {"content": "ec2:modify-instance-block-device-mapping(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-id as xs:string}, ${5:\\$value as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$instance-id,$value)", "trigger": "ec2:modify-instance-block-device-mapping"}, {"content": "ec2:modify-instance-disable-api-termination(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-id as xs:string}, ${5:\\$value as xs:boolean})", "description": "($access-key,$secret-key,$ec2-region,$instance-id,$value)", "trigger": "ec2:modify-instance-disable-api-termination"}, {"content": "ec2:modify-instance-initiated-shutdown-behavior(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-id as xs:string}, ${5:\\$value as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$instance-id,$value)", "trigger": "ec2:modify-instance-initiated-shutdown-behavior"}, {"content": "ec2:modify-instance-kernel(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-id as xs:string}, ${5:\\$value as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$instance-id,$value)", "trigger": "ec2:modify-instance-kernel"}, {"content": "ec2:modify-instance-ramdisk(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-id as xs:string}, ${5:\\$value as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$instance-id,$value)", "trigger": "ec2:modify-instance-ramdisk"}, {"content": "ec2:modify-instance-root-device-name(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-id as xs:string}, ${5:\\$value as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$instance-id,$value)", "trigger": "ec2:modify-instance-root-device-name"}, {"content": "ec2:modify-instance-type(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-id as xs:string}, ${5:\\$value as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$instance-id,$value)", "trigger": "ec2:modify-instance-type"}, {"content": "ec2:modify-instance-user-data(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-id as xs:string}, ${5:\\$value as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$instance-id,$value)", "trigger": "ec2:modify-instance-user-data"}, {"content": "ec2:monitor-instances(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string+})", "description": "($access-key,$secret-key,$ec2-region,$instance-ids)", "trigger": "ec2:monitor-instances"}, {"content": "ec2:reboot-instances(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string+})", "description": "($access-key,$secret-key,$ec2-region,$instance-ids)", "trigger": "ec2:reboot-instances"}, {"content": "ec2:release-address(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$public-ip as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$public-ip)", "trigger": "ec2:release-address"}, {"content": "ec2:remove-snapshot-create-volume-permission-groups(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$snapshot-ids as xs:string*}, ${5:\\$user-groups as xs:string*})", "description": "($access-key,$secret-key,$ec2-region,$snapshot-ids,$user-groups)", "trigger": "ec2:remove-snapshot-create-volume-permission-groups"}, {"content": "ec2:remove-snapshot-create-volume-permission-users(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$snapshot-ids as xs:string*}, ${5:\\$user-ids as xs:string*})", "description": "($access-key,$secret-key,$ec2-region,$snapshot-ids,$user-ids)", "trigger": "ec2:remove-snapshot-create-volume-permission-users"}, {"content": "ec2:reset-instance-kernel(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string*})", "description": "($access-key,$secret-key,$ec2-region,$instance-ids)", "trigger": "ec2:reset-instance-kernel"}, {"content": "ec2:reset-instance-ramdisk(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string*})", "description": "($access-key,$secret-key,$ec2-region,$instance-ids)", "trigger": "ec2:reset-instance-ramdisk"}, {"content": "ec2:reset-snapshot-create-volume-permission(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$snapshot-ids as xs:string*})", "description": "($access-key,$secret-key,$ec2-region,$snapshot-ids)", "trigger": "ec2:reset-snapshot-create-volume-permission"}, {"content": "ec2:revoke-group-ingress(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$group-name as xs:string}, ${5:\\$source-group-owner-id as xs:string}, ${6:\\$source-group-name as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$group-name,$source-group-owner-id,$source-group-name)", "trigger": "ec2:revoke-group-ingress"}, {"content": "ec2:revoke-icmp-ingress(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$group-name as xs:string}, ${5:\\$icmp-type as xs:integer}, ${6:\\$icmp-code as xs:integer}, ${7:\\$cidr-ip as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$group-name,$icmp-type,$icmp-code,$cidr-ip)", "trigger": "ec2:revoke-icmp-ingress"}, {"content": "ec2:revoke-tcp-ingress(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$group-name as xs:string}, ${5:\\$port-range as xs:integer+}, ${6:\\$cidr-ip as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$group-name,$port-range,$cidr-ip)", "trigger": "ec2:revoke-tcp-ingress"}, {"content": "ec2:revoke-udp-ingress(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$group-name as xs:string}, ${5:\\$port-range as xs:integer+}, ${6:\\$cidr-ip as xs:string})", "description": "($access-key,$secret-key,$ec2-region,$group-name,$port-range,$cidr-ip)", "trigger": "ec2:revoke-udp-ingress"}, {"content": "ec2:run-instances(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$image-id as xs:string}, ${5:\\$min-count as xs:integer}, ${6:\\$max-count as xs:integer}, ${7:\\$instance-type as xs:string?}, ${8:\\$key-pair as xs:string?}, ${9:\\$security-group as xs:string*}, ${10:\\$instance-options as xs:string*})", "description": "($access-key,$secret-key,$ec2-region,$image-id,$min-count,$max-count,$instance-type,$key-pair,$security-group,$instance-options)", "trigger": "ec2:run-instances"}, {"content": "ec2:start-instances(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string+})", "description": "($access-key,$secret-key,$ec2-region,$instance-ids)", "trigger": "ec2:start-instances"}, {"content": "ec2:stop-instances(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string+}, ${5:\\$force as xs:boolean})", "description": "($access-key,$secret-key,$ec2-region,$instance-ids,$force)", "trigger": "ec2:stop-instances"}, {"content": "ec2:terminate-instances(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string+})", "description": "($access-key,$secret-key,$ec2-region,$instance-ids)", "trigger": "ec2:terminate-instances"}, {"content": "ec2:unmonitor-instances(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string}, ${3:\\$ec2-region as xs:string}, ${4:\\$instance-ids as xs:string+})", "description": "($access-key,$secret-key,$ec2-region,$instance-ids)", "trigger": "ec2:unmonitor-instances"}, {"content": "entity:enrich(${1:\\$node as node()})", "description": "($node)", "trigger": "entity:enrich"}, {"content": "excel:clean(${1:\\$uri as xs:string}, ${2:\\$doc as node()?})", "description": "($uri,$doc)", "trigger": "excel:clean"}, {"content": "exsl:node-set(${1:\\$value as xs:anyAtomicType*})", "description": "($value)", "trigger": "exsl:node-set"}, {"content": "exsl:object-type(${1:\\$value as atomic type})", "description": "($value)", "trigger": "exsl:object-type"}, {"content": "flexrep:apply(${1:\\$update as element(flexrep:update)}, ${2:\\$content as document-node()?})", "description": "($update,$content)", "trigger": "flexrep:apply"}, {"content": "flexrep:configuration-create(${1:\\$domain-id as xs:unsignedLong})", "description": "($domain-id)", "trigger": "flexrep:configuration-create"}, {"content": "flexrep:configuration-delete(${1:\\$domain-id as xs:unsignedLong})", "description": "($domain-id)", "trigger": "flexrep:configuration-delete"}, {"content": "flexrep:configuration-domain-ids()", "trigger": "flexrep:configuration-domain-ids"}, {"content": "flexrep:configuration-get(${1:\\$domain-id as xs:unsignedLong})", "description": "($domain-id)", "trigger": "flexrep:configuration-get"}, {"content": "flexrep:configuration-get(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$assert as xs:boolean})", "description": "($domain-id,$assert)", "trigger": "flexrep:configuration-get"}, {"content": "flexrep:configuration-get-domain-name(${1:\\$cfg as element(flexrep:configuration)})", "description": "($cfg)", "trigger": "flexrep:configuration-get-domain-name"}, {"content": "flexrep:configuration-get-id(${1:\\$cfg as element(flexrep:configuration)})", "description": "($cfg)", "trigger": "flexrep:configuration-get-id"}, {"content": "flexrep:configuration-insert(${1:\\$cfg as element(flexrep:configuration)})", "description": "($cfg)", "trigger": "flexrep:configuration-insert"}, {"content": "flexrep:configuration-target(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong})", "description": "($cfg,$target-id)", "trigger": "flexrep:configuration-target"}, {"content": "flexrep:configuration-target(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$assert as xs:boolean})", "description": "($cfg,$target-id,$assert)", "trigger": "flexrep:configuration-target"}, {"content": "flexrep:configuration-target-get-documents-per-batch(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong})", "description": "($cfg,$target-id)", "trigger": "flexrep:configuration-target-get-documents-per-batch"}, {"content": "flexrep:configuration-target-get-enabled(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong})", "description": "($cfg,$target-id)", "trigger": "flexrep:configuration-target-get-enabled"}, {"content": "flexrep:configuration-target-get-filter-module(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong})", "description": "($cfg,$target-id)", "trigger": "flexrep:configuration-target-get-filter-module"}, {"content": "flexrep:configuration-target-get-filter-options(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong})", "description": "($cfg,$target-id)", "trigger": "flexrep:configuration-target-get-filter-options"}, {"content": "flexrep:configuration-target-get-http-options(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong})", "description": "($cfg,$target-id)", "trigger": "flexrep:configuration-target-get-http-options"}, {"content": "flexrep:configuration-target-get-id(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-name as xs:string})", "description": "($cfg,$target-name)", "trigger": "flexrep:configuration-target-get-id"}, {"content": "flexrep:configuration-target-get-name(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong})", "description": "($cfg,$target-id)", "trigger": "flexrep:configuration-target-get-name"}, {"content": "flexrep:configuration-target-get-replicate-cpf(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong})", "description": "($cfg,$target-id)", "trigger": "flexrep:configuration-target-get-replicate-cpf"}, {"content": "flexrep:configuration-target-get-retry-seconds-max(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong})", "description": "($cfg,$target-id)", "trigger": "flexrep:configuration-target-get-retry-seconds-max"}, {"content": "flexrep:configuration-target-get-retry-seconds-min(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong})", "description": "($cfg,$target-id)", "trigger": "flexrep:configuration-target-get-retry-seconds-min"}, {"content": "flexrep:configuration-target-get-urls(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong})", "description": "($cfg,$target-id)", "trigger": "flexrep:configuration-target-get-urls"}, {"content": "flexrep:configuration-target-set-documents-per-batch(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$val as xs:integer})", "description": "($cfg,$target-id,$val)", "trigger": "flexrep:configuration-target-set-documents-per-batch"}, {"content": "flexrep:configuration-target-set-enabled(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$val as xs:boolean})", "description": "($cfg,$target-id,$val)", "trigger": "flexrep:configuration-target-set-enabled"}, {"content": "flexrep:configuration-target-set-filter-module(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$uri as xs:string})", "description": "($cfg,$target-id,$uri)", "trigger": "flexrep:configuration-target-set-filter-module"}, {"content": "flexrep:configuration-target-set-filter-options(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$val as element(flexrep:filter-options)})", "description": "($cfg,$target-id,$val)", "trigger": "flexrep:configuration-target-set-filter-options"}, {"content": "flexrep:configuration-target-set-http-options(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$val as element(flexrep:http-options)})", "description": "($cfg,$target-id,$val)", "trigger": "flexrep:configuration-target-set-http-options"}, {"content": "flexrep:configuration-target-set-name(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$val as xs:string*})", "description": "($cfg,$target-id,$val)", "trigger": "flexrep:configuration-target-set-name"}, {"content": "flexrep:configuration-target-set-replicate-cpf(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$val as xs:boolean})", "description": "($cfg,$target-id,$val)", "trigger": "flexrep:configuration-target-set-replicate-cpf"}, {"content": "flexrep:configuration-target-set-retry-seconds-max(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$val as xs:integer})", "description": "($cfg,$target-id,$val)", "trigger": "flexrep:configuration-target-set-retry-seconds-max"}, {"content": "flexrep:configuration-target-set-retry-seconds-min(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$val as xs:integer})", "description": "($cfg,$target-id,$val)", "trigger": "flexrep:configuration-target-set-retry-seconds-min"}, {"content": "flexrep:configuration-target-set-urls(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong}, ${3:\\$urls as xs:string*})", "description": "($cfg,$target-id,$urls)", "trigger": "flexrep:configuration-target-set-urls"}, {"content": "flexrep:configuration-targets(${1:\\$cfg as element(flexrep:configuration)})", "description": "($cfg)", "trigger": "flexrep:configuration-targets"}, {"content": "flexrep:configure-database(${1:\\$config as element(configuration)}, ${2:\\$dbid as xs:unsignedLong})", "description": "($config,$dbid)", "trigger": "flexrep:configure-database"}, {"content": "flexrep:database-needs-configuration(${1:\\$config as element(configuration)}, ${2:\\$dbid as xs:unsignedLong})", "description": "($config,$dbid)", "trigger": "flexrep:database-needs-configuration"}, {"content": "flexrep:delete(${1:\\$delete as element(flexrep:delete)})", "description": "($delete)", "trigger": "flexrep:delete"}, {"content": "flexrep:do-pull(${1:\\$pull as element(flexrep:pull)})", "description": "($pull)", "trigger": "flexrep:do-pull"}, {"content": "flexrep:document-reset(${1:\\$uri as xs:string}, ${2:\\$domain-id as xs:unsignedLong})", "description": "($uri,$domain-id)", "trigger": "flexrep:document-reset"}, {"content": "flexrep:document-reset(${1:\\$uri as xs:string}, ${2:\\$domain-id as xs:unsignedLong}, ${3:\\$target-ids as xs:unsignedLong*})", "description": "($uri,$domain-id,$target-ids)", "trigger": "flexrep:document-reset"}, {"content": "flexrep:document-status(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$uri as xs:string})", "description": "($domain-id,$uri)", "trigger": "flexrep:document-status"}, {"content": "flexrep:domain-status(${1:\\$domain-id as xs:unsignedLong})", "description": "($domain-id)", "trigger": "flexrep:domain-status"}, {"content": "flexrep:domain-status(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$with-targets as xs:boolean})", "description": "($domain-id,$with-targets)", "trigger": "flexrep:domain-status"}, {"content": "flexrep:domain-status(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$with-targets as xs:boolean}, ${3:\\$terse as xs:boolean})", "description": "($domain-id,$with-targets,$terse)", "trigger": "flexrep:domain-status"}, {"content": "flexrep:domain-target-reset(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$target-ids as xs:unsignedLong*})", "description": "($domain-id,$target-ids)", "trigger": "flexrep:domain-target-reset"}, {"content": "flexrep:domain-target-reset(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$target-ids as xs:unsignedLong*}, ${3:\\$errors-only as xs:boolean})", "description": "($domain-id,$target-ids,$errors-only)", "trigger": "flexrep:domain-target-reset"}, {"content": "flexrep:domain-target-statuses()", "trigger": "flexrep:domain-target-statuses"}, {"content": "flexrep:process(${1:\\$domain-id as xs:unsignedLong})", "description": "($domain-id)", "trigger": "flexrep:process"}, {"content": "flexrep:process(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$size as xs:unsignedInt?})", "description": "($domain-id,$size)", "trigger": "flexrep:process"}, {"content": "flexrep:process(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$size as xs:unsignedInt?}, ${3:\\$targets as xs:unsignedLong*})", "description": "($domain-id,$size,$targets)", "trigger": "flexrep:process"}, {"content": "flexrep:process(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$size as xs:unsignedInt?}, ${3:\\$targets as xs:unsignedLong*}, ${4:\\$forest-ids as xs:unsignedLong*})", "description": "($domain-id,$size,$targets,$forest-ids)", "trigger": "flexrep:process"}, {"content": "flexrep:process(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$size as xs:unsignedInt?}, ${3:\\$targets as xs:unsignedLong*}, ${4:\\$forest-ids as xs:unsignedLong*}, ${5:\\$uris as xs:string*})", "description": "($domain-id,$size,$targets,$forest-ids,$uris)", "trigger": "flexrep:process"}, {"content": "flexrep:pull-create(${1:\\$name as xs:string}, ${2:\\$domain-id as xs:unsignedLong}, ${3:\\$target-id as xs:unsignedLong}, ${4:\\$urls as xs:string+}, ${5:\\$http-options as element(flexrep:http-options)?})", "description": "($name,$domain-id,$target-id,$urls,$http-options)", "trigger": "flexrep:pull-create"}, {"content": "flexrep:pull-delete(${1:\\$domain-id as xs:unsignedLong})", "description": "($domain-id)", "trigger": "flexrep:pull-delete"}, {"content": "flexrep:pull-delete(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$target-id as xs:unsignedLong})", "description": "($domain-id,$target-id)", "trigger": "flexrep:pull-delete"}, {"content": "flexrep:pull-get(${1:\\$domain-id as xs:unsignedLong})", "description": "($domain-id)", "trigger": "flexrep:pull-get"}, {"content": "flexrep:pull-get(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$assert as xs:boolean})", "description": "($domain-id,$assert)", "trigger": "flexrep:pull-get"}, {"content": "flexrep:pull-get-all()", "trigger": "flexrep:pull-get-all"}, {"content": "flexrep:pull-get-by-id(${1:\\$pull-id as xs:unsignedLong})", "description": "($pull-id)", "trigger": "flexrep:pull-get-by-id"}, {"content": "flexrep:pull-get-by-id(${1:\\$pull-id as xs:unsignedLong}, ${2:\\$assert as xs:boolean})", "description": "($pull-id,$assert)", "trigger": "flexrep:pull-get-by-id"}, {"content": "flexrep:pull-get-domain-id(${1:\\$pull as element(flexrep:pull)})", "description": "($pull)", "trigger": "flexrep:pull-get-domain-id"}, {"content": "flexrep:pull-get-http-options(${1:\\$pull as element(flexrep:pull)})", "description": "($pull)", "trigger": "flexrep:pull-get-http-options"}, {"content": "flexrep:pull-get-id(${1:\\$pull as element(flexrep:pull)})", "description": "($pull)", "trigger": "flexrep:pull-get-id"}, {"content": "flexrep:pull-get-name(${1:\\$pull as element(flexrep:pull)})", "description": "($pull)", "trigger": "flexrep:pull-get-name"}, {"content": "flexrep:pull-get-target-id(${1:\\$pull as element(flexrep:pull)})", "description": "($pull)", "trigger": "flexrep:pull-get-target-id"}, {"content": "flexrep:pull-get-urls(${1:\\$pull as element(flexrep:pull)})", "description": "($pull)", "trigger": "flexrep:pull-get-urls"}, {"content": "flexrep:pull-insert(${1:\\$pull as element(flexrep:pull)})", "description": "($pull)", "trigger": "flexrep:pull-insert"}, {"content": "flexrep:pull-set-domain-id(${1:\\$pull as element(flexrep:pull)}, ${2:\\$domain-id as xs:unsignedLong})", "description": "($pull,$domain-id)", "trigger": "flexrep:pull-set-domain-id"}, {"content": "flexrep:pull-set-http-options(${1:\\$pull as element(flexrep:pull)}, ${2:\\$http-options as element(flexrep:http-options)})", "description": "($pull,$http-options)", "trigger": "flexrep:pull-set-http-options"}, {"content": "flexrep:pull-set-name(${1:\\$pull as element(flexrep:pull)}, ${2:\\$name as xs:string})", "description": "($pull,$name)", "trigger": "flexrep:pull-set-name"}, {"content": "flexrep:pull-set-target-id(${1:\\$pull as element(flexrep:pull)}, ${2:\\$target-id as xs:unsignedLong})", "description": "($pull,$target-id)", "trigger": "flexrep:pull-set-target-id"}, {"content": "flexrep:pull-set-urls(${1:\\$pull as element(flexrep:pull)}, ${2:\\$urls as xs:string+})", "description": "($pull,$urls)", "trigger": "flexrep:pull-set-urls"}, {"content": "flexrep:push-local-forest(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$forest-id as xs:unsignedLong}, ${3:\\$max-spawn as xs:unsignedLong})", "description": "($domain-id,$forest-id,$max-spawn)", "trigger": "flexrep:push-local-forest"}, {"content": "flexrep:push-local-forests()", "trigger": "flexrep:push-local-forests"}, {"content": "flexrep:remote-target-status(${1:\\$pull as element(flexrep:pull)})", "description": "($pull)", "trigger": "flexrep:remote-target-status"}, {"content": "flexrep:target-create(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$name as xs:string}, ${3:\\$urls as xs:string*}, ${4:\\$retry-seconds-min as xs:unsignedInt?}, ${5:\\$retry-seconds-max as xs:unsignedInt?}, ${6:\\$documents-per-batch as xs:unsignedInt?}, ${7:\\$enabled as xs:boolean?}, ${8:\\$http-options as element(flexrep:http-options)?}, ${9:\\$replicate-cpf as xs:boolean?}, ${10:\\$filter-module as xs:string?}, ${11:\\$filter-options as element(flexrep:filter-options)?})", "description": "($cfg,$name,$urls,$retry-seconds-min,$retry-seconds-max,$documents-per-batch,$enabled,$http-options,$replicate-cpf,$filter-module,$filter-options)", "trigger": "flexrep:target-create"}, {"content": "flexrep:target-delete(${1:\\$cfg as element(flexrep:configuration)}, ${2:\\$target-id as xs:unsignedLong})", "description": "($cfg,$target-id)", "trigger": "flexrep:target-delete"}, {"content": "flexrep:target-error-documents(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$target-ids as xs:unsignedLong*})", "description": "($domain-id,$target-ids)", "trigger": "flexrep:target-error-documents"}, {"content": "flexrep:target-status(${1:\\$domain-id as xs:unsignedLong}, ${2:\\$target-ids as xs:unsignedLong*})", "description": "($domain-id,$target-ids)", "trigger": "flexrep:target-status"}, {"content": "fn:QName(${1:\\$paramURI as xs:string?}, ${2:\\$paramQName as xs:string})", "description": "($paramURI,$paramQName)", "trigger": "fn:QName"}, {"content": "fn:abs(${1:\\$arg as numeric?})", "description": "($arg)", "trigger": "fn:abs"}, {"content": "fn:adjust-date-to-timezone(${1:\\$arg as xs:date?})", "description": "($arg)", "trigger": "fn:adjust-date-to-timezone"}, {"content": "fn:adjust-date-to-timezone(${1:\\$arg as xs:date?}, ${2:\\$timezone as xs:dayTimeDuration?})", "description": "($arg,$timezone)", "trigger": "fn:adjust-date-to-timezone"}, {"content": "fn:adjust-dateTime-to-timezone(${1:\\$arg as xs:dateTime?})", "description": "($arg)", "trigger": "fn:adjust-dateTime-to-timezone"}, {"content": "fn:adjust-dateTime-to-timezone(${1:\\$arg as xs:dateTime?}, ${2:\\$timezone as xs:dayTimeDuration?})", "description": "($arg,$timezone)", "trigger": "fn:adjust-dateTime-to-timezone"}, {"content": "fn:adjust-time-to-timezone(${1:\\$arg as xs:date?})", "description": "($arg)", "trigger": "fn:adjust-time-to-timezone"}, {"content": "fn:adjust-time-to-timezone(${1:\\$arg as xs:date?}, ${2:\\$timezone as xs:dayTimeDuration?})", "description": "($arg,$timezone)", "trigger": "fn:adjust-time-to-timezone"}, {"content": "fn:analyze-string(${1:\\$in as xs:string?}, ${2:\\$regex as xs:string})", "description": "($in,$regex)", "trigger": "fn:analyze-string"}, {"content": "fn:analyze-string(${1:\\$in as xs:string?}, ${2:\\$regex as xs:string}, ${3:\\$flags as xs:string})", "description": "($in,$regex,$flags)", "trigger": "fn:analyze-string"}, {"content": "fn:avg(${1:\\$arg as xs:anyAtomicType*})", "description": "($arg)", "trigger": "fn:avg"}, {"content": "fn:base-uri(${1:\\$arg as node()?})", "description": "($arg)", "trigger": "fn:base-uri"}, {"content": "fn:base-uri()", "trigger": "fn:base-uri"}, {"content": "fn:boolean(${1:\\$arg as item()*})", "description": "($arg)", "trigger": "fn:boolean"}, {"content": "fn:ceiling(${1:\\$arg as numeric?})", "description": "($arg)", "trigger": "fn:ceiling"}, {"content": "fn:codepoint-equal(${1:\\$comparand1 as xs:string?}, ${2:\\$comparand2 as xs:string?})", "description": "($comparand1,$comparand2)", "trigger": "fn:codepoint-equal"}, {"content": "fn:codepoints-to-string(${1:\\$arg as xs:integer*})", "description": "($arg)", "trigger": "fn:codepoints-to-string"}, {"content": "fn:collection(${1:\\$uri as xs:string*})", "description": "($uri)", "trigger": "fn:collection"}, {"content": "fn:collection()", "trigger": "fn:collection"}, {"content": "fn:compare(${1:\\$comparand1 as xs:string?}, ${2:\\$comparand2 as xs:string?})", "description": "($comparand1,$comparand2)", "trigger": "fn:compare"}, {"content": "fn:compare(${1:\\$comparand1 as xs:string?}, ${2:\\$comparand2 as xs:string?}, ${3:\\$collation as xs:string})", "description": "($comparand1,$comparand2,$collation)", "trigger": "fn:compare"}, {"content": "fn:concat(${1:\\$parameter1 as xs:anyAtomicType?}, [${2:\\$parameterN as xs:anyAtomicType?}, ...]})", "description": "($parameter1,[$parameterN,...])", "trigger": "fn:concat"}, {"content": "fn:contains(${1:\\$parameter1 as xs:string?}, ${2:\\$parameter2 as xs:string?})", "description": "($parameter1,$parameter2)", "trigger": "fn:contains"}, {"content": "fn:contains(${1:\\$parameter1 as xs:string?}, ${2:\\$parameter2 as xs:string?}, ${3:\\$collation as xs:string})", "description": "($parameter1,$parameter2,$collation)", "trigger": "fn:contains"}, {"content": "fn:count(${1:\\$arg as item()*})", "description": "($arg)", "trigger": "fn:count"}, {"content": "fn:count(${1:\\$arg as item()*}, ${2:\\$maximum as xs:double?})", "description": "($arg,$maximum)", "trigger": "fn:count"}, {"content": "fn:current()", "trigger": "fn:current"}, {"content": "fn:current-date()", "trigger": "fn:current-date"}, {"content": "fn:current-dateTime()", "trigger": "fn:current-dateTime"}, {"content": "fn:current-group()", "trigger": "fn:current-group"}, {"content": "fn:current-grouping-key()", "trigger": "fn:current-grouping-key"}, {"content": "fn:current-time()", "trigger": "fn:current-time"}, {"content": "fn:data(${1:\\$arg as item()*})", "description": "($arg)", "trigger": "fn:data"}, {"content": "fn:day-from-date(${1:\\$arg as xs:dateTime?})", "description": "($arg)", "trigger": "fn:day-from-date"}, {"content": "fn:day-from-dateTime(${1:\\$arg as xs:dateTime?})", "description": "($arg)", "trigger": "fn:day-from-dateTime"}, {"content": "fn:days-from-duration(${1:\\$arg as xs:duration?})", "description": "($arg)", "trigger": "fn:days-from-duration"}, {"content": "fn:deep-equal(${1:\\$parameter1 as item()*}, ${2:\\$parameter2 as item()*})", "description": "($parameter1,$parameter2)", "trigger": "fn:deep-equal"}, {"content": "fn:deep-equal(${1:\\$parameter1 as item()*}, ${2:\\$parameter2 as item()*}, ${3:\\$collation as xs:string})", "description": "($parameter1,$parameter2,$collation)", "trigger": "fn:deep-equal"}, {"content": "fn:default-collation()", "trigger": "fn:default-collation"}, {"content": "fn:distinct-nodes(${1:\\$nodes as node()*})", "description": "($nodes)", "trigger": "fn:distinct-nodes"}, {"content": "fn:distinct-values(${1:\\$arg as xs:anyAtomicType*})", "description": "($arg)", "trigger": "fn:distinct-values"}, {"content": "fn:distinct-values(${1:\\$arg as xs:anyAtomicType*}, ${2:\\$collation as xs:string})", "description": "($arg,$collation)", "trigger": "fn:distinct-values"}, {"content": "fn:doc(${1:\\$uri as xs:string*})", "description": "($uri)", "trigger": "fn:doc"}, {"content": "fn:doc()", "trigger": "fn:doc"}, {"content": "fn:doc-available(${1:\\$uri as xs:string?})", "description": "($uri)", "trigger": "fn:doc-available"}, {"content": "fn:document(${1:\\$uris as item()*})", "description": "($uris)", "trigger": "fn:document"}, {"content": "fn:document(${1:\\$uris as item()*}, ${2:\\$base-node as node()})", "description": "($uris,$base-node)", "trigger": "fn:document"}, {"content": "fn:document-uri(${1:\\$arg as node()?})", "description": "($arg)", "trigger": "fn:document-uri"}, {"content": "fn:element-available(${1:\\$element-name as xs:string})", "description": "($element-name)", "trigger": "fn:element-available"}, {"content": "fn:empty(${1:\\$arg as item()*})", "description": "($arg)", "trigger": "fn:empty"}, {"content": "fn:encode-for-uri(${1:\\$uri-part as xs:string})", "description": "($uri-part)", "trigger": "fn:encode-for-uri"}, {"content": "fn:ends-with(${1:\\$parameter1 as xs:string?}, ${2:\\$parameter2 as xs:string?})", "description": "($parameter1,$parameter2)", "trigger": "fn:ends-with"}, {"content": "fn:ends-with(${1:\\$parameter1 as xs:string?}, ${2:\\$parameter2 as xs:string?}, ${3:\\$collation as xs:string})", "description": "($parameter1,$parameter2,$collation)", "trigger": "fn:ends-with"}, {"content": "fn:error(${1:\\$error as xs:QName?})", "description": "($error)", "trigger": "fn:error"}, {"content": "fn:error(${1:\\$error as xs:QName?}, ${2:\\$description as xs:string})", "description": "($error,$description)", "trigger": "fn:error"}, {"content": "fn:error(${1:\\$error as xs:QName?}, ${2:\\$description as xs:string}, ${3:\\$data as item()*})", "description": "($error,$description,$data)", "trigger": "fn:error"}, {"content": "fn:error()", "trigger": "fn:error"}, {"content": "fn:escape-html-uri(${1:\\$uri-part as xs:string})", "description": "($uri-part)", "trigger": "fn:escape-html-uri"}, {"content": "fn:escape-uri(${1:\\$uri-part as xs:string}, ${2:\\$escape-reserved as xs:boolean})", "description": "($uri-part,$escape-reserved)", "trigger": "fn:escape-uri"}, {"content": "fn:exactly-one(${1:\\$arg as item()*})", "description": "($arg)", "trigger": "fn:exactly-one"}, {"content": "fn:exists(${1:\\$arg as item()*})", "description": "($arg)", "trigger": "fn:exists"}, {"content": "fn:expanded-QName(${1:\\$paramURI as xs:string?}, ${2:\\$paramLocal as xs:string})", "description": "($paramURI,$paramLocal)", "trigger": "fn:expanded-QName"}, {"content": "fn:false()", "trigger": "fn:false"}, {"content": "fn:filter(${1:\\$function as function(item()})", "description": "($function)", "trigger": "fn:filter"}, {"content": "fn:floor(${1:\\$arg as numeric?})", "description": "($arg)", "trigger": "fn:floor"}, {"content": "fn:fold-left(${1:\\$function as function(item()*}, item()})", "description": "($function,item())", "trigger": "fn:fold-left"}, {"content": "fn:fold-right(${1:\\$function as function(item()}, item()*})", "description": "($function,item()*)", "trigger": "fn:fold-right"}, {"content": "fn:format-date(${1:\\$value as xs:date}, ${2:\\$picture as xs:string})", "description": "($value,$picture)", "trigger": "fn:format-date"}, {"content": "fn:format-date(${1:\\$value as xs:date}, ${2:\\$picture as xs:string}, ${3:\\$language as xs:string})", "description": "($value,$picture,$language)", "trigger": "fn:format-date"}, {"content": "fn:format-date(${1:\\$value as xs:date}, ${2:\\$picture as xs:string}, ${3:\\$language as xs:string}, ${4:\\$calendar as xs:string})", "description": "($value,$picture,$language,$calendar)", "trigger": "fn:format-date"}, {"content": "fn:format-date(${1:\\$value as xs:date}, ${2:\\$picture as xs:string}, ${3:\\$language as xs:string}, ${4:\\$calendar as xs:string}, ${5:\\$country as xs:string})", "description": "($value,$picture,$language,$calendar,$country)", "trigger": "fn:format-date"}, {"content": "fn:format-dateTime(${1:\\$value as xs:dateTime}, ${2:\\$picture as xs:string})", "description": "($value,$picture)", "trigger": "fn:format-dateTime"}, {"content": "fn:format-dateTime(${1:\\$value as xs:dateTime}, ${2:\\$picture as xs:string}, ${3:\\$language as xs:string})", "description": "($value,$picture,$language)", "trigger": "fn:format-dateTime"}, {"content": "fn:format-dateTime(${1:\\$value as xs:dateTime}, ${2:\\$picture as xs:string}, ${3:\\$language as xs:string}, ${4:\\$calendar as xs:string})", "description": "($value,$picture,$language,$calendar)", "trigger": "fn:format-dateTime"}, {"content": "fn:format-dateTime(${1:\\$value as xs:dateTime}, ${2:\\$picture as xs:string}, ${3:\\$language as xs:string}, ${4:\\$calendar as xs:string}, ${5:\\$country as xs:string})", "description": "($value,$picture,$language,$calendar,$country)", "trigger": "fn:format-dateTime"}, {"content": "fn:format-number(${1:\\$value as numeric}, ${2:\\$picture as xs:string})", "description": "($value,$picture)", "trigger": "fn:format-number"}, {"content": "fn:format-number(${1:\\$value as numeric}, ${2:\\$picture as xs:string}, ${3:\\$decimal-format-name as xs:string})", "description": "($value,$picture,$decimal-format-name)", "trigger": "fn:format-number"}, {"content": "fn:format-time(${1:\\$value as time}, ${2:\\$picture as xs:string})", "description": "($value,$picture)", "trigger": "fn:format-time"}, {"content": "fn:format-time(${1:\\$value as time}, ${2:\\$picture as xs:string}, ${3:\\$language as xs:string})", "description": "($value,$picture,$language)", "trigger": "fn:format-time"}, {"content": "fn:format-time(${1:\\$value as time}, ${2:\\$picture as xs:string}, ${3:\\$language as xs:string}, ${4:\\$calendar as xs:string})", "description": "($value,$picture,$language,$calendar)", "trigger": "fn:format-time"}, {"content": "fn:format-time(${1:\\$value as time}, ${2:\\$picture as xs:string}, ${3:\\$language as xs:string}, ${4:\\$calendar as xs:string}, ${5:\\$country as xs:string})", "description": "($value,$picture,$language,$calendar,$country)", "trigger": "fn:format-time"}, {"content": "fn:function-arity(${1:\\$function as function(*)})", "description": "($function)", "trigger": "fn:function-arity"}, {"content": "fn:function-available(${1:\\$function-name as xs:string})", "description": "($function-name)", "trigger": "fn:function-available"}, {"content": "fn:function-available(${1:\\$function-name as xs:string}, ${2:\\$arity as xs:integer})", "description": "($function-name,$arity)", "trigger": "fn:function-available"}, {"content": "fn:function-lookup(${1:\\$name as xs:QName}, ${2:\\$arity as xs:integer})", "description": "($name,$arity)", "trigger": "fn:function-lookup"}, {"content": "fn:function-name(${1:\\$function as function(*)})", "description": "($function)", "trigger": "fn:function-name"}, {"content": "fn:generate-id(${1:\\$node as node()?})", "description": "($node)", "trigger": "fn:generate-id"}, {"content": "fn:generate-id()", "trigger": "fn:generate-id"}, {"content": "fn:head(${1:\\$seq as item()*})", "description": "($seq)", "trigger": "fn:head"}, {"content": "fn:hours-from-dateTime(${1:\\$arg as xs:dateTime?})", "description": "($arg)", "trigger": "fn:hours-from-dateTime"}, {"content": "fn:hours-from-duration(${1:\\$arg as xs:duration?})", "description": "($arg)", "trigger": "fn:hours-from-duration"}, {"content": "fn:hours-from-time(${1:\\$arg as xs:time?})", "description": "($arg)", "trigger": "fn:hours-from-time"}, {"content": "fn:id(${1:\\$arg as xs:string*})", "description": "($arg)", "trigger": "fn:id"}, {"content": "fn:id(${1:\\$arg as xs:string*}, ${2:\\$node as node()})", "description": "($arg,$node)", "trigger": "fn:id"}, {"content": "fn:idref(${1:\\$arg as xs:string*})", "description": "($arg)", "trigger": "fn:idref"}, {"content": "fn:idref(${1:\\$arg as xs:string*}, ${2:\\$node as node()})", "description": "($arg,$node)", "trigger": "fn:idref"}, {"content": "fn:implicit-timezone()", "trigger": "fn:implicit-timezone"}, {"content": "fn:in-scope-prefixes(${1:\\$element as element()})", "description": "($element)", "trigger": "fn:in-scope-prefixes"}, {"content": "fn:index-of(${1:\\$seqParam as xs:anyAtomicType*}, ${2:\\$srchParam as xs:anyAtomicType}, ${3:\\$collationLiteral as xs:string})", "description": "($seqParam,$srchParam,$collationLiteral)", "trigger": "fn:index-of"}, {"content": "fn:insert-before(${1:\\$target as item()*}, ${2:\\$position as xs:integer}, ${3:\\$inserts as item()*})", "description": "($target,$position,$inserts)", "trigger": "fn:insert-before"}, {"content": "fn:iri-to-uri(${1:\\$uri-part as xs:string})", "description": "($uri-part)", "trigger": "fn:iri-to-uri"}, {"content": "fn:key(${1:\\$key-name as xs:string}, ${2:\\$key-value as xs:string})", "description": "($key-name,$key-value)", "trigger": "fn:key"}, {"content": "fn:key(${1:\\$key-name as xs:string}, ${2:\\$key-value as xs:string}, ${3:\\$top as node()})", "description": "($key-name,$key-value,$top)", "trigger": "fn:key"}, {"content": "fn:lang(${1:\\$testlang as xs:string?})", "description": "($testlang)", "trigger": "fn:lang"}, {"content": "fn:lang(${1:\\$testlang as xs:string?}, ${2:\\$node as node()})", "description": "($testlang,$node)", "trigger": "fn:lang"}, {"content": "fn:last()", "trigger": "fn:last"}, {"content": "fn:local-name(${1:\\$arg as node()?})", "description": "($arg)", "trigger": "fn:local-name"}, {"content": "fn:local-name()", "trigger": "fn:local-name"}, {"content": "fn:local-name-from-QName(${1:\\$arg as xs:QName?})", "description": "($arg)", "trigger": "fn:local-name-from-QName"}, {"content": "fn:lower-case(${1:\\$string as xs:string?})", "description": "($string)", "trigger": "fn:lower-case"}, {"content": "fn:map(${1:\\$function as function(item()})", "description": "($function)", "trigger": "fn:map"}, {"content": "fn:map-pairs(${1:\\$function as function(item()}, item()})", "description": "($function,item())", "trigger": "fn:map-pairs"}, {"content": "fn:matches(${1:\\$input as xs:string?}, ${2:\\$pattern as xs:string})", "description": "($input,$pattern)", "trigger": "fn:matches"}, {"content": "fn:matches(${1:\\$input as xs:string?}, ${2:\\$pattern as xs:string}, ${3:\\$flags as xs:string})", "description": "($input,$pattern,$flags)", "trigger": "fn:matches"}, {"content": "fn:max(${1:\\$arg as xs:anyAtomicType*})", "description": "($arg)", "trigger": "fn:max"}, {"content": "fn:max(${1:\\$arg as xs:anyAtomicType*}, ${2:\\$collation as xs:string})", "description": "($arg,$collation)", "trigger": "fn:max"}, {"content": "fn:min(${1:\\$arg as xs:anyAtomicType*})", "description": "($arg)", "trigger": "fn:min"}, {"content": "fn:min(${1:\\$arg as xs:anyAtomicType*}, ${2:\\$collation as xs:string})", "description": "($arg,$collation)", "trigger": "fn:min"}, {"content": "fn:minutes-from-dateTime(${1:\\$arg as xs:dateTime?})", "description": "($arg)", "trigger": "fn:minutes-from-dateTime"}, {"content": "fn:minutes-from-duration(${1:\\$arg as xs:duration?})", "description": "($arg)", "trigger": "fn:minutes-from-duration"}, {"content": "fn:minutes-from-time(${1:\\$arg as xs:time?})", "description": "($arg)", "trigger": "fn:minutes-from-time"}, {"content": "fn:month-from-date(${1:\\$arg as xs:dateTime?})", "description": "($arg)", "trigger": "fn:month-from-date"}, {"content": "fn:month-from-dateTime(${1:\\$arg as xs:dateTime?})", "description": "($arg)", "trigger": "fn:month-from-dateTime"}, {"content": "fn:months-from-duration(${1:\\$arg as xs:duration?})", "description": "($arg)", "trigger": "fn:months-from-duration"}, {"content": "fn:name(${1:\\$arg as node()?})", "description": "($arg)", "trigger": "fn:name"}, {"content": "fn:name()", "trigger": "fn:name"}, {"content": "fn:namespace-uri(${1:\\$arg as node()?})", "description": "($arg)", "trigger": "fn:namespace-uri"}, {"content": "fn:namespace-uri()", "trigger": "fn:namespace-uri"}, {"content": "fn:namespace-uri-for-prefix(${1:\\$prefix as xs:string?}, ${2:\\$element as element()})", "description": "($prefix,$element)", "trigger": "fn:namespace-uri-for-prefix"}, {"content": "fn:namespace-uri-from-QName(${1:\\$arg as xs:QName?})", "description": "($arg)", "trigger": "fn:namespace-uri-from-QName"}, {"content": "fn:nilled(${1:\\$arg as node()?})", "description": "($arg)", "trigger": "fn:nilled"}, {"content": "fn:node-kind(${1:\\$node as node()?})", "description": "($node)", "trigger": "fn:node-kind"}, {"content": "fn:node-name(${1:\\$arg as node()?})", "description": "($arg)", "trigger": "fn:node-name"}, {"content": "fn:normalize-space(${1:\\$input as xs:string?})", "description": "($input)", "trigger": "fn:normalize-space"}, {"content": "fn:normalize-space()", "trigger": "fn:normalize-space"}, {"content": "fn:normalize-unicode(${1:\\$arg as xs:string?})", "description": "($arg)", "trigger": "fn:normalize-unicode"}, {"content": "fn:normalize-unicode(${1:\\$arg as xs:string?}, ${2:\\$normalizationForm as xs:string})", "description": "($arg,$normalizationForm)", "trigger": "fn:normalize-unicode"}, {"content": "fn:not(${1:\\$arg as item()*})", "description": "($arg)", "trigger": "fn:not"}, {"content": "fn:number(${1:\\$arg as xs:anyAtomicType?})", "description": "($arg)", "trigger": "fn:number"}, {"content": "fn:number()", "trigger": "fn:number"}, {"content": "fn:one-or-more(${1:\\$arg as item()*})", "description": "($arg)", "trigger": "fn:one-or-more"}, {"content": "fn:position()", "trigger": "fn:position"}, {"content": "fn:prefix-from-QName(${1:\\$arg as xs:QName?})", "description": "($arg)", "trigger": "fn:prefix-from-QName"}, {"content": "fn:regex-group(${1:\\$group-number as xs:integer})", "description": "($group-number)", "trigger": "fn:regex-group"}, {"content": "fn:remove(${1:\\$target as item()*}, ${2:\\$position as xs:integer})", "description": "($target,$position)", "trigger": "fn:remove"}, {"content": "fn:replace(${1:\\$input as xs:string?}, ${2:\\$pattern as xs:string}, ${3:\\$replacement as xs:string})", "description": "($input,$pattern,$replacement)", "trigger": "fn:replace"}, {"content": "fn:replace(${1:\\$input as xs:string?}, ${2:\\$pattern as xs:string}, ${3:\\$replacement as xs:string}, ${4:\\$flags as xs:string})", "description": "($input,$pattern,$replacement,$flags)", "trigger": "fn:replace"}, {"content": "fn:resolve-QName(${1:\\$qname as xs:string?}, ${2:\\$element as element()})", "description": "($qname,$element)", "trigger": "fn:resolve-QName"}, {"content": "fn:resolve-uri(${1:\\$relative as xs:string?})", "description": "($relative)", "trigger": "fn:resolve-uri"}, {"content": "fn:resolve-uri(${1:\\$relative as xs:string?}, ${2:\\$base as xs:string})", "description": "($relative,$base)", "trigger": "fn:resolve-uri"}, {"content": "fn:reverse(${1:\\$target as item()*})", "description": "($target)", "trigger": "fn:reverse"}, {"content": "fn:root(${1:\\$arg as node()?})", "description": "($arg)", "trigger": "fn:root"}, {"content": "fn:root()", "trigger": "fn:root"}, {"content": "fn:round(${1:\\$arg as numeric?})", "description": "($arg)", "trigger": "fn:round"}, {"content": "fn:round-half-to-even(${1:\\$arg as numeric?})", "description": "($arg)", "trigger": "fn:round-half-to-even"}, {"content": "fn:round-half-to-even(${1:\\$arg as numeric?}, ${2:\\$precision as xs:integer})", "description": "($arg,$precision)", "trigger": "fn:round-half-to-even"}, {"content": "fn:seconds-from-dateTime(${1:\\$arg as xs:dateTime?})", "description": "($arg)", "trigger": "fn:seconds-from-dateTime"}, {"content": "fn:seconds-from-duration(${1:\\$arg as xs:duration?})", "description": "($arg)", "trigger": "fn:seconds-from-duration"}, {"content": "fn:seconds-from-time(${1:\\$arg as xs:time?})", "description": "($arg)", "trigger": "fn:seconds-from-time"}, {"content": "fn:starts-with(${1:\\$parameter1 as xs:string?}, ${2:\\$parameter2 as xs:string?})", "description": "($parameter1,$parameter2)", "trigger": "fn:starts-with"}, {"content": "fn:starts-with(${1:\\$parameter1 as xs:string?}, ${2:\\$parameter2 as xs:string?}, ${3:\\$collation as xs:string})", "description": "($parameter1,$parameter2,$collation)", "trigger": "fn:starts-with"}, {"content": "fn:static-base-uri()", "trigger": "fn:static-base-uri"}, {"content": "fn:string(${1:\\$arg as item()?})", "description": "($arg)", "trigger": "fn:string"}, {"content": "fn:string()", "trigger": "fn:string"}, {"content": "fn:string-join(${1:\\$parameter1 as xs:string*}, ${2:\\$parameter2 as xs:string})", "description": "($parameter1,$parameter2)", "trigger": "fn:string-join"}, {"content": "fn:string-length(${1:\\$sourceString as xs:string?})", "description": "($sourceString)", "trigger": "fn:string-length"}, {"content": "fn:string-length()", "trigger": "fn:string-length"}, {"content": "fn:string-pad(${1:\\$padString as xs:string?}, ${2:\\$padCount as xs:integer})", "description": "($padString,$padCount)", "trigger": "fn:string-pad"}, {"content": "fn:string-to-codepoints(${1:\\$arg as xs:string})", "description": "($arg)", "trigger": "fn:string-to-codepoints"}, {"content": "fn:subsequence(${1:\\$sourceSeq as item()*}, ${2:\\$startingLoc as xs:double})", "description": "($sourceSeq,$startingLoc)", "trigger": "fn:subsequence"}, {"content": "fn:subsequence(${1:\\$sourceSeq as item()*}, ${2:\\$startingLoc as xs:double}, ${3:\\$length as xs:double})", "description": "($sourceSeq,$startingLoc,$length)", "trigger": "fn:subsequence"}, {"content": "fn:substring(${1:\\$sourceString as xs:string?}, ${2:\\$startingLoc as xs:double})", "description": "($sourceString,$startingLoc)", "trigger": "fn:substring"}, {"content": "fn:substring(${1:\\$sourceString as xs:string?}, ${2:\\$startingLoc as xs:double}, ${3:\\$length as xs:double})", "description": "($sourceString,$startingLoc,$length)", "trigger": "fn:substring"}, {"content": "fn:substring-after(${1:\\$input as xs:string?}, ${2:\\$after as xs:string?})", "description": "($input,$after)", "trigger": "fn:substring-after"}, {"content": "fn:substring-after(${1:\\$input as xs:string?}, ${2:\\$after as xs:string?}, ${3:\\$collation as xs:string})", "description": "($input,$after,$collation)", "trigger": "fn:substring-after"}, {"content": "fn:substring-before(${1:\\$input as xs:string?}, ${2:\\$before as xs:string?})", "description": "($input,$before)", "trigger": "fn:substring-before"}, {"content": "fn:substring-before(${1:\\$input as xs:string?}, ${2:\\$before as xs:string?}, ${3:\\$collation as xs:string})", "description": "($input,$before,$collation)", "trigger": "fn:substring-before"}, {"content": "fn:subtract-dateTimes-yielding-dayTimeDuration(${1:\\$srcval1 as xs:dateTime}, ${2:\\$srcval1 as xs:dateTime})", "description": "($srcval1,$srcval1)", "trigger": "fn:subtract-dateTimes-yielding-dayTimeDuration"}, {"content": "fn:subtract-dateTimes-yielding-yearMonthDuration(${1:\\$srcval1 as xs:dateTime}, ${2:\\$srcval1 as xs:dateTime})", "description": "($srcval1,$srcval1)", "trigger": "fn:subtract-dateTimes-yielding-yearMonthDuration"}, {"content": "fn:sum(${1:\\$arg as xs:anyAtomicType*})", "description": "($arg)", "trigger": "fn:sum"}, {"content": "fn:sum(${1:\\$arg as xs:anyAtomicType*}, ${2:\\$zero as xs:anyAtomicType?})", "description": "($arg,$zero)", "trigger": "fn:sum"}, {"content": "fn:system-property(${1:\\$property-name as xs:string})", "description": "($property-name)", "trigger": "fn:system-property"}, {"content": "fn:tail(${1:\\$seq as item()*})", "description": "($seq)", "trigger": "fn:tail"}, {"content": "fn:timezone-from-date(${1:\\$arg as xs:dateTime?})", "description": "($arg)", "trigger": "fn:timezone-from-date"}, {"content": "fn:timezone-from-dateTime(${1:\\$arg as xs:dateTime?})", "description": "($arg)", "trigger": "fn:timezone-from-dateTime"}, {"content": "fn:timezone-from-time(${1:\\$arg as xs:time?})", "description": "($arg)", "trigger": "fn:timezone-from-time"}, {"content": "fn:tokenize(${1:\\$input as xs:string?}, ${2:\\$pattern as xs:string})", "description": "($input,$pattern)", "trigger": "fn:tokenize"}, {"content": "fn:tokenize(${1:\\$input as xs:string?}, ${2:\\$pattern as xs:string}, ${3:\\$flags as xs:string})", "description": "($input,$pattern,$flags)", "trigger": "fn:tokenize"}, {"content": "fn:trace(${1:\\$value as item()*}, ${2:\\$label as xs:string})", "description": "($value,$label)", "trigger": "fn:trace"}, {"content": "fn:translate(${1:\\$src as xs:string?}, ${2:\\$mapString as xs:string?}, ${3:\\$transString as xs:string?})", "description": "($src,$mapString,$transString)", "trigger": "fn:translate"}, {"content": "fn:true()", "trigger": "fn:true"}, {"content": "fn:type-available(${1:\\$type-name as xs:string})", "description": "($type-name)", "trigger": "fn:type-available"}, {"content": "fn:unordered(${1:\\$sourceSeq as item()*})", "description": "($sourceSeq)", "trigger": "fn:unordered"}, {"content": "fn:unparsed-entity-public-id(${1:\\$entity-name as xs:string})", "description": "($entity-name)", "trigger": "fn:unparsed-entity-public-id"}, {"content": "fn:unparsed-entity-uri(${1:\\$entity-name as xs:string})", "description": "($entity-name)", "trigger": "fn:unparsed-entity-uri"}, {"content": "fn:unparsed-text(${1:\\$href as xs:string})", "description": "($href)", "trigger": "fn:unparsed-text"}, {"content": "fn:unparsed-text(${1:\\$href as xs:string}, ${2:\\$encoding as xs:string})", "description": "($href,$encoding)", "trigger": "fn:unparsed-text"}, {"content": "fn:unparsed-text-available(${1:\\$href as xs:string})", "description": "($href)", "trigger": "fn:unparsed-text-available"}, {"content": "fn:unparsed-text-available(${1:\\$href as xs:string}, ${2:\\$encoding as xs:string})", "description": "($href,$encoding)", "trigger": "fn:unparsed-text-available"}, {"content": "fn:upper-case(${1:\\$string as xs:string?})", "description": "($string)", "trigger": "fn:upper-case"}, {"content": "fn:year-from-date(${1:\\$arg as xs:dateTime?})", "description": "($arg)", "trigger": "fn:year-from-date"}, {"content": "fn:year-from-dateTime(${1:\\$arg as xs:dateTime?})", "description": "($arg)", "trigger": "fn:year-from-dateTime"}, {"content": "fn:years-from-duration(${1:\\$arg as xs:duration?})", "description": "($arg)", "trigger": "fn:years-from-duration"}, {"content": "fn:zero-or-one(${1:\\$arg as item()*})", "description": "($arg)", "trigger": "fn:zero-or-one"}, {"content": "geo:box(${1:\\$box as element()})", "description": "($box)", "trigger": "geo:box"}, {"content": "geo:circle(${1:\\$radius as xs:double}, ${2:\\$center as element()})", "description": "($radius,$center)", "trigger": "geo:circle"}, {"content": "geo:geospatial-query(${1:\\$regions as cts:region*})", "description": "($regions)", "trigger": "geo:geospatial-query"}, {"content": "geo:geospatial-query(${1:\\$regions as cts:region*}, ${2:\\$options as xs:string*})", "description": "($regions,$options)", "trigger": "geo:geospatial-query"}, {"content": "geo:geospatial-query(${1:\\$regions as cts:region*}, ${2:\\$options as xs:string*}, ${3:\\$weight as xs:double?})", "description": "($regions,$options,$weight)", "trigger": "geo:geospatial-query"}, {"content": "geo:geospatial-query-from-elements(${1:\\$regions as element()*})", "description": "($regions)", "trigger": "geo:geospatial-query-from-elements"}, {"content": "geo:geospatial-query-from-elements(${1:\\$regions as element()*}, ${2:\\$options as xs:string*})", "description": "($regions,$options)", "trigger": "geo:geospatial-query-from-elements"}, {"content": "geo:geospatial-query-from-elements(${1:\\$regions as element()*}, ${2:\\$options as xs:string*}, ${3:\\$weight as xs:double?})", "description": "($regions,$options,$weight)", "trigger": "geo:geospatial-query-from-elements"}, {"content": "geo:interior-polygon(${1:\\$polygon as element()})", "description": "($polygon)", "trigger": "geo:interior-polygon"}, {"content": "geo:point(${1:\\$point as element()})", "description": "($point)", "trigger": "geo:point"}, {"content": "geo:polygon(${1:\\$polygon-or-points as element()+})", "description": "($polygon-or-points)", "trigger": "geo:polygon"}, {"content": "georss:circle(${1:\\$radius as xs:double}, ${2:\\$center as element(georss:point)})", "description": "($radius,$center)", "trigger": "georss:circle"}, {"content": "georss:geospatial-query(${1:\\$regions as cts:region*})", "description": "($regions)", "trigger": "georss:geospatial-query"}, {"content": "georss:geospatial-query(${1:\\$regions as cts:region*}, ${2:\\$options as xs:string*})", "description": "($regions,$options)", "trigger": "georss:geospatial-query"}, {"content": "georss:geospatial-query(${1:\\$regions as cts:region*}, ${2:\\$options as xs:string*}, ${3:\\$weight as xs:double?})", "description": "($regions,$options,$weight)", "trigger": "georss:geospatial-query"}, {"content": "georss:point(${1:\\$point as element(georss:point)})", "description": "($point)", "trigger": "georss:point"}, {"content": "gml:box(${1:\\$box as element(gml:Envelope)})", "description": "($box)", "trigger": "gml:box"}, {"content": "gml:circle(${1:\\$radius as xs:double}, ${2:\\$center as element(gml:Point)})", "description": "($radius,$center)", "trigger": "gml:circle"}, {"content": "gml:geospatial-query(${1:\\$regions as cts:region*})", "description": "($regions)", "trigger": "gml:geospatial-query"}, {"content": "gml:geospatial-query(${1:\\$regions as cts:region*}, ${2:\\$options as xs:string*})", "description": "($regions,$options)", "trigger": "gml:geospatial-query"}, {"content": "gml:geospatial-query(${1:\\$regions as cts:region*}, ${2:\\$options as xs:string*}, ${3:\\$weight as xs:double?})", "description": "($regions,$options,$weight)", "trigger": "gml:geospatial-query"}, {"content": "gml:geospatial-query-from-elements(${1:\\$regions as element()*})", "description": "($regions)", "trigger": "gml:geospatial-query-from-elements"}, {"content": "gml:geospatial-query-from-elements(${1:\\$regions as element()*}, ${2:\\$options as xs:string*})", "description": "($regions,$options)", "trigger": "gml:geospatial-query-from-elements"}, {"content": "gml:geospatial-query-from-elements(${1:\\$regions as element()*}, ${2:\\$options as xs:string*}, ${3:\\$weight as xs:double?})", "description": "($regions,$options,$weight)", "trigger": "gml:geospatial-query-from-elements"}, {"content": "gml:interior-polygon(${1:\\$polygon as element(gml:Polygon)})", "description": "($polygon)", "trigger": "gml:interior-polygon"}, {"content": "gml:point(${1:\\$point as element(gml:Point)})", "description": "($point)", "trigger": "gml:point"}, {"content": "gml:polygon(${1:\\$polygon-or-points as element()+})", "description": "($polygon-or-points)", "trigger": "gml:polygon"}, {"content": "info:database-create(${1:\\$database-name as xs:string})", "description": "($database-name)", "trigger": "info:database-create"}, {"content": "info:database-create(${1:\\$database-name as xs:string}, ${2:\\$forests-per-host as xs:positiveInteger?})", "description": "($database-name,$forests-per-host)", "trigger": "info:database-create"}, {"content": "info:database-create(${1:\\$database-name as xs:string}, ${2:\\$forests-per-host as xs:positiveInteger?}, ${3:\\$group as xs:string?})", "description": "($database-name,$forests-per-host,$group)", "trigger": "info:database-create"}, {"content": "info:database-create(${1:\\$database-name as xs:string}, ${2:\\$forests-per-host as xs:positiveInteger?}, ${3:\\$group as xs:string?}, ${4:\\$data-directory as xs:string?})", "description": "($database-name,$forests-per-host,$group,$data-directory)", "trigger": "info:database-create"}, {"content": "info:database-create(${1:\\$database-name as xs:string}, ${2:\\$forests-per-host as xs:positiveInteger?}, ${3:\\$group as xs:string?}, ${4:\\$data-directory as xs:string?}, ${5:\\$security-db as xs:string?})", "description": "($database-name,$forests-per-host,$group,$data-directory,$security-db)", "trigger": "info:database-create"}, {"content": "info:database-create(${1:\\$database-name as xs:string}, ${2:\\$forests-per-host as xs:positiveInteger?}, ${3:\\$group as xs:string?}, ${4:\\$data-directory as xs:string?}, ${5:\\$security-db as xs:string?}, ${6:\\$schemas-db as xs:string?})", "description": "($database-name,$forests-per-host,$group,$data-directory,$security-db,$schemas-db)", "trigger": "info:database-create"}, {"content": "info:database-create(${1:\\$database-name as xs:string}, ${2:\\$forests-per-host as xs:positiveInteger?}, ${3:\\$group as xs:string?}, ${4:\\$data-directory as xs:string?}, ${5:\\$security-db as xs:string?}, ${6:\\$schemas-db as xs:string?}, ${7:\\$triggers-db as xs:string?})", "description": "($database-name,$forests-per-host,$group,$data-directory,$security-db,$schemas-db,$triggers-db)", "trigger": "info:database-create"}, {"content": "info:database-delete(${1:\\$database-name as xs:string})", "description": "($database-name)", "trigger": "info:database-delete"}, {"content": "info:database-delete(${1:\\$database-name as xs:string}, ${2:\\$delete-data as xs:boolean?})", "description": "($database-name,$delete-data)", "trigger": "info:database-delete"}, {"content": "info:database-get-feature(${1:\\$database as xs:string})", "description": "($database)", "trigger": "info:database-get-feature"}, {"content": "info:database-get-feature(${1:\\$database as xs:string}, ${2:\\$preview-settings as element(info:settings)})", "description": "($database,$preview-settings)", "trigger": "info:database-get-feature"}, {"content": "info:database-get-feature(${1:\\$database as xs:string}, ${2:\\$preview-settings as element(info:settings)}, ${3:\\$delta as xs:boolean})", "description": "($database,$preview-settings,$delta)", "trigger": "info:database-get-feature"}, {"content": "info:database-set-feature(${1:\\$database as xs:string}, ${2:\\$settings as element(info:settings)})", "description": "($database,$settings)", "trigger": "info:database-set-feature"}, {"content": "info:error-detail(${1:\\$error-id as xs:unsignedLong})", "description": "($error-id)", "trigger": "info:error-detail"}, {"content": "info:flow-cancel(${1:\\$flow-id as xs:string})", "description": "($flow-id)", "trigger": "info:flow-cancel"}, {"content": "info:flow-id(${1:\\$flow-name as xs:string})", "description": "($flow-name)", "trigger": "info:flow-id"}, {"content": "info:flow-policy(${1:\\$flow-id as xs:string})", "description": "($flow-id)", "trigger": "info:flow-policy"}, {"content": "info:flow-start(${1:\\$flow-id as xs:string})", "description": "($flow-id)", "trigger": "info:flow-start"}, {"content": "info:flow-tickets(${1:\\$flow-id as xs:string})", "description": "($flow-id)", "trigger": "info:flow-tickets"}, {"content": "info:flow-tickets(${1:\\$flow-id as xs:string}, ${2:\\$include-inactive as xs:boolean?})", "description": "($flow-id,$include-inactive)", "trigger": "info:flow-tickets"}, {"content": "info:load(${1:\\$dir-path as xs:string})", "description": "($dir-path)", "trigger": "info:load"}, {"content": "info:load(${1:\\$dir-path as xs:string}, ${2:\\$policy-name as xs:string?})", "description": "($dir-path,$policy-name)", "trigger": "info:load"}, {"content": "info:load(${1:\\$dir-path as xs:string}, ${2:\\$policy-name as xs:string?}, ${3:\\$policy-deltas as element(info:options)?})", "description": "($dir-path,$policy-name,$policy-deltas)", "trigger": "info:load"}, {"content": "info:load(${1:\\$dir-path as xs:string}, ${2:\\$policy-name as xs:string?}, ${3:\\$policy-deltas as element(info:options)?}, ${4:\\$database as xs:string})", "description": "($dir-path,$policy-name,$policy-deltas,$database)", "trigger": "info:load"}, {"content": "info:policy(${1:\\$policy-name as xs:string})", "description": "($policy-name)", "trigger": "info:policy"}, {"content": "info:policy-delete(${1:\\$policy-name as xs:string})", "description": "($policy-name)", "trigger": "info:policy-delete"}, {"content": "info:policy-names()", "trigger": "info:policy-names"}, {"content": "info:policy-set(${1:\\$policy-name as xs:string?})", "description": "($policy-name)", "trigger": "info:policy-set"}, {"content": "info:policy-set(${1:\\$policy-name as xs:string?}, ${2:\\$policy as element(info:options)?})", "description": "($policy-name,$policy)", "trigger": "info:policy-set"}, {"content": "info:policy-set()", "trigger": "info:policy-set"}, {"content": "info:ticket(${1:\\$ticket-id as xs:string+})", "description": "($ticket-id)", "trigger": "info:ticket"}, {"content": "info:ticket-delete(${1:\\$ticket-id as xs:string})", "description": "($ticket-id)", "trigger": "info:ticket-delete"}, {"content": "info:ticket-errors(${1:\\$ticket-id as xs:string})", "description": "($ticket-id)", "trigger": "info:ticket-errors"}, {"content": "info:ticket-errors(${1:\\$ticket-id as xs:string}, ${2:\\$start as xs:unsignedInt?})", "description": "($ticket-id,$start)", "trigger": "info:ticket-errors"}, {"content": "info:ticket-errors(${1:\\$ticket-id as xs:string}, ${2:\\$start as xs:unsignedInt?}, ${3:\\$page-length as xs:unsignedInt?})", "description": "($ticket-id,$start,$page-length)", "trigger": "info:ticket-errors"}, {"content": "info:ticket-errors(${1:\\$ticket-id as xs:string}, ${2:\\$start as xs:unsignedInt?}, ${3:\\$page-length as xs:unsignedInt?}, ${4:\\$sort-ascending as xs:boolean?})", "description": "($ticket-id,$start,$page-length,$sort-ascending)", "trigger": "info:ticket-errors"}, {"content": "info:ticket-errors(${1:\\$ticket-id as xs:string}, ${2:\\$start as xs:unsignedInt?}, ${3:\\$page-length as xs:unsignedInt?}, ${4:\\$sort-ascending as xs:boolean?}, ${5:\\$filter as schema-element(cts:query)?})", "description": "($ticket-id,$start,$page-length,$sort-ascending,$filter)", "trigger": "info:ticket-errors"}, {"content": "info:tickets(${1:\\$database as xs:string*})", "description": "($database)", "trigger": "info:tickets"}, {"content": "info:tickets(${1:\\$database as xs:string*}, ${2:\\$status as xs:string*})", "description": "($database,$status)", "trigger": "info:tickets"}, {"content": "info:tickets(${1:\\$database as xs:string*}, ${2:\\$status as xs:string*}, ${3:\\$custom-query as schema-element(cts:query)?})", "description": "($database,$status,$custom-query)", "trigger": "info:tickets"}, {"content": "info:tickets()", "trigger": "info:tickets"}, {"content": "info:unload(${1:\\$ticket-id as xs:string})", "description": "($ticket-id)", "trigger": "info:unload"}, {"content": "info:unload(${1:\\$ticket-id as xs:string}, ${2:\\$database as xs:string*})", "description": "($ticket-id,$database)", "trigger": "info:unload"}, {"content": "info:unload(${1:\\$ticket-id as xs:string}, ${2:\\$database as xs:string*}, ${3:\\$batch-size as xs:positiveInteger?})", "description": "($ticket-id,$database,$batch-size)", "trigger": "info:unload"}, {"content": "infodev:check-options(${1:\\$options as element(info:options)})", "description": "($options)", "trigger": "infodev:check-options"}, {"content": "infodev:collector-options(${1:\\$policy-name as xs:string?}, ${2:\\$policy-deltas as element(info:options)*})", "description": "($policy-name,$policy-deltas)", "trigger": "infodev:collector-options"}, {"content": "infodev:effective-policy(${1:\\$policy-name as xs:string?}, ${2:\\$policy-deltas as element(info:options)*})", "description": "($policy-name,$policy-deltas)", "trigger": "infodev:effective-policy"}, {"content": "infodev:file-filter(${1:\\$policy-name as xs:string?}, ${2:\\$policy-deltas as element(info:options)*})", "description": "($policy-name,$policy-deltas)", "trigger": "infodev:file-filter"}, {"content": "infodev:filesystem-walk(${1:\\$dir-path as xs:string}, ${2:\\$ticket-id as xs:string}, ${3:\\$function as xdmp:function}, ${4:\\$policy-deltas as element(info:options)?})", "description": "($dir-path,$ticket-id,$function,$policy-deltas)", "trigger": "infodev:filesystem-walk"}, {"content": "infodev:filesystem-walk(${1:\\$dir-path as xs:string}, ${2:\\$ticket-id as xs:string}, ${3:\\$function as xdmp:function}, ${4:\\$policy-deltas as element(info:options)?}, ${5:\\$context as item()?})", "description": "($dir-path,$ticket-id,$function,$policy-deltas,$context)", "trigger": "infodev:filesystem-walk"}, {"content": "infodev:get-external-binary-file(${1:\\$source-location as xs:string})", "description": "($source-location)", "trigger": "infodev:get-external-binary-file"}, {"content": "infodev:get-file(${1:\\$source-location as xs:string}, ${2:\\$ticket-id as xs:string}, ${3:\\$policy-deltas as element(info:options)?})", "description": "($source-location,$ticket-id,$policy-deltas)", "trigger": "infodev:get-file"}, {"content": "infodev:handle-error(${1:\\$ticket-id as xs:string}, ${2:\\$context as xs:string}, ${3:\\$error as element(error:error)})", "description": "($ticket-id,$context,$error)", "trigger": "infodev:handle-error"}, {"content": "infodev:handle-error(${1:\\$ticket-id as xs:string}, ${2:\\$context as xs:string}, ${3:\\$error as element(error:error)}, ${4:\\$annotation as element(info:annotation)?})", "description": "($ticket-id,$context,$error,$annotation)", "trigger": "infodev:handle-error"}, {"content": "infodev:handle-error(${1:\\$ticket-id as xs:string}, ${2:\\$context as xs:string}, ${3:\\$error as element(error:error)}, ${4:\\$annotation as element(info:annotation)?}, ${5:\\$error-log-level as xs:string?})", "description": "($ticket-id,$context,$error,$annotation,$error-log-level)", "trigger": "infodev:handle-error"}, {"content": "infodev:ingest(${1:\\$document as node()?}, ${2:\\$path as xs:string}, ${3:\\$ticket-id as xs:string})", "description": "($document,$path,$ticket-id)", "trigger": "infodev:ingest"}, {"content": "infodev:ingest(${1:\\$document as node()?}, ${2:\\$path as xs:string}, ${3:\\$ticket-id as xs:string}, ${4:\\$policy-deltas as element(info:options)?})", "description": "($document,$path,$ticket-id,$policy-deltas)", "trigger": "infodev:ingest"}, {"content": "infodev:ingest(${1:\\$document as node()?}, ${2:\\$path as xs:string}, ${3:\\$ticket-id as xs:string}, ${4:\\$policy-deltas as element(info:options)?}, ${5:\\$properties as element()*})", "description": "($document,$path,$ticket-id,$policy-deltas,$properties)", "trigger": "infodev:ingest"}, {"content": "infodev:log-progress(${1:\\$ticket-id as xs:string}, ${2:\\$annotation as element(info:annotation)})", "description": "($ticket-id,$annotation)", "trigger": "infodev:log-progress"}, {"content": "infodev:log-progress(${1:\\$ticket-id as xs:string}, ${2:\\$annotation as element(info:annotation)}, ${3:\\$documents-processed as xs:nonNegativeInteger?})", "description": "($ticket-id,$annotation,$documents-processed)", "trigger": "infodev:log-progress"}, {"content": "infodev:log-progress(${1:\\$ticket-id as xs:string}, ${2:\\$annotation as element(info:annotation)}, ${3:\\$documents-processed as xs:nonNegativeInteger?}, ${4:\\$transactions-completed as xs:nonNegativeInteger?})", "description": "($ticket-id,$annotation,$documents-processed,$transactions-completed)", "trigger": "infodev:log-progress"}, {"content": "infodev:log-progress(${1:\\$ticket-id as xs:string}, ${2:\\$annotation as element(info:annotation)}, ${3:\\$documents-processed as xs:nonNegativeInteger?}, ${4:\\$transactions-completed as xs:nonNegativeInteger?}, ${5:\\$error-log-level as xs:string?})", "description": "($ticket-id,$annotation,$documents-processed,$transactions-completed,$error-log-level)", "trigger": "infodev:log-progress"}, {"content": "infodev:ticket-add-annotation(${1:\\$ticket-id as xs:string}, ${2:\\$annotation as element(info:annotation)})", "description": "($ticket-id,$annotation)", "trigger": "infodev:ticket-add-annotation"}, {"content": "infodev:ticket-create(${1:\\$annotation as element(info:annotation)?}, ${2:\\$database as xs:string?}, ${3:\\$policy-name as xs:string?}, ${4:\\$policy-deltas as element(info:options)?})", "description": "($annotation,$database,$policy-name,$policy-deltas)", "trigger": "infodev:ticket-create"}, {"content": "infodev:ticket-get-status(${1:\\$ticket-id as xs:string})", "description": "($ticket-id)", "trigger": "infodev:ticket-get-status"}, {"content": "infodev:ticket-set-status(${1:\\$ticket-id as xs:string}, ${2:\\$status as xs:string})", "description": "($ticket-id,$status)", "trigger": "infodev:ticket-set-status"}, {"content": "infodev:ticket-set-total-documents(${1:\\$ticket-id as xs:string}, ${2:\\$total-documents as xs:unsignedInt})", "description": "($ticket-id,$total-documents)", "trigger": "infodev:ticket-set-total-documents"}, {"content": "infodev:ticket-set-total-transactions(${1:\\$ticket-id as xs:string}, ${2:\\$total-transactions as xs:unsignedInt})", "description": "($ticket-id,$total-transactions)", "trigger": "infodev:ticket-set-total-transactions"}, {"content": "infodev:transaction(${1:\\$document-map as map:map}, ${2:\\$ticket-id as xs:string}, ${3:\\$function as xdmp:function}, ${4:\\$policy-deltas as element(info:options)?}, ${5:\\$transaction-index as xs:integer}, ${6:\\$context as item()?})", "description": "($document-map,$ticket-id,$function,$policy-deltas,$transaction-index,$context)", "trigger": "infodev:transaction"}, {"content": "infodev:transaction(${1:\\$document-map as map:map}, ${2:\\$ticket-id as xs:string}, ${3:\\$function as xdmp:function}, ${4:\\$policy-deltas as element(info:options)?}, ${5:\\$transaction-index as xs:integer}, ${6:\\$context as item()?}, ${7:\\$error-log-level as xs:string?})", "description": "($document-map,$ticket-id,$function,$policy-deltas,$transaction-index,$context,$error-log-level)", "trigger": "infodev:transaction"}, {"content": "infodev:transaction-size(${1:\\$policy-name as xs:string?}, ${2:\\$policy-deltas as element(info:options)*})", "description": "($policy-name,$policy-deltas)", "trigger": "infodev:transaction-size"}, {"content": "json:array(${1:\\$array as element(json:array)})", "description": "($array)", "trigger": "json:array"}, {"content": "json:array()", "trigger": "json:array"}, {"content": "json:array-pop(${1:\\$array as json:array})", "description": "($array)", "trigger": "json:array-pop"}, {"content": "json:array-push(${1:\\$array as json:array}, ${2:\\$item as item()*})", "description": "($array,$item)", "trigger": "json:array-push"}, {"content": "json:array-resize(${1:\\$array as json:array}, ${2:\\$newSize as xs:unsignedLong})", "description": "($array,$newSize)", "trigger": "json:array-resize"}, {"content": "json:array-resize(${1:\\$array as json:array}, ${2:\\$newSize as xs:unsignedLong}, ${3:\\$zero as item()?})", "description": "($array,$newSize,$zero)", "trigger": "json:array-resize"}, {"content": "json:array-size(${1:\\$array as json:array?})", "description": "($array)", "trigger": "json:array-size"}, {"content": "json:array-values(${1:\\$array as json:array})", "description": "($array)", "trigger": "json:array-values"}, {"content": "json:array-values(${1:\\$array as json:array}, ${2:\\$flatten as xs:boolean?})", "description": "($array,$flatten)", "trigger": "json:array-values"}, {"content": "json:check-config(${1:\\$config as map:map})", "description": "($config)", "trigger": "json:check-config"}, {"content": "json:check-config()", "trigger": "json:check-config"}, {"content": "json:config(${1:\\$strategy as xs:string})", "description": "($strategy)", "trigger": "json:config"}, {"content": "json:object(${1:\\$map as element(json:object)})", "description": "($map)", "trigger": "json:object"}, {"content": "json:object()", "trigger": "json:object"}, {"content": "json:object-define(${1:\\$keys as xs:string*})", "description": "($keys)", "trigger": "json:object-define"}, {"content": "json:object-define()", "trigger": "json:object-define"}, {"content": "json:set-item-at(${1:\\$array as json:array}, ${2:\\$pos as xs:double}, ${3:\\$value as item()*})", "description": "($array,$pos,$value)", "trigger": "json:set-item-at"}, {"content": "json:subarray(${1:\\$array as json:array}, ${2:\\$startingLoc as xs:double})", "description": "($array,$startingLoc)", "trigger": "json:subarray"}, {"content": "json:subarray(${1:\\$array as json:array}, ${2:\\$startingLoc as xs:double}, ${3:\\$length as xs:double})", "description": "($array,$startingLoc,$length)", "trigger": "json:subarray"}, {"content": "json:to-array(${1:\\$items as item()*})", "description": "($items)", "trigger": "json:to-array"}, {"content": "json:to-array(${1:\\$items as item()*}, ${2:\\$limit as xs:double?})", "description": "($items,$limit)", "trigger": "json:to-array"}, {"content": "json:to-array(${1:\\$items as item()*}, ${2:\\$limit as xs:double?}, ${3:\\$zero as item()?})", "description": "($items,$limit,$zero)", "trigger": "json:to-array"}, {"content": "json:to-array()", "trigger": "json:to-array"}, {"content": "json:transform-from-json(${1:\\$json as item()})", "description": "($json)", "trigger": "json:transform-from-json"}, {"content": "json:transform-from-json(${1:\\$json as item()}, ${2:\\$config as map:map})", "description": "($json,$config)", "trigger": "json:transform-from-json"}, {"content": "json:transform-to-json(${1:\\$node as node()})", "description": "($node)", "trigger": "json:transform-to-json"}, {"content": "json:transform-to-json(${1:\\$node as node()}, ${2:\\$config as map:map})", "description": "($node,$config)", "trigger": "json:transform-to-json"}, {"content": "json:transform-to-json-object(${1:\\$node as node()})", "description": "($node)", "trigger": "json:transform-to-json-object"}, {"content": "json:transform-to-json-object(${1:\\$node as node()}, ${2:\\$config as map:map})", "description": "($node,$config)", "trigger": "json:transform-to-json-object"}, {"content": "json:transform-to-json-xml(${1:\\$node as node()})", "description": "($node)", "trigger": "json:transform-to-json-xml"}, {"content": "json:transform-to-json-xml(${1:\\$node as node()}, ${2:\\$config as map:map})", "description": "($node,$config)", "trigger": "json:transform-to-json-xml"}, {"content": "kml:box(${1:\\$envelope as element(kml:LatLongBox)})", "description": "($envelope)", "trigger": "kml:box"}, {"content": "kml:circle(${1:\\$radius as xs:double}, ${2:\\$center as element()})", "description": "($radius,$center)", "trigger": "kml:circle"}, {"content": "kml:geospatial-query(${1:\\$regions as cts:region*})", "description": "($regions)", "trigger": "kml:geospatial-query"}, {"content": "kml:geospatial-query(${1:\\$regions as cts:region*}, ${2:\\$options as xs:string*})", "description": "($regions,$options)", "trigger": "kml:geospatial-query"}, {"content": "kml:geospatial-query(${1:\\$regions as cts:region*}, ${2:\\$options as xs:string*}, ${3:\\$weight as xs:double?})", "description": "($regions,$options,$weight)", "trigger": "kml:geospatial-query"}, {"content": "kml:geospatial-query-from-elements(${1:\\$regions as element()*})", "description": "($regions)", "trigger": "kml:geospatial-query-from-elements"}, {"content": "kml:geospatial-query-from-elements(${1:\\$regions as element()*}, ${2:\\$options as xs:string*})", "description": "($regions,$options)", "trigger": "kml:geospatial-query-from-elements"}, {"content": "kml:geospatial-query-from-elements(${1:\\$regions as element()*}, ${2:\\$options as xs:string*}, ${3:\\$weight as xs:double?})", "description": "($regions,$options,$weight)", "trigger": "kml:geospatial-query-from-elements"}, {"content": "kml:interior-polygon(${1:\\$points as element(kml:Polygon)})", "description": "($points)", "trigger": "kml:interior-polygon"}, {"content": "kml:point(${1:\\$point as element()})", "description": "($point)", "trigger": "kml:point"}, {"content": "kml:polygon(${1:\\$polygon-or-points as element()+})", "description": "($polygon-or-points)", "trigger": "kml:polygon"}, {"content": "lnk:create(${1:\\$from as xs:string}, ${2:\\$to as xs:string}, ${3:\\$role as xs:string}, ${4:\\$rev-role as xs:string}, ${5:\\$strength as xs:string})", "description": "($from,$to,$role,$rev-role,$strength)", "trigger": "lnk:create"}, {"content": "lnk:from(${1:\\$from as xs:string})", "description": "($from)", "trigger": "lnk:from"}, {"content": "lnk:get(${1:\\$from as xs:string}, ${2:\\$to as xs:string})", "description": "($from,$to)", "trigger": "lnk:get"}, {"content": "lnk:insert(${1:\\$link as element(lnk:link)})", "description": "($link)", "trigger": "lnk:insert"}, {"content": "lnk:remove(${1:\\$from as xs:string}, ${2:\\$to as xs:string})", "description": "($from,$to)", "trigger": "lnk:remove"}, {"content": "lnk:to(${1:\\$to as xs:string})", "description": "($to)", "trigger": "lnk:to"}, {"content": "map:clear(${1:\\$map as map:map})", "description": "($map)", "trigger": "map:clear"}, {"content": "map:contains(${1:\\$map as map:map}, ${2:\\$key as xs:string})", "description": "($map,$key)", "trigger": "map:contains"}, {"content": "map:count(${1:\\$map as map:map})", "description": "($map)", "trigger": "map:count"}, {"content": "map:delete(${1:\\$map as map:map}, ${2:\\$key as xs:string})", "description": "($map,$key)", "trigger": "map:delete"}, {"content": "map:entry(${1:\\$key as xs:string}, ${2:\\$value as item()*})", "description": "($key,$value)", "trigger": "map:entry"}, {"content": "map:get(${1:\\$map as map:map}, ${2:\\$key as xs:string})", "description": "($map,$key)", "trigger": "map:get"}, {"content": "map:keys(${1:\\$map as map:map})", "description": "($map)", "trigger": "map:keys"}, {"content": "map:map(${1:\\$map as element(map:map)})", "description": "($map)", "trigger": "map:map"}, {"content": "map:map()", "trigger": "map:map"}, {"content": "map:new(${1:\\$maps as map:map*})", "description": "($maps)", "trigger": "map:new"}, {"content": "map:new()", "trigger": "map:new"}, {"content": "map:put(${1:\\$map as map:map}, ${2:\\$key as xs:string}, ${3:\\$value as item()*})", "description": "($map,$key,$value)", "trigger": "map:put"}, {"content": "math:acos(${1:\\$x as xs:double})", "description": "($x)", "trigger": "math:acos"}, {"content": "math:asin(${1:\\$x as xs:double})", "description": "($x)", "trigger": "math:asin"}, {"content": "math:atan(${1:\\$x as xs:double})", "description": "($x)", "trigger": "math:atan"}, {"content": "math:atan2(${1:\\$y as xs:double}, ${2:\\$x as xs:double})", "description": "($y,$x)", "trigger": "math:atan2"}, {"content": "math:ceil(${1:\\$x as xs:double})", "description": "($x)", "trigger": "math:ceil"}, {"content": "math:correlation(${1:\\$arg as json:array*})", "description": "($arg)", "trigger": "math:correlation"}, {"content": "math:cos(${1:\\$x as xs:double})", "description": "($x)", "trigger": "math:cos"}, {"content": "math:cosh(${1:\\$x as xs:double})", "description": "($x)", "trigger": "math:cosh"}, {"content": "math:cot(${1:\\$x as xs:double})", "description": "($x)", "trigger": "math:cot"}, {"content": "math:covariance(${1:\\$arg as json:array*})", "description": "($arg)", "trigger": "math:covariance"}, {"content": "math:covariance-p(${1:\\$arg as json:array*})", "description": "($arg)", "trigger": "math:covariance-p"}, {"content": "math:degrees(${1:\\$x as xs:double})", "description": "($x)", "trigger": "math:degrees"}, {"content": "math:exp(${1:\\$x as xs:double})", "description": "($x)", "trigger": "math:exp"}, {"content": "math:fabs(${1:\\$x as xs:double})", "description": "($x)", "trigger": "math:fabs"}, {"content": "math:floor(${1:\\$x as xs:double})", "description": "($x)", "trigger": "math:floor"}, {"content": "math:fmod(${1:\\$x as xs:double}, ${2:\\$x as xs:double})", "description": "($x,$x)", "trigger": "math:fmod"}, {"content": "math:frexp(${1:\\$x as xs:double})", "description": "($x)", "trigger": "math:frexp"}, {"content": "math:ldexp(${1:\\$y as xs:double}, ${2:\\$i as xs:integer})", "description": "($y,$i)", "trigger": "math:ldexp"}, {"content": "math:linear-model(${1:\\$arg as json:array*})", "description": "($arg)", "trigger": "math:linear-model"}, {"content": "math:linear-model-coeff(${1:\\$linear-model as math:linear-model})", "description": "($linear-model)", "trigger": "math:linear-model-coeff"}, {"content": "math:linear-model-intercept(${1:\\$linear-model as math:linear-model})", "description": "($linear-model)", "trigger": "math:linear-model-intercept"}, {"content": "math:linear-model-rsquared(${1:\\$linear-model as math:linear-model})", "description": "($linear-model)", "trigger": "math:linear-model-rsquared"}, {"content": "math:log(${1:\\$x as xs:double})", "description": "($x)", "trigger": "math:log"}, {"content": "math:log10(${1:\\$x as xs:double})", "description": "($x)", "trigger": "math:log10"}, {"content": "math:median(${1:\\$arg as xs:double*})", "description": "($arg)", "trigger": "math:median"}, {"content": "math:mode(${1:\\$arg as xs:anyAtomicType*})", "description": "($arg)", "trigger": "math:mode"}, {"content": "math:mode(${1:\\$arg as xs:anyAtomicType*}, ${2:\\$options as xs:string*})", "description": "($arg,$options)", "trigger": "math:mode"}, {"content": "math:modf(${1:\\$x as xs:double})", "description": "($x)", "trigger": "math:modf"}, {"content": "math:percent-rank(${1:\\$arg as xs:anyAtomicType*}, ${2:\\$value as xs:anyAtomicType})", "description": "($arg,$value)", "trigger": "math:percent-rank"}, {"content": "math:percent-rank(${1:\\$arg as xs:anyAtomicType*}, ${2:\\$value as xs:anyAtomicType}, ${3:\\$options as xs:string*})", "description": "($arg,$value,$options)", "trigger": "math:percent-rank"}, {"content": "math:percentile(${1:\\$arg as xs:double*}, ${2:\\$p as xs:double*})", "description": "($arg,$p)", "trigger": "math:percentile"}, {"content": "math:pi()", "trigger": "math:pi"}, {"content": "math:pow(${1:\\$x as xs:double}, ${2:\\$y as xs:double})", "description": "($x,$y)", "trigger": "math:pow"}, {"content": "math:radians(${1:\\$x as xs:double})", "description": "($x)", "trigger": "math:radians"}, {"content": "math:rank(${1:\\$arg as xs:anyAtomicType*}, ${2:\\$arg as xs:anyAtomicType})", "description": "($arg,$arg)", "trigger": "math:rank"}, {"content": "math:rank(${1:\\$arg as xs:anyAtomicType*}, ${2:\\$arg as xs:anyAtomicType}, ${3:\\$options as xs:string*})", "description": "($arg,$arg,$options)", "trigger": "math:rank"}, {"content": "math:sin(${1:\\$x as xs:double})", "description": "($x)", "trigger": "math:sin"}, {"content": "math:sinh(${1:\\$x as xs:double})", "description": "($x)", "trigger": "math:sinh"}, {"content": "math:sqrt(${1:\\$x as xs:double})", "description": "($x)", "trigger": "math:sqrt"}, {"content": "math:stddev(${1:\\$arg as xs:double*})", "description": "($arg)", "trigger": "math:stddev"}, {"content": "math:stddev-p(${1:\\$arg as xs:double*})", "description": "($arg)", "trigger": "math:stddev-p"}, {"content": "math:tan(${1:\\$x as xs:double})", "description": "($x)", "trigger": "math:tan"}, {"content": "math:tanh(${1:\\$x as xs:double})", "description": "($x)", "trigger": "math:tanh"}, {"content": "math:trunc(${1:\\$arg as numeric?}, ${2:\\$n as xs:integer})", "description": "($arg,$n)", "trigger": "math:trunc"}, {"content": "math:variance(${1:\\$arg as xs:double*})", "description": "($arg)", "trigger": "math:variance"}, {"content": "math:variance-p(${1:\\$arg as xs:double*})", "description": "($arg)", "trigger": "math:variance-p"}, {"content": "mcgm:circle(${1:\\$radius as xs:double}, ${2:\\$center as element(Dot)})", "description": "($radius,$center)", "trigger": "mcgm:circle"}, {"content": "mcgm:geospatial-query(${1:\\$regions as cts:region*})", "description": "($regions)", "trigger": "mcgm:geospatial-query"}, {"content": "mcgm:geospatial-query(${1:\\$regions as cts:region*}, ${2:\\$options as xs:string*})", "description": "($regions,$options)", "trigger": "mcgm:geospatial-query"}, {"content": "mcgm:geospatial-query(${1:\\$regions as cts:region*}, ${2:\\$options as xs:string*}, ${3:\\$weight as xs:double?})", "description": "($regions,$options,$weight)", "trigger": "mcgm:geospatial-query"}, {"content": "mcgm:geospatial-query-from-elements(${1:\\$regions as element(Dot)*})", "description": "($regions)", "trigger": "mcgm:geospatial-query-from-elements"}, {"content": "mcgm:geospatial-query-from-elements(${1:\\$regions as element(Dot)*}, ${2:\\$options as xs:string*})", "description": "($regions,$options)", "trigger": "mcgm:geospatial-query-from-elements"}, {"content": "mcgm:geospatial-query-from-elements(${1:\\$regions as element(Dot)*}, ${2:\\$options as xs:string*}, ${3:\\$weight as xs:double?})", "description": "($regions,$options,$weight)", "trigger": "mcgm:geospatial-query-from-elements"}, {"content": "mcgm:point(${1:\\$point as element(Dot)})", "description": "($point)", "trigger": "mcgm:point"}, {"content": "mcgm:polygon(${1:\\$vertices as element(Dot)*})", "description": "($vertices)", "trigger": "mcgm:polygon"}, {"content": "msword:clean(${1:\\$uri as xs:string}, ${2:\\$doc as node()?})", "description": "($uri,$doc)", "trigger": "msword:clean"}, {"content": "ooxml:package-parts(${1:\\$package as node()})", "description": "($package)", "trigger": "ooxml:package-parts"}, {"content": "ooxml:package-parts-insert(${1:\\$directory as xs:string?}, ${2:\\$package-uris as xs:string*}, ${3:\\$package-parts as node()*})", "description": "($directory,$package-uris,$package-parts)", "trigger": "ooxml:package-parts-insert"}, {"content": "ooxml:package-parts-insert(${1:\\$directory as xs:string?}, ${2:\\$package-uris as xs:string*}, ${3:\\$package-parts as node()*}, ${4:\\$permissions as element(sec:permission)*})", "description": "($directory,$package-uris,$package-parts,$permissions)", "trigger": "ooxml:package-parts-insert"}, {"content": "ooxml:package-parts-insert(${1:\\$directory as xs:string?}, ${2:\\$package-uris as xs:string*}, ${3:\\$package-parts as node()*}, ${4:\\$permissions as element(sec:permission)*}, ${5:\\$collections as xs:string*})", "description": "($directory,$package-uris,$package-parts,$permissions,$collections)", "trigger": "ooxml:package-parts-insert"}, {"content": "ooxml:package-parts-insert(${1:\\$directory as xs:string?}, ${2:\\$package-uris as xs:string*}, ${3:\\$package-parts as node()*}, ${4:\\$permissions as element(sec:permission)*}, ${5:\\$collections as xs:string*}, ${6:\\$quality as xs:int?})", "description": "($directory,$package-uris,$package-parts,$permissions,$collections,$quality)", "trigger": "ooxml:package-parts-insert"}, {"content": "ooxml:package-parts-insert(${1:\\$directory as xs:string?}, ${2:\\$package-uris as xs:string*}, ${3:\\$package-parts as node()*}, ${4:\\$permissions as element(sec:permission)*}, ${5:\\$collections as xs:string*}, ${6:\\$quality as xs:int?}, ${7:\\$forest-ids as xs:unsignedLong*})", "description": "($directory,$package-uris,$package-parts,$permissions,$collections,$quality,$forest-ids)", "trigger": "ooxml:package-parts-insert"}, {"content": "ooxml:package-uris(${1:\\$package as node()})", "description": "($package)", "trigger": "ooxml:package-uris"}, {"content": "ooxml:runs-merge(${1:\\$nodes as node()*})", "description": "($nodes)", "trigger": "ooxml:runs-merge"}, {"content": "p:action(${1:\\$module as xs:string}, ${2:\\$description as xs:string?}, ${3:\\$options as element()?})", "description": "($module,$description,$options)", "trigger": "p:action"}, {"content": "p:collection()", "trigger": "p:collection"}, {"content": "p:condition(${1:\\$module as xs:string}, ${2:\\$description as xs:string?}, ${3:\\$options as element()?})", "description": "($module,$description,$options)", "trigger": "p:condition"}, {"content": "p:create(${1:\\$name as xs:string}, ${2:\\$description as xs:string}, ${3:\\$success-action as element(p:action)?}, ${4:\\$failure-action as element(p:action)?}, ${5:\\$status-transitions as element(p:status-transition)*}, ${6:\\$state-transitions as element(p:state-transition)*})", "description": "($name,$description,$success-action,$failure-action,$status-transitions,$state-transitions)", "trigger": "p:create"}, {"content": "p:execute(${1:\\$condition as element(p:condition)?}, ${2:\\$action as element(p:action)?}, ${3:\\$description as xs:string?})", "description": "($condition,$action,$description)", "trigger": "p:execute"}, {"content": "p:get(${1:\\$pipeline-name as xs:string})", "description": "($pipeline-name)", "trigger": "p:get"}, {"content": "p:get-by-id(${1:\\$pipeline-id as xs:unsignedLong})", "description": "($pipeline-id)", "trigger": "p:get-by-id"}, {"content": "p:insert(${1:\\$pipeline-node as node()})", "description": "($pipeline-node)", "trigger": "p:insert"}, {"content": "p:pipelines()", "trigger": "p:pipelines"}, {"content": "p:remove(${1:\\$pipeline-name as xs:string})", "description": "($pipeline-name)", "trigger": "p:remove"}, {"content": "p:state-transition(${1:\\$state as xs:anyURI}, ${2:\\$description as xs:string}, ${3:\\$on-success as xs:anyURI?}, ${4:\\$on-failure as xs:anyURI?}, ${5:\\$priority as xs:unsignedLong?}, ${6:\\$default-action as element(p:action)?}, ${7:\\$rules as element(p:execute)*})", "description": "($state,$description,$on-success,$on-failure,$priority,$default-action,$rules)", "trigger": "p:state-transition"}, {"content": "p:status-transition(${1:\\$status as xs:string}, ${2:\\$description as xs:string}, ${3:\\$on-success as xs:anyURI?}, ${4:\\$on-failure as xs:anyURI?}, ${5:\\$priority as xs:unsignedLong?}, ${6:\\$default-action as element(p:action)?}, ${7:\\$rules as element(p:execute)*})", "description": "($status,$description,$on-success,$on-failure,$priority,$default-action,$rules)", "trigger": "p:status-transition"}, {"content": "pdf:clean(${1:\\$doc as node()?}, ${2:\\$toc as element()?})", "description": "($doc,$toc)", "trigger": "pdf:clean"}, {"content": "pdf:get-toc(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "pdf:get-toc"}, {"content": "pdf:insert-toc-headers(${1:\\$doc as node()?}, ${2:\\$toc as element()?})", "description": "($doc,$toc)", "trigger": "pdf:insert-toc-headers"}, {"content": "pdf:make-toc(${1:\\$toc as element()?})", "description": "($toc)", "trigger": "pdf:make-toc"}, {"content": "pkg:create(${1:\\$pkgname as xs:string})", "description": "($pkgname)", "trigger": "pkg:create"}, {"content": "pkg:create(${1:\\$pkgname as xs:string}, ${2:\\$pkgbody as node()})", "description": "($pkgname,$pkgbody)", "trigger": "pkg:create"}, {"content": "pkg:database-configuration(${1:\\$database as xs:string})", "description": "($database)", "trigger": "pkg:database-configuration"}, {"content": "pkg:delete(${1:\\$pkgname as xs:string})", "description": "($pkgname)", "trigger": "pkg:delete"}, {"content": "pkg:differences(${1:\\$pkgname as xs:string})", "description": "($pkgname)", "trigger": "pkg:differences"}, {"content": "pkg:differences(${1:\\$pkgname as xs:string}, ${2:\\$only-diffs as xs:boolean})", "description": "($pkgname,$only-diffs)", "trigger": "pkg:differences"}, {"content": "pkg:errors(${1:\\$pkgname as xs:string})", "description": "($pkgname)", "trigger": "pkg:errors"}, {"content": "pkg:exists(${1:\\$pkgname as xs:string})", "description": "($pkgname)", "trigger": "pkg:exists"}, {"content": "pkg:get-database(${1:\\$pkgname as xs:string}, ${2:\\$database as xs:string})", "description": "($pkgname,$database)", "trigger": "pkg:get-database"}, {"content": "pkg:get-database-list(${1:\\$pkgname as xs:string})", "description": "($pkgname)", "trigger": "pkg:get-database-list"}, {"content": "pkg:get-database-list(${1:\\$pkgname as xs:string}, ${2:\\$start as xs:unsignedLong})", "description": "($pkgname,$start)", "trigger": "pkg:get-database-list"}, {"content": "pkg:get-database-list(${1:\\$pkgname as xs:string}, ${2:\\$start as xs:unsignedLong}, ${3:\\$pageLength as xs:unsignedLong})", "description": "($pkgname,$start,$pageLength)", "trigger": "pkg:get-database-list"}, {"content": "pkg:get-modules(${1:\\$pkgname as xs:string}, ${2:\\$group as xs:string}, ${3:\\$server as xs:string})", "description": "($pkgname,$group,$server)", "trigger": "pkg:get-modules"}, {"content": "pkg:get-package(${1:\\$pkgname as xs:string})", "description": "($pkgname)", "trigger": "pkg:get-package"}, {"content": "pkg:get-package(${1:\\$pkgname as xs:string}, ${2:\\$mimetype as xs:string?})", "description": "($pkgname,$mimetype)", "trigger": "pkg:get-package"}, {"content": "pkg:get-package-list(${1:\\$start as xs:unsignedLong})", "description": "($start)", "trigger": "pkg:get-package-list"}, {"content": "pkg:get-package-list(${1:\\$start as xs:unsignedLong}, ${2:\\$pageLength as xs:unsignedLong})", "description": "($start,$pageLength)", "trigger": "pkg:get-package-list"}, {"content": "pkg:get-package-list()", "trigger": "pkg:get-package-list"}, {"content": "pkg:get-server(${1:\\$pkgname as xs:string}, ${2:\\$group as xs:string}, ${3:\\$server as xs:string})", "description": "($pkgname,$group,$server)", "trigger": "pkg:get-server"}, {"content": "pkg:get-server-list(${1:\\$pkgname as xs:string})", "description": "($pkgname)", "trigger": "pkg:get-server-list"}, {"content": "pkg:get-server-list(${1:\\$pkgname as xs:string}, ${2:\\$start as xs:unsignedLong})", "description": "($pkgname,$start)", "trigger": "pkg:get-server-list"}, {"content": "pkg:get-server-list(${1:\\$pkgname as xs:string}, ${2:\\$start as xs:unsignedLong}, ${3:\\$pageLength as xs:unsignedLong})", "description": "($pkgname,$start,$pageLength)", "trigger": "pkg:get-server-list"}, {"content": "pkg:install(${1:\\$pkgname as xs:string})", "description": "($pkgname)", "trigger": "pkg:install"}, {"content": "pkg:installable(${1:\\$pkgname as xs:string})", "description": "($pkgname)", "trigger": "pkg:installable"}, {"content": "pkg:put-database(${1:\\$pkgname as xs:string}, ${2:\\$dbxml as element(db:package-database)})", "description": "($pkgname,$dbxml)", "trigger": "pkg:put-database"}, {"content": "pkg:put-modules(${1:\\$pkgname as xs:string}, ${2:\\$group as xs:string}, ${3:\\$server as xs:string})", "description": "($pkgname,$group,$server)", "trigger": "pkg:put-modules"}, {"content": "pkg:put-server(${1:\\$pkgname as xs:string}, ${2:\\$srvxml as element()})", "description": "($pkgname,$srvxml)", "trigger": "pkg:put-server"}, {"content": "pkg:remove-database(${1:\\$pkgname as xs:string}, ${2:\\$database as xs:string})", "description": "($pkgname,$database)", "trigger": "pkg:remove-database"}, {"content": "pkg:remove-modules(${1:\\$pkgname as xs:string}, ${2:\\$group as xs:string}, ${3:\\$server as xs:string})", "description": "($pkgname,$group,$server)", "trigger": "pkg:remove-modules"}, {"content": "pkg:remove-server(${1:\\$pkgname as xs:string}, ${2:\\$group as xs:string}, ${3:\\$server as xs:string})", "description": "($pkgname,$group,$server)", "trigger": "pkg:remove-server"}, {"content": "pkg:revert(${1:\\$ticket-id as xs:string})", "description": "($ticket-id)", "trigger": "pkg:revert"}, {"content": "pkg:server-configuration(${1:\\$group as xs:string}, ${2:\\$server as xs:string})", "description": "($group,$server)", "trigger": "pkg:server-configuration"}, {"content": "pkg:server-configuration(${1:\\$group as xs:string}, ${2:\\$server as xs:string}, ${3:\\$include-modules as xs:boolean})", "description": "($group,$server,$include-modules)", "trigger": "pkg:server-configuration"}, {"content": "pkg:valid(${1:\\$pkgname as xs:string})", "description": "($pkgname)", "trigger": "pkg:valid"}, {"content": "pki:create-template(${1:\\$name as xs:string}, ${2:\\$description as xs:string}, ${3:\\$key-type as xs:string?}, ${4:\\$key-options as element()?}, ${5:\\$csr as element(x509:req)})", "description": "($name,$description,$key-type,$key-options,$csr)", "trigger": "pki:create-template"}, {"content": "pki:delete-certificate(${1:\\$certificate-id as xs:unsignedLong})", "description": "($certificate-id)", "trigger": "pki:delete-certificate"}, {"content": "pki:delete-template(${1:\\$template-id as xs:unsignedLong})", "description": "($template-id)", "trigger": "pki:delete-template"}, {"content": "pki:generate-certificate-request(${1:\\$template-id as xs:unsignedLong}, ${2:\\$common-name as xs:string}, ${3:\\$dns-name as xs:string?}, ${4:\\$ip-addr as xs:string?})", "description": "($template-id,$common-name,$dns-name,$ip-addr)", "trigger": "pki:generate-certificate-request"}, {"content": "pki:generate-template-certificate-authority(${1:\\$template-id as xs:unsignedLong}, ${2:\\$valid-for as xs:unsignedInt})", "description": "($template-id,$valid-for)", "trigger": "pki:generate-template-certificate-authority"}, {"content": "pki:generate-temporary-certificate(${1:\\$template-id as xs:unsignedLong}, ${2:\\$valid-for as xs:unsignedInt}, ${3:\\$common-name as xs:string}, ${4:\\$dns-name as xs:string?}, ${5:\\$ip-addr as xs:string?})", "description": "($template-id,$valid-for,$common-name,$dns-name,$ip-addr)", "trigger": "pki:generate-temporary-certificate"}, {"content": "pki:generate-temporary-certificate-if-necessary(${1:\\$template-id as xs:unsignedLong}, ${2:\\$valid-for as xs:unsignedInt}, ${3:\\$common-name as xs:string}, ${4:\\$dns-name as xs:string?}, ${5:\\$ip-addr as xs:string?})", "description": "($template-id,$valid-for,$common-name,$dns-name,$ip-addr)", "trigger": "pki:generate-temporary-certificate-if-necessary"}, {"content": "pki:get-certificate(${1:\\$template-id as xs:unsignedLong}, ${2:\\$common-name as xs:string}, ${3:\\$dns-name as xs:string?}, ${4:\\$ip-addr as xs:string?})", "description": "($template-id,$common-name,$dns-name,$ip-addr)", "trigger": "pki:get-certificate"}, {"content": "pki:get-certificate-pem(${1:\\$template-id as xs:unsignedLong}, ${2:\\$hostname as xs:string})", "description": "($template-id,$hostname)", "trigger": "pki:get-certificate-pem"}, {"content": "pki:get-certificate-xml(${1:\\$template-id as xs:unsignedLong}, ${2:\\$hostname as xs:string})", "description": "($template-id,$hostname)", "trigger": "pki:get-certificate-xml"}, {"content": "pki:get-certificates(${1:\\$cert-id as xs:unsignedLong*})", "description": "($cert-id)", "trigger": "pki:get-certificates"}, {"content": "pki:get-certificates-for-template(${1:\\$template-id as xs:unsignedLong})", "description": "($template-id)", "trigger": "pki:get-certificates-for-template"}, {"content": "pki:get-certificates-for-template-xml(${1:\\$template-id as xs:unsignedLong})", "description": "($template-id)", "trigger": "pki:get-certificates-for-template-xml"}, {"content": "pki:get-pending-certificate-request(${1:\\$template-id as xs:unsignedLong}, ${2:\\$common-name as xs:string}, ${3:\\$dns-name as xs:string?}, ${4:\\$ip-addr as xs:string?})", "description": "($template-id,$common-name,$dns-name,$ip-addr)", "trigger": "pki:get-pending-certificate-request"}, {"content": "pki:get-pending-certificate-requests-pem(${1:\\$template-id as xs:unsignedLong})", "description": "($template-id)", "trigger": "pki:get-pending-certificate-requests-pem"}, {"content": "pki:get-pending-certificate-requests-xml(${1:\\$template-id as xs:unsignedLong})", "description": "($template-id)", "trigger": "pki:get-pending-certificate-requests-xml"}, {"content": "pki:get-template(${1:\\$template-id as xs:unsignedLong*})", "description": "($template-id)", "trigger": "pki:get-template"}, {"content": "pki:get-template-by-name(${1:\\$template-name as xs:string})", "description": "($template-name)", "trigger": "pki:get-template-by-name"}, {"content": "pki:get-template-certificate-authority(${1:\\$template-id as xs:unsignedLong})", "description": "($template-id)", "trigger": "pki:get-template-certificate-authority"}, {"content": "pki:get-template-ids()", "trigger": "pki:get-template-ids"}, {"content": "pki:get-trusted-certificate-ids()", "trigger": "pki:get-trusted-certificate-ids"}, {"content": "pki:insert-certificate-revocation-list(${1:\\$url as xs:string}, ${2:\\$crl as item()})", "description": "($url,$crl)", "trigger": "pki:insert-certificate-revocation-list"}, {"content": "pki:insert-host-certificate(${1:\\$template-id as xs:unsignedLong}, ${2:\\$certs as xs:string}, ${3:\\$pkey as xs:string})", "description": "($template-id,$certs,$pkey)", "trigger": "pki:insert-host-certificate"}, {"content": "pki:insert-signed-certificates(${1:\\$certs as xs:string})", "description": "($certs)", "trigger": "pki:insert-signed-certificates"}, {"content": "pki:insert-template(${1:\\$template as element(pki:template)})", "description": "($template)", "trigger": "pki:insert-template"}, {"content": "pki:insert-trusted-certificates(${1:\\$certs as xs:string})", "description": "($certs)", "trigger": "pki:insert-trusted-certificates"}, {"content": "pki:is-temporary(${1:\\$cert as element(pki:certificate)})", "description": "($cert)", "trigger": "pki:is-temporary"}, {"content": "pki:need-certificate(${1:\\$template-id as xs:unsignedLong}, ${2:\\$common-name as xs:string}, ${3:\\$dns-name as xs:string?}, ${4:\\$ip-addr as xs:string?})", "description": "($template-id,$common-name,$dns-name,$ip-addr)", "trigger": "pki:need-certificate"}, {"content": "pki:template-get-description(${1:\\$template as element(pki:template)})", "description": "($template)", "trigger": "pki:template-get-description"}, {"content": "pki:template-get-id(${1:\\$template as element(pki:template)})", "description": "($template)", "trigger": "pki:template-get-id"}, {"content": "pki:template-get-key-options(${1:\\$template as element(pki:template)})", "description": "($template)", "trigger": "pki:template-get-key-options"}, {"content": "pki:template-get-key-type(${1:\\$template as element(pki:template)})", "description": "($template)", "trigger": "pki:template-get-key-type"}, {"content": "pki:template-get-name(${1:\\$template as element(pki:template)})", "description": "($template)", "trigger": "pki:template-get-name"}, {"content": "pki:template-get-request(${1:\\$template as element(pki:template)})", "description": "($template)", "trigger": "pki:template-get-request"}, {"content": "pki:template-get-version(${1:\\$template as element(pki:template)})", "description": "($template)", "trigger": "pki:template-get-version"}, {"content": "pki:template-in-use(${1:\\$template-id as xs:unsignedLong})", "description": "($template-id)", "trigger": "pki:template-in-use"}, {"content": "pki:template-set-description(${1:\\$template as element(pki:template)}, ${2:\\$description as xs:string})", "description": "($template,$description)", "trigger": "pki:template-set-description"}, {"content": "pki:template-set-key-options(${1:\\$template as element(pki:template)}, ${2:\\$key-options as element(pki:key-options)})", "description": "($template,$key-options)", "trigger": "pki:template-set-key-options"}, {"content": "pki:template-set-key-type(${1:\\$template as element(pki:template)}, ${2:\\$key-type as xs:string})", "description": "($template,$key-type)", "trigger": "pki:template-set-key-type"}, {"content": "pki:template-set-name(${1:\\$template as element(pki:template)}, ${2:\\$name as xs:string})", "description": "($template,$name)", "trigger": "pki:template-set-name"}, {"content": "pki:template-set-request(${1:\\$template as element(pki:template)}, ${2:\\$req as element(x509:req)})", "description": "($template,$req)", "trigger": "pki:template-set-request"}, {"content": "plugin:asset(${1:\\$pid as xs:string}, ${2:\\$scope as xs:string}, ${3:\\$asset-path as xs:string})", "description": "($pid,$scope,$asset-path)", "trigger": "plugin:asset"}, {"content": "plugin:asset-exists(${1:\\$pid as xs:string}, ${2:\\$scope as xs:string}, ${3:\\$asset-path as xs:string})", "description": "($pid,$scope,$asset-path)", "trigger": "plugin:asset-exists"}, {"content": "plugin:capability(${1:\\$capability as xs:string}, ${2:\\$uri as xs:string})", "description": "($capability,$uri)", "trigger": "plugin:capability"}, {"content": "plugin:capability(${1:\\$capability as xs:string}, ${2:\\$uri as xs:string}, ${3:\\$scope as xs:string})", "description": "($capability,$uri,$scope)", "trigger": "plugin:capability"}, {"content": "plugin:enumerate(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "plugin:enumerate"}, {"content": "plugin:enumerate(${1:\\$uri as xs:string}, ${2:\\$scope as xs:string})", "description": "($uri,$scope)", "trigger": "plugin:enumerate"}, {"content": "plugin:flush-scope(${1:\\$scope as xs:string})", "description": "($scope)", "trigger": "plugin:flush-scope"}, {"content": "plugin:flush-scope(${1:\\$scope as xs:string}, ${2:\\$pid as xs:string?})", "description": "($scope,$pid)", "trigger": "plugin:flush-scope"}, {"content": "plugin:implementations(${1:\\$capability as xs:string})", "description": "($capability)", "trigger": "plugin:implementations"}, {"content": "plugin:implementations(${1:\\$capability as xs:string}, ${2:\\$scope as xs:string})", "description": "($capability,$scope)", "trigger": "plugin:implementations"}, {"content": "plugin:initialize-scope(${1:\\$scope as xs:string})", "description": "($scope)", "trigger": "plugin:initialize-scope"}, {"content": "plugin:install-from-filesystem(${1:\\$scope as xs:string})", "description": "($scope)", "trigger": "plugin:install-from-filesystem"}, {"content": "plugin:install-from-zip(${1:\\$scope as xs:string}, ${2:\\$zip as binary()})", "description": "($scope,$zip)", "trigger": "plugin:install-from-zip"}, {"content": "plugin:plugins(${1:\\$capability as xs:string*})", "description": "($capability)", "trigger": "plugin:plugins"}, {"content": "plugin:plugins(${1:\\$capability as xs:string*}, ${2:\\$scope as xs:string})", "description": "($capability,$scope)", "trigger": "plugin:plugins"}, {"content": "plugin:register(${1:\\$capabilities as map:map}, ${2:\\$plugin-uri as xs:string})", "description": "($capabilities,$plugin-uri)", "trigger": "plugin:register"}, {"content": "plugin:uninstall(${1:\\$scope as xs:string}, ${2:\\$pid as xs:string?})", "description": "($scope,$pid)", "trigger": "plugin:uninstall"}, {"content": "ppt:clean(${1:\\$uri as xs:string}, ${2:\\$doc as node()?})", "description": "($uri,$doc)", "trigger": "ppt:clean"}, {"content": "prof:allowed(${1:\\$request-id as xs:unsignedLong})", "description": "($request-id)", "trigger": "prof:allowed"}, {"content": "prof:disable(${1:\\$request-id as xs:unsignedLong})", "description": "($request-id)", "trigger": "prof:disable"}, {"content": "prof:enable(${1:\\$request-id as xs:unsignedLong})", "description": "($request-id)", "trigger": "prof:enable"}, {"content": "prof:eval(${1:\\$xquery as xs:string})", "description": "($xquery)", "trigger": "prof:eval"}, {"content": "prof:eval(${1:\\$xquery as xs:string}, ${2:\\$vars as item()*})", "description": "($xquery,$vars)", "trigger": "prof:eval"}, {"content": "prof:eval(${1:\\$xquery as xs:string}, ${2:\\$vars as item()*}, ${3:\\$options as node()?})", "description": "($xquery,$vars,$options)", "trigger": "prof:eval"}, {"content": "prof:invoke(${1:\\$path as xs:string})", "description": "($path)", "trigger": "prof:invoke"}, {"content": "prof:invoke(${1:\\$path as xs:string}, ${2:\\$vars as item()*})", "description": "($path,$vars)", "trigger": "prof:invoke"}, {"content": "prof:invoke(${1:\\$path as xs:string}, ${2:\\$vars as item()*}, ${3:\\$options as node()?})", "description": "($path,$vars,$options)", "trigger": "prof:invoke"}, {"content": "prof:report(${1:\\$request-id as xs:unsignedLong})", "description": "($request-id)", "trigger": "prof:report"}, {"content": "prof:reset(${1:\\$request-id as xs:unsignedLong})", "description": "($request-id)", "trigger": "prof:reset"}, {"content": "prof:value(${1:\\$expr as xs:string})", "description": "($expr)", "trigger": "prof:value"}, {"content": "prof:xslt-eval(${1:\\$stylesheet as element()}, ${2:\\$input as node()?})", "description": "($stylesheet,$input)", "trigger": "prof:xslt-eval"}, {"content": "prof:xslt-eval(${1:\\$stylesheet as element()}, ${2:\\$input as node()?}, ${3:\\$params as map:map?})", "description": "($stylesheet,$input,$params)", "trigger": "prof:xslt-eval"}, {"content": "prof:xslt-eval(${1:\\$stylesheet as element()}, ${2:\\$input as node()?}, ${3:\\$params as map:map?}, ${4:\\$options as node()?})", "description": "($stylesheet,$input,$params,$options)", "trigger": "prof:xslt-eval"}, {"content": "prof:xslt-invoke(${1:\\$path as xs:string}, ${2:\\$input as node()?})", "description": "($path,$input)", "trigger": "prof:xslt-invoke"}, {"content": "prof:xslt-invoke(${1:\\$path as xs:string}, ${2:\\$input as node()?}, ${3:\\$params as map:map?})", "description": "($path,$input,$params)", "trigger": "prof:xslt-invoke"}, {"content": "prof:xslt-invoke(${1:\\$path as xs:string}, ${2:\\$input as node()?}, ${3:\\$params as map:map?}, ${4:\\$options as node()?})", "description": "($path,$input,$params,$options)", "trigger": "prof:xslt-invoke"}, {"content": "rdf:langString(${1:\\$string as xs:string}, ${2:\\$lang as xs:string})", "description": "($string,$lang)", "trigger": "rdf:langString"}, {"content": "rdf:langString-language(${1:\\$val as sem:unknown})", "description": "($val)", "trigger": "rdf:langString-language"}, {"content": "rest:check-options(${1:\\$options as element(rest:options)})", "description": "($options)", "trigger": "rest:check-options"}, {"content": "rest:check-request(${1:\\$options as element(rest:request)})", "description": "($options)", "trigger": "rest:check-request"}, {"content": "rest:get-raw-query-params()", "trigger": "rest:get-raw-query-params"}, {"content": "rest:matching-request(${1:\\$options as element(rest:options)}, ${2:\\$match-criteria as xs:string+})", "description": "($options,$match-criteria)", "trigger": "rest:matching-request"}, {"content": "rest:process-request(${1:\\$request as element(rest:request)})", "description": "($request)", "trigger": "rest:process-request"}, {"content": "rest:report-error(${1:\\$error as element()})", "description": "($error)", "trigger": "rest:report-error"}, {"content": "rest:rewrite(${1:\\$options as element(rest:options)}, ${2:\\$match-criteria as xs:string+})", "description": "($options,$match-criteria)", "trigger": "rest:rewrite"}, {"content": "sc:annotations(${1:\\$arg as schema-component()})", "description": "($arg)", "trigger": "sc:annotations"}, {"content": "sc:annotations()", "trigger": "sc:annotations"}, {"content": "sc:attribute-decl(${1:\\$arg as item()})", "description": "($arg)", "trigger": "sc:attribute-decl"}, {"content": "sc:attribute-decl()", "trigger": "sc:attribute-decl"}, {"content": "sc:attributes(${1:\\$arg as schema-component()})", "description": "($arg)", "trigger": "sc:attributes"}, {"content": "sc:attributes()", "trigger": "sc:attributes"}, {"content": "sc:canonical-path(${1:\\$arg as schema-component()})", "description": "($arg)", "trigger": "sc:canonical-path"}, {"content": "sc:canonical-path()", "trigger": "sc:canonical-path"}, {"content": "sc:complex-type(${1:\\$arg as item()})", "description": "($arg)", "trigger": "sc:complex-type"}, {"content": "sc:complex-type()", "trigger": "sc:complex-type"}, {"content": "sc:component-property(${1:\\$propname as xs:string})", "description": "($propname)", "trigger": "sc:component-property"}, {"content": "sc:component-property(${1:\\$propname as xs:string}, ${2:\\$arg as schema-component()})", "description": "($propname,$arg)", "trigger": "sc:component-property"}, {"content": "sc:element-decl(${1:\\$arg as item()})", "description": "($arg)", "trigger": "sc:element-decl"}, {"content": "sc:element-decl()", "trigger": "sc:element-decl"}, {"content": "sc:facets(${1:\\$arg as schema-component()})", "description": "($arg)", "trigger": "sc:facets"}, {"content": "sc:facets()", "trigger": "sc:facets"}, {"content": "sc:function-parameter-type(${1:\\$arg as function(*)}, ${2:\\$param as xs:integer})", "description": "($arg,$param)", "trigger": "sc:function-parameter-type"}, {"content": "sc:function-return-type(${1:\\$arg as function(*)})", "description": "($arg)", "trigger": "sc:function-return-type"}, {"content": "sc:function-return-type()", "trigger": "sc:function-return-type"}, {"content": "sc:name(${1:\\$arg as schema-component()})", "description": "($arg)", "trigger": "sc:name"}, {"content": "sc:name()", "trigger": "sc:name"}, {"content": "sc:particles(${1:\\$arg as schema-component()})", "description": "($arg)", "trigger": "sc:particles"}, {"content": "sc:particles()", "trigger": "sc:particles"}, {"content": "sc:schema(${1:\\$arg as item()})", "description": "($arg)", "trigger": "sc:schema"}, {"content": "sc:schema()", "trigger": "sc:schema"}, {"content": "sc:schema-from-path(${1:\\$namespace as xs:string})", "description": "($namespace)", "trigger": "sc:schema-from-path"}, {"content": "sc:schema-from-path(${1:\\$namespace as xs:string}, ${2:\\$location as xs:string})", "description": "($namespace,$location)", "trigger": "sc:schema-from-path"}, {"content": "sc:simple-type(${1:\\$arg as item()})", "description": "($arg)", "trigger": "sc:simple-type"}, {"content": "sc:simple-type()", "trigger": "sc:simple-type"}, {"content": "sc:type(${1:\\$arg as item()})", "description": "($arg)", "trigger": "sc:type"}, {"content": "sc:type()", "trigger": "sc:type"}, {"content": "sc:type-apply(${1:\\$type as schema-type()}, ${2:\\$arg as item()*})", "description": "($type,$arg)", "trigger": "sc:type-apply"}, {"content": "sc:type-named(${1:\\$arg as xs:QName})", "description": "($arg)", "trigger": "sc:type-named"}, {"content": "sc:type-named()", "trigger": "sc:type-named"}, {"content": "search:check-options(${1:\\$options as element(search:options)})", "description": "($options)", "trigger": "search:check-options"}, {"content": "search:check-options(${1:\\$options as element(search:options)}, ${2:\\$strict as xs:boolean?})", "description": "($options,$strict)", "trigger": "search:check-options"}, {"content": "search:estimate(${1:\\$cts-query as element()})", "description": "($cts-query)", "trigger": "search:estimate"}, {"content": "search:estimate(${1:\\$cts-query as element()}, ${2:\\$options as element(search:options)?})", "description": "($cts-query,$options)", "trigger": "search:estimate"}, {"content": "search:get-default-options()", "trigger": "search:get-default-options"}, {"content": "search:parse(${1:\\$qtext as xs:string+})", "description": "($qtext)", "trigger": "search:parse"}, {"content": "search:parse(${1:\\$qtext as xs:string+}, ${2:\\$options as element(search:options)?})", "description": "($qtext,$options)", "trigger": "search:parse"}, {"content": "search:parse(${1:\\$qtext as xs:string+}, ${2:\\$options as element(search:options)?}, ${3:\\$output as xs:string?})", "description": "($qtext,$options,$output)", "trigger": "search:parse"}, {"content": "search:remove-constraint(${1:\\$qtext as xs:string}, ${2:\\$ptext as xs:string}, ${3:\\$options as element(search:options)?})", "description": "($qtext,$ptext,$options)", "trigger": "search:remove-constraint"}, {"content": "search:resolve(${1:\\$query as element()})", "description": "($query)", "trigger": "search:resolve"}, {"content": "search:resolve(${1:\\$query as element()}, ${2:\\$options as element(search:options)?})", "description": "($query,$options)", "trigger": "search:resolve"}, {"content": "search:resolve(${1:\\$query as element()}, ${2:\\$options as element(search:options)?}, ${3:\\$start as xs:unsignedLong?})", "description": "($query,$options,$start)", "trigger": "search:resolve"}, {"content": "search:resolve(${1:\\$query as element()}, ${2:\\$options as element(search:options)?}, ${3:\\$start as xs:unsignedLong?}, ${4:\\$page-length as xs:unsignedLong?})", "description": "($query,$options,$start,$page-length)", "trigger": "search:resolve"}, {"content": "search:resolve-nodes(${1:\\$query as element()})", "description": "($query)", "trigger": "search:resolve-nodes"}, {"content": "search:resolve-nodes(${1:\\$query as element()}, ${2:\\$options as element(search:options)?})", "description": "($query,$options)", "trigger": "search:resolve-nodes"}, {"content": "search:resolve-nodes(${1:\\$query as element()}, ${2:\\$options as element(search:options)?}, ${3:\\$start as xs:unsignedLong?})", "description": "($query,$options,$start)", "trigger": "search:resolve-nodes"}, {"content": "search:resolve-nodes(${1:\\$query as element()}, ${2:\\$options as element(search:options)?}, ${3:\\$start as xs:unsignedLong?}, ${4:\\$page-length as xs:unsignedLong?})", "description": "($query,$options,$start,$page-length)", "trigger": "search:resolve-nodes"}, {"content": "search:search(${1:\\$qtext as xs:string+})", "description": "($qtext)", "trigger": "search:search"}, {"content": "search:search(${1:\\$qtext as xs:string+}, ${2:\\$options as element(search:options)?})", "description": "($qtext,$options)", "trigger": "search:search"}, {"content": "search:search(${1:\\$qtext as xs:string+}, ${2:\\$options as element(search:options)?}, ${3:\\$start as xs:unsignedLong?})", "description": "($qtext,$options,$start)", "trigger": "search:search"}, {"content": "search:search(${1:\\$qtext as xs:string+}, ${2:\\$options as element(search:options)?}, ${3:\\$start as xs:unsignedLong?}, ${4:\\$page-length as xs:unsignedLong?})", "description": "($qtext,$options,$start,$page-length)", "trigger": "search:search"}, {"content": "search:snippet(${1:\\$result as node()}, ${2:\\$cts-query as schema-element(cts:query)})", "description": "($result,$cts-query)", "trigger": "search:snippet"}, {"content": "search:snippet(${1:\\$result as node()}, ${2:\\$cts-query as schema-element(cts:query)}, ${3:\\$options as element(search:transform-results)?})", "description": "($result,$cts-query,$options)", "trigger": "search:snippet"}, {"content": "search:suggest(${1:\\$qtext as xs:string+})", "description": "($qtext)", "trigger": "search:suggest"}, {"content": "search:suggest(${1:\\$qtext as xs:string+}, ${2:\\$options as element(search:options)?})", "description": "($qtext,$options)", "trigger": "search:suggest"}, {"content": "search:suggest(${1:\\$qtext as xs:string+}, ${2:\\$options as element(search:options)?}, ${3:\\$limit as xs:unsignedInt?})", "description": "($qtext,$options,$limit)", "trigger": "search:suggest"}, {"content": "search:suggest(${1:\\$qtext as xs:string+}, ${2:\\$options as element(search:options)?}, ${3:\\$limit as xs:unsignedInt?}, ${4:\\$cursor-position as xs:unsignedInt?})", "description": "($qtext,$options,$limit,$cursor-position)", "trigger": "search:suggest"}, {"content": "search:suggest(${1:\\$qtext as xs:string+}, ${2:\\$options as element(search:options)?}, ${3:\\$limit as xs:unsignedInt?}, ${4:\\$cursor-position as xs:unsignedInt?}, ${5:\\$focus as xs:positiveInteger?})", "description": "($qtext,$options,$limit,$cursor-position,$focus)", "trigger": "search:suggest"}, {"content": "search:suggest(${1:\\$qtext as xs:string+}, ${2:\\$options as element(search:options)?}, ${3:\\$limit as xs:unsignedInt?}, ${4:\\$cursor-position as xs:unsignedInt?}, ${5:\\$focus as xs:positiveInteger?}, ${6:\\$query as element(search:query)*})", "description": "($qtext,$options,$limit,$cursor-position,$focus,$query)", "trigger": "search:suggest"}, {"content": "search:unparse(${1:\\$qtree as element()})", "description": "($qtree)", "trigger": "search:unparse"}, {"content": "search:values(${1:\\$spec-name as xs:string}, ${2:\\$options as element(search:options)})", "description": "($spec-name,$options)", "trigger": "search:values"}, {"content": "search:values(${1:\\$spec-name as xs:string}, ${2:\\$options as element(search:options)}, ${3:\\$query as element(search:query)?})", "description": "($spec-name,$options,$query)", "trigger": "search:values"}, {"content": "search:values(${1:\\$spec-name as xs:string}, ${2:\\$options as element(search:options)}, ${3:\\$query as element(search:query)?}, ${4:\\$limit as xs:unsignedLong?})", "description": "($spec-name,$options,$query,$limit)", "trigger": "search:values"}, {"content": "search:values(${1:\\$spec-name as xs:string}, ${2:\\$options as element(search:options)}, ${3:\\$query as element(search:query)?}, ${4:\\$limit as xs:unsignedLong?}, ${5:\\$start as xs:anyAtomicType?})", "description": "($spec-name,$options,$query,$limit,$start)", "trigger": "search:values"}, {"content": "search:values(${1:\\$spec-name as xs:string}, ${2:\\$options as element(search:options)}, ${3:\\$query as element(search:query)?}, ${4:\\$limit as xs:unsignedLong?}, ${5:\\$start as xs:anyAtomicType?}, ${6:\\$page-start as xs:unsignedLong?})", "description": "($spec-name,$options,$query,$limit,$start,$page-start)", "trigger": "search:values"}, {"content": "search:values(${1:\\$spec-name as xs:string}, ${2:\\$options as element(search:options)}, ${3:\\$query as element(search:query)?}, ${4:\\$limit as xs:unsignedLong?}, ${5:\\$start as xs:anyAtomicType?}, ${6:\\$page-start as xs:unsignedLong?}, ${7:\\$page-length as xs:unsignedLong?})", "description": "($spec-name,$options,$query,$limit,$start,$page-start,$page-length)", "trigger": "search:values"}, {"content": "sec:amp-add-roles(${1:\\$namespace as xs:string}, ${2:\\$local-name as xs:string}, ${3:\\$document-uri as xs:string}, ${4:\\$database as xs:unsignedLong}, ${5:\\$role-names as xs:string*})", "description": "($namespace,$local-name,$document-uri,$database,$role-names)", "trigger": "sec:amp-add-roles"}, {"content": "sec:amp-doc-collections()", "trigger": "sec:amp-doc-collections"}, {"content": "sec:amp-doc-permissions()", "trigger": "sec:amp-doc-permissions"}, {"content": "sec:amp-exists(${1:\\$namespace as xs:string}, ${2:\\$local-name as xs:string}, ${3:\\$document-uri as xs:string}, ${4:\\$database as xs:unsignedLong})", "description": "($namespace,$local-name,$document-uri,$database)", "trigger": "sec:amp-exists"}, {"content": "sec:amp-get-roles(${1:\\$namespace as xs:string}, ${2:\\$local-name as xs:string}, ${3:\\$document-uri as xs:string}, ${4:\\$database as xs:unsignedLong})", "description": "($namespace,$local-name,$document-uri,$database)", "trigger": "sec:amp-get-roles"}, {"content": "sec:amp-remove-roles(${1:\\$namespace as xs:string}, ${2:\\$local-name as xs:string}, ${3:\\$document-uri as xs:string}, ${4:\\$database as xs:unsignedLong}, ${5:\\$role-names as xs:string*})", "description": "($namespace,$local-name,$document-uri,$database,$role-names)", "trigger": "sec:amp-remove-roles"}, {"content": "sec:amp-set-roles(${1:\\$namespace as xs:string}, ${2:\\$local-name as xs:string}, ${3:\\$document-uri as xs:string}, ${4:\\$database as xs:unsignedLong}, ${5:\\$role-names as xs:string*})", "description": "($namespace,$local-name,$document-uri,$database,$role-names)", "trigger": "sec:amp-set-roles"}, {"content": "sec:amps-change-modules-database(${1:\\$old-db as xs:unsignedLong}, ${2:\\$new-db as xs:unsignedLong})", "description": "($old-db,$new-db)", "trigger": "sec:amps-change-modules-database"}, {"content": "sec:amps-collection()", "trigger": "sec:amps-collection"}, {"content": "sec:check-admin()", "trigger": "sec:check-admin"}, {"content": "sec:collection-add-permissions(${1:\\$uri as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "description": "($uri,$permissions)", "trigger": "sec:collection-add-permissions"}, {"content": "sec:collection-get-permissions(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "sec:collection-get-permissions"}, {"content": "sec:collection-remove-permissions(${1:\\$uri as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "description": "($uri,$permissions)", "trigger": "sec:collection-remove-permissions"}, {"content": "sec:collection-set-permissions(${1:\\$uri as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "description": "($uri,$permissions)", "trigger": "sec:collection-set-permissions"}, {"content": "sec:collections-collection()", "trigger": "sec:collections-collection"}, {"content": "sec:compartment-get-roles(${1:\\$compartment-name as xs:string})", "description": "($compartment-name)", "trigger": "sec:compartment-get-roles"}, {"content": "sec:create-amp(${1:\\$namespace as xs:string}, ${2:\\$local-name as xs:string}, ${3:\\$document-uri as xs:string}, ${4:\\$database as xs:unsignedLong}, ${5:\\$role-names as xs:string*})", "description": "($namespace,$local-name,$document-uri,$database,$role-names)", "trigger": "sec:create-amp"}, {"content": "sec:create-external-security(${1:\\$external-security-name as xs:string}, ${2:\\$description as xs:string}, ${3:\\$authentication as xs:string}, ${4:\\$cache-timeout as xs:unsignedInt}, ${5:\\$authorization as xs:string}, ${6:\\$ldap-server-uri as xs:string}, ${7:\\$ldap-base as xs:string}, ${8:\\$ldap-attribute as xs:string}, ${9:\\$ldap-default-user as xs:string}, ${10:\\$ldap-password as xs:string})", "description": "($external-security-name,$description,$authentication,$cache-timeout,$authorization,$ldap-server-uri,$ldap-base,$ldap-attribute,$ldap-default-user,$ldap-password)", "trigger": "sec:create-external-security"}, {"content": "sec:create-privilege(${1:\\$privilege-name as xs:string}, ${2:\\$action as xs:string}, ${3:\\$kind as xs:string}, ${4:\\$role-names as xs:string*})", "description": "($privilege-name,$action,$kind,$role-names)", "trigger": "sec:create-privilege"}, {"content": "sec:create-role(${1:\\$role-name as xs:string}, ${2:\\$description as xs:string?}, ${3:\\$role-names as xs:string*}, ${4:\\$permissions as element(sec:permission)*}, ${5:\\$collections as xs:string*})", "description": "($role-name,$description,$role-names,$permissions,$collections)", "trigger": "sec:create-role"}, {"content": "sec:create-role(${1:\\$role-name as xs:string}, ${2:\\$description as xs:string?}, ${3:\\$role-names as xs:string*}, ${4:\\$permissions as element(sec:permission)*}, ${5:\\$collections as xs:string*}, ${6:\\$compartment as xs:string?})", "description": "($role-name,$description,$role-names,$permissions,$collections,$compartment)", "trigger": "sec:create-role"}, {"content": "sec:create-role(${1:\\$role-name as xs:string}, ${2:\\$description as xs:string?}, ${3:\\$role-names as xs:string*}, ${4:\\$permissions as element(sec:permission)*}, ${5:\\$collections as xs:string*}, ${6:\\$compartment as xs:string?}, ${7:\\$external-names as xs:string*})", "description": "($role-name,$description,$role-names,$permissions,$collections,$compartment,$external-names)", "trigger": "sec:create-role"}, {"content": "sec:create-user(${1:\\$user-name as xs:string}, ${2:\\$description as xs:string?}, ${3:\\$password as xs:string}, ${4:\\$role-names as xs:string*}, ${5:\\$permissions as element(sec:permission)*}, ${6:\\$collections as xs:string*})", "description": "($user-name,$description,$password,$role-names,$permissions,$collections)", "trigger": "sec:create-user"}, {"content": "sec:create-user(${1:\\$user-name as xs:string}, ${2:\\$description as xs:string?}, ${3:\\$password as xs:string}, ${4:\\$role-names as xs:string*}, ${5:\\$permissions as element(sec:permission)*}, ${6:\\$collections as xs:string*}, ${7:\\$external-names as xs:string*})", "description": "($user-name,$description,$password,$role-names,$permissions,$collections,$external-names)", "trigger": "sec:create-user"}, {"content": "sec:create-user-with-role(${1:\\$user-name as xs:string}, ${2:\\$description as xs:string?}, ${3:\\$password as xs:string}, ${4:\\$role-names as xs:string*}, ${5:\\$permissions as element(sec:permission)*}, ${6:\\$collections as xs:string*}, ${7:\\$external-names as xs:string*})", "description": "($user-name,$description,$password,$role-names,$permissions,$collections,$external-names)", "trigger": "sec:create-user-with-role"}, {"content": "sec:credentials-get-aws()", "trigger": "sec:credentials-get-aws"}, {"content": "sec:credentials-set-aws(${1:\\$access-key as xs:string}, ${2:\\$secret-key as xs:string})", "description": "($access-key,$secret-key)", "trigger": "sec:credentials-set-aws"}, {"content": "sec:external-securities-collection()", "trigger": "sec:external-securities-collection"}, {"content": "sec:external-security-clear-cache(${1:\\$external-security-name as xs:string})", "description": "($external-security-name)", "trigger": "sec:external-security-clear-cache"}, {"content": "sec:external-security-doc-collections()", "trigger": "sec:external-security-doc-collections"}, {"content": "sec:external-security-doc-permissions()", "trigger": "sec:external-security-doc-permissions"}, {"content": "sec:external-security-get-authentication(${1:\\$external-security-name as xs:string})", "description": "($external-security-name)", "trigger": "sec:external-security-get-authentication"}, {"content": "sec:external-security-get-authorization(${1:\\$external-security-name as xs:string})", "description": "($external-security-name)", "trigger": "sec:external-security-get-authorization"}, {"content": "sec:external-security-get-cache-timeout(${1:\\$external-security-name as xs:string})", "description": "($external-security-name)", "trigger": "sec:external-security-get-cache-timeout"}, {"content": "sec:external-security-get-description(${1:\\$external-security-name as xs:string})", "description": "($external-security-name)", "trigger": "sec:external-security-get-description"}, {"content": "sec:external-security-get-ldap-attribute(${1:\\$external-security-name as xs:string})", "description": "($external-security-name)", "trigger": "sec:external-security-get-ldap-attribute"}, {"content": "sec:external-security-get-ldap-base(${1:\\$external-security-name as xs:string})", "description": "($external-security-name)", "trigger": "sec:external-security-get-ldap-base"}, {"content": "sec:external-security-get-ldap-default-user(${1:\\$external-security-name as xs:string})", "description": "($external-security-name)", "trigger": "sec:external-security-get-ldap-default-user"}, {"content": "sec:external-security-get-ldap-server-uri(${1:\\$external-security-name as xs:string})", "description": "($external-security-name)", "trigger": "sec:external-security-get-ldap-server-uri"}, {"content": "sec:external-security-set-authentication(${1:\\$external-security-name as xs:string}, ${2:\\$authentication as xs:string})", "description": "($external-security-name,$authentication)", "trigger": "sec:external-security-set-authentication"}, {"content": "sec:external-security-set-authorization(${1:\\$external-security-name as xs:string}, ${2:\\$authorization as xs:string})", "description": "($external-security-name,$authorization)", "trigger": "sec:external-security-set-authorization"}, {"content": "sec:external-security-set-cache-timeout(${1:\\$external-security-name as xs:string}, ${2:\\$cache-timeout as xs:unsignedInt})", "description": "($external-security-name,$cache-timeout)", "trigger": "sec:external-security-set-cache-timeout"}, {"content": "sec:external-security-set-description(${1:\\$external-security-name as xs:string}, ${2:\\$description as xs:string})", "description": "($external-security-name,$description)", "trigger": "sec:external-security-set-description"}, {"content": "sec:external-security-set-ldap-attribute(${1:\\$external-security-name as xs:string}, ${2:\\$ldap-attribute as xs:string})", "description": "($external-security-name,$ldap-attribute)", "trigger": "sec:external-security-set-ldap-attribute"}, {"content": "sec:external-security-set-ldap-base(${1:\\$external-security-name as xs:string}, ${2:\\$ldap-base as xs:string})", "description": "($external-security-name,$ldap-base)", "trigger": "sec:external-security-set-ldap-base"}, {"content": "sec:external-security-set-ldap-default-user(${1:\\$external-security-name as xs:string}, ${2:\\$ldap-default-user as xs:string})", "description": "($external-security-name,$ldap-default-user)", "trigger": "sec:external-security-set-ldap-default-user"}, {"content": "sec:external-security-set-ldap-password(${1:\\$external-security-name as xs:string}, ${2:\\$ldap-password as xs:string})", "description": "($external-security-name,$ldap-password)", "trigger": "sec:external-security-set-ldap-password"}, {"content": "sec:external-security-set-ldap-server-uri(${1:\\$external-security-name as xs:string}, ${2:\\$ldap-server-uri as xs:string})", "description": "($external-security-name,$ldap-server-uri)", "trigger": "sec:external-security-set-ldap-server-uri"}, {"content": "sec:external-security-set-name(${1:\\$external-security-name as xs:string}, ${2:\\$new-external-security-name as xs:string})", "description": "($external-security-name,$new-external-security-name)", "trigger": "sec:external-security-set-name"}, {"content": "sec:get-amp(${1:\\$namespace as xs:string}, ${2:\\$local-name as xs:string}, ${3:\\$document-uri as xs:string}, ${4:\\$database as xs:unsignedLong})", "description": "($namespace,$local-name,$document-uri,$database)", "trigger": "sec:get-amp"}, {"content": "sec:get-collection(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "sec:get-collection"}, {"content": "sec:get-compartments()", "trigger": "sec:get-compartments"}, {"content": "sec:get-distinct-permissions(${1:\\$input-perms as element(sec:permission)*}, ${2:\\$output-perms as element(sec:permission)*})", "description": "($input-perms,$output-perms)", "trigger": "sec:get-distinct-permissions"}, {"content": "sec:get-privilege(${1:\\$action as xs:string}, ${2:\\$kind as xs:string})", "description": "($action,$kind)", "trigger": "sec:get-privilege"}, {"content": "sec:get-role-ids(${1:\\$role-names as xs:string*})", "description": "($role-names)", "trigger": "sec:get-role-ids"}, {"content": "sec:get-role-ids()", "trigger": "sec:get-role-ids"}, {"content": "sec:get-role-names(${1:\\$role-ids as xs:unsignedLong*})", "description": "($role-ids)", "trigger": "sec:get-role-names"}, {"content": "sec:get-user-names(${1:\\$user-ids as xs:unsignedLong*})", "description": "($user-ids)", "trigger": "sec:get-user-names"}, {"content": "sec:priv-doc-collections()", "trigger": "sec:priv-doc-collections"}, {"content": "sec:priv-doc-permissions()", "trigger": "sec:priv-doc-permissions"}, {"content": "sec:privilege-add-roles(${1:\\$action as xs:string}, ${2:\\$kind as xs:string}, ${3:\\$role-names as xs:string*})", "description": "($action,$kind,$role-names)", "trigger": "sec:privilege-add-roles"}, {"content": "sec:privilege-exists(${1:\\$action as xs:string}, ${2:\\$kind as xs:string})", "description": "($action,$kind)", "trigger": "sec:privilege-exists"}, {"content": "sec:privilege-get-roles(${1:\\$action as xs:string}, ${2:\\$kind as xs:string})", "description": "($action,$kind)", "trigger": "sec:privilege-get-roles"}, {"content": "sec:privilege-remove-roles(${1:\\$action as xs:string}, ${2:\\$kind as xs:string}, ${3:\\$role-names as xs:string*})", "description": "($action,$kind,$role-names)", "trigger": "sec:privilege-remove-roles"}, {"content": "sec:privilege-set-name(${1:\\$action as xs:string}, ${2:\\$kind as xs:string}, ${3:\\$new-privilege-name as xs:string})", "description": "($action,$kind,$new-privilege-name)", "trigger": "sec:privilege-set-name"}, {"content": "sec:privilege-set-roles(${1:\\$action as xs:string}, ${2:\\$kind as xs:string}, ${3:\\$role-names as xs:string*})", "description": "($action,$kind,$role-names)", "trigger": "sec:privilege-set-roles"}, {"content": "sec:privileges-collection()", "trigger": "sec:privileges-collection"}, {"content": "sec:protect-collection(${1:\\$uri as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "description": "($uri,$permissions)", "trigger": "sec:protect-collection"}, {"content": "sec:remove-amp(${1:\\$namespace as xs:string}, ${2:\\$local-name as xs:string}, ${3:\\$document-uri as xs:string}, ${4:\\$database as xs:unsignedLong})", "description": "($namespace,$local-name,$document-uri,$database)", "trigger": "sec:remove-amp"}, {"content": "sec:remove-external-security(${1:\\$external-security-name as xs:string})", "description": "($external-security-name)", "trigger": "sec:remove-external-security"}, {"content": "sec:remove-privilege(${1:\\$action as xs:string}, ${2:\\$kind as xs:string})", "description": "($action,$kind)", "trigger": "sec:remove-privilege"}, {"content": "sec:remove-role(${1:\\$role-name as xs:string})", "description": "($role-name)", "trigger": "sec:remove-role"}, {"content": "sec:remove-role-from-amps(${1:\\$role-name as xs:string})", "description": "($role-name)", "trigger": "sec:remove-role-from-amps"}, {"content": "sec:remove-role-from-privileges(${1:\\$role-name as xs:string})", "description": "($role-name)", "trigger": "sec:remove-role-from-privileges"}, {"content": "sec:remove-role-from-roles(${1:\\$role-name as xs:string})", "description": "($role-name)", "trigger": "sec:remove-role-from-roles"}, {"content": "sec:remove-role-from-users(${1:\\$role-name as xs:string})", "description": "($role-name)", "trigger": "sec:remove-role-from-users"}, {"content": "sec:remove-user(${1:\\$user-name as xs:string})", "description": "($user-name)", "trigger": "sec:remove-user"}, {"content": "sec:role-add-roles(${1:\\$role-name as xs:string}, ${2:\\$new-roles as xs:string*})", "description": "($role-name,$new-roles)", "trigger": "sec:role-add-roles"}, {"content": "sec:role-doc-collections()", "trigger": "sec:role-doc-collections"}, {"content": "sec:role-doc-permissions()", "trigger": "sec:role-doc-permissions"}, {"content": "sec:role-exists(${1:\\$role-name as xs:string})", "description": "($role-name)", "trigger": "sec:role-exists"}, {"content": "sec:role-get-compartment(${1:\\$role-name as xs:string})", "description": "($role-name)", "trigger": "sec:role-get-compartment"}, {"content": "sec:role-get-default-collections(${1:\\$role-name as xs:string})", "description": "($role-name)", "trigger": "sec:role-get-default-collections"}, {"content": "sec:role-get-default-permissions(${1:\\$role-name as xs:string})", "description": "($role-name)", "trigger": "sec:role-get-default-permissions"}, {"content": "sec:role-get-description(${1:\\$role-name as xs:string})", "description": "($role-name)", "trigger": "sec:role-get-description"}, {"content": "sec:role-get-external-names(${1:\\$role-name as xs:string})", "description": "($role-name)", "trigger": "sec:role-get-external-names"}, {"content": "sec:role-get-roles(${1:\\$role-name as xs:string})", "description": "($role-name)", "trigger": "sec:role-get-roles"}, {"content": "sec:role-privileges(${1:\\$role-name as xs:string})", "description": "($role-name)", "trigger": "sec:role-privileges"}, {"content": "sec:role-remove-roles(${1:\\$role-name as xs:string}, ${2:\\$role-names as xs:string*})", "description": "($role-name,$role-names)", "trigger": "sec:role-remove-roles"}, {"content": "sec:role-set-default-collections(${1:\\$role-name as xs:string}, ${2:\\$collections as xs:string*})", "description": "($role-name,$collections)", "trigger": "sec:role-set-default-collections"}, {"content": "sec:role-set-default-permissions(${1:\\$role-name as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "description": "($role-name,$permissions)", "trigger": "sec:role-set-default-permissions"}, {"content": "sec:role-set-description(${1:\\$role-name as xs:string}, ${2:\\$description as xs:string})", "description": "($role-name,$description)", "trigger": "sec:role-set-description"}, {"content": "sec:role-set-external-names(${1:\\$role-name as xs:string}, ${2:\\$external-name as xs:string*})", "description": "($role-name,$external-name)", "trigger": "sec:role-set-external-names"}, {"content": "sec:role-set-name(${1:\\$role-name as xs:string}, ${2:\\$new-role-name as xs:string})", "description": "($role-name,$new-role-name)", "trigger": "sec:role-set-name"}, {"content": "sec:role-set-roles(${1:\\$role-name as xs:string}, ${2:\\$role-names as xs:string*})", "description": "($role-name,$role-names)", "trigger": "sec:role-set-roles"}, {"content": "sec:roles-collection()", "trigger": "sec:roles-collection"}, {"content": "sec:security-collection()", "trigger": "sec:security-collection"}, {"content": "sec:security-installed()", "trigger": "sec:security-installed"}, {"content": "sec:security-namespace()", "trigger": "sec:security-namespace"}, {"content": "sec:security-version()", "trigger": "sec:security-version"}, {"content": "sec:set-realm(${1:\\$realm as xs:string})", "description": "($realm)", "trigger": "sec:set-realm"}, {"content": "sec:uid-for-name(${1:\\$name as xs:string})", "description": "($name)", "trigger": "sec:uid-for-name"}, {"content": "sec:unprotect-collection(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "sec:unprotect-collection"}, {"content": "sec:user-add-roles(${1:\\$user-name as xs:string}, ${2:\\$role-names as xs:string*})", "description": "($user-name,$role-names)", "trigger": "sec:user-add-roles"}, {"content": "sec:user-doc-collections()", "trigger": "sec:user-doc-collections"}, {"content": "sec:user-doc-permissions()", "trigger": "sec:user-doc-permissions"}, {"content": "sec:user-exists(${1:\\$user-name as xs:string})", "description": "($user-name)", "trigger": "sec:user-exists"}, {"content": "sec:user-get-default-collections(${1:\\$user-name as xs:string})", "description": "($user-name)", "trigger": "sec:user-get-default-collections"}, {"content": "sec:user-get-default-permissions(${1:\\$user-name as xs:string})", "description": "($user-name)", "trigger": "sec:user-get-default-permissions"}, {"content": "sec:user-get-description(${1:\\$user-name as xs:string})", "description": "($user-name)", "trigger": "sec:user-get-description"}, {"content": "sec:user-get-external-names(${1:\\$user-name as xs:string})", "description": "($user-name)", "trigger": "sec:user-get-external-names"}, {"content": "sec:user-get-password-extra(${1:\\$user-name as xs:string})", "description": "($user-name)", "trigger": "sec:user-get-password-extra"}, {"content": "sec:user-get-roles(${1:\\$user-name as xs:string})", "description": "($user-name)", "trigger": "sec:user-get-roles"}, {"content": "sec:user-privileges(${1:\\$user-name as xs:string})", "description": "($user-name)", "trigger": "sec:user-privileges"}, {"content": "sec:user-remove-roles(${1:\\$user-name as xs:string}, ${2:\\$role-names as xs:string*})", "description": "($user-name,$role-names)", "trigger": "sec:user-remove-roles"}, {"content": "sec:user-set-default-collections(${1:\\$user-name as xs:string}, ${2:\\$collections as xs:string*})", "description": "($user-name,$collections)", "trigger": "sec:user-set-default-collections"}, {"content": "sec:user-set-default-permissions(${1:\\$user-name as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "description": "($user-name,$permissions)", "trigger": "sec:user-set-default-permissions"}, {"content": "sec:user-set-description(${1:\\$user-name as xs:string}, ${2:\\$description as xs:string})", "description": "($user-name,$description)", "trigger": "sec:user-set-description"}, {"content": "sec:user-set-external-names(${1:\\$user-name as xs:string}, ${2:\\$external-name as xs:string*})", "description": "($user-name,$external-name)", "trigger": "sec:user-set-external-names"}, {"content": "sec:user-set-name(${1:\\$user-name as xs:string}, ${2:\\$new-user-name as xs:string}, ${3:\\$password as xs:string})", "description": "($user-name,$new-user-name,$password)", "trigger": "sec:user-set-name"}, {"content": "sec:user-set-password(${1:\\$user-name as xs:string}, ${2:\\$password as xs:string})", "description": "($user-name,$password)", "trigger": "sec:user-set-password"}, {"content": "sec:user-set-password-extra(${1:\\$user-name as xs:string}, ${2:\\$extra as element(sec:password-extra)})", "description": "($user-name,$extra)", "trigger": "sec:user-set-password-extra"}, {"content": "sec:user-set-roles(${1:\\$user-name as xs:string}, ${2:\\$role-names as xs:string*})", "description": "($user-name,$role-names)", "trigger": "sec:user-set-roles"}, {"content": "sec:users-collection()", "trigger": "sec:users-collection"}, {"content": "sec:validate-permissions(${1:\\$permissions as element(sec:permission)*})", "description": "($permissions)", "trigger": "sec:validate-permissions"}, {"content": "sem:binding(${1:\\$map as element(json:object)})", "description": "($map)", "trigger": "sem:binding"}, {"content": "sem:binding()", "trigger": "sem:binding"}, {"content": "sem:bnode()", "trigger": "sem:bnode"}, {"content": "sem:coalesce(${1:\\$parameter1 as item()*}, [${2:\\$parameterN as item()*}, ...]})", "description": "($parameter1,[$parameterN,...])", "trigger": "sem:coalesce"}, {"content": "sem:curie-expand(${1:\\$curie as xs:string})", "description": "($curie)", "trigger": "sem:curie-expand"}, {"content": "sem:curie-expand(${1:\\$curie as xs:string}, ${2:\\$mapping as map:map})", "description": "($curie,$mapping)", "trigger": "sem:curie-expand"}, {"content": "sem:curie-shorten(${1:\\$iri as sem:iri})", "description": "($iri)", "trigger": "sem:curie-shorten"}, {"content": "sem:curie-shorten(${1:\\$iri as sem:iri}, ${2:\\$mapping as map:map})", "description": "($iri,$mapping)", "trigger": "sem:curie-shorten"}, {"content": "sem:database-nodes(${1:\\$triples as sem:triple*})", "description": "($triples)", "trigger": "sem:database-nodes"}, {"content": "sem:database-nodes(${1:\\$triples as sem:triple*}, ${2:\\$options as xs:string*})", "description": "($triples,$options)", "trigger": "sem:database-nodes"}, {"content": "sem:database-nodes(${1:\\$triples as sem:triple*}, ${2:\\$options as xs:string*}, ${3:\\$query as cts:query?})", "description": "($triples,$options,$query)", "trigger": "sem:database-nodes"}, {"content": "sem:datatype(${1:\\$value as xs:anyAtomicType})", "description": "($value)", "trigger": "sem:datatype"}, {"content": "sem:describe(${1:\\$iris as sem:iri*})", "description": "($iris)", "trigger": "sem:describe"}, {"content": "sem:graph(${1:\\$graphname as sem:iri})", "description": "($graphname)", "trigger": "sem:graph"}, {"content": "sem:graph-delete(${1:\\$graphname as sem:iri})", "description": "($graphname)", "trigger": "sem:graph-delete"}, {"content": "sem:graph-insert(${1:\\$graphname as sem:iri}, ${2:\\$triples as sem:triple*})", "description": "($graphname,$triples)", "trigger": "sem:graph-insert"}, {"content": "sem:graph-insert(${1:\\$graphname as sem:iri}, ${2:\\$triples as sem:triple*}, ${3:\\$permissions as element(sec:permission)*})", "description": "($graphname,$triples,$permissions)", "trigger": "sem:graph-insert"}, {"content": "sem:graph-insert(${1:\\$graphname as sem:iri}, ${2:\\$triples as sem:triple*}, ${3:\\$permissions as element(sec:permission)*}, ${4:\\$collections as xs:string*})", "description": "($graphname,$triples,$permissions,$collections)", "trigger": "sem:graph-insert"}, {"content": "sem:graph-insert(${1:\\$graphname as sem:iri}, ${2:\\$triples as sem:triple*}, ${3:\\$permissions as element(sec:permission)*}, ${4:\\$collections as xs:string*}, ${5:\\$quality as xs:int?})", "description": "($graphname,$triples,$permissions,$collections,$quality)", "trigger": "sem:graph-insert"}, {"content": "sem:graph-insert(${1:\\$graphname as sem:iri}, ${2:\\$triples as sem:triple*}, ${3:\\$permissions as element(sec:permission)*}, ${4:\\$collections as xs:string*}, ${5:\\$quality as xs:int?}, ${6:\\$forest-ids as xs:unsignedLong*})", "description": "($graphname,$triples,$permissions,$collections,$quality,$forest-ids)", "trigger": "sem:graph-insert"}, {"content": "sem:if(${1:\\$condition as xs:boolean}, ${2:\\$then as item()*}, ${3:\\$else as item()*})", "description": "($condition,$then,$else)", "trigger": "sem:if"}, {"content": "sem:invalid(${1:\\$string as xs:string}, ${2:\\$datatype as sem:iri})", "description": "($string,$datatype)", "trigger": "sem:invalid"}, {"content": "sem:invalid-datatype(${1:\\$val as sem:invalid})", "description": "($val)", "trigger": "sem:invalid-datatype"}, {"content": "sem:iri(${1:\\$string-iri as xs:string})", "description": "($string-iri)", "trigger": "sem:iri"}, {"content": "sem:isBlank(${1:\\$value as xs:anyAtomicType})", "description": "($value)", "trigger": "sem:isBlank"}, {"content": "sem:isIRI(${1:\\$value as xs:anyAtomicType})", "description": "($value)", "trigger": "sem:isIRI"}, {"content": "sem:isLiteral(${1:\\$value as xs:anyAtomicType})", "description": "($value)", "trigger": "sem:isLiteral"}, {"content": "sem:lang(${1:\\$value as xs:anyAtomicType})", "description": "($value)", "trigger": "sem:lang"}, {"content": "sem:langMatches(${1:\\$lang-tag as xs:string}, ${2:\\$lang-range as xs:string})", "description": "($lang-tag,$lang-range)", "trigger": "sem:langMatches"}, {"content": "sem:prefixes(${1:\\$prefixdef as xs:string?})", "description": "($prefixdef)", "trigger": "sem:prefixes"}, {"content": "sem:prefixes(${1:\\$prefixdef as xs:string?}, ${2:\\$include-common as xs:boolean?})", "description": "($prefixdef,$include-common)", "trigger": "sem:prefixes"}, {"content": "sem:query-results-serialize(${1:\\$results as item()*})", "description": "($results)", "trigger": "sem:query-results-serialize"}, {"content": "sem:query-results-serialize(${1:\\$results as item()*}, ${2:\\$options as xs:string*})", "description": "($results,$options)", "trigger": "sem:query-results-serialize"}, {"content": "sem:random()", "trigger": "sem:random"}, {"content": "sem:rdf-builder(${1:\\$prefixes as map:map?})", "description": "($prefixes)", "trigger": "sem:rdf-builder"}, {"content": "sem:rdf-builder(${1:\\$prefixes as map:map?}, ${2:\\$graph as sem:iri?})", "description": "($prefixes,$graph)", "trigger": "sem:rdf-builder"}, {"content": "sem:rdf-builder()", "trigger": "sem:rdf-builder"}, {"content": "sem:rdf-get(${1:\\$location as xs:string})", "description": "($location)", "trigger": "sem:rdf-get"}, {"content": "sem:rdf-get(${1:\\$location as xs:string}, ${2:\\$options as xs:string*})", "description": "($location,$options)", "trigger": "sem:rdf-get"}, {"content": "sem:rdf-get(${1:\\$location as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$http-opts as element()?})", "description": "($location,$options,$http-opts)", "trigger": "sem:rdf-get"}, {"content": "sem:rdf-insert(${1:\\$triples as sem:triple*})", "description": "($triples)", "trigger": "sem:rdf-insert"}, {"content": "sem:rdf-insert(${1:\\$triples as sem:triple*}, ${2:\\$options as xs:string*})", "description": "($triples,$options)", "trigger": "sem:rdf-insert"}, {"content": "sem:rdf-insert(${1:\\$triples as sem:triple*}, ${2:\\$options as xs:string*}, ${3:\\$permissions as element(sec:permission)*})", "description": "($triples,$options,$permissions)", "trigger": "sem:rdf-insert"}, {"content": "sem:rdf-insert(${1:\\$triples as sem:triple*}, ${2:\\$options as xs:string*}, ${3:\\$permissions as element(sec:permission)*}, ${4:\\$collections as xs:string*})", "description": "($triples,$options,$permissions,$collections)", "trigger": "sem:rdf-insert"}, {"content": "sem:rdf-insert(${1:\\$triples as sem:triple*}, ${2:\\$options as xs:string*}, ${3:\\$permissions as element(sec:permission)*}, ${4:\\$collections as xs:string*}, ${5:\\$quality as xs:int?})", "description": "($triples,$options,$permissions,$collections,$quality)", "trigger": "sem:rdf-insert"}, {"content": "sem:rdf-insert(${1:\\$triples as sem:triple*}, ${2:\\$options as xs:string*}, ${3:\\$permissions as element(sec:permission)*}, ${4:\\$collections as xs:string*}, ${5:\\$quality as xs:int?}, ${6:\\$forest-ids as xs:unsignedLong*})", "description": "($triples,$options,$permissions,$collections,$quality,$forest-ids)", "trigger": "sem:rdf-insert"}, {"content": "sem:rdf-load(${1:\\$location as xs:string})", "description": "($location)", "trigger": "sem:rdf-load"}, {"content": "sem:rdf-load(${1:\\$location as xs:string}, ${2:\\$options as xs:string*})", "description": "($location,$options)", "trigger": "sem:rdf-load"}, {"content": "sem:rdf-load(${1:\\$location as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$http-opts as element()?})", "description": "($location,$options,$http-opts)", "trigger": "sem:rdf-load"}, {"content": "sem:rdf-load(${1:\\$location as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$http-opts as element()?}, ${4:\\$permissions as element(sec:permission)*})", "description": "($location,$options,$http-opts,$permissions)", "trigger": "sem:rdf-load"}, {"content": "sem:rdf-load(${1:\\$location as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$http-opts as element()?}, ${4:\\$permissions as element(sec:permission)*}, ${5:\\$collections as xs:string*})", "description": "($location,$options,$http-opts,$permissions,$collections)", "trigger": "sem:rdf-load"}, {"content": "sem:rdf-load(${1:\\$location as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$http-opts as element()?}, ${4:\\$permissions as element(sec:permission)*}, ${5:\\$collections as xs:string*}, ${6:\\$quality as xs:int?})", "description": "($location,$options,$http-opts,$permissions,$collections,$quality)", "trigger": "sem:rdf-load"}, {"content": "sem:rdf-load(${1:\\$location as xs:string}, ${2:\\$options as xs:string*}, ${3:\\$http-opts as element()?}, ${4:\\$permissions as element(sec:permission)*}, ${5:\\$collections as xs:string*}, ${6:\\$quality as xs:int?}, ${7:\\$forest-ids as xs:unsignedLong*})", "description": "($location,$options,$http-opts,$permissions,$collections,$quality,$forest-ids)", "trigger": "sem:rdf-load"}, {"content": "sem:rdf-parse(${1:\\$in as item()})", "description": "($in)", "trigger": "sem:rdf-parse"}, {"content": "sem:rdf-parse(${1:\\$in as item()}, ${2:\\$options as xs:string*})", "description": "($in,$options)", "trigger": "sem:rdf-parse"}, {"content": "sem:rdf-serialize(${1:\\$triples as sem:triple*})", "description": "($triples)", "trigger": "sem:rdf-serialize"}, {"content": "sem:rdf-serialize(${1:\\$triples as sem:triple*}, ${2:\\$options as xs:string*})", "description": "($triples,$options)", "trigger": "sem:rdf-serialize"}, {"content": "sem:sameTerm(${1:\\$a as xs:anyAtomicType}, ${2:\\$b as xs:anyAtomicType})", "description": "($a,$b)", "trigger": "sem:sameTerm"}, {"content": "sem:sparql(${1:\\$sparql as xs:string})", "description": "($sparql)", "trigger": "sem:sparql"}, {"content": "sem:sparql(${1:\\$sparql as xs:string}, ${2:\\$bindings as map:map?})", "description": "($sparql,$bindings)", "trigger": "sem:sparql"}, {"content": "sem:sparql(${1:\\$sparql as xs:string}, ${2:\\$bindings as map:map?}, ${3:\\$options as xs:string*})", "description": "($sparql,$bindings,$options)", "trigger": "sem:sparql"}, {"content": "sem:sparql(${1:\\$sparql as xs:string}, ${2:\\$bindings as map:map?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "description": "($sparql,$bindings,$options,$query)", "trigger": "sem:sparql"}, {"content": "sem:sparql(${1:\\$sparql as xs:string}, ${2:\\$bindings as map:map?}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$forest-ids as xs:unsignedLong*})", "description": "($sparql,$bindings,$options,$query,$forest-ids)", "trigger": "sem:sparql"}, {"content": "sem:sparql-triples(${1:\\$sparql as xs:string}, ${2:\\$dataset as sem:triple*})", "description": "($sparql,$dataset)", "trigger": "sem:sparql-triples"}, {"content": "sem:sparql-triples(${1:\\$sparql as xs:string}, ${2:\\$dataset as sem:triple*}, ${3:\\$bindings as map:map?})", "description": "($sparql,$dataset,$bindings)", "trigger": "sem:sparql-triples"}, {"content": "sem:sparql-triples(${1:\\$sparql as xs:string}, ${2:\\$dataset as sem:triple*}, ${3:\\$bindings as map:map?}, ${4:\\$options as xs:string*})", "description": "($sparql,$dataset,$bindings,$options)", "trigger": "sem:sparql-triples"}, {"content": "sem:sparql-values(${1:\\$sparql as xs:string}, ${2:\\$values as map:map*})", "description": "($sparql,$values)", "trigger": "sem:sparql-values"}, {"content": "sem:sparql-values(${1:\\$sparql as xs:string}, ${2:\\$values as map:map*}, ${3:\\$options as xs:string*})", "description": "($sparql,$values,$options)", "trigger": "sem:sparql-values"}, {"content": "sem:sparql-values(${1:\\$sparql as xs:string}, ${2:\\$values as map:map*}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?})", "description": "($sparql,$values,$options,$query)", "trigger": "sem:sparql-values"}, {"content": "sem:sparql-values(${1:\\$sparql as xs:string}, ${2:\\$values as map:map*}, ${3:\\$options as xs:string*}, ${4:\\$query as cts:query?}, ${5:\\$forest-ids as xs:unsignedLong*})", "description": "($sparql,$values,$options,$query,$forest-ids)", "trigger": "sem:sparql-values"}, {"content": "sem:timezone-string(${1:\\$value as xs:dateTime})", "description": "($value)", "trigger": "sem:timezone-string"}, {"content": "sem:transitive-closure(${1:\\$seeds as sem:iri*}, ${2:\\$predicates as sem:iri*}, ${3:\\$limit as xs:integer})", "description": "($seeds,$predicates,$limit)", "trigger": "sem:transitive-closure"}, {"content": "sem:triple(${1:\\$subject_or_node as item()})", "description": "($subject_or_node)", "trigger": "sem:triple"}, {"content": "sem:triple(${1:\\$subject_or_node as item()}, ${2:\\$predicate as xs:anyAtomicType})", "description": "($subject_or_node,$predicate)", "trigger": "sem:triple"}, {"content": "sem:triple(${1:\\$subject_or_node as item()}, ${2:\\$predicate as xs:anyAtomicType}, ${3:\\$object as xs:anyAtomicType})", "description": "($subject_or_node,$predicate,$object)", "trigger": "sem:triple"}, {"content": "sem:triple(${1:\\$subject_or_node as item()}, ${2:\\$predicate as xs:anyAtomicType}, ${3:\\$object as xs:anyAtomicType}, ${4:\\$graph as sem:iri?})", "description": "($subject_or_node,$predicate,$object,$graph)", "trigger": "sem:triple"}, {"content": "sem:triple-graph(${1:\\$triple as sem:triple})", "description": "($triple)", "trigger": "sem:triple-graph"}, {"content": "sem:triple-object(${1:\\$triple as sem:triple})", "description": "($triple)", "trigger": "sem:triple-object"}, {"content": "sem:triple-predicate(${1:\\$triple as sem:triple})", "description": "($triple)", "trigger": "sem:triple-predicate"}, {"content": "sem:triple-subject(${1:\\$triple as sem:triple})", "description": "($triple)", "trigger": "sem:triple-subject"}, {"content": "sem:typed-literal(${1:\\$value as xs:string}, ${2:\\$datatype as sem:iri})", "description": "($value,$datatype)", "trigger": "sem:typed-literal"}, {"content": "sem:unknown(${1:\\$string as xs:string}, ${2:\\$datatype as sem:iri})", "description": "($string,$datatype)", "trigger": "sem:unknown"}, {"content": "sem:unknown-datatype(${1:\\$val as sem:unknown})", "description": "($val)", "trigger": "sem:unknown-datatype"}, {"content": "sem:uuid()", "trigger": "sem:uuid"}, {"content": "sem:uuid-string()", "trigger": "sem:uuid-string"}, {"content": "spell:add-word(${1:\\$uri as xs:string}, ${2:\\$word as xs:string})", "description": "($uri,$word)", "trigger": "spell:add-word"}, {"content": "spell:double-metaphone(${1:\\$word as xs:string})", "description": "($word)", "trigger": "spell:double-metaphone"}, {"content": "spell:insert(${1:\\$uri as xs:string}, ${2:\\$dict as element(spell:dictionary)})", "description": "($uri,$dict)", "trigger": "spell:insert"}, {"content": "spell:is-correct(${1:\\$uri as xs:string*}, ${2:\\$word as xs:string})", "description": "($uri,$word)", "trigger": "spell:is-correct"}, {"content": "spell:levenshtein-distance(${1:\\$str1 as xs:string}, ${2:\\$str2 as xs:string})", "description": "($str1,$str2)", "trigger": "spell:levenshtein-distance"}, {"content": "spell:load(${1:\\$path as xs:string}, ${2:\\$uri as xs:string})", "description": "($path,$uri)", "trigger": "spell:load"}, {"content": "spell:make-dictionary(${1:\\$words as xs:string*})", "description": "($words)", "trigger": "spell:make-dictionary"}, {"content": "spell:remove-word(${1:\\$uri as xs:string}, ${2:\\$word as xs:string})", "description": "($uri,$word)", "trigger": "spell:remove-word"}, {"content": "spell:suggest(${1:\\$uri as xs:string*}, ${2:\\$word as xs:string})", "description": "($uri,$word)", "trigger": "spell:suggest"}, {"content": "spell:suggest(${1:\\$uri as xs:string*}, ${2:\\$word as xs:string}, ${3:\\$options as node()?})", "description": "($uri,$word,$options)", "trigger": "spell:suggest"}, {"content": "spell:suggest-detailed(${1:\\$uri as xs:string*}, ${2:\\$word as xs:string})", "description": "($uri,$word)", "trigger": "spell:suggest-detailed"}, {"content": "spell:suggest-detailed(${1:\\$uri as xs:string*}, ${2:\\$word as xs:string}, ${3:\\$options as node()?})", "description": "($uri,$word,$options)", "trigger": "spell:suggest-detailed"}, {"content": "sql:dateadd(${1:\\$datepart as xs:string}, ${2:\\$number as xs:integer}, ${3:\\$date as item()})", "description": "($datepart,$number,$date)", "trigger": "sql:dateadd"}, {"content": "sql:datediff(${1:\\$datepart as xs:string}, ${2:\\$startdate as item()}, ${3:\\$enddate as item()})", "description": "($datepart,$startdate,$enddate)", "trigger": "sql:datediff"}, {"content": "sql:datepart(${1:\\$datepart as xs:string?}, ${2:\\$date as xs:genericDateTimeArg})", "description": "($datepart,$date)", "trigger": "sql:datepart"}, {"content": "thsr:add-synonym(${1:\\$entry as element(thsr:entry)}, ${2:\\$synonym as element(thsr:synonym)})", "description": "($entry,$synonym)", "trigger": "thsr:add-synonym"}, {"content": "thsr:expand(${1:\\$query as cts:query}, ${2:\\$entries as element(thsr:entry)*}, ${3:\\$new-weight as xs:double?}, ${4:\\$min-weight as xs:double?}, ${5:\\$filter as node()*})", "description": "($query,$entries,$new-weight,$min-weight,$filter)", "trigger": "thsr:expand"}, {"content": "thsr:insert(${1:\\$uri as xs:string}, ${2:\\$thsr as element(thsr:thesaurus)})", "description": "($uri,$thsr)", "trigger": "thsr:insert"}, {"content": "thsr:load(${1:\\$path as xs:string}, ${2:\\$uri as xs:string})", "description": "($path,$uri)", "trigger": "thsr:load"}, {"content": "thsr:lookup(${1:\\$uri as xs:string*}, ${2:\\$term as xs:string})", "description": "($uri,$term)", "trigger": "thsr:lookup"}, {"content": "thsr:query-lookup(${1:\\$uri as xs:string*}, ${2:\\$query as cts:query})", "description": "($uri,$query)", "trigger": "thsr:query-lookup"}, {"content": "thsr:remove-entry(${1:\\$uri as xs:string*}, ${2:\\$entry as element(thsr:entry)})", "description": "($uri,$entry)", "trigger": "thsr:remove-entry"}, {"content": "thsr:remove-synonym(${1:\\$entry as element(thsr:entry)}, ${2:\\$synonym as element(thsr:synonym)})", "description": "($entry,$synonym)", "trigger": "thsr:remove-synonym"}, {"content": "thsr:remove-term(${1:\\$uri as xs:string*}, ${2:\\$term as xs:string})", "description": "($uri,$term)", "trigger": "thsr:remove-term"}, {"content": "thsr:set-entry(${1:\\$uri as xs:string}, ${2:\\$entry as element(thsr:entry)})", "description": "($uri,$entry)", "trigger": "thsr:set-entry"}, {"content": "tieredstorage:database-create-sub-database(${1:\\$database-id as xs:unsignedLong*}, ${2:\\$database-name as xs:string})", "description": "($database-id,$database-name)", "trigger": "tieredstorage:database-create-sub-database"}, {"content": "tieredstorage:database-create-sub-database(${1:\\$database-id as xs:unsignedLong*}, ${2:\\$database-name as xs:string}, ${3:\\$kind as xs:string})", "description": "($database-id,$database-name,$kind)", "trigger": "tieredstorage:database-create-sub-database"}, {"content": "tieredstorage:database-create-super-database(${1:\\$database-id as xs:unsignedLong}, ${2:\\$database-name as xs:string})", "description": "($database-id,$database-name)", "trigger": "tieredstorage:database-create-super-database"}, {"content": "tieredstorage:database-delete-sub-database(${1:\\$database-id as xs:unsignedLong}, ${2:\\$delete-dbid as xs:unsignedLong})", "description": "($database-id,$delete-dbid)", "trigger": "tieredstorage:database-delete-sub-database"}, {"content": "tieredstorage:database-delete-super-database(${1:\\$database-id as xs:unsignedLong}, ${2:\\$delete-dbid as xs:unsignedLong})", "description": "($database-id,$delete-dbid)", "trigger": "tieredstorage:database-delete-super-database"}, {"content": "tieredstorage:database-partitions(${1:\\$database-id as xs:unsignedLong})", "description": "($database-id)", "trigger": "tieredstorage:database-partitions"}, {"content": "tieredstorage:forest-combine(${1:\\$forest-ids as xs:unsignedLong*}, ${2:\\$forest-name as xs:string}, ${3:\\$host-id as xs:unsignedLong})", "description": "($forest-ids,$forest-name,$host-id)", "trigger": "tieredstorage:forest-combine"}, {"content": "tieredstorage:forest-combine(${1:\\$forest-ids as xs:unsignedLong*}, ${2:\\$forest-name as xs:string}, ${3:\\$host-id as xs:unsignedLong}, ${4:\\$data-directory as xs:string?})", "description": "($forest-ids,$forest-name,$host-id,$data-directory)", "trigger": "tieredstorage:forest-combine"}, {"content": "tieredstorage:forest-combine(${1:\\$forest-ids as xs:unsignedLong*}, ${2:\\$forest-name as xs:string}, ${3:\\$host-id as xs:unsignedLong}, ${4:\\$data-directory as xs:string?}, ${5:\\$large-data-directory as xs:string?})", "description": "($forest-ids,$forest-name,$host-id,$data-directory,$large-data-directory)", "trigger": "tieredstorage:forest-combine"}, {"content": "tieredstorage:forest-combine(${1:\\$forest-ids as xs:unsignedLong*}, ${2:\\$forest-name as xs:string}, ${3:\\$host-id as xs:unsignedLong}, ${4:\\$data-directory as xs:string?}, ${5:\\$large-data-directory as xs:string?}, ${6:\\$fast-data-directory as xs:string?})", "description": "($forest-ids,$forest-name,$host-id,$data-directory,$large-data-directory,$fast-data-directory)", "trigger": "tieredstorage:forest-combine"}, {"content": "tieredstorage:forest-combine(${1:\\$forest-ids as xs:unsignedLong*}, ${2:\\$forest-name as xs:string}, ${3:\\$host-id as xs:unsignedLong}, ${4:\\$data-directory as xs:string?}, ${5:\\$large-data-directory as xs:string?}, ${6:\\$fast-data-directory as xs:string?}, ${7:\\$options as xs:string*})", "description": "($forest-ids,$forest-name,$host-id,$data-directory,$large-data-directory,$fast-data-directory,$options)", "trigger": "tieredstorage:forest-combine"}, {"content": "tieredstorage:forest-migrate(${1:\\$forest-ids as xs:unsignedLong*})", "description": "($forest-ids)", "trigger": "tieredstorage:forest-migrate"}, {"content": "tieredstorage:forest-migrate(${1:\\$forest-ids as xs:unsignedLong*}, ${2:\\$new-host-id as xs:unsignedLong?})", "description": "($forest-ids,$new-host-id)", "trigger": "tieredstorage:forest-migrate"}, {"content": "tieredstorage:forest-migrate(${1:\\$forest-ids as xs:unsignedLong*}, ${2:\\$new-host-id as xs:unsignedLong?}, ${3:\\$new-data-directory as xs:string?})", "description": "($forest-ids,$new-host-id,$new-data-directory)", "trigger": "tieredstorage:forest-migrate"}, {"content": "tieredstorage:forest-migrate(${1:\\$forest-ids as xs:unsignedLong*}, ${2:\\$new-host-id as xs:unsignedLong?}, ${3:\\$new-data-directory as xs:string?}, ${4:\\$new-large-data-directory as xs:string?})", "description": "($forest-ids,$new-host-id,$new-data-directory,$new-large-data-directory)", "trigger": "tieredstorage:forest-migrate"}, {"content": "tieredstorage:forest-migrate(${1:\\$forest-ids as xs:unsignedLong*}, ${2:\\$new-host-id as xs:unsignedLong?}, ${3:\\$new-data-directory as xs:string?}, ${4:\\$new-large-data-directory as xs:string?}, ${5:\\$new-fast-data-directory as xs:string?})", "description": "($forest-ids,$new-host-id,$new-data-directory,$new-large-data-directory,$new-fast-data-directory)", "trigger": "tieredstorage:forest-migrate"}, {"content": "tieredstorage:forest-migrate(${1:\\$forest-ids as xs:unsignedLong*}, ${2:\\$new-host-id as xs:unsignedLong?}, ${3:\\$new-data-directory as xs:string?}, ${4:\\$new-large-data-directory as xs:string?}, ${5:\\$new-fast-data-directory as xs:string?}, ${6:\\$options as xs:string*})", "description": "($forest-ids,$new-host-id,$new-data-directory,$new-large-data-directory,$new-fast-data-directory,$options)", "trigger": "tieredstorage:forest-migrate"}, {"content": "tieredstorage:partition-create(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$lower as xs:anyAtomicType?}, ${4:\\$upper as xs:anyAtomicType?}, ${5:\\$forests-per-host as xs:unsignedInt}, ${6:\\$host-ids as xs:unsignedLong*})", "description": "($database-id,$partition-name,$lower,$upper,$forests-per-host,$host-ids)", "trigger": "tieredstorage:partition-create"}, {"content": "tieredstorage:partition-create(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$lower as xs:anyAtomicType?}, ${4:\\$upper as xs:anyAtomicType?}, ${5:\\$forests-per-host as xs:unsignedInt}, ${6:\\$host-ids as xs:unsignedLong*}, ${7:\\$data-directory as xs:string?})", "description": "($database-id,$partition-name,$lower,$upper,$forests-per-host,$host-ids,$data-directory)", "trigger": "tieredstorage:partition-create"}, {"content": "tieredstorage:partition-create(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$lower as xs:anyAtomicType?}, ${4:\\$upper as xs:anyAtomicType?}, ${5:\\$forests-per-host as xs:unsignedInt}, ${6:\\$host-ids as xs:unsignedLong*}, ${7:\\$data-directory as xs:string?}, ${8:\\$large-data-directory as xs:string?})", "description": "($database-id,$partition-name,$lower,$upper,$forests-per-host,$host-ids,$data-directory,$large-data-directory)", "trigger": "tieredstorage:partition-create"}, {"content": "tieredstorage:partition-create(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$lower as xs:anyAtomicType?}, ${4:\\$upper as xs:anyAtomicType?}, ${5:\\$forests-per-host as xs:unsignedInt}, ${6:\\$host-ids as xs:unsignedLong*}, ${7:\\$data-directory as xs:string?}, ${8:\\$large-data-directory as xs:string?}, ${9:\\$fast-data-directory as xs:string?})", "description": "($database-id,$partition-name,$lower,$upper,$forests-per-host,$host-ids,$data-directory,$large-data-directory,$fast-data-directory)", "trigger": "tieredstorage:partition-create"}, {"content": "tieredstorage:partition-create(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$lower as xs:anyAtomicType?}, ${4:\\$upper as xs:anyAtomicType?}, ${5:\\$forests-per-host as xs:unsignedInt}, ${6:\\$host-ids as xs:unsignedLong*}, ${7:\\$data-directory as xs:string?}, ${8:\\$large-data-directory as xs:string?}, ${9:\\$fast-data-directory as xs:string?}, ${10:\\$options as xs:string*})", "description": "($database-id,$partition-name,$lower,$upper,$forests-per-host,$host-ids,$data-directory,$large-data-directory,$fast-data-directory,$options)", "trigger": "tieredstorage:partition-create"}, {"content": "tieredstorage:partition-delete(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string})", "description": "($database-id,$partition-name)", "trigger": "tieredstorage:partition-delete"}, {"content": "tieredstorage:partition-delete(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$delete-data as xs:boolean})", "description": "($database-id,$partition-name,$delete-data)", "trigger": "tieredstorage:partition-delete"}, {"content": "tieredstorage:partition-forests(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string})", "description": "($database-id,$partition-name)", "trigger": "tieredstorage:partition-forests"}, {"content": "tieredstorage:partition-forests(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$include-replicas as xs:boolean})", "description": "($database-id,$partition-name,$include-replicas)", "trigger": "tieredstorage:partition-forests"}, {"content": "tieredstorage:partition-migrate(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$host-ids as xs:unsignedLong*})", "description": "($database-id,$partition-name,$host-ids)", "trigger": "tieredstorage:partition-migrate"}, {"content": "tieredstorage:partition-migrate(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$host-ids as xs:unsignedLong*}, ${4:\\$data-directory as xs:string?})", "description": "($database-id,$partition-name,$host-ids,$data-directory)", "trigger": "tieredstorage:partition-migrate"}, {"content": "tieredstorage:partition-migrate(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$host-ids as xs:unsignedLong*}, ${4:\\$data-directory as xs:string?}, ${5:\\$large-data-directory as xs:string?})", "description": "($database-id,$partition-name,$host-ids,$data-directory,$large-data-directory)", "trigger": "tieredstorage:partition-migrate"}, {"content": "tieredstorage:partition-migrate(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$host-ids as xs:unsignedLong*}, ${4:\\$data-directory as xs:string?}, ${5:\\$large-data-directory as xs:string?}, ${6:\\$fast-data-directory as xs:string?})", "description": "($database-id,$partition-name,$host-ids,$data-directory,$large-data-directory,$fast-data-directory)", "trigger": "tieredstorage:partition-migrate"}, {"content": "tieredstorage:partition-migrate(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$host-ids as xs:unsignedLong*}, ${4:\\$data-directory as xs:string?}, ${5:\\$large-data-directory as xs:string?}, ${6:\\$fast-data-directory as xs:string?}, ${7:\\$options as xs:string*})", "description": "($database-id,$partition-name,$host-ids,$data-directory,$large-data-directory,$fast-data-directory,$options)", "trigger": "tieredstorage:partition-migrate"}, {"content": "tieredstorage:partition-resize(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$forests-per-host as xs:unsignedInt}, ${4:\\$host-ids as xs:unsignedLong*})", "description": "($database-id,$partition-name,$forests-per-host,$host-ids)", "trigger": "tieredstorage:partition-resize"}, {"content": "tieredstorage:partition-resize(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$forests-per-host as xs:unsignedInt}, ${4:\\$host-ids as xs:unsignedLong*}, ${5:\\$data-directory as xs:string?})", "description": "($database-id,$partition-name,$forests-per-host,$host-ids,$data-directory)", "trigger": "tieredstorage:partition-resize"}, {"content": "tieredstorage:partition-resize(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$forests-per-host as xs:unsignedInt}, ${4:\\$host-ids as xs:unsignedLong*}, ${5:\\$data-directory as xs:string?}, ${6:\\$large-data-directory as xs:string?})", "description": "($database-id,$partition-name,$forests-per-host,$host-ids,$data-directory,$large-data-directory)", "trigger": "tieredstorage:partition-resize"}, {"content": "tieredstorage:partition-resize(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$forests-per-host as xs:unsignedInt}, ${4:\\$host-ids as xs:unsignedLong*}, ${5:\\$data-directory as xs:string?}, ${6:\\$large-data-directory as xs:string?}, ${7:\\$fast-data-directory as xs:string?})", "description": "($database-id,$partition-name,$forests-per-host,$host-ids,$data-directory,$large-data-directory,$fast-data-directory)", "trigger": "tieredstorage:partition-resize"}, {"content": "tieredstorage:partition-resize(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$forests-per-host as xs:unsignedInt}, ${4:\\$host-ids as xs:unsignedLong*}, ${5:\\$data-directory as xs:string?}, ${6:\\$large-data-directory as xs:string?}, ${7:\\$fast-data-directory as xs:string?}, ${8:\\$options as xs:string*})", "description": "($database-id,$partition-name,$forests-per-host,$host-ids,$data-directory,$large-data-directory,$fast-data-directory,$options)", "trigger": "tieredstorage:partition-resize"}, {"content": "tieredstorage:partition-set-availability(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$value as xs:string})", "description": "($database-id,$partition-name,$value)", "trigger": "tieredstorage:partition-set-availability"}, {"content": "tieredstorage:partition-set-updates-allowed(${1:\\$database-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$value as xs:string})", "description": "($database-id,$partition-name,$value)", "trigger": "tieredstorage:partition-set-updates-allowed"}, {"content": "tieredstorage:partition-transfer(${1:\\$partition-db-id as xs:unsignedLong}, ${2:\\$partition-name as xs:string}, ${3:\\$dst-db-id as xs:unsignedLong})", "description": "($partition-db-id,$partition-name,$dst-db-id)", "trigger": "tieredstorage:partition-transfer"}, {"content": "trgr:any-property-content()", "trigger": "trgr:any-property-content"}, {"content": "trgr:collection-scope(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "trgr:collection-scope"}, {"content": "trgr:create-trigger(${1:\\$trigger-name as xs:string}, ${2:\\$description as xs:string?}, ${3:\\$event as element()}, ${4:\\$module as element(trgr:module)}, ${5:\\$enabled as xs:boolean}, ${6:\\$permissions as element(sec:permission)*})", "description": "($trigger-name,$description,$event,$module,$enabled,$permissions)", "trigger": "trgr:create-trigger"}, {"content": "trgr:create-trigger(${1:\\$trigger-name as xs:string}, ${2:\\$description as xs:string?}, ${3:\\$event as element()}, ${4:\\$module as element(trgr:module)}, ${5:\\$enabled as xs:boolean}, ${6:\\$permissions as element(sec:permission)*}, ${7:\\$recursive as xs:boolean?})", "description": "($trigger-name,$description,$event,$module,$enabled,$permissions,$recursive)", "trigger": "trgr:create-trigger"}, {"content": "trgr:create-trigger(${1:\\$trigger-name as xs:string}, ${2:\\$description as xs:string?}, ${3:\\$event as element()}, ${4:\\$module as element(trgr:module)}, ${5:\\$enabled as xs:boolean}, ${6:\\$permissions as element(sec:permission)*}, ${7:\\$recursive as xs:boolean?}, ${8:\\$task-priority as xs:string})", "description": "($trigger-name,$description,$event,$module,$enabled,$permissions,$recursive,$task-priority)", "trigger": "trgr:create-trigger"}, {"content": "trgr:directory-scope(${1:\\$uri as xs:string}, ${2:\\$depth as xs:string})", "description": "($uri,$depth)", "trigger": "trgr:directory-scope"}, {"content": "trgr:document-content(${1:\\$update-kind as xs:string})", "description": "($update-kind)", "trigger": "trgr:document-content"}, {"content": "trgr:document-scope(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "trgr:document-scope"}, {"content": "trgr:get-trigger(${1:\\$trigger-name as xs:string})", "description": "($trigger-name)", "trigger": "trgr:get-trigger"}, {"content": "trgr:get-trigger-by-id(${1:\\$trigger-id as xs:unsignedLong})", "description": "($trigger-id)", "trigger": "trgr:get-trigger-by-id"}, {"content": "trgr:post-commit()", "trigger": "trgr:post-commit"}, {"content": "trgr:pre-commit()", "trigger": "trgr:pre-commit"}, {"content": "trgr:property-content(${1:\\$property-name as xs:QName})", "description": "($property-name)", "trigger": "trgr:property-content"}, {"content": "trgr:remove-trigger(${1:\\$trigger-name as xs:string})", "description": "($trigger-name)", "trigger": "trgr:remove-trigger"}, {"content": "trgr:trigger-add-permissions(${1:\\$trigger-name as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "description": "($trigger-name,$permissions)", "trigger": "trgr:trigger-add-permissions"}, {"content": "trgr:trigger-data-event(${1:\\$scope as element()}, ${2:\\$content as element()}, ${3:\\$when as element(trgr:when)})", "description": "($scope,$content,$when)", "trigger": "trgr:trigger-data-event"}, {"content": "trgr:trigger-database-online-event(${1:\\$user-name as xs:string})", "description": "($user-name)", "trigger": "trgr:trigger-database-online-event"}, {"content": "trgr:trigger-disable(${1:\\$trigger-name as xs:string})", "description": "($trigger-name)", "trigger": "trgr:trigger-disable"}, {"content": "trgr:trigger-enable(${1:\\$trigger-name as xs:string})", "description": "($trigger-name)", "trigger": "trgr:trigger-enable"}, {"content": "trgr:trigger-get-permissions(${1:\\$trigger-name as xs:string})", "description": "($trigger-name)", "trigger": "trgr:trigger-get-permissions"}, {"content": "trgr:trigger-module(${1:\\$database-id as xs:unsignedLong}, ${2:\\$root as xs:string}, ${3:\\$path as xs:string})", "description": "($database-id,$root,$path)", "trigger": "trgr:trigger-module"}, {"content": "trgr:trigger-remove-permissions(${1:\\$trigger-name as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "description": "($trigger-name,$permissions)", "trigger": "trgr:trigger-remove-permissions"}, {"content": "trgr:trigger-set-description(${1:\\$trigger-name as xs:string}, ${2:\\$description as xs:string})", "description": "($trigger-name,$description)", "trigger": "trgr:trigger-set-description"}, {"content": "trgr:trigger-set-event(${1:\\$trigger-name as xs:string}, ${2:\\$event as element()})", "description": "($trigger-name,$event)", "trigger": "trgr:trigger-set-event"}, {"content": "trgr:trigger-set-module(${1:\\$trigger-name as xs:string}, ${2:\\$module as element(trgr:module)})", "description": "($trigger-name,$module)", "trigger": "trgr:trigger-set-module"}, {"content": "trgr:trigger-set-name(${1:\\$trigger-name as xs:string}, ${2:\\$new-trigger-name as xs:string})", "description": "($trigger-name,$new-trigger-name)", "trigger": "trgr:trigger-set-name"}, {"content": "trgr:trigger-set-permissions(${1:\\$trigger-name as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "description": "($trigger-name,$permissions)", "trigger": "trgr:trigger-set-permissions"}, {"content": "trgr:trigger-set-recursive(${1:\\$trigger-name as xs:string}, ${2:\\$recursive as xs:boolean})", "description": "($trigger-name,$recursive)", "trigger": "trgr:trigger-set-recursive"}, {"content": "trgr:trigger-set-task-priority(${1:\\$trigger-name as xs:string}, ${2:\\$task-priority as xs:string})", "description": "($trigger-name,$task-priority)", "trigger": "trgr:trigger-set-task-priority"}, {"content": "trgr:triggers-change-modules-database(${1:\\$old-db as xs:unsignedLong}, ${2:\\$new-db as xs:unsignedLong})", "description": "($old-db,$new-db)", "trigger": "trgr:triggers-change-modules-database"}, {"content": "view:add-column(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string}, ${3:\\$column as element(view:column)})", "description": "($schema-name,$view-name,$column)", "trigger": "view:add-column"}, {"content": "view:add-field(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string}, ${3:\\$field as element(view:field)})", "description": "($schema-name,$view-name,$field)", "trigger": "view:add-field"}, {"content": "view:add-permissions(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string}, ${3:\\$permissions as element(sec:permission)*})", "description": "($schema-name,$view-name,$permissions)", "trigger": "view:add-permissions"}, {"content": "view:collection()", "trigger": "view:collection"}, {"content": "view:collection-view-scope(${1:\\$collection as xs:string})", "description": "($collection)", "trigger": "view:collection-view-scope"}, {"content": "view:column(${1:\\$name as xs:string}, ${2:\\$range-index as cts:reference})", "description": "($name,$range-index)", "trigger": "view:column"}, {"content": "view:columns(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string})", "description": "($schema-name,$view-name)", "trigger": "view:columns"}, {"content": "view:create(${1:\\$schema-name as xs:string}, ${2:\\$name as xs:string}, ${3:\\$scope as element(*}, view:view-scope)}, ${4:\\$columns as element(view:column)*}, ${5:\\$fields as element(view:field)*}, ${6:\\$permissions as element(sec:permission)*})", "description": "($schema-name,$name,$scope,view:view-scope),$columns,$fields,$permissions)", "trigger": "view:create"}, {"content": "view:element-view-scope(${1:\\$localname as xs:QName})", "description": "($localname)", "trigger": "view:element-view-scope"}, {"content": "view:field(${1:\\$name as xs:string})", "description": "($name)", "trigger": "view:field"}, {"content": "view:fields(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string})", "description": "($schema-name,$view-name)", "trigger": "view:fields"}, {"content": "view:get(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string})", "description": "($schema-name,$view-name)", "trigger": "view:get"}, {"content": "view:get-bindings(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string})", "description": "($schema-name,$view-name)", "trigger": "view:get-bindings"}, {"content": "view:get-by-id(${1:\\$view-id as xs:unsignedLong})", "description": "($view-id)", "trigger": "view:get-by-id"}, {"content": "view:get-column(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string}, ${3:\\$column-name as xs:string})", "description": "($schema-name,$view-name,$column-name)", "trigger": "view:get-column"}, {"content": "view:get-field(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string}, ${3:\\$field-name as xs:string})", "description": "($schema-name,$view-name,$field-name)", "trigger": "view:get-field"}, {"content": "view:get-permissions(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string})", "description": "($schema-name,$view-name)", "trigger": "view:get-permissions"}, {"content": "view:get-view-scope(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string})", "description": "($schema-name,$view-name)", "trigger": "view:get-view-scope"}, {"content": "view:remove(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string})", "description": "($schema-name,$view-name)", "trigger": "view:remove"}, {"content": "view:remove-by-id(${1:\\$view-id as xs:unsignedLong})", "description": "($view-id)", "trigger": "view:remove-by-id"}, {"content": "view:remove-column(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string}, ${3:\\$column-name as xs:string})", "description": "($schema-name,$view-name,$column-name)", "trigger": "view:remove-column"}, {"content": "view:remove-field(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string}, ${3:\\$field-name as xs:string})", "description": "($schema-name,$view-name,$field-name)", "trigger": "view:remove-field"}, {"content": "view:remove-permissions(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string}, ${3:\\$permissions as element(sec:permission)*})", "description": "($schema-name,$view-name,$permissions)", "trigger": "view:remove-permissions"}, {"content": "view:schema-add-permissions(${1:\\$schema-name as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "description": "($schema-name,$permissions)", "trigger": "view:schema-add-permissions"}, {"content": "view:schema-create(${1:\\$schema-name as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "description": "($schema-name,$permissions)", "trigger": "view:schema-create"}, {"content": "view:schema-get(${1:\\$schema-name as xs:string})", "description": "($schema-name)", "trigger": "view:schema-get"}, {"content": "view:schema-get-permissions(${1:\\$schema-name as xs:string})", "description": "($schema-name)", "trigger": "view:schema-get-permissions"}, {"content": "view:schema-remove(${1:\\$schema-name as xs:string})", "description": "($schema-name)", "trigger": "view:schema-remove"}, {"content": "view:schema-remove-permissions(${1:\\$schema-name as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "description": "($schema-name,$permissions)", "trigger": "view:schema-remove-permissions"}, {"content": "view:schema-set-permissions(${1:\\$schema-name as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "description": "($schema-name,$permissions)", "trigger": "view:schema-set-permissions"}, {"content": "view:schemas()", "trigger": "view:schemas"}, {"content": "view:set-columns(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string}, ${3:\\$columns as element(view:column)*})", "description": "($schema-name,$view-name,$columns)", "trigger": "view:set-columns"}, {"content": "view:set-fields(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string}, ${3:\\$fields as element(view:field)*})", "description": "($schema-name,$view-name,$fields)", "trigger": "view:set-fields"}, {"content": "view:set-name(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string}, ${3:\\$new-name as xs:string})", "description": "($schema-name,$view-name,$new-name)", "trigger": "view:set-name"}, {"content": "view:set-permissions(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string}, ${3:\\$permissions as element(sec:permission)*})", "description": "($schema-name,$view-name,$permissions)", "trigger": "view:set-permissions"}, {"content": "view:set-view-scope(${1:\\$schema-name as xs:string}, ${2:\\$view-name as xs:string}, ${3:\\$scope as element(*}, view:view-scope)})", "description": "($schema-name,$view-name,$scope,view:view-scope))", "trigger": "view:set-view-scope"}, {"content": "view:views(${1:\\$schema-name as xs:string})", "description": "($schema-name)", "trigger": "view:views"}, {"content": "xdmp:QName-from-key(${1:\\$key as xs:string})", "description": "($key)", "trigger": "xdmp:QName-from-key"}, {"content": "xdmp:access(${1:\\$uri as xs:string}, ${2:\\$action as xs:string})", "description": "($uri,$action)", "trigger": "xdmp:access"}, {"content": "xdmp:add-response-header(${1:\\$name as xs:string}, ${2:\\$value as xs:string})", "description": "($name,$value)", "trigger": "xdmp:add-response-header"}, {"content": "xdmp:add64(${1:\\$x as xs:unsignedLong}, ${2:\\$y as xs:unsignedLong})", "description": "($x,$y)", "trigger": "xdmp:add64"}, {"content": "xdmp:amp(${1:\\$namespace as xs:string}, ${2:\\$localname as xs:string}, ${3:\\$module-uri as xs:string}, ${4:\\$database as xs:unsignedLong})", "description": "($namespace,$localname,$module-uri,$database)", "trigger": "xdmp:amp"}, {"content": "xdmp:amp-roles(${1:\\$namespace-uri as xs:string}, ${2:\\$localname as xs:string}, ${3:\\$document-uri as xs:string}, ${4:\\$database-id as xs:unsignedLong})", "description": "($namespace-uri,$localname,$document-uri,$database-id)", "trigger": "xdmp:amp-roles"}, {"content": "xdmp:and64(${1:\\$x as xs:unsignedLong}, ${2:\\$y as xs:unsignedLong})", "description": "($x,$y)", "trigger": "xdmp:and64"}, {"content": "xdmp:annotation(${1:\\$function as function(*)}, ${2:\\$name as xs:QName})", "description": "($function,$name)", "trigger": "xdmp:annotation"}, {"content": "xdmp:apply(${1:\\$function as xdmp:function})", "description": "($function)", "trigger": "xdmp:apply"}, {"content": "xdmp:apply(${1:\\$function as xdmp:function}, ${2:\\$params-1-to-N as item()*})", "description": "($function,$params-1-to-N)", "trigger": "xdmp:apply"}, {"content": "xdmp:architecture()", "trigger": "xdmp:architecture"}, {"content": "xdmp:atomizable(${1:\\$item as item()})", "description": "($item)", "trigger": "xdmp:atomizable"}, {"content": "xdmp:base64-decode(${1:\\$encoded as xs:string})", "description": "($encoded)", "trigger": "xdmp:base64-decode"}, {"content": "xdmp:base64-encode(${1:\\$plaintext as xs:string})", "description": "($plaintext)", "trigger": "xdmp:base64-encode"}, {"content": "xdmp:binary-decode(${1:\\$encoded as node()}, ${2:\\$encoding-name as xs:string})", "description": "($encoded,$encoding-name)", "trigger": "xdmp:binary-decode"}, {"content": "xdmp:binary-is-external(${1:\\$source as binary()})", "description": "($source)", "trigger": "xdmp:binary-is-external"}, {"content": "xdmp:binary-is-large(${1:\\$source as binary()})", "description": "($source)", "trigger": "xdmp:binary-is-large"}, {"content": "xdmp:binary-is-small(${1:\\$source as binary()})", "description": "($source)", "trigger": "xdmp:binary-is-small"}, {"content": "xdmp:binary-size(${1:\\$source as binary()?})", "description": "($source)", "trigger": "xdmp:binary-size"}, {"content": "xdmp:binary-size()", "trigger": "xdmp:binary-size"}, {"content": "xdmp:cache-status(${1:\\$host-id as xs:unsignedLong*})", "description": "($host-id)", "trigger": "xdmp:cache-status"}, {"content": "xdmp:cache-status()", "trigger": "xdmp:cache-status"}, {"content": "xdmp:can-grant-roles(${1:\\$roles as xs:string*})", "description": "($roles)", "trigger": "xdmp:can-grant-roles"}, {"content": "xdmp:castable-as(${1:\\$namespace-uri as xs:string}, ${2:\\$local-name as xs:string}, ${3:\\$item as item()})", "description": "($namespace-uri,$local-name,$item)", "trigger": "xdmp:castable-as"}, {"content": "xdmp:cluster(${1:\\$name as xs:string})", "description": "($name)", "trigger": "xdmp:cluster"}, {"content": "xdmp:cluster()", "trigger": "xdmp:cluster"}, {"content": "xdmp:cluster-name(${1:\\$id as xs:unsignedLong})", "description": "($id)", "trigger": "xdmp:cluster-name"}, {"content": "xdmp:cluster-name()", "trigger": "xdmp:cluster-name"}, {"content": "xdmp:collation-canonical-uri(${1:\\$collation-uri as xs:string})", "description": "($collation-uri)", "trigger": "xdmp:collation-canonical-uri"}, {"content": "xdmp:collection-delete(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "xdmp:collection-delete"}, {"content": "xdmp:collection-locks(${1:\\$uri as xs:string*})", "description": "($uri)", "trigger": "xdmp:collection-locks"}, {"content": "xdmp:collection-locks()", "trigger": "xdmp:collection-locks"}, {"content": "xdmp:collection-properties(${1:\\$uri as xs:string*})", "description": "($uri)", "trigger": "xdmp:collection-properties"}, {"content": "xdmp:collection-properties()", "trigger": "xdmp:collection-properties"}, {"content": "xdmp:commit()", "trigger": "xdmp:commit"}, {"content": "xdmp:configuration-timestamp(${1:\\$name as xs:string})", "description": "($name)", "trigger": "xdmp:configuration-timestamp"}, {"content": "xdmp:configuration-timestamp()", "trigger": "xdmp:configuration-timestamp"}, {"content": "xdmp:crypt(${1:\\$password as xs:string}, ${2:\\$salt as xs:string})", "description": "($password,$salt)", "trigger": "xdmp:crypt"}, {"content": "xdmp:crypt2(${1:\\$password as xs:string})", "description": "($password)", "trigger": "xdmp:crypt2"}, {"content": "xdmp:current-last()", "trigger": "xdmp:current-last"}, {"content": "xdmp:current-position()", "trigger": "xdmp:current-position"}, {"content": "xdmp:database(${1:\\$name as xs:string})", "description": "($name)", "trigger": "xdmp:database"}, {"content": "xdmp:database()", "trigger": "xdmp:database"}, {"content": "xdmp:database-backup(${1:\\$forestIDs as unsignedLong*}, ${2:\\$pathname as xs:string})", "description": "($forestIDs,$pathname)", "trigger": "xdmp:database-backup"}, {"content": "xdmp:database-backup(${1:\\$forestIDs as unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$journal-archiving as xs:boolean?})", "description": "($forestIDs,$pathname,$journal-archiving)", "trigger": "xdmp:database-backup"}, {"content": "xdmp:database-backup(${1:\\$forestIDs as unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$journal-archiving as xs:boolean?}, ${4:\\$journal-archive-path as xs:string?})", "description": "($forestIDs,$pathname,$journal-archiving,$journal-archive-path)", "trigger": "xdmp:database-backup"}, {"content": "xdmp:database-backup(${1:\\$forestIDs as unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$journal-archiving as xs:boolean?}, ${4:\\$journal-archive-path as xs:string?}, ${5:\\$lag-limit as xs:unsignedLong})", "description": "($forestIDs,$pathname,$journal-archiving,$journal-archive-path,$lag-limit)", "trigger": "xdmp:database-backup"}, {"content": "xdmp:database-backup-cancel(${1:\\$jobid as unsignedLong})", "description": "($jobid)", "trigger": "xdmp:database-backup-cancel"}, {"content": "xdmp:database-backup-purge(${1:\\$dir as xs:string}, ${2:\\$keep-num-backups as xs:unsignedInt})", "description": "($dir,$keep-num-backups)", "trigger": "xdmp:database-backup-purge"}, {"content": "xdmp:database-backup-status(${1:\\$jobid as unsignedLong})", "description": "($jobid)", "trigger": "xdmp:database-backup-status"}, {"content": "xdmp:database-backup-status(${1:\\$jobid as unsignedLong}, ${2:\\$hostid as unsignedLong})", "description": "($jobid,$hostid)", "trigger": "xdmp:database-backup-status"}, {"content": "xdmp:database-backup-validate(${1:\\$forestIDs as unsignedLong*}, ${2:\\$pathname as xs:string})", "description": "($forestIDs,$pathname)", "trigger": "xdmp:database-backup-validate"}, {"content": "xdmp:database-backup-validate(${1:\\$forestIDs as unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$include-replicas as xs:boolean?})", "description": "($forestIDs,$pathname,$include-replicas)", "trigger": "xdmp:database-backup-validate"}, {"content": "xdmp:database-backup-validate(${1:\\$forestIDs as unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$include-replicas as xs:boolean?}, ${4:\\$journal-archiving as xs:boolean?})", "description": "($forestIDs,$pathname,$include-replicas,$journal-archiving)", "trigger": "xdmp:database-backup-validate"}, {"content": "xdmp:database-backup-validate(${1:\\$forestIDs as unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$include-replicas as xs:boolean?}, ${4:\\$journal-archiving as xs:boolean?}, ${5:\\$journal-archive-path as xs:string?})", "description": "($forestIDs,$pathname,$include-replicas,$journal-archiving,$journal-archive-path)", "trigger": "xdmp:database-backup-validate"}, {"content": "xdmp:database-backup-validate(${1:\\$forestIDs as unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$include-replicas as xs:boolean?}, ${4:\\$journal-archiving as xs:boolean?}, ${5:\\$journal-archive-path as xs:string?}, ${6:\\$lag-limit as xs:unsignedLong})", "description": "($forestIDs,$pathname,$include-replicas,$journal-archiving,$journal-archive-path,$lag-limit)", "trigger": "xdmp:database-backup-validate"}, {"content": "xdmp:database-forests(${1:\\$database-id as xs:unsignedLong})", "description": "($database-id)", "trigger": "xdmp:database-forests"}, {"content": "xdmp:database-forests(${1:\\$database-id as xs:unsignedLong}, ${2:\\$include-replicas as xs:boolean?})", "description": "($database-id,$include-replicas)", "trigger": "xdmp:database-forests"}, {"content": "xdmp:database-global-nonblocking-timestamp(${1:\\$database-id as xs:unsignedLong})", "description": "($database-id)", "trigger": "xdmp:database-global-nonblocking-timestamp"}, {"content": "xdmp:database-is-replica(${1:\\$database-id as xs:unsignedLong})", "description": "($database-id)", "trigger": "xdmp:database-is-replica"}, {"content": "xdmp:database-name(${1:\\$database-id as xs:unsignedLong})", "description": "($database-id)", "trigger": "xdmp:database-name"}, {"content": "xdmp:database-nonblocking-timestamp(${1:\\$database-id as xs:unsignedLong})", "description": "($database-id)", "trigger": "xdmp:database-nonblocking-timestamp"}, {"content": "xdmp:database-partition-forests(${1:\\$value as item})", "description": "($value)", "trigger": "xdmp:database-partition-forests"}, {"content": "xdmp:database-path-namespaces(${1:\\$dbid as xs:ulong})", "description": "($dbid)", "trigger": "xdmp:database-path-namespaces"}, {"content": "xdmp:database-restore(${1:\\$forestIDs as unsignedLong*}, ${2:\\$pathname as xs:string})", "description": "($forestIDs,$pathname)", "trigger": "xdmp:database-restore"}, {"content": "xdmp:database-restore(${1:\\$forestIDs as unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$restoreToTime as xs:dateTime?})", "description": "($forestIDs,$pathname,$restoreToTime)", "trigger": "xdmp:database-restore"}, {"content": "xdmp:database-restore(${1:\\$forestIDs as unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$restoreToTime as xs:dateTime?}, ${4:\\$journal-archiving as xs:boolean?})", "description": "($forestIDs,$pathname,$restoreToTime,$journal-archiving)", "trigger": "xdmp:database-restore"}, {"content": "xdmp:database-restore(${1:\\$forestIDs as unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$restoreToTime as xs:dateTime?}, ${4:\\$journal-archiving as xs:boolean?}, ${5:\\$journal-archive-path as xs:string?})", "description": "($forestIDs,$pathname,$restoreToTime,$journal-archiving,$journal-archive-path)", "trigger": "xdmp:database-restore"}, {"content": "xdmp:database-restore-cancel(${1:\\$jobid as unsignedLong})", "description": "($jobid)", "trigger": "xdmp:database-restore-cancel"}, {"content": "xdmp:database-restore-status(${1:\\$jobid as unsignedLong})", "description": "($jobid)", "trigger": "xdmp:database-restore-status"}, {"content": "xdmp:database-restore-validate(${1:\\$forestIDs as unsignedLong*}, ${2:\\$pathname as xs:string})", "description": "($forestIDs,$pathname)", "trigger": "xdmp:database-restore-validate"}, {"content": "xdmp:database-restore-validate(${1:\\$forestIDs as unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$restoreToTime as xs:dateTime?})", "description": "($forestIDs,$pathname,$restoreToTime)", "trigger": "xdmp:database-restore-validate"}, {"content": "xdmp:database-restore-validate(${1:\\$forestIDs as unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$restoreToTime as xs:dateTime?}, ${4:\\$include-replicas as xs:boolean?})", "description": "($forestIDs,$pathname,$restoreToTime,$include-replicas)", "trigger": "xdmp:database-restore-validate"}, {"content": "xdmp:database-restore-validate(${1:\\$forestIDs as unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$restoreToTime as xs:dateTime?}, ${4:\\$include-replicas as xs:boolean?}, ${5:\\$journal-archiving as xs:boolean?})", "description": "($forestIDs,$pathname,$restoreToTime,$include-replicas,$journal-archiving)", "trigger": "xdmp:database-restore-validate"}, {"content": "xdmp:database-restore-validate(${1:\\$forestIDs as unsignedLong*}, ${2:\\$pathname as xs:string}, ${3:\\$restoreToTime as xs:dateTime?}, ${4:\\$include-replicas as xs:boolean?}, ${5:\\$journal-archiving as xs:boolean?}, ${6:\\$journal-archive-path as xs:string?})", "description": "($forestIDs,$pathname,$restoreToTime,$include-replicas,$journal-archiving,$journal-archive-path)", "trigger": "xdmp:database-restore-validate"}, {"content": "xdmp:databases()", "trigger": "xdmp:databases"}, {"content": "xdmp:dayname-from-date(${1:\\$arg as xs:date?})", "description": "($arg)", "trigger": "xdmp:dayname-from-date"}, {"content": "xdmp:decode-from-NCName(${1:\\$name as xs:string})", "description": "($name)", "trigger": "xdmp:decode-from-NCName"}, {"content": "xdmp:default-collections(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "xdmp:default-collections"}, {"content": "xdmp:default-collections()", "trigger": "xdmp:default-collections"}, {"content": "xdmp:default-permissions(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "xdmp:default-permissions"}, {"content": "xdmp:default-permissions()", "trigger": "xdmp:default-permissions"}, {"content": "xdmp:describe(${1:\\$item as item()*})", "description": "($item)", "trigger": "xdmp:describe"}, {"content": "xdmp:describe(${1:\\$item as item()*}, ${2:\\$maxSequenceLength as xs:unsignedInt?})", "description": "($item,$maxSequenceLength)", "trigger": "xdmp:describe"}, {"content": "xdmp:describe(${1:\\$item as item()*}, ${2:\\$maxSequenceLength as xs:unsignedInt?}, ${3:\\$maxItemLength as xs:unsignedInt*})", "description": "($item,$maxSequenceLength,$maxItemLength)", "trigger": "xdmp:describe"}, {"content": "xdmp:diacritic-less(${1:\\$string as xs:string})", "description": "($string)", "trigger": "xdmp:diacritic-less"}, {"content": "xdmp:directory(${1:\\$uri as xs:string*})", "description": "($uri)", "trigger": "xdmp:directory"}, {"content": "xdmp:directory(${1:\\$uri as xs:string*}, ${2:\\$depth as xs:string?})", "description": "($uri,$depth)", "trigger": "xdmp:directory"}, {"content": "xdmp:directory-create(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "xdmp:directory-create"}, {"content": "xdmp:directory-create(${1:\\$uri as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "description": "($uri,$permissions)", "trigger": "xdmp:directory-create"}, {"content": "xdmp:directory-create(${1:\\$uri as xs:string}, ${2:\\$permissions as element(sec:permission)*}, ${3:\\$collections as xs:string*})", "description": "($uri,$permissions,$collections)", "trigger": "xdmp:directory-create"}, {"content": "xdmp:directory-create(${1:\\$uri as xs:string}, ${2:\\$permissions as element(sec:permission)*}, ${3:\\$collections as xs:string*}, ${4:\\$quality as xs:int?})", "description": "($uri,$permissions,$collections,$quality)", "trigger": "xdmp:directory-create"}, {"content": "xdmp:directory-create(${1:\\$uri as xs:string}, ${2:\\$permissions as element(sec:permission)*}, ${3:\\$collections as xs:string*}, ${4:\\$quality as xs:int?}, ${5:\\$forest-ids as xs:unsignedLong*})", "description": "($uri,$permissions,$collections,$quality,$forest-ids)", "trigger": "xdmp:directory-create"}, {"content": "xdmp:directory-delete(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "xdmp:directory-delete"}, {"content": "xdmp:directory-locks(${1:\\$uri as xs:string*})", "description": "($uri)", "trigger": "xdmp:directory-locks"}, {"content": "xdmp:directory-locks(${1:\\$uri as xs:string*}, ${2:\\$depth as xs:string?})", "description": "($uri,$depth)", "trigger": "xdmp:directory-locks"}, {"content": "xdmp:directory-properties(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "xdmp:directory-properties"}, {"content": "xdmp:directory-properties(${1:\\$uri as xs:string}, ${2:\\$depth as xs:string?})", "description": "($uri,$depth)", "trigger": "xdmp:directory-properties"}, {"content": "xdmp:document-add-collections(${1:\\$uri as xs:string}, ${2:\\$collections as xs:string*})", "description": "($uri,$collections)", "trigger": "xdmp:document-add-collections"}, {"content": "xdmp:document-add-permissions(${1:\\$uri as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "description": "($uri,$permissions)", "trigger": "xdmp:document-add-permissions"}, {"content": "xdmp:document-add-properties(${1:\\$uri as xs:string}, ${2:\\$props as element()*})", "description": "($uri,$props)", "trigger": "xdmp:document-add-properties"}, {"content": "xdmp:document-assign(${1:\\$uri as xs:string}, ${2:\\$forest-count as xs:positiveInteger})", "description": "($uri,$forest-count)", "trigger": "xdmp:document-assign"}, {"content": "xdmp:document-assign(${1:\\$uri as xs:string}, ${2:\\$forest-count as xs:positiveInteger}, ${3:\\$assignment-policy as xs:string})", "description": "($uri,$forest-count,$assignment-policy)", "trigger": "xdmp:document-assign"}, {"content": "xdmp:document-delete(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "xdmp:document-delete"}, {"content": "xdmp:document-filter(${1:\\$doc as node()})", "description": "($doc)", "trigger": "xdmp:document-filter"}, {"content": "xdmp:document-filter(${1:\\$doc as node()}, ${2:\\$options as node()?})", "description": "($doc,$options)", "trigger": "xdmp:document-filter"}, {"content": "xdmp:document-forest(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "xdmp:document-forest"}, {"content": "xdmp:document-forest(${1:\\$uri as xs:string}, ${2:\\$forest-ids as xs:unsignedLong*})", "description": "($uri,$forest-ids)", "trigger": "xdmp:document-forest"}, {"content": "xdmp:document-get(${1:\\$location as xs:string})", "description": "($location)", "trigger": "xdmp:document-get"}, {"content": "xdmp:document-get(${1:\\$location as xs:string}, ${2:\\$options as node()?})", "description": "($location,$options)", "trigger": "xdmp:document-get"}, {"content": "xdmp:document-get-collections(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "xdmp:document-get-collections"}, {"content": "xdmp:document-get-permissions(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "xdmp:document-get-permissions"}, {"content": "xdmp:document-get-properties(${1:\\$uri as xs:string}, ${2:\\$property as xs:QName})", "description": "($uri,$property)", "trigger": "xdmp:document-get-properties"}, {"content": "xdmp:document-get-quality(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "xdmp:document-get-quality"}, {"content": "xdmp:document-insert(${1:\\$uri as xs:string}, ${2:\\$root as node()})", "description": "($uri,$root)", "trigger": "xdmp:document-insert"}, {"content": "xdmp:document-insert(${1:\\$uri as xs:string}, ${2:\\$root as node()}, ${3:\\$permissions as element(sec:permission)*})", "description": "($uri,$root,$permissions)", "trigger": "xdmp:document-insert"}, {"content": "xdmp:document-insert(${1:\\$uri as xs:string}, ${2:\\$root as node()}, ${3:\\$permissions as element(sec:permission)*}, ${4:\\$collections as xs:string*})", "description": "($uri,$root,$permissions,$collections)", "trigger": "xdmp:document-insert"}, {"content": "xdmp:document-insert(${1:\\$uri as xs:string}, ${2:\\$root as node()}, ${3:\\$permissions as element(sec:permission)*}, ${4:\\$collections as xs:string*}, ${5:\\$quality as xs:int?})", "description": "($uri,$root,$permissions,$collections,$quality)", "trigger": "xdmp:document-insert"}, {"content": "xdmp:document-insert(${1:\\$uri as xs:string}, ${2:\\$root as node()}, ${3:\\$permissions as element(sec:permission)*}, ${4:\\$collections as xs:string*}, ${5:\\$quality as xs:int?}, ${6:\\$forest-ids as xs:unsignedLong*})", "description": "($uri,$root,$permissions,$collections,$quality,$forest-ids)", "trigger": "xdmp:document-insert"}, {"content": "xdmp:document-load(${1:\\$location as xs:string})", "description": "($location)", "trigger": "xdmp:document-load"}, {"content": "xdmp:document-load(${1:\\$location as xs:string}, ${2:\\$options as node()?})", "description": "($location,$options)", "trigger": "xdmp:document-load"}, {"content": "xdmp:document-locks(${1:\\$uri as xs:string*})", "description": "($uri)", "trigger": "xdmp:document-locks"}, {"content": "xdmp:document-locks()", "trigger": "xdmp:document-locks"}, {"content": "xdmp:document-properties(${1:\\$uri as xs:string*})", "description": "($uri)", "trigger": "xdmp:document-properties"}, {"content": "xdmp:document-properties()", "trigger": "xdmp:document-properties"}, {"content": "xdmp:document-remove-collections(${1:\\$uri as xs:string}, ${2:\\$collections as xs:string*})", "description": "($uri,$collections)", "trigger": "xdmp:document-remove-collections"}, {"content": "xdmp:document-remove-permissions(${1:\\$uri as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "description": "($uri,$permissions)", "trigger": "xdmp:document-remove-permissions"}, {"content": "xdmp:document-remove-properties(${1:\\$uri as xs:string}, ${2:\\$property-names as xs:QName*})", "description": "($uri,$property-names)", "trigger": "xdmp:document-remove-properties"}, {"content": "xdmp:document-set-collections(${1:\\$uri as xs:string}, ${2:\\$collections as xs:string*})", "description": "($uri,$collections)", "trigger": "xdmp:document-set-collections"}, {"content": "xdmp:document-set-permissions(${1:\\$uri as xs:string}, ${2:\\$permissions as element(sec:permission)*})", "description": "($uri,$permissions)", "trigger": "xdmp:document-set-permissions"}, {"content": "xdmp:document-set-properties(${1:\\$uri as xs:string}, ${2:\\$props as element()*})", "description": "($uri,$props)", "trigger": "xdmp:document-set-properties"}, {"content": "xdmp:document-set-property(${1:\\$uri as xs:string}, ${2:\\$prop as element()})", "description": "($uri,$prop)", "trigger": "xdmp:document-set-property"}, {"content": "xdmp:document-set-quality(${1:\\$uri as xs:string}, ${2:\\$quality as xs:int})", "description": "($uri,$quality)", "trigger": "xdmp:document-set-quality"}, {"content": "xdmp:document-timestamp(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "xdmp:document-timestamp"}, {"content": "xdmp:eager(${1:\\$arg as item()*})", "description": "($arg)", "trigger": "xdmp:eager"}, {"content": "xdmp:elapsed-time()", "trigger": "xdmp:elapsed-time"}, {"content": "xdmp:element-content-type(${1:\\$element as element()})", "description": "($element)", "trigger": "xdmp:element-content-type"}, {"content": "xdmp:email(${1:\\$message as node()})", "description": "($message)", "trigger": "xdmp:email"}, {"content": "xdmp:encode-for-NCName(${1:\\$name as xs:string})", "description": "($name)", "trigger": "xdmp:encode-for-NCName"}, {"content": "xdmp:encoding-language-detect(${1:\\$document as node()})", "description": "($document)", "trigger": "xdmp:encoding-language-detect"}, {"content": "xdmp:estimate(${1:\\$expression as item()*})", "description": "($expression)", "trigger": "xdmp:estimate"}, {"content": "xdmp:estimate(${1:\\$expression as item()*}, ${2:\\$maximum as xs:double?})", "description": "($expression,$maximum)", "trigger": "xdmp:estimate"}, {"content": "xdmp:eval(${1:\\$xquery as xs:string})", "description": "($xquery)", "trigger": "xdmp:eval"}, {"content": "xdmp:eval(${1:\\$xquery as xs:string}, ${2:\\$vars as item()*})", "description": "($xquery,$vars)", "trigger": "xdmp:eval"}, {"content": "xdmp:eval(${1:\\$xquery as xs:string}, ${2:\\$vars as item()*}, ${3:\\$options as node()?})", "description": "($xquery,$vars,$options)", "trigger": "xdmp:eval"}, {"content": "xdmp:eval-in(${1:\\$xquery as xs:string}, ${2:\\$ID as xs:unsignedLong})", "description": "($xquery,$ID)", "trigger": "xdmp:eval-in"}, {"content": "xdmp:eval-in(${1:\\$xquery as xs:string}, ${2:\\$ID as xs:unsignedLong}, ${3:\\$vars as item()*})", "description": "($xquery,$ID,$vars)", "trigger": "xdmp:eval-in"}, {"content": "xdmp:eval-in(${1:\\$xquery as xs:string}, ${2:\\$ID as xs:unsignedLong}, ${3:\\$vars as item()*}, ${4:\\$modules as xs:unsignedLong?})", "description": "($xquery,$ID,$vars,$modules)", "trigger": "xdmp:eval-in"}, {"content": "xdmp:eval-in(${1:\\$xquery as xs:string}, ${2:\\$ID as xs:unsignedLong}, ${3:\\$vars as item()*}, ${4:\\$modules as xs:unsignedLong?}, ${5:\\$root as xs:string?})", "description": "($xquery,$ID,$vars,$modules,$root)", "trigger": "xdmp:eval-in"}, {"content": "xdmp:excel-convert(${1:\\$doc as node()}, ${2:\\$filename as xs:string})", "description": "($doc,$filename)", "trigger": "xdmp:excel-convert"}, {"content": "xdmp:excel-convert(${1:\\$doc as node()}, ${2:\\$filename as xs:string}, ${3:\\$options as node()?})", "description": "($doc,$filename,$options)", "trigger": "xdmp:excel-convert"}, {"content": "xdmp:exists(${1:\\$expression as item()*})", "description": "($expression)", "trigger": "xdmp:exists"}, {"content": "xdmp:external-binary(${1:\\$path as xs:string})", "description": "($path)", "trigger": "xdmp:external-binary"}, {"content": "xdmp:external-binary(${1:\\$path as xs:string}, ${2:\\$starting-location as xs:double})", "description": "($path,$starting-location)", "trigger": "xdmp:external-binary"}, {"content": "xdmp:external-binary(${1:\\$path as xs:string}, ${2:\\$starting-location as xs:double}, ${3:\\$length as xs:double})", "description": "($path,$starting-location,$length)", "trigger": "xdmp:external-binary"}, {"content": "xdmp:external-binary-path(${1:\\$source as binary()})", "description": "($source)", "trigger": "xdmp:external-binary-path"}, {"content": "xdmp:external-security(${1:\\$external-security as xs:string})", "description": "($external-security)", "trigger": "xdmp:external-security"}, {"content": "xdmp:filesystem-directory(${1:\\$pathname as xs:string})", "description": "($pathname)", "trigger": "xdmp:filesystem-directory"}, {"content": "xdmp:filesystem-file(${1:\\$pathname as xs:string})", "description": "($pathname)", "trigger": "xdmp:filesystem-file"}, {"content": "xdmp:filesystem-file-exists(${1:\\$pathname as xs:string})", "description": "($pathname)", "trigger": "xdmp:filesystem-file-exists"}, {"content": "xdmp:filesystem-file-exists(${1:\\$pathname as xs:string}, ${2:\\$host as xs:unsignedLong?})", "description": "($pathname,$host)", "trigger": "xdmp:filesystem-file-exists"}, {"content": "xdmp:filesystem-file-length(${1:\\$pathname as xs:string})", "description": "($pathname)", "trigger": "xdmp:filesystem-file-length"}, {"content": "xdmp:filesystem-filepath(${1:\\$pathname as xs:string})", "description": "($pathname)", "trigger": "xdmp:filesystem-filepath"}, {"content": "xdmp:foreign-cluster-status(${1:\\$host-id as xs:unsignedLong}, ${2:\\$foreign-cluster-id as xs:unsignedLong})", "description": "($host-id,$foreign-cluster-id)", "trigger": "xdmp:foreign-cluster-status"}, {"content": "xdmp:foreign-clusters()", "trigger": "xdmp:foreign-clusters"}, {"content": "xdmp:forest(${1:\\$name as xs:string})", "description": "($name)", "trigger": "xdmp:forest"}, {"content": "xdmp:forest-backup(${1:\\$forestID as unsignedLong}, ${2:\\$pathname as xs:string})", "description": "($forestID,$pathname)", "trigger": "xdmp:forest-backup"}, {"content": "xdmp:forest-clear(${1:\\$forestIDs as unsignedLong*})", "description": "($forestIDs)", "trigger": "xdmp:forest-clear"}, {"content": "xdmp:forest-counts(${1:\\$forest-id as xs:unsignedLong*})", "description": "($forest-id)", "trigger": "xdmp:forest-counts"}, {"content": "xdmp:forest-counts(${1:\\$forest-id as xs:unsignedLong*}, ${2:\\$show-elements as xs:string*})", "description": "($forest-id,$show-elements)", "trigger": "xdmp:forest-counts"}, {"content": "xdmp:forest-counts(${1:\\$forest-id as xs:unsignedLong*}, ${2:\\$show-elements as xs:string*}, ${3:\\$options as xs:string*})", "description": "($forest-id,$show-elements,$options)", "trigger": "xdmp:forest-counts"}, {"content": "xdmp:forest-databases(${1:\\$forest as xs:unsignedLong})", "description": "($forest)", "trigger": "xdmp:forest-databases"}, {"content": "xdmp:forest-host(${1:\\$id as xs:unsignedLong})", "description": "($id)", "trigger": "xdmp:forest-host"}, {"content": "xdmp:forest-name(${1:\\$id as xs:unsignedLong})", "description": "($id)", "trigger": "xdmp:forest-name"}, {"content": "xdmp:forest-online(${1:\\$forestID as unsignedLong})", "description": "($forestID)", "trigger": "xdmp:forest-online"}, {"content": "xdmp:forest-online(${1:\\$forestID as unsignedLong}, ${2:\\$timestamp as unsignedLong})", "description": "($forestID,$timestamp)", "trigger": "xdmp:forest-online"}, {"content": "xdmp:forest-online(${1:\\$forestID as unsignedLong}, ${2:\\$timestamp as unsignedLong}, ${3:\\$isReplica as xs:boolean})", "description": "($forestID,$timestamp,$isReplica)", "trigger": "xdmp:forest-online"}, {"content": "xdmp:forest-online(${1:\\$forestID as unsignedLong}, ${2:\\$timestamp as unsignedLong}, ${3:\\$isReplica as xs:boolean}, ${4:\\$syncingOk as xs:boolean})", "description": "($forestID,$timestamp,$isReplica,$syncingOk)", "trigger": "xdmp:forest-online"}, {"content": "xdmp:forest-open-replica(${1:\\$forestIDs as unsignedLong*})", "description": "($forestIDs)", "trigger": "xdmp:forest-open-replica"}, {"content": "xdmp:forest-restart(${1:\\$forestIDs as unsignedLong*})", "description": "($forestIDs)", "trigger": "xdmp:forest-restart"}, {"content": "xdmp:forest-restore(${1:\\$forestID as unsignedLong}, ${2:\\$pathname as xs:string})", "description": "($forestID,$pathname)", "trigger": "xdmp:forest-restore"}, {"content": "xdmp:forest-rollback(${1:\\$forestIDs as unsignedLong*}, ${2:\\$timestamp as unsignedLong})", "description": "($forestIDs,$timestamp)", "trigger": "xdmp:forest-rollback"}, {"content": "xdmp:forest-status(${1:\\$forest-id as xs:unsignedLong})", "description": "($forest-id)", "trigger": "xdmp:forest-status"}, {"content": "xdmp:forest-updates-allowed(${1:\\$forest-id as xs:unsignedLong})", "description": "($forest-id)", "trigger": "xdmp:forest-updates-allowed"}, {"content": "xdmp:forests()", "trigger": "xdmp:forests"}, {"content": "xdmp:format-number(${1:\\$value as numeric}, ${2:\\$picture as xs:string}, ${3:\\$language as xs:string}, ${4:\\$letter-value as xs:string}, ${5:\\$ordchar as xs:string}, ${6:\\$zero-padding as xs:string}, ${7:\\$grouping-separator as xs:string}, ${8:\\$grouping-size as xs:string})", "description": "($value,$picture,$language,$letter-value,$ordchar,$zero-padding,$grouping-separator,$grouping-size)", "trigger": "xdmp:format-number"}, {"content": "xdmp:from-json(${1:\\$arg as xs:string})", "description": "($arg)", "trigger": "xdmp:from-json"}, {"content": "xdmp:function(${1:\\$function as xs:QName})", "description": "($function)", "trigger": "xdmp:function"}, {"content": "xdmp:function(${1:\\$function as xs:QName}, ${2:\\$module-path as xs:string?})", "description": "($function,$module-path)", "trigger": "xdmp:function"}, {"content": "xdmp:function-module(${1:\\$function as xdmp:function})", "description": "($function)", "trigger": "xdmp:function-module"}, {"content": "xdmp:function-name(${1:\\$function as xdmp:function})", "description": "($function)", "trigger": "xdmp:function-name"}, {"content": "xdmp:function-parameter-name(${1:\\$function as function(*)}, ${2:\\$position as xs:integer})", "description": "($function,$position)", "trigger": "xdmp:function-parameter-name"}, {"content": "xdmp:function-parameter-type(${1:\\$function as function(*)}, ${2:\\$position as xs:integer})", "description": "($function,$position)", "trigger": "xdmp:function-parameter-type"}, {"content": "xdmp:function-return-type(${1:\\$function as function(*)})", "description": "($function)", "trigger": "xdmp:function-return-type"}, {"content": "xdmp:function-signature(${1:\\$function as function(*)})", "description": "($function)", "trigger": "xdmp:function-signature"}, {"content": "xdmp:functions()", "trigger": "xdmp:functions"}, {"content": "xdmp:get(${1:\\$path as xs:string})", "description": "($path)", "trigger": "xdmp:get"}, {"content": "xdmp:get(${1:\\$path as xs:string}, ${2:\\$default-namespace as xs:string?})", "description": "($path,$default-namespace)", "trigger": "xdmp:get"}, {"content": "xdmp:get(${1:\\$path as xs:string}, ${2:\\$default-namespace as xs:string?}, ${3:\\$options as xs:string*})", "description": "($path,$default-namespace,$options)", "trigger": "xdmp:get"}, {"content": "xdmp:get-current-roles()", "trigger": "xdmp:get-current-roles"}, {"content": "xdmp:get-current-user()", "trigger": "xdmp:get-current-user"}, {"content": "xdmp:get-current-userid()", "trigger": "xdmp:get-current-userid"}, {"content": "xdmp:get-invoked-path()", "trigger": "xdmp:get-invoked-path"}, {"content": "xdmp:get-original-url()", "trigger": "xdmp:get-original-url"}, {"content": "xdmp:get-orphaned-binaries(${1:\\$id as xs:unsignedLong})", "description": "($id)", "trigger": "xdmp:get-orphaned-binaries"}, {"content": "xdmp:get-request-body(${1:\\$format as xs:string?})", "description": "($format)", "trigger": "xdmp:get-request-body"}, {"content": "xdmp:get-request-body()", "trigger": "xdmp:get-request-body"}, {"content": "xdmp:get-request-client-address()", "trigger": "xdmp:get-request-client-address"}, {"content": "xdmp:get-request-client-certificate()", "trigger": "xdmp:get-request-client-certificate"}, {"content": "xdmp:get-request-field(${1:\\$name as xs:string})", "description": "($name)", "trigger": "xdmp:get-request-field"}, {"content": "xdmp:get-request-field(${1:\\$name as xs:string}, ${2:\\$default as xs:string?})", "description": "($name,$default)", "trigger": "xdmp:get-request-field"}, {"content": "xdmp:get-request-field-content-type(${1:\\$field-name as xs:string})", "description": "($field-name)", "trigger": "xdmp:get-request-field-content-type"}, {"content": "xdmp:get-request-field-filename(${1:\\$field-name as xs:string})", "description": "($field-name)", "trigger": "xdmp:get-request-field-filename"}, {"content": "xdmp:get-request-field-names()", "trigger": "xdmp:get-request-field-names"}, {"content": "xdmp:get-request-header(${1:\\$name as xs:string})", "description": "($name)", "trigger": "xdmp:get-request-header"}, {"content": "xdmp:get-request-header(${1:\\$name as xs:string}, ${2:\\$default as xs:string?})", "description": "($name,$default)", "trigger": "xdmp:get-request-header"}, {"content": "xdmp:get-request-header-names()", "trigger": "xdmp:get-request-header-names"}, {"content": "xdmp:get-request-method()", "trigger": "xdmp:get-request-method"}, {"content": "xdmp:get-request-path()", "trigger": "xdmp:get-request-path"}, {"content": "xdmp:get-request-port()", "trigger": "xdmp:get-request-port"}, {"content": "xdmp:get-request-protocol()", "trigger": "xdmp:get-request-protocol"}, {"content": "xdmp:get-request-url()", "trigger": "xdmp:get-request-url"}, {"content": "xdmp:get-request-user()", "trigger": "xdmp:get-request-user"}, {"content": "xdmp:get-request-username()", "trigger": "xdmp:get-request-username"}, {"content": "xdmp:get-response-code()", "trigger": "xdmp:get-response-code"}, {"content": "xdmp:get-response-encoding()", "trigger": "xdmp:get-response-encoding"}, {"content": "xdmp:get-server-field(${1:\\$name as xs:string})", "description": "($name)", "trigger": "xdmp:get-server-field"}, {"content": "xdmp:get-server-field(${1:\\$name as xs:string}, ${2:\\$default as item()*})", "description": "($name,$default)", "trigger": "xdmp:get-server-field"}, {"content": "xdmp:get-server-field-names()", "trigger": "xdmp:get-server-field-names"}, {"content": "xdmp:get-session-field(${1:\\$name as xs:string})", "description": "($name)", "trigger": "xdmp:get-session-field"}, {"content": "xdmp:get-session-field(${1:\\$name as xs:string}, ${2:\\$default as item()*})", "description": "($name,$default)", "trigger": "xdmp:get-session-field"}, {"content": "xdmp:get-session-field-names()", "trigger": "xdmp:get-session-field-names"}, {"content": "xdmp:get-transaction-mode()", "trigger": "xdmp:get-transaction-mode"}, {"content": "xdmp:get-url-rewriter-path()", "trigger": "xdmp:get-url-rewriter-path"}, {"content": "xdmp:group(${1:\\$name as xs:string})", "description": "($name)", "trigger": "xdmp:group"}, {"content": "xdmp:group()", "trigger": "xdmp:group"}, {"content": "xdmp:group-hosts(${1:\\$name as xs:unsignedLong})", "description": "($name)", "trigger": "xdmp:group-hosts"}, {"content": "xdmp:group-hosts()", "trigger": "xdmp:group-hosts"}, {"content": "xdmp:group-name(${1:\\$name as xs:unsignedLong})", "description": "($name)", "trigger": "xdmp:group-name"}, {"content": "xdmp:group-name()", "trigger": "xdmp:group-name"}, {"content": "xdmp:group-servers(${1:\\$name as xs:unsignedLong})", "description": "($name)", "trigger": "xdmp:group-servers"}, {"content": "xdmp:group-servers()", "trigger": "xdmp:group-servers"}, {"content": "xdmp:groups()", "trigger": "xdmp:groups"}, {"content": "xdmp:gss-server-negotiate(${1:\\$inputToken as xs:string})", "description": "($inputToken)", "trigger": "xdmp:gss-server-negotiate"}, {"content": "xdmp:gunzip(${1:\\$gzipnode as binary()}, ${2:\\$options as node()?})", "description": "($gzipnode,$options)", "trigger": "xdmp:gunzip"}, {"content": "xdmp:gzip(${1:\\$node as node()})", "description": "($node)", "trigger": "xdmp:gzip"}, {"content": "xdmp:has-privilege(${1:\\$privileges as xs:string*}, ${2:\\$kind as xs:string})", "description": "($privileges,$kind)", "trigger": "xdmp:has-privilege"}, {"content": "xdmp:hash32(${1:\\$string as xs:string})", "description": "($string)", "trigger": "xdmp:hash32"}, {"content": "xdmp:hash64(${1:\\$string as xs:string})", "description": "($string)", "trigger": "xdmp:hash64"}, {"content": "xdmp:hex-to-integer(${1:\\$hex as xs:string})", "description": "($hex)", "trigger": "xdmp:hex-to-integer"}, {"content": "xdmp:hmac-md5(${1:\\$secretkey as item()}, ${2:\\$message as item()})", "description": "($secretkey,$message)", "trigger": "xdmp:hmac-md5"}, {"content": "xdmp:hmac-md5(${1:\\$secretkey as item()}, ${2:\\$message as item()}, ${3:\\$encoding as xs:string})", "description": "($secretkey,$message,$encoding)", "trigger": "xdmp:hmac-md5"}, {"content": "xdmp:hmac-sha1(${1:\\$secretkey as item()}, ${2:\\$message as xs:string})", "description": "($secretkey,$message)", "trigger": "xdmp:hmac-sha1"}, {"content": "xdmp:hmac-sha1(${1:\\$secretkey as item()}, ${2:\\$message as xs:string}, ${3:\\$encoding as xs:string})", "description": "($secretkey,$message,$encoding)", "trigger": "xdmp:hmac-sha1"}, {"content": "xdmp:hmac-sha256(${1:\\$secretkey as item()}, ${2:\\$message as item()})", "description": "($secretkey,$message)", "trigger": "xdmp:hmac-sha256"}, {"content": "xdmp:hmac-sha256(${1:\\$secretkey as item()}, ${2:\\$message as item()}, ${3:\\$encoding as xs:string})", "description": "($secretkey,$message,$encoding)", "trigger": "xdmp:hmac-sha256"}, {"content": "xdmp:hmac-sha512(${1:\\$secretkey as item()}, ${2:\\$message as item()})", "description": "($secretkey,$message)", "trigger": "xdmp:hmac-sha512"}, {"content": "xdmp:hmac-sha512(${1:\\$secretkey as item()}, ${2:\\$message as item()}, ${3:\\$encoding as xs:string})", "description": "($secretkey,$message,$encoding)", "trigger": "xdmp:hmac-sha512"}, {"content": "xdmp:host(${1:\\$name as xs:string})", "description": "($name)", "trigger": "xdmp:host"}, {"content": "xdmp:host()", "trigger": "xdmp:host"}, {"content": "xdmp:host-forests(${1:\\$ID as xs:unsignedLong})", "description": "($ID)", "trigger": "xdmp:host-forests"}, {"content": "xdmp:host-get-ssl-fips-enabled(${1:\\$host-id as xs:unsignedLong*})", "description": "($host-id)", "trigger": "xdmp:host-get-ssl-fips-enabled"}, {"content": "xdmp:host-name(${1:\\$ID as xs:unsignedLong})", "description": "($ID)", "trigger": "xdmp:host-name"}, {"content": "xdmp:host-status(${1:\\$host-id as xs:unsignedLong*})", "description": "($host-id)", "trigger": "xdmp:host-status"}, {"content": "xdmp:hosts()", "trigger": "xdmp:hosts"}, {"content": "xdmp:http-delete(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "xdmp:http-delete"}, {"content": "xdmp:http-delete(${1:\\$uri as xs:string}, ${2:\\$options as node()?})", "description": "($uri,$options)", "trigger": "xdmp:http-delete"}, {"content": "xdmp:http-get(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "xdmp:http-get"}, {"content": "xdmp:http-get(${1:\\$uri as xs:string}, ${2:\\$options as node()?})", "description": "($uri,$options)", "trigger": "xdmp:http-get"}, {"content": "xdmp:http-head(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "xdmp:http-head"}, {"content": "xdmp:http-head(${1:\\$uri as xs:string}, ${2:\\$options as node()?})", "description": "($uri,$options)", "trigger": "xdmp:http-head"}, {"content": "xdmp:http-options(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "xdmp:http-options"}, {"content": "xdmp:http-options(${1:\\$uri as xs:string}, ${2:\\$options as node()?})", "description": "($uri,$options)", "trigger": "xdmp:http-options"}, {"content": "xdmp:http-post(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "xdmp:http-post"}, {"content": "xdmp:http-post(${1:\\$uri as xs:string}, ${2:\\$options as node()?})", "description": "($uri,$options)", "trigger": "xdmp:http-post"}, {"content": "xdmp:http-post(${1:\\$uri as xs:string}, ${2:\\$options as node()?}, ${3:\\$data as node()?})", "description": "($uri,$options,$data)", "trigger": "xdmp:http-post"}, {"content": "xdmp:http-put(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "xdmp:http-put"}, {"content": "xdmp:http-put(${1:\\$uri as xs:string}, ${2:\\$options as node()?})", "description": "($uri,$options)", "trigger": "xdmp:http-put"}, {"content": "xdmp:http-put(${1:\\$uri as xs:string}, ${2:\\$options as node()?}, ${3:\\$data as node()?})", "description": "($uri,$options,$data)", "trigger": "xdmp:http-put"}, {"content": "xdmp:initcap(${1:\\$string as xs:string?})", "description": "($string)", "trigger": "xdmp:initcap"}, {"content": "xdmp:integer-to-hex(${1:\\$val as xs:integer})", "description": "($val)", "trigger": "xdmp:integer-to-hex"}, {"content": "xdmp:integer-to-octal(${1:\\$val as xs:integer})", "description": "($val)", "trigger": "xdmp:integer-to-octal"}, {"content": "xdmp:invoke(${1:\\$path as xs:string})", "description": "($path)", "trigger": "xdmp:invoke"}, {"content": "xdmp:invoke(${1:\\$path as xs:string}, ${2:\\$vars as item()*})", "description": "($path,$vars)", "trigger": "xdmp:invoke"}, {"content": "xdmp:invoke(${1:\\$path as xs:string}, ${2:\\$vars as item()*}, ${3:\\$options as node()?})", "description": "($path,$vars,$options)", "trigger": "xdmp:invoke"}, {"content": "xdmp:invoke-function(${1:\\$path as function(})", "description": "($path)", "trigger": "xdmp:invoke-function"}, {"content": "xdmp:invoke-in(${1:\\$uri as xs:string}, ${2:\\$ID as xs:unsignedLong})", "description": "($uri,$ID)", "trigger": "xdmp:invoke-in"}, {"content": "xdmp:invoke-in(${1:\\$uri as xs:string}, ${2:\\$ID as xs:unsignedLong}, ${3:\\$vars as item()*})", "description": "($uri,$ID,$vars)", "trigger": "xdmp:invoke-in"}, {"content": "xdmp:invoke-in(${1:\\$uri as xs:string}, ${2:\\$ID as xs:unsignedLong}, ${3:\\$vars as item()*}, ${4:\\$modules as xs:unsignedLong?})", "description": "($uri,$ID,$vars,$modules)", "trigger": "xdmp:invoke-in"}, {"content": "xdmp:invoke-in(${1:\\$uri as xs:string}, ${2:\\$ID as xs:unsignedLong}, ${3:\\$vars as item()*}, ${4:\\$modules as xs:unsignedLong?}, ${5:\\$root as xs:string?})", "description": "($uri,$ID,$vars,$modules,$root)", "trigger": "xdmp:invoke-in"}, {"content": "xdmp:key-from-QName(${1:\\$name as xs:QName})", "description": "($name)", "trigger": "xdmp:key-from-QName"}, {"content": "xdmp:lazy(${1:\\$arg as item()*})", "description": "($arg)", "trigger": "xdmp:lazy"}, {"content": "xdmp:ldap-lookup(${1:\\$DN as xs:string})", "description": "($DN)", "trigger": "xdmp:ldap-lookup"}, {"content": "xdmp:ldap-lookup(${1:\\$DN as xs:string}, ${2:\\$options as node()?})", "description": "($DN,$options)", "trigger": "xdmp:ldap-lookup"}, {"content": "xdmp:ldap-search(${1:\\$query as xs:string})", "description": "($query)", "trigger": "xdmp:ldap-search"}, {"content": "xdmp:ldap-search(${1:\\$query as xs:string}, ${2:\\$options as node()?})", "description": "($query,$options)", "trigger": "xdmp:ldap-search"}, {"content": "xdmp:load(${1:\\$path as xs:string})", "description": "($path)", "trigger": "xdmp:load"}, {"content": "xdmp:load(${1:\\$path as xs:string}, ${2:\\$uri as xs:string?})", "description": "($path,$uri)", "trigger": "xdmp:load"}, {"content": "xdmp:load(${1:\\$path as xs:string}, ${2:\\$uri as xs:string?}, ${3:\\$permissions as element(sec:permission)*})", "description": "($path,$uri,$permissions)", "trigger": "xdmp:load"}, {"content": "xdmp:load(${1:\\$path as xs:string}, ${2:\\$uri as xs:string?}, ${3:\\$permissions as element(sec:permission)*}, ${4:\\$collections as xs:string*})", "description": "($path,$uri,$permissions,$collections)", "trigger": "xdmp:load"}, {"content": "xdmp:load(${1:\\$path as xs:string}, ${2:\\$uri as xs:string?}, ${3:\\$permissions as element(sec:permission)*}, ${4:\\$collections as xs:string*}, ${5:\\$quality as xs:int?})", "description": "($path,$uri,$permissions,$collections,$quality)", "trigger": "xdmp:load"}, {"content": "xdmp:load(${1:\\$path as xs:string}, ${2:\\$uri as xs:string?}, ${3:\\$permissions as element(sec:permission)*}, ${4:\\$collections as xs:string*}, ${5:\\$quality as xs:int?}, ${6:\\$default-namespace as xs:string?})", "description": "($path,$uri,$permissions,$collections,$quality,$default-namespace)", "trigger": "xdmp:load"}, {"content": "xdmp:load(${1:\\$path as xs:string}, ${2:\\$uri as xs:string?}, ${3:\\$permissions as element(sec:permission)*}, ${4:\\$collections as xs:string*}, ${5:\\$quality as xs:int?}, ${6:\\$default-namespace as xs:string?}, ${7:\\$options as xs:string*})", "description": "($path,$uri,$permissions,$collections,$quality,$default-namespace,$options)", "trigger": "xdmp:load"}, {"content": "xdmp:load(${1:\\$path as xs:string}, ${2:\\$uri as xs:string?}, ${3:\\$permissions as element(sec:permission)*}, ${4:\\$collections as xs:string*}, ${5:\\$quality as xs:int?}, ${6:\\$default-namespace as xs:string?}, ${7:\\$options as xs:string*}, ${8:\\$forest-ids as xs:unsignedLong*})", "description": "($path,$uri,$permissions,$collections,$quality,$default-namespace,$options,$forest-ids)", "trigger": "xdmp:load"}, {"content": "xdmp:lock-acquire(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "xdmp:lock-acquire"}, {"content": "xdmp:lock-acquire(${1:\\$uri as xs:string}, ${2:\\$scope as xs:string?})", "description": "($uri,$scope)", "trigger": "xdmp:lock-acquire"}, {"content": "xdmp:lock-acquire(${1:\\$uri as xs:string}, ${2:\\$scope as xs:string?}, ${3:\\$depth as xs:string?})", "description": "($uri,$scope,$depth)", "trigger": "xdmp:lock-acquire"}, {"content": "xdmp:lock-acquire(${1:\\$uri as xs:string}, ${2:\\$scope as xs:string?}, ${3:\\$depth as xs:string?}, ${4:\\$owner as item()?})", "description": "($uri,$scope,$depth,$owner)", "trigger": "xdmp:lock-acquire"}, {"content": "xdmp:lock-acquire(${1:\\$uri as xs:string}, ${2:\\$scope as xs:string?}, ${3:\\$depth as xs:string?}, ${4:\\$owner as item()?}, ${5:\\$timeout as xs:unsignedLong?})", "description": "($uri,$scope,$depth,$owner,$timeout)", "trigger": "xdmp:lock-acquire"}, {"content": "xdmp:lock-for-update(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "xdmp:lock-for-update"}, {"content": "xdmp:lock-release(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "xdmp:lock-release"}, {"content": "xdmp:log(${1:\\$msg as item()*})", "description": "($msg)", "trigger": "xdmp:log"}, {"content": "xdmp:log(${1:\\$msg as item()*}, ${2:\\$level as xs:string?})", "description": "($msg,$level)", "trigger": "xdmp:log"}, {"content": "xdmp:log-level()", "trigger": "xdmp:log-level"}, {"content": "xdmp:login(${1:\\$name as xs:string})", "description": "($name)", "trigger": "xdmp:login"}, {"content": "xdmp:login(${1:\\$name as xs:string}, ${2:\\$password as xs:string?})", "description": "($name,$password)", "trigger": "xdmp:login"}, {"content": "xdmp:login(${1:\\$name as xs:string}, ${2:\\$password as xs:string?}, ${3:\\$set-session as xs:boolean?})", "description": "($name,$password,$set-session)", "trigger": "xdmp:login"}, {"content": "xdmp:login(${1:\\$name as xs:string}, ${2:\\$password as xs:string?}, ${3:\\$set-session as xs:boolean?}, ${4:\\$role-names as xs:string?})", "description": "($name,$password,$set-session,$role-names)", "trigger": "xdmp:login"}, {"content": "xdmp:logout()", "trigger": "xdmp:logout"}, {"content": "xdmp:lshift64(${1:\\$x as xs:unsignedLong}, ${2:\\$y as xs:integer})", "description": "($x,$y)", "trigger": "xdmp:lshift64"}, {"content": "xdmp:md5(${1:\\$data as item()})", "description": "($data)", "trigger": "xdmp:md5"}, {"content": "xdmp:md5(${1:\\$data as item()}, ${2:\\$encoding as xs:string})", "description": "($data,$encoding)", "trigger": "xdmp:md5"}, {"content": "xdmp:merge(${1:\\$options as node()?})", "description": "($options)", "trigger": "xdmp:merge"}, {"content": "xdmp:merge()", "trigger": "xdmp:merge"}, {"content": "xdmp:merge-cancel(${1:\\$forest-ID as xs:unsignedLong}, ${2:\\$merge-ID as xs:unsignedLong})", "description": "($forest-ID,$merge-ID)", "trigger": "xdmp:merge-cancel"}, {"content": "xdmp:merging()", "trigger": "xdmp:merging"}, {"content": "xdmp:modules-database()", "trigger": "xdmp:modules-database"}, {"content": "xdmp:modules-root()", "trigger": "xdmp:modules-root"}, {"content": "xdmp:month-name-from-date(${1:\\$arg as xs:dateTime?})", "description": "($arg)", "trigger": "xdmp:month-name-from-date"}, {"content": "xdmp:mul64(${1:\\$x as xs:unsignedLong}, ${2:\\$y as xs:unsignedLong})", "description": "($x,$y)", "trigger": "xdmp:mul64"}, {"content": "xdmp:multipart-decode(${1:\\$separator as xs:string}, ${2:\\$data as binary()}, ${3:\\$options as element()?})", "description": "($separator,$data,$options)", "trigger": "xdmp:multipart-decode"}, {"content": "xdmp:multipart-encode(${1:\\$separator as xs:string}, ${2:\\$manifest as element()}, ${3:\\$content as node*})", "description": "($separator,$manifest,$content)", "trigger": "xdmp:multipart-encode"}, {"content": "xdmp:node-database(${1:\\$node as node()})", "description": "($node)", "trigger": "xdmp:node-database"}, {"content": "xdmp:node-delete(${1:\\$old as node()})", "description": "($old)", "trigger": "xdmp:node-delete"}, {"content": "xdmp:node-insert-after(${1:\\$sibling as node()}, ${2:\\$new as node()})", "description": "($sibling,$new)", "trigger": "xdmp:node-insert-after"}, {"content": "xdmp:node-insert-before(${1:\\$sibling as node()}, ${2:\\$new as node()})", "description": "($sibling,$new)", "trigger": "xdmp:node-insert-before"}, {"content": "xdmp:node-insert-child(${1:\\$parent as node()}, ${2:\\$new as node()})", "description": "($parent,$new)", "trigger": "xdmp:node-insert-child"}, {"content": "xdmp:node-kind(${1:\\$node as node()?})", "description": "($node)", "trigger": "xdmp:node-kind"}, {"content": "xdmp:node-replace(${1:\\$old as node()}, ${2:\\$new as node()})", "description": "($old,$new)", "trigger": "xdmp:node-replace"}, {"content": "xdmp:node-uri(${1:\\$node as node()})", "description": "($node)", "trigger": "xdmp:node-uri"}, {"content": "xdmp:not64(${1:\\$x as xs:unsignedLong})", "description": "($x)", "trigger": "xdmp:not64"}, {"content": "xdmp:octal-to-integer(${1:\\$octal as xs:string})", "description": "($octal)", "trigger": "xdmp:octal-to-integer"}, {"content": "xdmp:or64(${1:\\$x as xs:unsignedLong}, ${2:\\$y as xs:unsignedLong})", "description": "($x,$y)", "trigger": "xdmp:or64"}, {"content": "xdmp:parse-dateTime(${1:\\$picture as xs:string}, ${2:\\$value as xs:string})", "description": "($picture,$value)", "trigger": "xdmp:parse-dateTime"}, {"content": "xdmp:parse-dateTime(${1:\\$picture as xs:string}, ${2:\\$value as xs:string}, ${3:\\$language as xs:string})", "description": "($picture,$value,$language)", "trigger": "xdmp:parse-dateTime"}, {"content": "xdmp:parse-dateTime(${1:\\$picture as xs:string}, ${2:\\$value as xs:string}, ${3:\\$language as xs:string}, ${4:\\$calendar as xs:string})", "description": "($picture,$value,$language,$calendar)", "trigger": "xdmp:parse-dateTime"}, {"content": "xdmp:parse-dateTime(${1:\\$picture as xs:string}, ${2:\\$value as xs:string}, ${3:\\$language as xs:string}, ${4:\\$calendar as xs:string}, ${5:\\$country as xs:string})", "description": "($picture,$value,$language,$calendar,$country)", "trigger": "xdmp:parse-dateTime"}, {"content": "xdmp:parse-yymmdd(${1:\\$picture as xs:string}, ${2:\\$value as xs:string})", "description": "($picture,$value)", "trigger": "xdmp:parse-yymmdd"}, {"content": "xdmp:parse-yymmdd(${1:\\$picture as xs:string}, ${2:\\$value as xs:string}, ${3:\\$language as xs:string})", "description": "($picture,$value,$language)", "trigger": "xdmp:parse-yymmdd"}, {"content": "xdmp:parse-yymmdd(${1:\\$picture as xs:string}, ${2:\\$value as xs:string}, ${3:\\$language as xs:string}, ${4:\\$calendar as xs:string})", "description": "($picture,$value,$language,$calendar)", "trigger": "xdmp:parse-yymmdd"}, {"content": "xdmp:parse-yymmdd(${1:\\$picture as xs:string}, ${2:\\$value as xs:string}, ${3:\\$language as xs:string}, ${4:\\$calendar as xs:string}, ${5:\\$country as xs:string})", "description": "($picture,$value,$language,$calendar,$country)", "trigger": "xdmp:parse-yymmdd"}, {"content": "xdmp:path(${1:\\$node as node()})", "description": "($node)", "trigger": "xdmp:path"}, {"content": "xdmp:path(${1:\\$node as node()}, ${2:\\$include-document as xs:boolean?})", "description": "($node,$include-document)", "trigger": "xdmp:path"}, {"content": "xdmp:pdf-convert(${1:\\$doc as node()}, ${2:\\$filename as xs:string})", "description": "($doc,$filename)", "trigger": "xdmp:pdf-convert"}, {"content": "xdmp:pdf-convert(${1:\\$doc as node()}, ${2:\\$filename as xs:string}, ${3:\\$options as node()?})", "description": "($doc,$filename,$options)", "trigger": "xdmp:pdf-convert"}, {"content": "xdmp:permission(${1:\\$role as xs:string}, ${2:\\$capability as xs:string})", "description": "($role,$capability)", "trigger": "xdmp:permission"}, {"content": "xdmp:plan(${1:\\$expression as item()*})", "description": "($expression)", "trigger": "xdmp:plan"}, {"content": "xdmp:plan(${1:\\$expression as item()*}, ${2:\\$maximum as xs:double?})", "description": "($expression,$maximum)", "trigger": "xdmp:plan"}, {"content": "xdmp:plannable(${1:\\$expression as item()})", "description": "($expression)", "trigger": "xdmp:plannable"}, {"content": "xdmp:platform()", "trigger": "xdmp:platform"}, {"content": "xdmp:position(${1:\\$test as xs:string?}, ${2:\\$target as xs:string?})", "description": "($test,$target)", "trigger": "xdmp:position"}, {"content": "xdmp:position(${1:\\$test as xs:string?}, ${2:\\$target as xs:string?}, ${3:\\$collation as xs:string})", "description": "($test,$target,$collation)", "trigger": "xdmp:position"}, {"content": "xdmp:powerpoint-convert(${1:\\$doc as node()}, ${2:\\$filename as xs:string})", "description": "($doc,$filename)", "trigger": "xdmp:powerpoint-convert"}, {"content": "xdmp:powerpoint-convert(${1:\\$doc as node()}, ${2:\\$filename as xs:string}, ${3:\\$options as node()?})", "description": "($doc,$filename,$options)", "trigger": "xdmp:powerpoint-convert"}, {"content": "xdmp:pretty-print(${1:\\$xquery as xs:string})", "description": "($xquery)", "trigger": "xdmp:pretty-print"}, {"content": "xdmp:privilege(${1:\\$action as xs:string}, ${2:\\$kind as xs:string})", "description": "($action,$kind)", "trigger": "xdmp:privilege"}, {"content": "xdmp:privilege-roles(${1:\\$action as xs:string}, ${2:\\$kind as xs:string})", "description": "($action,$kind)", "trigger": "xdmp:privilege-roles"}, {"content": "xdmp:product-edition()", "trigger": "xdmp:product-edition"}, {"content": "xdmp:product-environment()", "trigger": "xdmp:product-environment"}, {"content": "xdmp:quarter-from-date(${1:\\$arg as xs:date?})", "description": "($arg)", "trigger": "xdmp:quarter-from-date"}, {"content": "xdmp:query-meters()", "trigger": "xdmp:query-meters"}, {"content": "xdmp:query-trace(${1:\\$enabled as xs:boolean})", "description": "($enabled)", "trigger": "xdmp:query-trace"}, {"content": "xdmp:quote(${1:\\$arg as item()*})", "description": "($arg)", "trigger": "xdmp:quote"}, {"content": "xdmp:quote(${1:\\$arg as item()*}, ${2:\\$options as node()?})", "description": "($arg,$options)", "trigger": "xdmp:quote"}, {"content": "xdmp:random(${1:\\$max as xs:unsignedLong})", "description": "($max)", "trigger": "xdmp:random"}, {"content": "xdmp:random()", "trigger": "xdmp:random"}, {"content": "xdmp:redirect-response(${1:\\$name as xs:string})", "description": "($name)", "trigger": "xdmp:redirect-response"}, {"content": "xdmp:remove-orphaned-binary(${1:\\$forestID as xs:unsignedLong}, ${2:\\$binaryID as xs:unsignedLong})", "description": "($forestID,$binaryID)", "trigger": "xdmp:remove-orphaned-binary"}, {"content": "xdmp:request()", "trigger": "xdmp:request"}, {"content": "xdmp:request-cancel(${1:\\$hostID as xs:unsignedLong}, ${2:\\$serverID as xs:unsignedLong}, ${3:\\$requestID as xs:unsignedLong})", "description": "($hostID,$serverID,$requestID)", "trigger": "xdmp:request-cancel"}, {"content": "xdmp:request-status(${1:\\$host-id as xs:unsignedLong}, ${2:\\$server-id as xs:unsignedLong}, ${3:\\$request-id as xs:unsignedLong})", "description": "($host-id,$server-id,$request-id)", "trigger": "xdmp:request-status"}, {"content": "xdmp:request-timestamp()", "trigger": "xdmp:request-timestamp"}, {"content": "xdmp:resolve-uri(${1:\\$relative as xs:string?})", "description": "($relative)", "trigger": "xdmp:resolve-uri"}, {"content": "xdmp:resolve-uri(${1:\\$relative as xs:string?}, ${2:\\$base as xs:string})", "description": "($relative,$base)", "trigger": "xdmp:resolve-uri"}, {"content": "xdmp:restart(${1:\\$hostIDs as unsignedLong*}, ${2:\\$reason as xs:string})", "description": "($hostIDs,$reason)", "trigger": "xdmp:restart"}, {"content": "xdmp:rethrow()", "trigger": "xdmp:rethrow"}, {"content": "xdmp:role(${1:\\$role as xs:string})", "description": "($role)", "trigger": "xdmp:role"}, {"content": "xdmp:role-roles(${1:\\$name as xs:string})", "description": "($name)", "trigger": "xdmp:role-roles"}, {"content": "xdmp:rollback()", "trigger": "xdmp:rollback"}, {"content": "xdmp:rshift64(${1:\\$x as xs:unsignedLong}, ${2:\\$y as xs:integer})", "description": "($x,$y)", "trigger": "xdmp:rshift64"}, {"content": "xdmp:save(${1:\\$path as xs:string}, ${2:\\$node as node()})", "description": "($path,$node)", "trigger": "xdmp:save"}, {"content": "xdmp:save(${1:\\$path as xs:string}, ${2:\\$node as node()}, ${3:\\$options as node()?})", "description": "($path,$node,$options)", "trigger": "xdmp:save"}, {"content": "xdmp:schema-database(${1:\\$database-id as xs:unsignedLong?})", "description": "($database-id)", "trigger": "xdmp:schema-database"}, {"content": "xdmp:schema-database()", "trigger": "xdmp:schema-database"}, {"content": "xdmp:security-assert(${1:\\$privileges as xs:string*}, ${2:\\$kind as xs:string})", "description": "($privileges,$kind)", "trigger": "xdmp:security-assert"}, {"content": "xdmp:security-database(${1:\\$database-id as xs:unsignedLong?})", "description": "($database-id)", "trigger": "xdmp:security-database"}, {"content": "xdmp:security-database()", "trigger": "xdmp:security-database"}, {"content": "xdmp:server(${1:\\$name as xs:string})", "description": "($name)", "trigger": "xdmp:server"}, {"content": "xdmp:server(${1:\\$name as xs:string}, ${2:\\$group as xs:unsignedLong})", "description": "($name,$group)", "trigger": "xdmp:server"}, {"content": "xdmp:server()", "trigger": "xdmp:server"}, {"content": "xdmp:server-name(${1:\\$id as xs:unsignedLong})", "description": "($id)", "trigger": "xdmp:server-name"}, {"content": "xdmp:server-status(${1:\\$host-id as xs:unsignedLong}, ${2:\\$server-id as xs:unsignedLong})", "description": "($host-id,$server-id)", "trigger": "xdmp:server-status"}, {"content": "xdmp:servers()", "trigger": "xdmp:servers"}, {"content": "xdmp:set(${1:\\$variable as item()*}, ${2:\\$expr as item()*})", "description": "($variable,$expr)", "trigger": "xdmp:set"}, {"content": "xdmp:set-request-time-limit(${1:\\$time-limit as xs:unsignedInt})", "description": "($time-limit)", "trigger": "xdmp:set-request-time-limit"}, {"content": "xdmp:set-request-time-limit(${1:\\$time-limit as xs:unsignedInt}, ${2:\\$hostID as xs:unsignedLong?})", "description": "($time-limit,$hostID)", "trigger": "xdmp:set-request-time-limit"}, {"content": "xdmp:set-request-time-limit(${1:\\$time-limit as xs:unsignedInt}, ${2:\\$hostID as xs:unsignedLong?}, ${3:\\$serverID as xs:unsignedLong?})", "description": "($time-limit,$hostID,$serverID)", "trigger": "xdmp:set-request-time-limit"}, {"content": "xdmp:set-request-time-limit(${1:\\$time-limit as xs:unsignedInt}, ${2:\\$hostID as xs:unsignedLong?}, ${3:\\$serverID as xs:unsignedLong?}, ${4:\\$requestID as xs:unsignedLong?})", "description": "($time-limit,$hostID,$serverID,$requestID)", "trigger": "xdmp:set-request-time-limit"}, {"content": "xdmp:set-response-code(${1:\\$code as xs:integer}, ${2:\\$message as xs:string})", "description": "($code,$message)", "trigger": "xdmp:set-response-code"}, {"content": "xdmp:set-response-content-type(${1:\\$name as xs:string})", "description": "($name)", "trigger": "xdmp:set-response-content-type"}, {"content": "xdmp:set-response-encoding(${1:\\$encoding as xs:string})", "description": "($encoding)", "trigger": "xdmp:set-response-encoding"}, {"content": "xdmp:set-server-field(${1:\\$name as xs:string}, ${2:\\$value as item()*})", "description": "($name,$value)", "trigger": "xdmp:set-server-field"}, {"content": "xdmp:set-server-field-privilege(${1:\\$name as xs:string}, ${2:\\$privilege as xs:string?})", "description": "($name,$privilege)", "trigger": "xdmp:set-server-field-privilege"}, {"content": "xdmp:set-session-field(${1:\\$name as xs:string}, ${2:\\$value as item()*})", "description": "($name,$value)", "trigger": "xdmp:set-session-field"}, {"content": "xdmp:set-transaction-mode(${1:\\$value as xs:string})", "description": "($value)", "trigger": "xdmp:set-transaction-mode"}, {"content": "xdmp:set-transaction-name(${1:\\$name as xs:string}, ${2:\\$host-id as xs:unsignedLong?}, ${3:\\$txn-id as xs:unsignedLong?})", "description": "($name,$host-id,$txn-id)", "trigger": "xdmp:set-transaction-name"}, {"content": "xdmp:set-transaction-time-limit(${1:\\$time-limit as xs:unsignedInt}, ${2:\\$host-id as xs:unsignedLong?}, ${3:\\$txn-id as xs:unsignedLong?})", "description": "($time-limit,$host-id,$txn-id)", "trigger": "xdmp:set-transaction-time-limit"}, {"content": "xdmp:sha1(${1:\\$data as item()})", "description": "($data)", "trigger": "xdmp:sha1"}, {"content": "xdmp:sha1(${1:\\$data as item()}, ${2:\\$encoding as xs:string})", "description": "($data,$encoding)", "trigger": "xdmp:sha1"}, {"content": "xdmp:sha256(${1:\\$data as item()})", "description": "($data)", "trigger": "xdmp:sha256"}, {"content": "xdmp:sha256(${1:\\$data as item()}, ${2:\\$encoding as xs:string})", "description": "($data,$encoding)", "trigger": "xdmp:sha256"}, {"content": "xdmp:sha384(${1:\\$data as item()})", "description": "($data)", "trigger": "xdmp:sha384"}, {"content": "xdmp:sha384(${1:\\$data as item()}, ${2:\\$encoding as xs:string})", "description": "($data,$encoding)", "trigger": "xdmp:sha384"}, {"content": "xdmp:sha512(${1:\\$data as item()})", "description": "($data)", "trigger": "xdmp:sha512"}, {"content": "xdmp:sha512(${1:\\$data as item()}, ${2:\\$encoding as xs:string})", "description": "($data,$encoding)", "trigger": "xdmp:sha512"}, {"content": "xdmp:shutdown(${1:\\$hostIDs as unsignedLong*}, ${2:\\$reason as xs:string})", "description": "($hostIDs,$reason)", "trigger": "xdmp:shutdown"}, {"content": "xdmp:sleep(${1:\\$msec as xs:unsignedInt})", "description": "($msec)", "trigger": "xdmp:sleep"}, {"content": "xdmp:spawn(${1:\\$path as xs:string})", "description": "($path)", "trigger": "xdmp:spawn"}, {"content": "xdmp:spawn(${1:\\$path as xs:string}, ${2:\\$vars as item()*})", "description": "($path,$vars)", "trigger": "xdmp:spawn"}, {"content": "xdmp:spawn(${1:\\$path as xs:string}, ${2:\\$vars as item()*}, ${3:\\$options as node()?})", "description": "($path,$vars,$options)", "trigger": "xdmp:spawn"}, {"content": "xdmp:spawn-function(${1:\\$function as function(})", "description": "($function)", "trigger": "xdmp:spawn-function"}, {"content": "xdmp:spawn-in(${1:\\$path as xs:string}, ${2:\\$ID as xs:unsignedLong})", "description": "($path,$ID)", "trigger": "xdmp:spawn-in"}, {"content": "xdmp:spawn-in(${1:\\$path as xs:string}, ${2:\\$ID as xs:unsignedLong}, ${3:\\$vars as item()*})", "description": "($path,$ID,$vars)", "trigger": "xdmp:spawn-in"}, {"content": "xdmp:spawn-in(${1:\\$path as xs:string}, ${2:\\$ID as xs:unsignedLong}, ${3:\\$vars as item()*}, ${4:\\$modules as xs:unsignedLong?})", "description": "($path,$ID,$vars,$modules)", "trigger": "xdmp:spawn-in"}, {"content": "xdmp:spawn-in(${1:\\$path as xs:string}, ${2:\\$ID as xs:unsignedLong}, ${3:\\$vars as item()*}, ${4:\\$modules as xs:unsignedLong?}, ${5:\\$root as xs:string?})", "description": "($path,$ID,$vars,$modules,$root)", "trigger": "xdmp:spawn-in"}, {"content": "xdmp:sql(${1:\\$sql as xs:string})", "description": "($sql)", "trigger": "xdmp:sql"}, {"content": "xdmp:sql(${1:\\$sql as xs:string}, ${2:\\$options as xs:string*})", "description": "($sql,$options)", "trigger": "xdmp:sql"}, {"content": "xdmp:start-journal-archiving(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$journal-archive-path as xs:string})", "description": "($forestIDs,$journal-archive-path)", "trigger": "xdmp:start-journal-archiving"}, {"content": "xdmp:start-journal-archiving(${1:\\$forestIDs as xs:unsignedLong*}, ${2:\\$journal-archive-path as xs:string}, ${3:\\$lag-limit as xs:unsignedLong})", "description": "($forestIDs,$journal-archive-path,$lag-limit)", "trigger": "xdmp:start-journal-archiving"}, {"content": "xdmp:step64(${1:\\$initial as xs:unsignedLong}, ${2:\\$step as xs:unsignedLong})", "description": "($initial,$step)", "trigger": "xdmp:step64"}, {"content": "xdmp:stop-journal-archiving(${1:\\$forestIDs as xs:unsignedLong*})", "description": "($forestIDs)", "trigger": "xdmp:stop-journal-archiving"}, {"content": "xdmp:strftime(${1:\\$format as xs:string}, ${2:\\$value as xs:dateTime})", "description": "($format,$value)", "trigger": "xdmp:strftime"}, {"content": "xdmp:subbinary(${1:\\$source as binary()}, ${2:\\$starting-location as xs:double})", "description": "($source,$starting-location)", "trigger": "xdmp:subbinary"}, {"content": "xdmp:subbinary(${1:\\$source as binary()}, ${2:\\$starting-location as xs:double}, ${3:\\$length as xs:double})", "description": "($source,$starting-location,$length)", "trigger": "xdmp:subbinary"}, {"content": "xdmp:tidy(${1:\\$doc as xs:string})", "description": "($doc)", "trigger": "xdmp:tidy"}, {"content": "xdmp:tidy(${1:\\$doc as xs:string}, ${2:\\$options as node()?})", "description": "($doc,$options)", "trigger": "xdmp:tidy"}, {"content": "xdmp:timestamp-to-wallclock(${1:\\$timestamp as xs:unsignedLong})", "description": "($timestamp)", "trigger": "xdmp:timestamp-to-wallclock"}, {"content": "xdmp:to-json(${1:\\$item as item()*})", "description": "($item)", "trigger": "xdmp:to-json"}, {"content": "xdmp:trace(${1:\\$name as xs:string}, ${2:\\$value as item()*})", "description": "($name,$value)", "trigger": "xdmp:trace"}, {"content": "xdmp:transaction(${1:\\$txn-name as xs:string?}, ${2:\\$host-id as xs:unsignedLong?})", "description": "($txn-name,$host-id)", "trigger": "xdmp:transaction"}, {"content": "xdmp:transaction-commit(${1:\\$host-id as xs:unsignedLong}, ${2:\\$txn-id as xs:unsignedLong})", "description": "($host-id,$txn-id)", "trigger": "xdmp:transaction-commit"}, {"content": "xdmp:transaction-rollback(${1:\\$host-id as xs:unsignedLong}, ${2:\\$txn-id as xs:unsignedLong})", "description": "($host-id,$txn-id)", "trigger": "xdmp:transaction-rollback"}, {"content": "xdmp:triggers-database(${1:\\$database-id as xs:unsignedLong?})", "description": "($database-id)", "trigger": "xdmp:triggers-database"}, {"content": "xdmp:triggers-database()", "trigger": "xdmp:triggers-database"}, {"content": "xdmp:type(${1:\\$value as xs:anyAtomicType})", "description": "($value)", "trigger": "xdmp:type"}, {"content": "xdmp:unpath(${1:\\$expr as xs:string})", "description": "($expr)", "trigger": "xdmp:unpath"}, {"content": "xdmp:unquote(${1:\\$arg as xs:string})", "description": "($arg)", "trigger": "xdmp:unquote"}, {"content": "xdmp:unquote(${1:\\$arg as xs:string}, ${2:\\$default-namespace as xs:string?})", "description": "($arg,$default-namespace)", "trigger": "xdmp:unquote"}, {"content": "xdmp:unquote(${1:\\$arg as xs:string}, ${2:\\$default-namespace as xs:string?}, ${3:\\$options as xs:string*})", "description": "($arg,$default-namespace,$options)", "trigger": "xdmp:unquote"}, {"content": "xdmp:uri-content-type(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "xdmp:uri-content-type"}, {"content": "xdmp:uri-format(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "xdmp:uri-format"}, {"content": "xdmp:uri-is-file(${1:\\$uri as xs:string})", "description": "($uri)", "trigger": "xdmp:uri-is-file"}, {"content": "xdmp:url-decode(${1:\\$encoded as xs:string})", "description": "($encoded)", "trigger": "xdmp:url-decode"}, {"content": "xdmp:url-encode(${1:\\$plaintext as xs:string})", "description": "($plaintext)", "trigger": "xdmp:url-encode"}, {"content": "xdmp:url-encode(${1:\\$plaintext as xs:string}, ${2:\\$noSpacePlus as xs:boolean?})", "description": "($plaintext,$noSpacePlus)", "trigger": "xdmp:url-encode"}, {"content": "xdmp:user(${1:\\$user as xs:string})", "description": "($user)", "trigger": "xdmp:user"}, {"content": "xdmp:user(${1:\\$user as xs:string}, ${2:\\$extSecId as xs:unsignedLong})", "description": "($user,$extSecId)", "trigger": "xdmp:user"}, {"content": "xdmp:user(${1:\\$user as xs:string}, ${2:\\$extSecId as xs:unsignedLong}, ${3:\\$secDbFirst as xs:boolean})", "description": "($user,$extSecId,$secDbFirst)", "trigger": "xdmp:user"}, {"content": "xdmp:user-external-security(${1:\\$user-id as xs:unsignedLong})", "description": "($user-id)", "trigger": "xdmp:user-external-security"}, {"content": "xdmp:user-last-login(${1:\\$user as xs:unsignedLong})", "description": "($user)", "trigger": "xdmp:user-last-login"}, {"content": "xdmp:user-roles(${1:\\$name as xs:string})", "description": "($name)", "trigger": "xdmp:user-roles"}, {"content": "xdmp:validate(${1:\\$node as node()})", "description": "($node)", "trigger": "xdmp:validate"}, {"content": "xdmp:validate(${1:\\$node as node()}, ${2:\\$mode as xs:string})", "description": "($node,$mode)", "trigger": "xdmp:validate"}, {"content": "xdmp:validate(${1:\\$node as node()}, ${2:\\$mode as xs:string}, ${3:\\$typeName as xs:QName})", "description": "($node,$mode,$typeName)", "trigger": "xdmp:validate"}, {"content": "xdmp:value(${1:\\$expr as xs:string})", "description": "($expr)", "trigger": "xdmp:value"}, {"content": "xdmp:version()", "trigger": "xdmp:version"}, {"content": "xdmp:wallclock-to-timestamp(${1:\\$timestamp as xs:dateTime})", "description": "($timestamp)", "trigger": "xdmp:wallclock-to-timestamp"}, {"content": "xdmp:week-from-date(${1:\\$arg as xs:date?})", "description": "($arg)", "trigger": "xdmp:week-from-date"}, {"content": "xdmp:weekday-from-date(${1:\\$arg as xs:date?})", "description": "($arg)", "trigger": "xdmp:weekday-from-date"}, {"content": "xdmp:with-namespaces(${1:\\$nsbindings as xs:string*}, ${2:\\$expr as item()*})", "description": "($nsbindings,$expr)", "trigger": "xdmp:with-namespaces"}, {"content": "xdmp:word-convert(${1:\\$doc as node()}, ${2:\\$filename as xs:string})", "description": "($doc,$filename)", "trigger": "xdmp:word-convert"}, {"content": "xdmp:word-convert(${1:\\$doc as node()}, ${2:\\$filename as xs:string}, ${3:\\$options as node()?})", "description": "($doc,$filename,$options)", "trigger": "xdmp:word-convert"}, {"content": "xdmp:x509-certificate-extract(${1:\\$cert as xs:string})", "description": "($cert)", "trigger": "xdmp:x509-certificate-extract"}, {"content": "xdmp:xa-complete(${1:\\$forestID as unsignedLong}, ${2:\\$txn-id as xs:unsignedLong}, ${3:\\$commit as xs:boolean}, ${4:\\$remember as xs:boolean})", "description": "($forestID,$txn-id,$commit,$remember)", "trigger": "xdmp:xa-complete"}, {"content": "xdmp:xa-forget(${1:\\$forestID as unsignedLong}, ${2:\\$txn-id as xs:unsignedLong})", "description": "($forestID,$txn-id)", "trigger": "xdmp:xa-forget"}, {"content": "xdmp:xor64(${1:\\$x as xs:unsignedLong}, ${2:\\$y as xs:unsignedLong})", "description": "($x,$y)", "trigger": "xdmp:xor64"}, {"content": "xdmp:xquery-version()", "trigger": "xdmp:xquery-version"}, {"content": "xdmp:xslt-eval(${1:\\$stylesheet as element()}, ${2:\\$input as node()?})", "description": "($stylesheet,$input)", "trigger": "xdmp:xslt-eval"}, {"content": "xdmp:xslt-eval(${1:\\$stylesheet as element()}, ${2:\\$input as node()?}, ${3:\\$params as map:map?})", "description": "($stylesheet,$input,$params)", "trigger": "xdmp:xslt-eval"}, {"content": "xdmp:xslt-eval(${1:\\$stylesheet as element()}, ${2:\\$input as node()?}, ${3:\\$params as map:map?}, ${4:\\$options as node()?})", "description": "($stylesheet,$input,$params,$options)", "trigger": "xdmp:xslt-eval"}, {"content": "xdmp:xslt-invoke(${1:\\$path as xs:string}, ${2:\\$input as node()?})", "description": "($path,$input)", "trigger": "xdmp:xslt-invoke"}, {"content": "xdmp:xslt-invoke(${1:\\$path as xs:string}, ${2:\\$input as node()?}, ${3:\\$params as map:map?})", "description": "($path,$input,$params)", "trigger": "xdmp:xslt-invoke"}, {"content": "xdmp:xslt-invoke(${1:\\$path as xs:string}, ${2:\\$input as node()?}, ${3:\\$params as map:map?}, ${4:\\$options as node()?})", "description": "($path,$input,$params,$options)", "trigger": "xdmp:xslt-invoke"}, {"content": "xdmp:yearday-from-date(${1:\\$arg as xs:date?})", "description": "($arg)", "trigger": "xdmp:yearday-from-date"}, {"content": "xdmp:zip-create(${1:\\$manifest as node()}, ${2:\\$nodes as node()+})", "description": "($manifest,$nodes)", "trigger": "xdmp:zip-create"}, {"content": "xdmp:zip-get(${1:\\$zipfile as binary()}, ${2:\\$name as xs:string})", "description": "($zipfile,$name)", "trigger": "xdmp:zip-get"}, {"content": "xdmp:zip-get(${1:\\$zipfile as binary()}, ${2:\\$name as xs:string}, ${3:\\$options as node()?})", "description": "($zipfile,$name,$options)", "trigger": "xdmp:zip-get"}, {"content": "xdmp:zip-manifest(${1:\\$zipfile as binary()})", "description": "($zipfile)", "trigger": "xdmp:zip-manifest"}, {"content": "xhtml:add-lists(${1:\\$doc as node()?})", "description": "($doc)", "trigger": "xhtml:add-lists"}, {"content": "xhtml:clean(${1:\\$doc as node()?})", "description": "($doc)", "trigger": "xhtml:clean"}, {"content": "xhtml:restructure(${1:\\$doc as node()?})", "description": "($doc)", "trigger": "xhtml:restructure"}, {"content": "xinc:link-expand(${1:\\$context as node()}, ${2:\\$ref as element(xi:include)})", "description": "($context,$ref)", "trigger": "xinc:link-expand"}, {"content": "xinc:link-references(${1:\\$node as node()})", "description": "($node)", "trigger": "xinc:link-references"}, {"content": "xinc:node-expand(${1:\\$node as node()})", "description": "($node)", "trigger": "xinc:node-expand"}, {"content": "xp:dereference(${1:\\$context as node()}, ${2:\\$xpointer as xs:string})", "description": "($context,$xpointer)", "trigger": "xp:dereference"}]