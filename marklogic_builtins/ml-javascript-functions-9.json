[{"content":"fn.nodeKind(${1:node as node()?})", "trigger":"fn.nodeKind", "description":"(node as node()?)"}, {"content":"xdmp.nodeKind(${1:node as node()})", "trigger":"xdmp.nodeKind", "description":"(node as node())"}, {"content":"fn.nodeName(${1:arg as node()?})", "trigger":"fn.nodeName", "description":"(arg as node()?)"}, {"content":"fn.nilled(${1:arg as node()?})", "trigger":"fn.nilled", "description":"(arg as node()?)"}, {"content":"fn.string()", "trigger":"fn.string", "description":"()"}, {"content":"fn.string(${1:arg as item()?})", "trigger":"fn.string", "description":"(arg as item()?)"}, {"content":"fn.data(${1:arg as item()*})", "trigger":"fn.data", "description":"(arg as item()*)"}, {"content":"fn.baseUri()", "trigger":"fn.baseUri", "description":"()"}, {"content":"fn.baseUri(${1:arg as node()?})", "trigger":"fn.baseUri", "description":"(arg as node()?)"}, {"content":"fn.documentUri(${1:arg as node()?})", "trigger":"fn.documentUri", "description":"(arg as node()?)"}, {"content":"xdmp.atomizable()", "trigger":"xdmp.atomizable", "description":"()"}, {"content":"xdmp.atomizable(${1:item as item()})", "trigger":"xdmp.atomizable", "description":"(item as item())"}, {"content":"admin.getDatabaseIds(${1:config as element(configuration)})", "trigger":"admin.getDatabaseIds", "description":"(config as element(configuration))"}, {"content":"admin.getHostIds(${1:config as element(configuration)})", "trigger":"admin.getHostIds", "description":"(config as element(configuration))"}, {"content":"admin.getGroupIds(${1:config as element(configuration)})", "trigger":"admin.getGroupIds", "description":"(config as element(configuration))"}, {"content":"admin.getForestIds(${1:config as element(configuration)})", "trigger":"admin.getForestIds", "description":"(config as element(configuration))"}, {"content":"admin.getAppserverIds(${1:config as element(configuration)})", "trigger":"admin.getAppserverIds", "description":"(config as element(configuration))"}, {"content":"admin.getConfiguration()", "trigger":"admin.getConfiguration", "description":"()"}, {"content":"admin.saveConfigurationWithoutRestart(${1:config as element(configuration)})", "trigger":"admin.saveConfigurationWithoutRestart", "description":"(config as element(configuration))"}, {"content":"admin.saveConfiguration(${1:config as element(configuration)})", "trigger":"admin.saveConfiguration", "description":"(config as element(configuration))"}, {"content":"admin.restartHosts(${1:hosts as xs:unsignedLong*})", "trigger":"admin.restartHosts", "description":"(hosts as xs:unsignedLong*)"}, {"content":"admin.databaseDelete(${1:config as element(configuration)}, ${2:database-ids as xs:unsignedLong*})", "trigger":"admin.databaseDelete", "description":"(config as element(configuration), database-ids as xs:unsignedLong*)"}, {"content":"admin.databaseCreate(${1:config as element(configuration)}, ${2:database-name as String}, ${3:security-db as xs:unsignedLong}, ${4:schema-db as xs:unsignedLong})", "trigger":"admin.databaseCreate", "description":"(config as element(configuration), database-name as String, security-db as xs:unsignedLong, schema-db as xs:unsignedLong)"}, {"content":"admin.databaseCopy(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:database-name as String})", "trigger":"admin.databaseCopy", "description":"(config as element(configuration), database-id as xs:unsignedLong, database-name as String)"}, {"content":"admin.databaseDetachForest(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:forest-id as xs:unsignedLong})", "trigger":"admin.databaseDetachForest", "description":"(config as element(configuration), database-id as xs:unsignedLong, forest-id as xs:unsignedLong)"}, {"content":"admin.databaseAttachForest(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:forest-id as xs:unsignedLong})", "trigger":"admin.databaseAttachForest", "description":"(config as element(configuration), database-id as xs:unsignedLong, forest-id as xs:unsignedLong)"}, {"content":"admin.databaseGetBackups(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetBackups", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseWeeklyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:days as xs:string+}, ${4:start-time as xs:time}, ${5:max-backups as xs:unsignedLong}, ${6:backup-security-db as Boolean}, ${7:backup-schemas-db as Boolean}, ${8:backup-triggers-db as Boolean})", "trigger":"admin.databaseWeeklyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, days as xs:string+, start-time as xs:time, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean)"}, {"content":"admin.databaseWeeklyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:days as xs:string+}, ${4:start-time as xs:time}, ${5:max-backups as xs:unsignedLong}, ${6:backup-security-db as Boolean}, ${7:backup-schemas-db as Boolean}, ${8:backup-triggers-db as Boolean}, ${9:include-replicas as Boolean})", "trigger":"admin.databaseWeeklyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, days as xs:string+, start-time as xs:time, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean)"}, {"content":"admin.databaseWeeklyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:days as xs:string+}, ${4:start-time as xs:time}, ${5:max-backups as xs:unsignedLong}, ${6:backup-security-db as Boolean}, ${7:backup-schemas-db as Boolean}, ${8:backup-triggers-db as Boolean}, ${9:include-replicas as Boolean}, ${10:journal-archiving as Boolean})", "trigger":"admin.databaseWeeklyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, days as xs:string+, start-time as xs:time, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, journal-archiving as Boolean)"}, {"content":"admin.databaseWeeklyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:days as xs:string+}, ${4:start-time as xs:time}, ${5:max-backups as xs:unsignedLong}, ${6:backup-security-db as Boolean}, ${7:backup-schemas-db as Boolean}, ${8:backup-triggers-db as Boolean}, ${9:include-replicas as Boolean}, ${10:journal-archiving as Boolean}, ${11:journal-archive-path as String})", "trigger":"admin.databaseWeeklyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, days as xs:string+, start-time as xs:time, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, journal-archiving as Boolean, journal-archive-path as String)"}, {"content":"admin.databaseWeeklyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:days as xs:string+}, ${4:start-time as xs:time}, ${5:max-backups as xs:unsignedLong}, ${6:backup-security-db as Boolean}, ${7:backup-schemas-db as Boolean}, ${8:backup-triggers-db as Boolean}, ${9:include-replicas as Boolean}, ${10:journal-archiving as Boolean}, ${11:journal-archive-path as String}, ${12:lag-limit as xs:unsignedLong})", "trigger":"admin.databaseWeeklyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, days as xs:string+, start-time as xs:time, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, journal-archiving as Boolean, journal-archive-path as String, lag-limit as xs:unsignedLong)"}, {"content":"admin.databaseWeeklyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:days as xs:string+}, ${4:start-time as xs:time}, ${5:backup-security-db as Boolean}, ${6:backup-schemas-db as Boolean}, ${7:backup-triggers-db as Boolean})", "trigger":"admin.databaseWeeklyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, days as xs:string+, start-time as xs:time, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean)"}, {"content":"admin.databaseWeeklyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:days as xs:string+}, ${4:start-time as xs:time}, ${5:backup-security-db as Boolean}, ${6:backup-schemas-db as Boolean}, ${7:backup-triggers-db as Boolean}, ${8:include-replicas as Boolean})", "trigger":"admin.databaseWeeklyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, days as xs:string+, start-time as xs:time, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean)"}, {"content":"admin.databaseWeeklyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:days as xs:string+}, ${4:start-time as xs:time}, ${5:backup-security-db as Boolean}, ${6:backup-schemas-db as Boolean}, ${7:backup-triggers-db as Boolean}, ${8:include-replicas as Boolean}, ${9:incremental-dir as xs:string?})", "trigger":"admin.databaseWeeklyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, days as xs:string+, start-time as xs:time, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?)"}, {"content":"admin.databaseWeeklyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:days as xs:string+}, ${4:start-time as xs:time}, ${5:backup-security-db as Boolean}, ${6:backup-schemas-db as Boolean}, ${7:backup-triggers-db as Boolean}, ${8:include-replicas as Boolean}, ${9:incremental-dir as xs:string?}, ${10:purge-journal-archive as xs:boolean?})", "trigger":"admin.databaseWeeklyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, days as xs:string+, start-time as xs:time, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?, purge-journal-archive as xs:boolean?)"}, {"content":"admin.databaseWeeklyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:days as xs:string+}, ${4:start-time as xs:time}, ${5:backup-security-db as Boolean}, ${6:backup-schemas-db as Boolean}, ${7:backup-triggers-db as Boolean}, ${8:include-replicas as Boolean}, ${9:incremental-dir as xs:string?}, ${10:purge-journal-archive as xs:boolean?}, ${11:journal-archiving as Boolean})", "trigger":"admin.databaseWeeklyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, days as xs:string+, start-time as xs:time, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?, purge-journal-archive as xs:boolean?, journal-archiving as Boolean)"}, {"content":"admin.databaseWeeklyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:days as xs:string+}, ${4:start-time as xs:time}, ${5:backup-security-db as Boolean}, ${6:backup-schemas-db as Boolean}, ${7:backup-triggers-db as Boolean}, ${8:include-replicas as Boolean}, ${9:incremental-dir as xs:string?}, ${10:purge-journal-archive as xs:boolean?}, ${11:journal-archiving as Boolean}, ${12:journal-archive-path as String})", "trigger":"admin.databaseWeeklyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, days as xs:string+, start-time as xs:time, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?, purge-journal-archive as xs:boolean?, journal-archiving as Boolean, journal-archive-path as String)"}, {"content":"admin.databaseWeeklyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:days as xs:string+}, ${4:start-time as xs:time}, ${5:backup-security-db as Boolean}, ${6:backup-schemas-db as Boolean}, ${7:backup-triggers-db as Boolean}, ${8:include-replicas as Boolean}, ${9:incremental-dir as xs:string?}, ${10:purge-journal-archive as xs:boolean?}, ${11:journal-archiving as Boolean}, ${12:journal-archive-path as String}, ${13:lag-limit as xs:unsignedLong})", "trigger":"admin.databaseWeeklyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, days as xs:string+, start-time as xs:time, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?, purge-journal-archive as xs:boolean?, journal-archiving as Boolean, journal-archive-path as String, lag-limit as xs:unsignedLong)"}, {"content":"admin.databaseMonthlyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:backup-month-day as xs:unsignedLong}, ${4:start-time as xs:time}, ${5:max-backups as xs:unsignedLong}, ${6:backup-security-db as Boolean}, ${7:backup-schemas-db as Boolean}, ${8:backup-triggers-db as Boolean})", "trigger":"admin.databaseMonthlyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, backup-month-day as xs:unsignedLong, start-time as xs:time, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean)"}, {"content":"admin.databaseMonthlyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:backup-month-day as xs:unsignedLong}, ${4:start-time as xs:time}, ${5:max-backups as xs:unsignedLong}, ${6:backup-security-db as Boolean}, ${7:backup-schemas-db as Boolean}, ${8:backup-triggers-db as Boolean}, ${9:include-replicas as Boolean})", "trigger":"admin.databaseMonthlyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, backup-month-day as xs:unsignedLong, start-time as xs:time, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean)"}, {"content":"admin.databaseMonthlyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:backup-month-day as xs:unsignedLong}, ${4:start-time as xs:time}, ${5:max-backups as xs:unsignedLong}, ${6:backup-security-db as Boolean}, ${7:backup-schemas-db as Boolean}, ${8:backup-triggers-db as Boolean}, ${9:include-replicas as Boolean}, ${10:journal-archiving as xs:boolean?})", "trigger":"admin.databaseMonthlyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, backup-month-day as xs:unsignedLong, start-time as xs:time, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, journal-archiving as xs:boolean?)"}, {"content":"admin.databaseMonthlyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:backup-month-day as xs:unsignedLong}, ${4:start-time as xs:time}, ${5:max-backups as xs:unsignedLong}, ${6:backup-security-db as Boolean}, ${7:backup-schemas-db as Boolean}, ${8:backup-triggers-db as Boolean}, ${9:include-replicas as Boolean}, ${10:journal-archiving as xs:boolean?}, ${11:journal-archive-path as xs:string?})", "trigger":"admin.databaseMonthlyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, backup-month-day as xs:unsignedLong, start-time as xs:time, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, journal-archiving as xs:boolean?, journal-archive-path as xs:string?)"}, {"content":"admin.databaseMonthlyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:backup-month-day as xs:unsignedLong}, ${4:start-time as xs:time}, ${5:max-backups as xs:unsignedLong}, ${6:backup-security-db as Boolean}, ${7:backup-schemas-db as Boolean}, ${8:backup-triggers-db as Boolean}, ${9:include-replicas as Boolean}, ${10:journal-archiving as xs:boolean?}, ${11:journal-archive-path as xs:string?}, ${12:lag-limit as xs:unsignedLong?})", "trigger":"admin.databaseMonthlyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, backup-month-day as xs:unsignedLong, start-time as xs:time, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, journal-archiving as xs:boolean?, journal-archive-path as xs:string?, lag-limit as xs:unsignedLong?)"}, {"content":"admin.databaseMonthlyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:backup-month-day as xs:unsignedLong}, ${4:start-time as xs:time}, ${5:backup-security-db as Boolean}, ${6:backup-schemas-db as Boolean}, ${7:backup-triggers-db as Boolean})", "trigger":"admin.databaseMonthlyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, backup-month-day as xs:unsignedLong, start-time as xs:time, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean)"}, {"content":"admin.databaseMonthlyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:backup-month-day as xs:unsignedLong}, ${4:start-time as xs:time}, ${5:backup-security-db as Boolean}, ${6:backup-schemas-db as Boolean}, ${7:backup-triggers-db as Boolean}, ${8:include-replicas as Boolean})", "trigger":"admin.databaseMonthlyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, backup-month-day as xs:unsignedLong, start-time as xs:time, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean)"}, {"content":"admin.databaseMonthlyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:backup-month-day as xs:unsignedLong}, ${4:start-time as xs:time}, ${5:backup-security-db as Boolean}, ${6:backup-schemas-db as Boolean}, ${7:backup-triggers-db as Boolean}, ${8:include-replicas as Boolean}, ${9:incremental-dir as xs:string?})", "trigger":"admin.databaseMonthlyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, backup-month-day as xs:unsignedLong, start-time as xs:time, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?)"}, {"content":"admin.databaseMonthlyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:backup-month-day as xs:unsignedLong}, ${4:start-time as xs:time}, ${5:backup-security-db as Boolean}, ${6:backup-schemas-db as Boolean}, ${7:backup-triggers-db as Boolean}, ${8:include-replicas as Boolean}, ${9:incremental-dir as xs:string?}, ${10:purge-journal-archive as xs:boolean?})", "trigger":"admin.databaseMonthlyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, backup-month-day as xs:unsignedLong, start-time as xs:time, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?, purge-journal-archive as xs:boolean?)"}, {"content":"admin.databaseMonthlyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:backup-month-day as xs:unsignedLong}, ${4:start-time as xs:time}, ${5:backup-security-db as Boolean}, ${6:backup-schemas-db as Boolean}, ${7:backup-triggers-db as Boolean}, ${8:include-replicas as Boolean}, ${9:incremental-dir as xs:string?}, ${10:purge-journal-archive as xs:boolean?}, ${11:journal-archiving as xs:boolean?})", "trigger":"admin.databaseMonthlyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, backup-month-day as xs:unsignedLong, start-time as xs:time, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?, purge-journal-archive as xs:boolean?, journal-archiving as xs:boolean?)"}, {"content":"admin.databaseMonthlyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:backup-month-day as xs:unsignedLong}, ${4:start-time as xs:time}, ${5:backup-security-db as Boolean}, ${6:backup-schemas-db as Boolean}, ${7:backup-triggers-db as Boolean}, ${8:include-replicas as Boolean}, ${9:incremental-dir as xs:string?}, ${10:purge-journal-archive as xs:boolean?}, ${11:journal-archiving as xs:boolean?}, ${12:journal-archive-path as xs:string?})", "trigger":"admin.databaseMonthlyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, backup-month-day as xs:unsignedLong, start-time as xs:time, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?, purge-journal-archive as xs:boolean?, journal-archiving as xs:boolean?, journal-archive-path as xs:string?)"}, {"content":"admin.databaseMonthlyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:backup-month-day as xs:unsignedLong}, ${4:start-time as xs:time}, ${5:backup-security-db as Boolean}, ${6:backup-schemas-db as Boolean}, ${7:backup-triggers-db as Boolean}, ${8:include-replicas as Boolean}, ${9:incremental-dir as xs:string?}, ${10:purge-journal-archive as xs:boolean?}, ${11:journal-archiving as xs:boolean?}, ${12:journal-archive-path as xs:string?}, ${13:lag-limit as xs:unsignedLong?})", "trigger":"admin.databaseMonthlyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, backup-month-day as xs:unsignedLong, start-time as xs:time, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?, purge-journal-archive as xs:boolean?, journal-archiving as xs:boolean?, journal-archive-path as xs:string?, lag-limit as xs:unsignedLong?)"}, {"content":"admin.databaseOneTimeBackup(${1:backup-dir as String}, ${2:start as xs:dateTime}, ${3:max-backups as xs:unsignedLong}, ${4:backup-security-db as Boolean}, ${5:backup-schemas-db as Boolean}, ${6:backup-triggers-db as Boolean})", "trigger":"admin.databaseOneTimeBackup", "description":"(backup-dir as String, start as xs:dateTime, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean)"}, {"content":"admin.databaseOneTimeBackup(${1:backup-dir as String}, ${2:start as xs:dateTime}, ${3:max-backups as xs:unsignedLong}, ${4:backup-security-db as Boolean}, ${5:backup-schemas-db as Boolean}, ${6:backup-triggers-db as Boolean}, ${7:include-replicas as Boolean})", "trigger":"admin.databaseOneTimeBackup", "description":"(backup-dir as String, start as xs:dateTime, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean)"}, {"content":"admin.databaseOneTimeBackup(${1:backup-dir as String}, ${2:start as xs:dateTime}, ${3:max-backups as xs:unsignedLong}, ${4:backup-security-db as Boolean}, ${5:backup-schemas-db as Boolean}, ${6:backup-triggers-db as Boolean}, ${7:include-replicas as Boolean}, ${8:journal-archiving as xs:boolean?})", "trigger":"admin.databaseOneTimeBackup", "description":"(backup-dir as String, start as xs:dateTime, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, journal-archiving as xs:boolean?)"}, {"content":"admin.databaseOneTimeBackup(${1:backup-dir as String}, ${2:start as xs:dateTime}, ${3:max-backups as xs:unsignedLong}, ${4:backup-security-db as Boolean}, ${5:backup-schemas-db as Boolean}, ${6:backup-triggers-db as Boolean}, ${7:include-replicas as Boolean}, ${8:journal-archiving as xs:boolean?}, ${9:journal-archive-path as xs:string?})", "trigger":"admin.databaseOneTimeBackup", "description":"(backup-dir as String, start as xs:dateTime, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, journal-archiving as xs:boolean?, journal-archive-path as xs:string?)"}, {"content":"admin.databaseOneTimeBackup(${1:backup-dir as String}, ${2:start as xs:dateTime}, ${3:max-backups as xs:unsignedLong}, ${4:backup-security-db as Boolean}, ${5:backup-schemas-db as Boolean}, ${6:backup-triggers-db as Boolean}, ${7:include-replicas as Boolean}, ${8:journal-archiving as xs:boolean?}, ${9:journal-archive-path as xs:string?}, ${10:lag-limit as xs:unsignedLong?})", "trigger":"admin.databaseOneTimeBackup", "description":"(backup-dir as String, start as xs:dateTime, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, journal-archiving as xs:boolean?, journal-archive-path as xs:string?, lag-limit as xs:unsignedLong?)"}, {"content":"admin.databaseOneTimeIncrementalBackup(${1:backup-dir as String}, ${2:start as xs:dateTime}, ${3:backup-security-db as Boolean}, ${4:backup-schemas-db as Boolean}, ${5:backup-triggers-db as Boolean})", "trigger":"admin.databaseOneTimeIncrementalBackup", "description":"(backup-dir as String, start as xs:dateTime, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean)"}, {"content":"admin.databaseOneTimeIncrementalBackup(${1:backup-dir as String}, ${2:start as xs:dateTime}, ${3:backup-security-db as Boolean}, ${4:backup-schemas-db as Boolean}, ${5:backup-triggers-db as Boolean}, ${6:include-replicas as Boolean})", "trigger":"admin.databaseOneTimeIncrementalBackup", "description":"(backup-dir as String, start as xs:dateTime, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean)"}, {"content":"admin.databaseOneTimeIncrementalBackup(${1:backup-dir as String}, ${2:start as xs:dateTime}, ${3:backup-security-db as Boolean}, ${4:backup-schemas-db as Boolean}, ${5:backup-triggers-db as Boolean}, ${6:include-replicas as Boolean}, ${7:incremental-dir as xs:string?})", "trigger":"admin.databaseOneTimeIncrementalBackup", "description":"(backup-dir as String, start as xs:dateTime, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?)"}, {"content":"admin.databaseOneTimeIncrementalBackup(${1:backup-dir as String}, ${2:start as xs:dateTime}, ${3:backup-security-db as Boolean}, ${4:backup-schemas-db as Boolean}, ${5:backup-triggers-db as Boolean}, ${6:include-replicas as Boolean}, ${7:incremental-dir as xs:string?}, ${8:purge-journal-archive as xs:boolean?})", "trigger":"admin.databaseOneTimeIncrementalBackup", "description":"(backup-dir as String, start as xs:dateTime, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?, purge-journal-archive as xs:boolean?)"}, {"content":"admin.databaseOneTimeIncrementalBackup(${1:backup-dir as String}, ${2:start as xs:dateTime}, ${3:backup-security-db as Boolean}, ${4:backup-schemas-db as Boolean}, ${5:backup-triggers-db as Boolean}, ${6:include-replicas as Boolean}, ${7:incremental-dir as xs:string?}, ${8:purge-journal-archive as xs:boolean?}, ${9:journal-archiving as xs:boolean?})", "trigger":"admin.databaseOneTimeIncrementalBackup", "description":"(backup-dir as String, start as xs:dateTime, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?, purge-journal-archive as xs:boolean?, journal-archiving as xs:boolean?)"}, {"content":"admin.databaseOneTimeIncrementalBackup(${1:backup-dir as String}, ${2:start as xs:dateTime}, ${3:backup-security-db as Boolean}, ${4:backup-schemas-db as Boolean}, ${5:backup-triggers-db as Boolean}, ${6:include-replicas as Boolean}, ${7:incremental-dir as xs:string?}, ${8:purge-journal-archive as xs:boolean?}, ${9:journal-archiving as xs:boolean?}, ${10:journal-archive-path as xs:string?})", "trigger":"admin.databaseOneTimeIncrementalBackup", "description":"(backup-dir as String, start as xs:dateTime, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?, purge-journal-archive as xs:boolean?, journal-archiving as xs:boolean?, journal-archive-path as xs:string?)"}, {"content":"admin.databaseOneTimeIncrementalBackup(${1:backup-dir as String}, ${2:start as xs:dateTime}, ${3:backup-security-db as Boolean}, ${4:backup-schemas-db as Boolean}, ${5:backup-triggers-db as Boolean}, ${6:include-replicas as Boolean}, ${7:incremental-dir as xs:string?}, ${8:purge-journal-archive as xs:boolean?}, ${9:journal-archiving as xs:boolean?}, ${10:journal-archive-path as xs:string?}, ${11:lag-limit as xs:unsignedLong?})", "trigger":"admin.databaseOneTimeIncrementalBackup", "description":"(backup-dir as String, start as xs:dateTime, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?, purge-journal-archive as xs:boolean?, journal-archiving as xs:boolean?, journal-archive-path as xs:string?, lag-limit as xs:unsignedLong?)"}, {"content":"admin.databaseAddBackup(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:backups as element(db:database-backup)*})", "trigger":"admin.databaseAddBackup", "description":"(config as element(configuration), database-id as xs:unsignedLong, backups as element(db:database-backup)*)"}, {"content":"admin.databaseDeleteBackup(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:backups as element(db:database-backup)*})", "trigger":"admin.databaseDeleteBackup", "description":"(config as element(configuration), database-id as xs:unsignedLong, backups as element(db:database-backup)*)"}, {"content":"admin.databaseGetMergeBlackouts(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetMergeBlackouts", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseRecurringMergeBlackout(${1:limit as xs:unsignedInt}, ${2:merge-priority as String}, ${3:days as xs:string+}, ${4:start-time as xs:time?}, ${5:end-time as xs:time?}, ${6:duration as xs:duration?})", "trigger":"admin.databaseRecurringMergeBlackout", "description":"(limit as xs:unsignedInt, merge-priority as String, days as xs:string+, start-time as xs:time?, end-time as xs:time?, duration as xs:duration?)"}, {"content":"admin.databaseOneTimeMergeBlackout(${1:limit as xs:unsignedInt}, ${2:merge-priority as String}, ${3:start as xs:dateTime}, ${4:end as xs:dateTime?}, ${5:duration as xs:duration?})", "trigger":"admin.databaseOneTimeMergeBlackout", "description":"(limit as xs:unsignedInt, merge-priority as String, start as xs:dateTime, end as xs:dateTime?, duration as xs:duration?)"}, {"content":"admin.databaseAddMergeBlackout(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:merge-blackouts as element(db:merge-blackout)*})", "trigger":"admin.databaseAddMergeBlackout", "description":"(config as element(configuration), database-id as xs:unsignedLong, merge-blackouts as element(db:merge-blackout)*)"}, {"content":"admin.databaseDeleteMergeBlackout(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:blackouts as element(db:merge-blackout)*})", "trigger":"admin.databaseDeleteMergeBlackout", "description":"(config as element(configuration), database-id as xs:unsignedLong, blackouts as element(db:merge-blackout)*)"}, {"content":"admin.databaseGetFragmentRoots(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetFragmentRoots", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseFragmentRoot(${1:namespace as xs:string?}, ${2:localname as String})", "trigger":"admin.databaseFragmentRoot", "description":"(namespace as xs:string?, localname as String)"}, {"content":"admin.databaseAddFragmentRoot(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:fragment-roots as element(db:fragment-root)*})", "trigger":"admin.databaseAddFragmentRoot", "description":"(config as element(configuration), database-id as xs:unsignedLong, fragment-roots as element(db:fragment-root)*)"}, {"content":"admin.databaseDeleteFragmentRoot(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:fragment-roots as element(db:fragment-root)*})", "trigger":"admin.databaseDeleteFragmentRoot", "description":"(config as element(configuration), database-id as xs:unsignedLong, fragment-roots as element(db:fragment-root)*)"}, {"content":"admin.databaseGetFragmentParents(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetFragmentParents", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseFragmentParent(${1:namespace as xs:string?}, ${2:localname as String})", "trigger":"admin.databaseFragmentParent", "description":"(namespace as xs:string?, localname as String)"}, {"content":"admin.databaseAddFragmentParent(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:fragment-parents as element(db:fragment-parent)*})", "trigger":"admin.databaseAddFragmentParent", "description":"(config as element(configuration), database-id as xs:unsignedLong, fragment-parents as element(db:fragment-parent)*)"}, {"content":"admin.databaseDeleteFragmentParent(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:fragment-parents as element(db:fragment-parent)*})", "trigger":"admin.databaseDeleteFragmentParent", "description":"(config as element(configuration), database-id as xs:unsignedLong, fragment-parents as element(db:fragment-parent)*)"}, {"content":"admin.databaseRangeElementIndex(${1:scalar-type as String}, ${2:namespace as xs:string?}, ${3:localname as String}, ${4:collation as xs:string?}, ${5:range-value-positions as Boolean})", "trigger":"admin.databaseRangeElementIndex", "description":"(scalar-type as String, namespace as xs:string?, localname as String, collation as xs:string?, range-value-positions as Boolean)"}, {"content":"admin.databaseRangeElementIndex(${1:scalar-type as String}, ${2:namespace as xs:string?}, ${3:localname as String}, ${4:collation as xs:string?}, ${5:range-value-positions as Boolean}, ${6:invalid-values as String})", "trigger":"admin.databaseRangeElementIndex", "description":"(scalar-type as String, namespace as xs:string?, localname as String, collation as xs:string?, range-value-positions as Boolean, invalid-values as String)"}, {"content":"admin.databaseRangeFieldIndex(${1:scalar-type as String}, ${2:fieldname as String}, ${3:collation as xs:string?}, ${4:range-value-positions as Boolean})", "trigger":"admin.databaseRangeFieldIndex", "description":"(scalar-type as String, fieldname as String, collation as xs:string?, range-value-positions as Boolean)"}, {"content":"admin.databaseRangeFieldIndex(${1:scalar-type as String}, ${2:fieldname as String}, ${3:collation as xs:string?}, ${4:range-value-positions as Boolean}, ${5:invalid-values as String})", "trigger":"admin.databaseRangeFieldIndex", "description":"(scalar-type as String, fieldname as String, collation as xs:string?, range-value-positions as Boolean, invalid-values as String)"}, {"content":"admin.databaseGetRangeElementIndexes(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetRangeElementIndexes", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetRangeFieldIndexes(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetRangeFieldIndexes", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseAddRangeElementIndex(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:range-indexes as element(db:range-element-index)*})", "trigger":"admin.databaseAddRangeElementIndex", "description":"(config as element(configuration), database-id as xs:unsignedLong, range-indexes as element(db:range-element-index)*)"}, {"content":"admin.databaseAddRangeFieldIndex(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:range-indexes as element(db:range-field-index)*})", "trigger":"admin.databaseAddRangeFieldIndex", "description":"(config as element(configuration), database-id as xs:unsignedLong, range-indexes as element(db:range-field-index)*)"}, {"content":"admin.databaseDeleteRangeElementIndex(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:range-indexes as element(db:range-element-index)*})", "trigger":"admin.databaseDeleteRangeElementIndex", "description":"(config as element(configuration), database-id as xs:unsignedLong, range-indexes as element(db:range-element-index)*)"}, {"content":"admin.databaseDeleteRangeFieldIndex(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:range-indexes as element(db:range-field-index)*})", "trigger":"admin.databaseDeleteRangeFieldIndex", "description":"(config as element(configuration), database-id as xs:unsignedLong, range-indexes as element(db:range-field-index)*)"}, {"content":"admin.databaseDeleteAllRangeFieldIndexes(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:fieldnames as xs:string*})", "trigger":"admin.databaseDeleteAllRangeFieldIndexes", "description":"(config as element(configuration), database-id as xs:unsignedLong, fieldnames as xs:string*)"}, {"content":"admin.databaseGetRangeElementAttributeIndexes(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetRangeElementAttributeIndexes", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseRangeElementAttributeIndex(${1:scalar-type as String}, ${2:parent-namespace as xs:string?}, ${3:parent-localname as String}, ${4:namespace as xs:string?}, ${5:localname as String}, ${6:collation as xs:string?}, ${7:range-value-positions as Boolean})", "trigger":"admin.databaseRangeElementAttributeIndex", "description":"(scalar-type as String, parent-namespace as xs:string?, parent-localname as String, namespace as xs:string?, localname as String, collation as xs:string?, range-value-positions as Boolean)"}, {"content":"admin.databaseRangeElementAttributeIndex(${1:scalar-type as String}, ${2:parent-namespace as xs:string?}, ${3:parent-localname as String}, ${4:namespace as xs:string?}, ${5:localname as String}, ${6:collation as xs:string?}, ${7:range-value-positions as Boolean}, ${8:invalid-values as String})", "trigger":"admin.databaseRangeElementAttributeIndex", "description":"(scalar-type as String, parent-namespace as xs:string?, parent-localname as String, namespace as xs:string?, localname as String, collation as xs:string?, range-value-positions as Boolean, invalid-values as String)"}, {"content":"admin.databaseAddRangeElementAttributeIndex(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:attribute-indexes as element(db:range-element-attribute-index)*})", "trigger":"admin.databaseAddRangeElementAttributeIndex", "description":"(config as element(configuration), database-id as xs:unsignedLong, attribute-indexes as element(db:range-element-attribute-index)*)"}, {"content":"admin.databaseDeleteRangeElementAttributeIndex(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:attribute-indexes as element(db:range-element-attribute-index)*})", "trigger":"admin.databaseDeleteRangeElementAttributeIndex", "description":"(config as element(configuration), database-id as xs:unsignedLong, attribute-indexes as element(db:range-element-attribute-index)*)"}, {"content":"admin.databaseElementWordLexicon(${1:namespace as xs:string?}, ${2:localname as String}, ${3:collation as String})", "trigger":"admin.databaseElementWordLexicon", "description":"(namespace as xs:string?, localname as String, collation as String)"}, {"content":"admin.databaseGetElementWordLexicons(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetElementWordLexicons", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseAddElementWordLexicon(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:element-word-lexicons as element(db:element-word-lexicon)*})", "trigger":"admin.databaseAddElementWordLexicon", "description":"(config as element(configuration), database-id as xs:unsignedLong, element-word-lexicons as element(db:element-word-lexicon)*)"}, {"content":"admin.databaseDeleteElementWordLexicon(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:element-word-lexicons as element(db:element-word-lexicon)*})", "trigger":"admin.databaseDeleteElementWordLexicon", "description":"(config as element(configuration), database-id as xs:unsignedLong, element-word-lexicons as element(db:element-word-lexicon)*)"}, {"content":"admin.databaseElementAttributeWordLexicon(${1:parent-namespace as xs:string?}, ${2:parent-localname as String}, ${3:namespace as xs:string?}, ${4:localname as String}, ${5:collation as String})", "trigger":"admin.databaseElementAttributeWordLexicon", "description":"(parent-namespace as xs:string?, parent-localname as String, namespace as xs:string?, localname as String, collation as String)"}, {"content":"admin.databaseGetElementAttributeWordLexicons(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetElementAttributeWordLexicons", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseAddElementAttributeWordLexicon(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:element-attribute-word-lexicons as element(db:element-attribute-word-lexicon)*})", "trigger":"admin.databaseAddElementAttributeWordLexicon", "description":"(config as element(configuration), database-id as xs:unsignedLong, element-attribute-word-lexicons as element(db:element-attribute-word-lexicon)*)"}, {"content":"admin.databaseDeleteElementAttributeWordLexicon(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:lexicons as element(db:element-attribute-word-lexicon)*})", "trigger":"admin.databaseDeleteElementAttributeWordLexicon", "description":"(config as element(configuration), database-id as xs:unsignedLong, lexicons as element(db:element-attribute-word-lexicon)*)"}, {"content":"admin.databasePhraseThrough(${1:namespace as xs:string?}, ${2:localname as String})", "trigger":"admin.databasePhraseThrough", "description":"(namespace as xs:string?, localname as String)"}, {"content":"admin.databaseGetPhraseThroughs(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetPhraseThroughs", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseAddPhraseThrough(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:phrase-throughs as element(db:phrase-through)*})", "trigger":"admin.databaseAddPhraseThrough", "description":"(config as element(configuration), database-id as xs:unsignedLong, phrase-throughs as element(db:phrase-through)*)"}, {"content":"admin.databaseDeletePhraseThrough(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:phrase-throughs as element(db:phrase-through)*})", "trigger":"admin.databaseDeletePhraseThrough", "description":"(config as element(configuration), database-id as xs:unsignedLong, phrase-throughs as element(db:phrase-through)*)"}, {"content":"admin.databasePhraseAround(${1:namespace as xs:string?}, ${2:localname as String})", "trigger":"admin.databasePhraseAround", "description":"(namespace as xs:string?, localname as String)"}, {"content":"admin.databaseGetPhraseArounds(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetPhraseArounds", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseAddPhraseAround(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:phrase-arounds as element(db:phrase-around)*})", "trigger":"admin.databaseAddPhraseAround", "description":"(config as element(configuration), database-id as xs:unsignedLong, phrase-arounds as element(db:phrase-around)*)"}, {"content":"admin.databaseDeletePhraseAround(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:phrase-arounds as element(db:phrase-around)*})", "trigger":"admin.databaseDeletePhraseAround", "description":"(config as element(configuration), database-id as xs:unsignedLong, phrase-arounds as element(db:phrase-around)*)"}, {"content":"admin.databaseElementWordQueryThrough(${1:namespace as xs:string?}, ${2:localname as String})", "trigger":"admin.databaseElementWordQueryThrough", "description":"(namespace as xs:string?, localname as String)"}, {"content":"admin.databaseGetElementWordQueryThroughs(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetElementWordQueryThroughs", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseAddElementWordQueryThrough(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:element-word-query-throughs as element(db:element-word-query-through)*})", "trigger":"admin.databaseAddElementWordQueryThrough", "description":"(config as element(configuration), database-id as xs:unsignedLong, element-word-query-throughs as element(db:element-word-query-through)*)"}, {"content":"admin.databaseDeleteElementWordQueryThrough(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:throughs as element(db:element-word-query-through)*})", "trigger":"admin.databaseDeleteElementWordQueryThrough", "description":"(config as element(configuration), database-id as xs:unsignedLong, throughs as element(db:element-word-query-through)*)"}, {"content":"admin.databaseWordLexicon(${1:collation as String})", "trigger":"admin.databaseWordLexicon", "description":"(collation as String)"}, {"content":"admin.databaseGetWordLexicons(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetWordLexicons", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseAddWordLexicon(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:word-lexicons as element(db:word-lexicon)*})", "trigger":"admin.databaseAddWordLexicon", "description":"(config as element(configuration), database-id as xs:unsignedLong, word-lexicons as element(db:word-lexicon)*)"}, {"content":"admin.databaseDeleteWordLexicon(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:word-lexicons as element(db:word-lexicon)*})", "trigger":"admin.databaseDeleteWordLexicon", "description":"(config as element(configuration), database-id as xs:unsignedLong, word-lexicons as element(db:word-lexicon)*)"}, {"content":"admin.databaseGeospatialElementIndex(${1:namespace as xs:string?}, ${2:localname as String}, ${3:coordinate-system as String}, ${4:range-value-positions as Boolean})", "trigger":"admin.databaseGeospatialElementIndex", "description":"(namespace as xs:string?, localname as String, coordinate-system as String, range-value-positions as Boolean)"}, {"content":"admin.databaseGeospatialElementIndex(${1:namespace as xs:string?}, ${2:localname as String}, ${3:coordinate-system as String}, ${4:range-value-positions as Boolean}, ${5:point-format as String})", "trigger":"admin.databaseGeospatialElementIndex", "description":"(namespace as xs:string?, localname as String, coordinate-system as String, range-value-positions as Boolean, point-format as String)"}, {"content":"admin.databaseGeospatialElementIndex(${1:namespace as xs:string?}, ${2:localname as String}, ${3:coordinate-system as String}, ${4:range-value-positions as Boolean}, ${5:point-format as String}, ${6:invalid-values as String})", "trigger":"admin.databaseGeospatialElementIndex", "description":"(namespace as xs:string?, localname as String, coordinate-system as String, range-value-positions as Boolean, point-format as String, invalid-values as String)"}, {"content":"admin.databaseGetGeospatialElementIndexes(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetGeospatialElementIndexes", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseAddGeospatialElementIndex(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:geospatial-element-indexes as element(db:geospatial-element-index)*})", "trigger":"admin.databaseAddGeospatialElementIndex", "description":"(config as element(configuration), database-id as xs:unsignedLong, geospatial-element-indexes as element(db:geospatial-element-index)*)"}, {"content":"admin.databaseDeleteGeospatialElementIndex(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:geospatial-element-indexes as element(db:geospatial-element-index)*})", "trigger":"admin.databaseDeleteGeospatialElementIndex", "description":"(config as element(configuration), database-id as xs:unsignedLong, geospatial-element-indexes as element(db:geospatial-element-index)*)"}, {"content":"admin.databaseGeospatialElementChildIndex(${1:parent-namespace as xs:string?}, ${2:parent-localname as String}, ${3:namespace as xs:string?}, ${4:localname as String}, ${5:coordinate-system as String}, ${6:range-value-positions as Boolean})", "trigger":"admin.databaseGeospatialElementChildIndex", "description":"(parent-namespace as xs:string?, parent-localname as String, namespace as xs:string?, localname as String, coordinate-system as String, range-value-positions as Boolean)"}, {"content":"admin.databaseGeospatialElementChildIndex(${1:parent-namespace as xs:string?}, ${2:parent-localname as String}, ${3:namespace as xs:string?}, ${4:localname as String}, ${5:coordinate-system as String}, ${6:range-value-positions as Boolean}, ${7:point-format as String})", "trigger":"admin.databaseGeospatialElementChildIndex", "description":"(parent-namespace as xs:string?, parent-localname as String, namespace as xs:string?, localname as String, coordinate-system as String, range-value-positions as Boolean, point-format as String)"}, {"content":"admin.databaseGeospatialElementChildIndex(${1:parent-namespace as xs:string?}, ${2:parent-localname as String}, ${3:namespace as xs:string?}, ${4:localname as String}, ${5:coordinate-system as String}, ${6:range-value-positions as Boolean}, ${7:point-format as String}, ${8:invalid-values as String})", "trigger":"admin.databaseGeospatialElementChildIndex", "description":"(parent-namespace as xs:string?, parent-localname as String, namespace as xs:string?, localname as String, coordinate-system as String, range-value-positions as Boolean, point-format as String, invalid-values as String)"}, {"content":"admin.databaseGetGeospatialElementChildIndexes(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetGeospatialElementChildIndexes", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseAddGeospatialElementChildIndex(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:geospatial-element-child-indexes as element(db:geospatial-element-child-index)*})", "trigger":"admin.databaseAddGeospatialElementChildIndex", "description":"(config as element(configuration), database-id as xs:unsignedLong, geospatial-element-child-indexes as element(db:geospatial-element-child-index)*)"}, {"content":"admin.databaseDeleteGeospatialElementChildIndex(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:geospatial-element-child-indexes as element(db:geospatial-element-child-index)*})", "trigger":"admin.databaseDeleteGeospatialElementChildIndex", "description":"(config as element(configuration), database-id as xs:unsignedLong, geospatial-element-child-indexes as element(db:geospatial-element-child-index)*)"}, {"content":"admin.databaseGeospatialElementPairIndex(${1:parent-namespace as xs:string?}, ${2:parent-localname as String}, ${3:latitude-namespace as xs:string?}, ${4:latitude-localname as String}, ${5:longitude-namespace as xs:string?}, ${6:longitude-localname as String}, ${7:coordinate-system as String}, ${8:range-value-positions as Boolean})", "trigger":"admin.databaseGeospatialElementPairIndex", "description":"(parent-namespace as xs:string?, parent-localname as String, latitude-namespace as xs:string?, latitude-localname as String, longitude-namespace as xs:string?, longitude-localname as String, coordinate-system as String, range-value-positions as Boolean)"}, {"content":"admin.databaseGeospatialElementPairIndex(${1:parent-namespace as xs:string?}, ${2:parent-localname as String}, ${3:latitude-namespace as xs:string?}, ${4:latitude-localname as String}, ${5:longitude-namespace as xs:string?}, ${6:longitude-localname as String}, ${7:coordinate-system as String}, ${8:range-value-positions as Boolean}, ${9:invalid-values as String})", "trigger":"admin.databaseGeospatialElementPairIndex", "description":"(parent-namespace as xs:string?, parent-localname as String, latitude-namespace as xs:string?, latitude-localname as String, longitude-namespace as xs:string?, longitude-localname as String, coordinate-system as String, range-value-positions as Boolean, invalid-values as String)"}, {"content":"admin.databaseGetGeospatialElementPairIndexes(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetGeospatialElementPairIndexes", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseAddGeospatialElementPairIndex(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:geospatial-element-pair-indexes as element(db:geospatial-element-pair-index)*})", "trigger":"admin.databaseAddGeospatialElementPairIndex", "description":"(config as element(configuration), database-id as xs:unsignedLong, geospatial-element-pair-indexes as element(db:geospatial-element-pair-index)*)"}, {"content":"admin.databaseDeleteGeospatialElementPairIndex(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:geospatial-element-pair-indexes as element(db:geospatial-element-pair-index)*})", "trigger":"admin.databaseDeleteGeospatialElementPairIndex", "description":"(config as element(configuration), database-id as xs:unsignedLong, geospatial-element-pair-indexes as element(db:geospatial-element-pair-index)*)"}, {"content":"admin.databaseGeospatialElementAttributePairIndex(${1:parent-namespace as xs:string?}, ${2:parent-localname as String}, ${3:latitude-namespace as xs:string?}, ${4:latitude-localname as String}, ${5:longitude-namespace as xs:string?}, ${6:longitude-localname as String}, ${7:coordinate-system as String}, ${8:range-value-positions as Boolean})", "trigger":"admin.databaseGeospatialElementAttributePairIndex", "description":"(parent-namespace as xs:string?, parent-localname as String, latitude-namespace as xs:string?, latitude-localname as String, longitude-namespace as xs:string?, longitude-localname as String, coordinate-system as String, range-value-positions as Boolean)"}, {"content":"admin.databaseGeospatialElementAttributePairIndex(${1:parent-namespace as xs:string?}, ${2:parent-localname as String}, ${3:latitude-namespace as xs:string?}, ${4:latitude-localname as String}, ${5:longitude-namespace as xs:string?}, ${6:longitude-localname as String}, ${7:coordinate-system as String}, ${8:range-value-positions as Boolean}, ${9:invalid-values as String})", "trigger":"admin.databaseGeospatialElementAttributePairIndex", "description":"(parent-namespace as xs:string?, parent-localname as String, latitude-namespace as xs:string?, latitude-localname as String, longitude-namespace as xs:string?, longitude-localname as String, coordinate-system as String, range-value-positions as Boolean, invalid-values as String)"}, {"content":"admin.databaseGetGeospatialElementAttributePairIndexes(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetGeospatialElementAttributePairIndexes", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseAddGeospatialElementAttributePairIndex(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:geospatial-element-attribute-pair-indexes as element(db:geospatial-element-attribute-pair-index)*})", "trigger":"admin.databaseAddGeospatialElementAttributePairIndex", "description":"(config as element(configuration), database-id as xs:unsignedLong, geospatial-element-attribute-pair-indexes as element(db:geospatial-element-attribute-pair-index)*)"}, {"content":"admin.databaseDeleteGeospatialElementAttributePairIndex(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:indexes as element(db:geospatial-element-attribute-pair-index)*})", "trigger":"admin.databaseDeleteGeospatialElementAttributePairIndex", "description":"(config as element(configuration), database-id as xs:unsignedLong, indexes as element(db:geospatial-element-attribute-pair-index)*)"}, {"content":"admin.databaseGeospatialRegionPathIndex(${1:pathexpr as String}, ${2:coordinate-system as String}, ${3:geohash-precision as xs:integer}, ${4:invalid-values as String})", "trigger":"admin.databaseGeospatialRegionPathIndex", "description":"(pathexpr as String, coordinate-system as String, geohash-precision as xs:integer, invalid-values as String)"}, {"content":"admin.databaseAddGeospatialRegionPathIndex(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:geospatial-region-path-indexes as element(db:geospatial-region-path-index)*})", "trigger":"admin.databaseAddGeospatialRegionPathIndex", "description":"(config as element(configuration), database-id as xs:unsignedLong, geospatial-region-path-indexes as element(db:geospatial-region-path-index)*)"}, {"content":"admin.databaseDeleteGeospatialRegionPathIndex(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:geospatial-region-path-indexes as element(db:geospatial-region-path-index)*})", "trigger":"admin.databaseDeleteGeospatialRegionPathIndex", "description":"(config as element(configuration), database-id as xs:unsignedLong, geospatial-region-path-indexes as element(db:geospatial-region-path-index)*)"}, {"content":"admin.databaseGetGeospatialRegionPathIndexes(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetGeospatialRegionPathIndexes", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseSetName(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.databaseSetName", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as String)"}, {"content":"admin.databaseSetEnabled(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetEnabled", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetSecurityDatabase(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:unsignedLong})", "trigger":"admin.databaseSetSecurityDatabase", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:unsignedLong)"}, {"content":"admin.databaseSetSchemaDatabase(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:unsignedLong})", "trigger":"admin.databaseSetSchemaDatabase", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:unsignedLong)"}, {"content":"admin.databaseSetTriggersDatabase(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:unsignedLong})", "trigger":"admin.databaseSetTriggersDatabase", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:unsignedLong)"}, {"content":"admin.databaseSetLanguage(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.databaseSetLanguage", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as String)"}, {"content":"admin.databaseSetStemmedSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.databaseSetStemmedSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as String)"}, {"content":"admin.databaseSetWordSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetWordSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetWordPositions(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetWordPositions", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetFastPhraseSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetFastPhraseSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetFastCaseSensitiveSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetFastCaseSensitiveSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetFastReverseSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetFastReverseSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetFastDiacriticSensitiveSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetFastDiacriticSensitiveSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetFastElementWordSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetFastElementWordSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetElementWordPositions(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetElementWordPositions", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetFastElementPhraseSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetFastElementPhraseSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetElementValuePositions(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetElementValuePositions", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetAttributeValuePositions(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetAttributeValuePositions", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetTrailingWildcardSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetTrailingWildcardSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetTrailingWildcardWordPositions(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetTrailingWildcardWordPositions", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetFastElementTrailingWildcardSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetFastElementTrailingWildcardSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetThreeCharacterSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetThreeCharacterSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetThreeCharacterWordPositions(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetThreeCharacterWordPositions", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetTwoCharacterSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetTwoCharacterSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetOneCharacterSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetOneCharacterSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetFastElementCharacterSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetFastElementCharacterSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetUriLexicon(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetUriLexicon", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetCollectionLexicon(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetCollectionLexicon", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetReindexerEnable(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetReindexerEnable", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetMaintainLastModified(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetMaintainLastModified", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetMaintainDirectoryLastModified(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetMaintainDirectoryLastModified", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetInheritPermissions(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetInheritPermissions", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetInheritCollections(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetInheritCollections", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetInheritQuality(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetInheritQuality", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetPreallocateJournals(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetPreallocateJournals", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetPreloadMappedData(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetPreloadMappedData", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetRangeIndexOptimize(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.databaseSetRangeIndexOptimize", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as String)"}, {"content":"admin.databaseSetDirectoryCreation(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.databaseSetDirectoryCreation", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as String)"}, {"content":"admin.databaseSetFormatCompatibility(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.databaseSetFormatCompatibility", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as String)"}, {"content":"admin.databaseSetIndexDetection(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.databaseSetIndexDetection", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as String)"}, {"content":"admin.databaseSetExpungeLocks(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.databaseSetExpungeLocks", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as String)"}, {"content":"admin.databaseSetReindexerTimestamp(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:unsignedLong})", "trigger":"admin.databaseSetReindexerTimestamp", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:unsignedLong)"}, {"content":"admin.databaseSetInMemoryLimit(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.databaseSetInMemoryLimit", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.databaseSetInMemoryListSize(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.databaseSetInMemoryListSize", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.databaseSetInMemoryTreeSize(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.databaseSetInMemoryTreeSize", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.databaseSetInMemoryRangeIndexSize(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.databaseSetInMemoryRangeIndexSize", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.databaseSetInMemoryReverseIndexSize(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.databaseSetInMemoryReverseIndexSize", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.databaseSetLargeSizeThreshold(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.databaseSetLargeSizeThreshold", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.databaseSetLocking(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.databaseSetLocking", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as String)"}, {"content":"admin.databaseSetJournaling(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.databaseSetJournaling", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as String)"}, {"content":"admin.databaseSetJournalSize(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.databaseSetJournalSize", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.databaseSetPositionsListMaxSize(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.databaseSetPositionsListMaxSize", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.databaseSetMergeMaxSize(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.databaseSetMergeMaxSize", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.databaseSetMergeMinSize(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.databaseSetMergeMinSize", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.databaseSetMergeMinRatio(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.databaseSetMergeMinRatio", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.databaseSetMergePriority(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.databaseSetMergePriority", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as String)"}, {"content":"admin.databaseSetMergeTimestamp(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:long})", "trigger":"admin.databaseSetMergeTimestamp", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:long)"}, {"content":"admin.databaseSetReindexerThrottle(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.databaseSetReindexerThrottle", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.databaseGetAttachedForests(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetAttachedForests", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetId(${1:config as element(configuration)}, ${2:database-name as String})", "trigger":"admin.databaseGetId", "description":"(config as element(configuration), database-name as String)"}, {"content":"admin.databaseGetEnabled(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetEnabled", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetName(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetName", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetSecurityDatabase(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetSecurityDatabase", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetSchemaDatabase(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetSchemaDatabase", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetTriggersDatabase(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetTriggersDatabase", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetLanguage(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetLanguage", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetStemmedSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetStemmedSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetWordSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetWordSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetWordPositions(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetWordPositions", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetFastPhraseSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetFastPhraseSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetFastCaseSensitiveSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetFastCaseSensitiveSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetFastReverseSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetFastReverseSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetFastDiacriticSensitiveSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetFastDiacriticSensitiveSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetFastElementWordSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetFastElementWordSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetElementWordPositions(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetElementWordPositions", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetFastElementPhraseSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetFastElementPhraseSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetElementValuePositions(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetElementValuePositions", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetAttributeValuePositions(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetAttributeValuePositions", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetTrailingWildcardSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetTrailingWildcardSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetTrailingWildcardWordPositions(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetTrailingWildcardWordPositions", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetFastElementTrailingWildcardSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetFastElementTrailingWildcardSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetThreeCharacterSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetThreeCharacterSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetThreeCharacterWordPositions(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetThreeCharacterWordPositions", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetTwoCharacterSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetTwoCharacterSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetOneCharacterSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetOneCharacterSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetFastElementCharacterSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetFastElementCharacterSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetUriLexicon(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetUriLexicon", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetCollectionLexicon(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetCollectionLexicon", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetReindexerEnable(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetReindexerEnable", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetMaintainLastModified(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetMaintainLastModified", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetMaintainDirectoryLastModified(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetMaintainDirectoryLastModified", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetInheritPermissions(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetInheritPermissions", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetInheritCollections(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetInheritCollections", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetInheritQuality(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetInheritQuality", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetPreallocateJournals(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetPreallocateJournals", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetPreloadMappedData(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetPreloadMappedData", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetRangeIndexOptimize(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetRangeIndexOptimize", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetDirectoryCreation(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetDirectoryCreation", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetFormatCompatibility(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetFormatCompatibility", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetIndexDetection(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetIndexDetection", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetExpungeLocks(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetExpungeLocks", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetReindexerTimestamp(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetReindexerTimestamp", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetInMemoryLimit(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetInMemoryLimit", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetInMemoryListSize(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetInMemoryListSize", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetInMemoryTreeSize(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetInMemoryTreeSize", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetInMemoryRangeIndexSize(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetInMemoryRangeIndexSize", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetInMemoryReverseIndexSize(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetInMemoryReverseIndexSize", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetLocking(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetLocking", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetJournaling(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetJournaling", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetJournalSize(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetJournalSize", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetPositionsListMaxSize(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetPositionsListMaxSize", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetMergeMaxSize(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetMergeMaxSize", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetMergeMinSize(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetMergeMinSize", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetMergeMinRatio(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetMergeMinRatio", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetMergePriority(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetMergePriority", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetMergeTimestamp(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetMergeTimestamp", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetReindexerThrottle(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetReindexerThrottle", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseIncludedElement(${1:namespace as xs:string?}, ${2:localname as String}, ${3:weight as xs:double}, ${4:attribute-namespace as xs:string?}, ${5:attribute-localname as String}, ${6:attribute-value as String})", "trigger":"admin.databaseIncludedElement", "description":"(namespace as xs:string?, localname as String, weight as xs:double, attribute-namespace as xs:string?, attribute-localname as String, attribute-value as String)"}, {"content":"admin.databaseExcludedElement(${1:namespace as xs:string?}, ${2:localname as String})", "trigger":"admin.databaseExcludedElement", "description":"(namespace as xs:string?, localname as String)"}, {"content":"admin.databaseExcludedElement(${1:namespace as xs:string?}, ${2:localname as String}, ${3:attribute-namespace as xs:string?})", "trigger":"admin.databaseExcludedElement", "description":"(namespace as xs:string?, localname as String, attribute-namespace as xs:string?)"}, {"content":"admin.databaseExcludedElement(${1:namespace as xs:string?}, ${2:localname as String}, ${3:attribute-namespace as xs:string?}, ${4:attribute-localname as String})", "trigger":"admin.databaseExcludedElement", "description":"(namespace as xs:string?, localname as String, attribute-namespace as xs:string?, attribute-localname as String)"}, {"content":"admin.databaseExcludedElement(${1:namespace as xs:string?}, ${2:localname as String}, ${3:attribute-namespace as xs:string?}, ${4:attribute-localname as String}, ${5:attribute-value as String})", "trigger":"admin.databaseExcludedElement", "description":"(namespace as xs:string?, localname as String, attribute-namespace as xs:string?, attribute-localname as String, attribute-value as String)"}, {"content":"admin.databaseField(${1:field-name as String}, ${2:include-root as Boolean})", "trigger":"admin.databaseField", "description":"(field-name as String, include-root as Boolean)"}, {"content":"admin.databaseGetWordQueryIncludedElements(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetWordQueryIncludedElements", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetWordQueryExcludedElements(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetWordQueryExcludedElements", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetFields(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetFields", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetFieldIncludedElements(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String})", "trigger":"admin.databaseGetFieldIncludedElements", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String)"}, {"content":"admin.databaseGetFieldExcludedElements(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String})", "trigger":"admin.databaseGetFieldExcludedElements", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String)"}, {"content":"admin.databaseGetField(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String})", "trigger":"admin.databaseGetField", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String)"}, {"content":"admin.databaseAddField(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:fields as element(db:field)*})", "trigger":"admin.databaseAddField", "description":"(config as element(configuration), database-id as xs:unsignedLong, fields as element(db:field)*)"}, {"content":"admin.databaseDeleteField(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-names as xs:string*})", "trigger":"admin.databaseDeleteField", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-names as xs:string*)"}, {"content":"admin.databaseAddWordQueryIncludedElement(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:included-elements as element(db:included-element)*})", "trigger":"admin.databaseAddWordQueryIncludedElement", "description":"(config as element(configuration), database-id as xs:unsignedLong, included-elements as element(db:included-element)*)"}, {"content":"admin.databaseDeleteWordQueryIncludedElement(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:included-elements as element(db:included-element)*})", "trigger":"admin.databaseDeleteWordQueryIncludedElement", "description":"(config as element(configuration), database-id as xs:unsignedLong, included-elements as element(db:included-element)*)"}, {"content":"admin.databaseAddFieldIncludedElement(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String}, ${4:included-elements as element(db:included-element)*})", "trigger":"admin.databaseAddFieldIncludedElement", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String, included-elements as element(db:included-element)*)"}, {"content":"admin.databaseDeleteFieldIncludedElement(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String}, ${4:included-elements as element(db:included-element)*})", "trigger":"admin.databaseDeleteFieldIncludedElement", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String, included-elements as element(db:included-element)*)"}, {"content":"admin.databaseAddWordQueryExcludedElement(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:excluded-elements as element(db:excluded-element)*})", "trigger":"admin.databaseAddWordQueryExcludedElement", "description":"(config as element(configuration), database-id as xs:unsignedLong, excluded-elements as element(db:excluded-element)*)"}, {"content":"admin.databaseDeleteWordQueryExcludedElement(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:excluded-elements as element(db:excluded-element)*})", "trigger":"admin.databaseDeleteWordQueryExcludedElement", "description":"(config as element(configuration), database-id as xs:unsignedLong, excluded-elements as element(db:excluded-element)*)"}, {"content":"admin.databaseAddFieldExcludedElement(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String}, ${4:excluded-elements as element(db:excluded-element)*})", "trigger":"admin.databaseAddFieldExcludedElement", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String, excluded-elements as element(db:excluded-element)*)"}, {"content":"admin.databaseDeleteFieldExcludedElement(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String}, ${4:excluded-elements as element(db:excluded-element)*})", "trigger":"admin.databaseDeleteFieldExcludedElement", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String, excluded-elements as element(db:excluded-element)*)"}, {"content":"admin.databaseGetFieldWordLexicons(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String})", "trigger":"admin.databaseGetFieldWordLexicons", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String)"}, {"content":"admin.databaseAddFieldWordLexicon(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String}, ${4:word-lexicons as element(db:word-lexicon)*})", "trigger":"admin.databaseAddFieldWordLexicon", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String, word-lexicons as element(db:word-lexicon)*)"}, {"content":"admin.databaseDeleteFieldWordLexicon(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String}, ${4:word-lexicons as element(db:word-lexicon)*})", "trigger":"admin.databaseDeleteFieldWordLexicon", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String, word-lexicons as element(db:word-lexicon)*)"}, {"content":"admin.databaseGetWordQueryIncludeDocumentRoot(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetWordQueryIncludeDocumentRoot", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetWordQueryStemmedSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetWordQueryStemmedSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetWordQueryWordSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetWordQueryWordSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetWordQueryFastPhraseSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetWordQueryFastPhraseSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetWordQueryFastCaseSensitiveSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetWordQueryFastCaseSensitiveSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetWordQueryFastDiacriticSensitiveSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetWordQueryFastDiacriticSensitiveSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetWordQueryTrailingWildcardSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetWordQueryTrailingWildcardSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetWordQueryTrailingWildcardWordPositions(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetWordQueryTrailingWildcardWordPositions", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetWordQueryThreeCharacterSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetWordQueryThreeCharacterSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetWordQueryThreeCharacterWordPositions(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetWordQueryThreeCharacterWordPositions", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetWordQueryTwoCharacterSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetWordQueryTwoCharacterSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetWordQueryOneCharacterSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetWordQueryOneCharacterSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseSetWordQueryStemmedSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:string?})", "trigger":"admin.databaseSetWordQueryStemmedSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:string?)"}, {"content":"admin.databaseSetWordQueryWordSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:boolean?})", "trigger":"admin.databaseSetWordQueryWordSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:boolean?)"}, {"content":"admin.databaseSetWordQueryFastPhraseSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:boolean?})", "trigger":"admin.databaseSetWordQueryFastPhraseSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:boolean?)"}, {"content":"admin.databaseSetWordQueryFastCaseSensitiveSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:boolean?})", "trigger":"admin.databaseSetWordQueryFastCaseSensitiveSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:boolean?)"}, {"content":"admin.databaseSetWordQueryFastDiacriticSensitiveSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:boolean?})", "trigger":"admin.databaseSetWordQueryFastDiacriticSensitiveSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:boolean?)"}, {"content":"admin.databaseSetWordQueryTrailingWildcardSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:boolean?})", "trigger":"admin.databaseSetWordQueryTrailingWildcardSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:boolean?)"}, {"content":"admin.databaseSetWordQueryTrailingWildcardWordPositions(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:boolean?})", "trigger":"admin.databaseSetWordQueryTrailingWildcardWordPositions", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:boolean?)"}, {"content":"admin.databaseSetWordQueryThreeCharacterSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:boolean?})", "trigger":"admin.databaseSetWordQueryThreeCharacterSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:boolean?)"}, {"content":"admin.databaseSetWordQueryThreeCharacterWordPositions(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:boolean?})", "trigger":"admin.databaseSetWordQueryThreeCharacterWordPositions", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:boolean?)"}, {"content":"admin.databaseSetWordQueryTwoCharacterSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:boolean?})", "trigger":"admin.databaseSetWordQueryTwoCharacterSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:boolean?)"}, {"content":"admin.databaseSetWordQueryOneCharacterSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:boolean?})", "trigger":"admin.databaseSetWordQueryOneCharacterSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:boolean?)"}, {"content":"admin.databaseSetWordQueryIncludeDocumentRoot(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetWordQueryIncludeDocumentRoot", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseGetFieldIncludeDocumentRoot(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String})", "trigger":"admin.databaseGetFieldIncludeDocumentRoot", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String)"}, {"content":"admin.databaseGetFieldStemmedSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String})", "trigger":"admin.databaseGetFieldStemmedSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String)"}, {"content":"admin.databaseGetFieldWordSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String})", "trigger":"admin.databaseGetFieldWordSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String)"}, {"content":"admin.databaseGetFieldFastPhraseSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String})", "trigger":"admin.databaseGetFieldFastPhraseSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String)"}, {"content":"admin.databaseGetFieldFastCaseSensitiveSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String})", "trigger":"admin.databaseGetFieldFastCaseSensitiveSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String)"}, {"content":"admin.databaseGetFieldFastDiacriticSensitiveSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String})", "trigger":"admin.databaseGetFieldFastDiacriticSensitiveSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String)"}, {"content":"admin.databaseGetFieldTrailingWildcardSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String})", "trigger":"admin.databaseGetFieldTrailingWildcardSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String)"}, {"content":"admin.databaseGetFieldTrailingWildcardWordPositions(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String})", "trigger":"admin.databaseGetFieldTrailingWildcardWordPositions", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String)"}, {"content":"admin.databaseGetFieldThreeCharacterSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String})", "trigger":"admin.databaseGetFieldThreeCharacterSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String)"}, {"content":"admin.databaseGetFieldThreeCharacterWordPositions(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String})", "trigger":"admin.databaseGetFieldThreeCharacterWordPositions", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String)"}, {"content":"admin.databaseGetFieldTwoCharacterSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String})", "trigger":"admin.databaseGetFieldTwoCharacterSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String)"}, {"content":"admin.databaseGetFieldOneCharacterSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String})", "trigger":"admin.databaseGetFieldOneCharacterSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String)"}, {"content":"admin.databaseSetFieldStemmedSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String}, ${4:value as xs:string?})", "trigger":"admin.databaseSetFieldStemmedSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String, value as xs:string?)"}, {"content":"admin.databaseSetFieldWordSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String}, ${4:value as xs:boolean?})", "trigger":"admin.databaseSetFieldWordSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String, value as xs:boolean?)"}, {"content":"admin.databaseSetFieldFastPhraseSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String}, ${4:value as xs:boolean?})", "trigger":"admin.databaseSetFieldFastPhraseSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String, value as xs:boolean?)"}, {"content":"admin.databaseSetFieldFastCaseSensitiveSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String}, ${4:value as xs:boolean?})", "trigger":"admin.databaseSetFieldFastCaseSensitiveSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String, value as xs:boolean?)"}, {"content":"admin.databaseSetFieldFastDiacriticSensitiveSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String}, ${4:value as xs:boolean?})", "trigger":"admin.databaseSetFieldFastDiacriticSensitiveSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String, value as xs:boolean?)"}, {"content":"admin.databaseSetFieldTrailingWildcardSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String}, ${4:value as xs:boolean?})", "trigger":"admin.databaseSetFieldTrailingWildcardSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String, value as xs:boolean?)"}, {"content":"admin.databaseSetFieldTrailingWildcardWordPositions(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String}, ${4:value as xs:boolean?})", "trigger":"admin.databaseSetFieldTrailingWildcardWordPositions", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String, value as xs:boolean?)"}, {"content":"admin.databaseSetFieldThreeCharacterSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String}, ${4:value as xs:boolean?})", "trigger":"admin.databaseSetFieldThreeCharacterSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String, value as xs:boolean?)"}, {"content":"admin.databaseSetFieldThreeCharacterWordPositions(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String}, ${4:value as xs:boolean?})", "trigger":"admin.databaseSetFieldThreeCharacterWordPositions", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String, value as xs:boolean?)"}, {"content":"admin.databaseSetFieldTwoCharacterSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String}, ${4:value as xs:boolean?})", "trigger":"admin.databaseSetFieldTwoCharacterSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String, value as xs:boolean?)"}, {"content":"admin.databaseSetFieldOneCharacterSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String}, ${4:value as xs:boolean?})", "trigger":"admin.databaseSetFieldOneCharacterSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String, value as xs:boolean?)"}, {"content":"admin.databaseSetFieldIncludeDocumentRoot(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String}, ${4:value as Boolean})", "trigger":"admin.databaseSetFieldIncludeDocumentRoot", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String, value as Boolean)"}, {"content":"admin.databaseSetFieldName(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String}, ${4:value as String})", "trigger":"admin.databaseSetFieldName", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String, value as String)"}, {"content":"admin.forestGetName(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong})", "trigger":"admin.forestGetName", "description":"(config as element(configuration), forest-id as xs:unsignedLong)"}, {"content":"admin.forestGetHost(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong})", "trigger":"admin.forestGetHost", "description":"(config as element(configuration), forest-id as xs:unsignedLong)"}, {"content":"admin.forestGetId(${1:config as element(configuration)}, ${2:forest-name as String})", "trigger":"admin.forestGetId", "description":"(config as element(configuration), forest-name as String)"}, {"content":"admin.forestGetEnabled(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong})", "trigger":"admin.forestGetEnabled", "description":"(config as element(configuration), forest-id as xs:unsignedLong)"}, {"content":"admin.forestGetDataDirectory(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong})", "trigger":"admin.forestGetDataDirectory", "description":"(config as element(configuration), forest-id as xs:unsignedLong)"}, {"content":"admin.forestGetLargeDataDirectory(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong})", "trigger":"admin.forestGetLargeDataDirectory", "description":"(config as element(configuration), forest-id as xs:unsignedLong)"}, {"content":"admin.forestGetFailoverEnable(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong})", "trigger":"admin.forestGetFailoverEnable", "description":"(config as element(configuration), forest-id as xs:unsignedLong)"}, {"content":"admin.forestGetUpdatesAllowed(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong})", "trigger":"admin.forestGetUpdatesAllowed", "description":"(config as element(configuration), forest-id as xs:unsignedLong)"}, {"content":"admin.forestGetFailoverHosts(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong})", "trigger":"admin.forestGetFailoverHosts", "description":"(config as element(configuration), forest-id as xs:unsignedLong)"}, {"content":"admin.forestSetHost(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong}, ${3:value as xs:unsignedLong})", "trigger":"admin.forestSetHost", "description":"(config as element(configuration), forest-id as xs:unsignedLong, value as xs:unsignedLong)"}, {"content":"admin.forestSetEnabled(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.forestSetEnabled", "description":"(config as element(configuration), forest-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.forestSetFailoverEnable(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.forestSetFailoverEnable", "description":"(config as element(configuration), forest-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.forestSetUpdatesAllowed(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.forestSetUpdatesAllowed", "description":"(config as element(configuration), forest-id as xs:unsignedLong, value as String)"}, {"content":"admin.forestAddFailoverHost(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong}, ${3:hosts as xs:unsignedLong*})", "trigger":"admin.forestAddFailoverHost", "description":"(config as element(configuration), forest-id as xs:unsignedLong, hosts as xs:unsignedLong*)"}, {"content":"admin.forestDeleteFailoverHost(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong}, ${3:hosts as xs:unsignedLong*})", "trigger":"admin.forestDeleteFailoverHost", "description":"(config as element(configuration), forest-id as xs:unsignedLong, hosts as xs:unsignedLong*)"}, {"content":"admin.forestDelete(${1:config as element(configuration)}, ${2:forest-ids as xs:unsignedLong*}, ${3:delete-data as Boolean})", "trigger":"admin.forestDelete", "description":"(config as element(configuration), forest-ids as xs:unsignedLong*, delete-data as Boolean)"}, {"content":"admin.forestCreate(${1:config as element(configuration)}, ${2:forest-name as String}, ${3:host-id as xs:unsignedLong}, ${4:data-directory as xs:string?})", "trigger":"admin.forestCreate", "description":"(config as element(configuration), forest-name as String, host-id as xs:unsignedLong, data-directory as xs:string?)"}, {"content":"admin.forestCreate(${1:config as element(configuration)}, ${2:forest-name as String}, ${3:host-id as xs:unsignedLong}, ${4:data-directory as xs:string?}, ${5:large-data-directory as xs:string?})", "trigger":"admin.forestCreate", "description":"(config as element(configuration), forest-name as String, host-id as xs:unsignedLong, data-directory as xs:string?, large-data-directory as xs:string?)"}, {"content":"admin.forestCreate(${1:config as element(configuration)}, ${2:forest-name as String}, ${3:host-id as xs:unsignedLong}, ${4:data-directory as xs:string?}, ${5:large-data-directory as xs:string?}, ${6:fast-data-directory as xs:string?})", "trigger":"admin.forestCreate", "description":"(config as element(configuration), forest-name as String, host-id as xs:unsignedLong, data-directory as xs:string?, large-data-directory as xs:string?, fast-data-directory as xs:string?)"}, {"content":"admin.forestCopy(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong}, ${3:forest-name as String}, ${4:data-directory as xs:string?})", "trigger":"admin.forestCopy", "description":"(config as element(configuration), forest-id as xs:unsignedLong, forest-name as String, data-directory as xs:string?)"}, {"content":"admin.forestCopy(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong}, ${3:forest-name as String}, ${4:data-directory as xs:string?}, ${5:large-data-directory as xs:string?})", "trigger":"admin.forestCopy", "description":"(config as element(configuration), forest-id as xs:unsignedLong, forest-name as String, data-directory as xs:string?, large-data-directory as xs:string?)"}, {"content":"admin.forestCopy(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong}, ${3:forest-name as String}, ${4:data-directory as xs:string?}, ${5:large-data-directory as xs:string?}, ${6:fast-data-directory as xs:string?})", "trigger":"admin.forestCopy", "description":"(config as element(configuration), forest-id as xs:unsignedLong, forest-name as String, data-directory as xs:string?, large-data-directory as xs:string?, fast-data-directory as xs:string?)"}, {"content":"admin.forestGetBackups(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong})", "trigger":"admin.forestGetBackups", "description":"(config as element(configuration), forest-id as xs:unsignedLong)"}, {"content":"admin.forestWeeklyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:days as xs:string+}, ${4:start-time as xs:time})", "trigger":"admin.forestWeeklyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, days as xs:string+, start-time as xs:time)"}, {"content":"admin.forestMonthlyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:backup-month-day as xs:unsignedInt}, ${4:start-time as xs:time})", "trigger":"admin.forestMonthlyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, backup-month-day as xs:unsignedInt, start-time as xs:time)"}, {"content":"admin.forestOneTimeBackup(${1:backup-dir as String}, ${2:start as xs:dateTime})", "trigger":"admin.forestOneTimeBackup", "description":"(backup-dir as String, start as xs:dateTime)"}, {"content":"admin.forestAddBackup(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong}, ${3:backups as element(as:forest-backup)*})", "trigger":"admin.forestAddBackup", "description":"(config as element(configuration), forest-id as xs:unsignedLong, backups as element(as:forest-backup)*)"}, {"content":"admin.forestDeleteBackup(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong}, ${3:backups as element(as:forest-backup)*})", "trigger":"admin.forestDeleteBackup", "description":"(config as element(configuration), forest-id as xs:unsignedLong, backups as element(as:forest-backup)*)"}, {"content":"admin.hostGetId(${1:config as element(configuration)}, ${2:host-name as String})", "trigger":"admin.hostGetId", "description":"(config as element(configuration), host-name as String)"}, {"content":"admin.hostGetName(${1:config as element(configuration)}, ${2:host-id as xs:unsignedLong})", "trigger":"admin.hostGetName", "description":"(config as element(configuration), host-id as xs:unsignedLong)"}, {"content":"admin.hostGetGroup(${1:config as element(configuration)}, ${2:host-id as xs:unsignedLong})", "trigger":"admin.hostGetGroup", "description":"(config as element(configuration), host-id as xs:unsignedLong)"}, {"content":"admin.hostGetPort(${1:config as element(configuration)}, ${2:host-id as xs:unsignedLong})", "trigger":"admin.hostGetPort", "description":"(config as element(configuration), host-id as xs:unsignedLong)"}, {"content":"admin.hostSetName(${1:config as element(configuration)}, ${2:host-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.hostSetName", "description":"(config as element(configuration), host-id as xs:unsignedLong, value as String)"}, {"content":"admin.hostSetGroup(${1:config as element(configuration)}, ${2:host-id as xs:unsignedLong}, ${3:value as xs:unsignedLong})", "trigger":"admin.hostSetGroup", "description":"(config as element(configuration), host-id as xs:unsignedLong, value as xs:unsignedLong)"}, {"content":"admin.hostSetPort(${1:config as element(configuration)}, ${2:host-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.hostSetPort", "description":"(config as element(configuration), host-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.appserverGetType(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetType", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetGroupId(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetGroupId", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetHostIds(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetHostIds", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetId(${1:config as element(configuration)}, ${2:group-ids as xs:unsignedLong*}, ${3:appserver-name as String})", "trigger":"admin.appserverGetId", "description":"(config as element(configuration), group-ids as xs:unsignedLong*, appserver-name as String)"}, {"content":"admin.appserverGetName(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetName", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetRoot(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetRoot", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetPort(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetPort", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetModulesDatabase(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetModulesDatabase", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetDatabase(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetDatabase", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetLastLogin(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetLastLogin", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetDisplayLastLogin(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetDisplayLastLogin", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetAddress(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetAddress", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetBacklog(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetBacklog", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetThreads(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetThreads", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetRequestTimeout(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetRequestTimeout", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetKeepAliveTimeout(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetKeepAliveTimeout", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetSessionTimeout(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetSessionTimeout", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetConnectionTimeout(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetConnectionTimeout", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetDefaultTimeLimit(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetDefaultTimeLimit", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetDefaultQueryTimeLimit(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetDefaultQueryTimeLimit", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetMaxTimeLimit(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetMaxTimeLimit", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetMaxQueryTimeLimit(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetMaxQueryTimeLimit", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetPreCommitTriggerDepth(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetPreCommitTriggerDepth", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetPreCommitTriggerLimit(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetPreCommitTriggerLimit", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetCollation(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetCollation", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetAuthentication(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetAuthentication", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetDefaultUser(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetDefaultUser", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetPrivilege(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetPrivilege", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetConcurrentRequestLimit(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetConcurrentRequestLimit", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetFileLogLevel(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetFileLogLevel", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetLogErrors(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetLogErrors", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetDebugAllow(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetDebugAllow", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetProfileAllow(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetProfileAllow", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetDefaultXqueryVersion(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetDefaultXqueryVersion", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetMultiVersionConcurrencyControl(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetMultiVersionConcurrencyControl", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetDistributeTimestamps(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetDistributeTimestamps", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetOutputSgmlCharacterEntities(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetOutputSgmlCharacterEntities", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetOutputEncoding(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetOutputEncoding", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetErrorHandler(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetErrorHandler", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetUrlRewriter(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetUrlRewriter", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetEnabled(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetEnabled", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetSchemas(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetSchemas", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetNamespaces(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetNamespaces", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetStaticExpires(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetStaticExpires", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetComputeContentLength(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetComputeContentLength", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverSetName(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetName", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetRoot(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetRoot", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetPort(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.appserverSetPort", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.appserverSetModulesDatabase(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as item()})", "trigger":"admin.appserverSetModulesDatabase", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as item())"}, {"content":"admin.appserverSetDatabase(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as xs:unsignedLong})", "trigger":"admin.appserverSetDatabase", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as xs:unsignedLong)"}, {"content":"admin.appserverSetLastLogin(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as xs:unsignedLong?})", "trigger":"admin.appserverSetLastLogin", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as xs:unsignedLong?)"}, {"content":"admin.appserverSetDisplayLastLogin(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.appserverSetDisplayLastLogin", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.appserverSetAddress(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetAddress", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetBacklog(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.appserverSetBacklog", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.appserverSetThreads(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.appserverSetThreads", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.appserverSetRequestTimeout(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.appserverSetRequestTimeout", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.appserverSetKeepAliveTimeout(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.appserverSetKeepAliveTimeout", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.appserverSetSessionTimeout(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.appserverSetSessionTimeout", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.appserverSetConnectionTimeout(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.appserverSetConnectionTimeout", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.appserverSetDefaultTimeLimit(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.appserverSetDefaultTimeLimit", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.appserverSetDefaultQueryTimeLimit(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.appserverSetDefaultQueryTimeLimit", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.appserverSetMaxTimeLimit(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.appserverSetMaxTimeLimit", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.appserverSetMaxQueryTimeLimit(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.appserverSetMaxQueryTimeLimit", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.appserverSetPreCommitTriggerDepth(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.appserverSetPreCommitTriggerDepth", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.appserverSetPreCommitTriggerLimit(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.appserverSetPreCommitTriggerLimit", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.appserverSetCollation(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetCollation", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetAuthentication(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetAuthentication", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetDefaultUser(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as xs:unsignedLong})", "trigger":"admin.appserverSetDefaultUser", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as xs:unsignedLong)"}, {"content":"admin.appserverSetPrivilege(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as xs:unsignedLong})", "trigger":"admin.appserverSetPrivilege", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as xs:unsignedLong)"}, {"content":"admin.appserverSetConcurrentRequestLimit(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.appserverSetConcurrentRequestLimit", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.appserverSetFileLogLevel(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetFileLogLevel", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetLogErrors(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.appserverSetLogErrors", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.appserverSetDebugAllow(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.appserverSetDebugAllow", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.appserverSetProfileAllow(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.appserverSetProfileAllow", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.appserverSetDefaultXqueryVersion(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetDefaultXqueryVersion", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetMultiVersionConcurrencyControl(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetMultiVersionConcurrencyControl", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetDistributeTimestamps(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetDistributeTimestamps", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetOutputSgmlCharacterEntities(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetOutputSgmlCharacterEntities", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetOutputEncoding(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetOutputEncoding", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetErrorHandler(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetErrorHandler", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetUrlRewriter(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetUrlRewriter", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetEnabled(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.appserverSetEnabled", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.appserverSetStaticExpires(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.appserverSetStaticExpires", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.appserverSetComputeContentLength(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.appserverSetComputeContentLength", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.appserverGetRequestBlackouts(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetRequestBlackouts", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverRecurringRequestBlackout(${1:users as xs:unsignedLong*}, ${2:roles as xs:unsignedLong*}, ${3:days as xs:string*}, ${4:start-time as xs:time?}, ${5:end-time as xs:time?}, ${6:duration as xs:duration?})", "trigger":"admin.appserverRecurringRequestBlackout", "description":"(users as xs:unsignedLong*, roles as xs:unsignedLong*, days as xs:string*, start-time as xs:time?, end-time as xs:time?, duration as xs:duration?)"}, {"content":"admin.appserverOneTimeRequestBlackout(${1:users as xs:unsignedLong*}, ${2:roles as xs:unsignedLong*}, ${3:start as xs:dateTime}, ${4:end as xs:dateTime?}, ${5:duration as xs:duration?})", "trigger":"admin.appserverOneTimeRequestBlackout", "description":"(users as xs:unsignedLong*, roles as xs:unsignedLong*, start as xs:dateTime, end as xs:dateTime?, duration as xs:duration?)"}, {"content":"admin.appserverAddRequestBlackout(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:request-blackouts as element(gr:request-blackout)*})", "trigger":"admin.appserverAddRequestBlackout", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, request-blackouts as element(gr:request-blackout)*)"}, {"content":"admin.appserverDeleteRequestBlackout(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:blackouts as element(gr:request-blackout)*})", "trigger":"admin.appserverDeleteRequestBlackout", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, blackouts as element(gr:request-blackout)*)"}, {"content":"admin.groupSchema(${1:namespace-uri as String}, ${2:schema-location as String})", "trigger":"admin.groupSchema", "description":"(namespace-uri as String, schema-location as String)"}, {"content":"admin.appserverAddSchema(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:schemas as element(gr:schema)*})", "trigger":"admin.appserverAddSchema", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, schemas as element(gr:schema)*)"}, {"content":"admin.appserverDeleteSchema(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:schemas as element(gr:schema)*})", "trigger":"admin.appserverDeleteSchema", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, schemas as element(gr:schema)*)"}, {"content":"admin.groupNamespace(${1:prefix as String}, ${2:namespace-uri as String})", "trigger":"admin.groupNamespace", "description":"(prefix as String, namespace-uri as String)"}, {"content":"admin.appserverAddNamespace(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:namespaces as element(gr:namespace)*})", "trigger":"admin.appserverAddNamespace", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, namespaces as element(gr:namespace)*)"}, {"content":"admin.appserverDeleteNamespace(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:namespaces as element(gr:namespace)*})", "trigger":"admin.appserverDeleteNamespace", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, namespaces as element(gr:namespace)*)"}, {"content":"admin.appserverDelete(${1:config as element(configuration)}, ${2:appserver-ids as xs:unsignedLong*})", "trigger":"admin.appserverDelete", "description":"(config as element(configuration), appserver-ids as xs:unsignedLong*)"}, {"content":"admin.httpServerCreate(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:appserver-name as String}, ${4:root as String}, ${5:port as xs:unsignedLong}, ${6:modules-id as item()}, ${7:database-id as xs:unsignedLong})", "trigger":"admin.httpServerCreate", "description":"(config as element(configuration), group-id as xs:unsignedLong, appserver-name as String, root as String, port as xs:unsignedLong, modules-id as item(), database-id as xs:unsignedLong)"}, {"content":"admin.xdbcServerCreate(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:appserver-name as String}, ${4:root as String}, ${5:port as xs:unsignedLong}, ${6:modules-id as item()}, ${7:database-id as xs:unsignedLong})", "trigger":"admin.xdbcServerCreate", "description":"(config as element(configuration), group-id as xs:unsignedLong, appserver-name as String, root as String, port as xs:unsignedLong, modules-id as item(), database-id as xs:unsignedLong)"}, {"content":"admin.webdavServerCreate(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:appserver-name as String}, ${4:root as String}, ${5:port as xs:unsignedLong}, ${6:database-id as xs:unsignedLong})", "trigger":"admin.webdavServerCreate", "description":"(config as element(configuration), group-id as xs:unsignedLong, appserver-name as String, root as String, port as xs:unsignedLong, database-id as xs:unsignedLong)"}, {"content":"admin.appserverCopy(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:target-group-id as xs:unsignedLong?}, ${4:appserver-name as String}, ${5:port as xs:unsignedLong})", "trigger":"admin.appserverCopy", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, target-group-id as xs:unsignedLong?, appserver-name as String, port as xs:unsignedLong)"}, {"content":"admin.taskserverGetName(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.taskserverGetName", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.taskserverGetThreads(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.taskserverGetThreads", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.taskserverGetDebugThreads(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.taskserverGetDebugThreads", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.taskserverGetDefaultTimeLimit(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.taskserverGetDefaultTimeLimit", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.taskserverGetMaxTimeLimit(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.taskserverGetMaxTimeLimit", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.taskserverGetQueueSize(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.taskserverGetQueueSize", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.taskserverGetPreCommitTriggerDepth(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.taskserverGetPreCommitTriggerDepth", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.taskserverGetPostCommitTriggerDepth(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.taskserverGetPostCommitTriggerDepth", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.taskserverGetPreCommitTriggerLimit(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.taskserverGetPreCommitTriggerLimit", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.taskserverGetFileLogLevel(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.taskserverGetFileLogLevel", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.taskserverGetLogErrors(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.taskserverGetLogErrors", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.taskserverGetDebugAllow(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.taskserverGetDebugAllow", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.taskserverGetProfileAllow(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.taskserverGetProfileAllow", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.taskserverSetThreads(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.taskserverSetThreads", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.taskserverSetDebugThreads(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.taskserverSetDebugThreads", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.taskserverSetDefaultTimeLimit(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.taskserverSetDefaultTimeLimit", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.taskserverSetMaxTimeLimit(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.taskserverSetMaxTimeLimit", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.taskserverSetQueueSize(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.taskserverSetQueueSize", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.taskserverSetPreCommitTriggerDepth(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.taskserverSetPreCommitTriggerDepth", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.taskserverSetPostCommitTriggerDepth(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.taskserverSetPostCommitTriggerDepth", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.taskserverSetPreCommitTriggerLimit(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.taskserverSetPreCommitTriggerLimit", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.taskserverSetFileLogLevel(${1:config as element(configuration)}, ${2:taskserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.taskserverSetFileLogLevel", "description":"(config as element(configuration), taskserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.taskserverSetLogErrors(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.taskserverSetLogErrors", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.taskserverSetDebugAllow(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.taskserverSetDebugAllow", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.taskserverSetProfileAllow(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.taskserverSetProfileAllow", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.groupGetHostIds(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetHostIds", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetAppserverIds(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetAppserverIds", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetHttpserverIds(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetHttpserverIds", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetXdbcserverIds(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetXdbcserverIds", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetWebdavserverIds(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetWebdavserverIds", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetTaskserverId(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetTaskserverId", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetId(${1:config as element(configuration)}, ${2:group-name as String})", "trigger":"admin.groupGetId", "description":"(config as element(configuration), group-name as String)"}, {"content":"admin.groupGetName(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetName", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetListCacheSize(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetListCacheSize", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetListCachePartitions(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetListCachePartitions", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetCompressedTreeCacheSize(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetCompressedTreeCacheSize", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetCompressedTreeCachePartitions(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetCompressedTreeCachePartitions", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetCompressedTreeReadSize(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetCompressedTreeReadSize", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetExpandedTreeCacheSize(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetExpandedTreeCacheSize", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetExpandedTreeCachePartitions(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetExpandedTreeCachePartitions", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetSmtpRelay(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetSmtpRelay", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetSmtpTimeout(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetSmtpTimeout", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetHttpUserAgent(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetHttpUserAgent", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetHttpTimeout(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetHttpTimeout", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetXdqpTimeout(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetXdqpTimeout", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetHostTimeout(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetHostTimeout", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetHostInitialTimeout(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetHostInitialTimeout", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetRetryTimeout(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetRetryTimeout", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetModuleCacheTimeout(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetModuleCacheTimeout", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetSystemLogLevel(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetSystemLogLevel", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetFileLogLevel(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetFileLogLevel", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetRotateLogFiles(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetRotateLogFiles", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetKeepLogFiles(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetKeepLogFiles", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetFailoverEnable(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetFailoverEnable", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetTraceEventsActivated(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetTraceEventsActivated", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetSchemas(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetSchemas", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetNamespaces(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetNamespaces", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetTraceEvents(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetTraceEvents", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupSetName(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.groupSetName", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as String)"}, {"content":"admin.groupSetListCacheSize(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.groupSetListCacheSize", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.groupSetListCachePartitions(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.groupSetListCachePartitions", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.groupSetCompressedTreeCacheSize(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.groupSetCompressedTreeCacheSize", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.groupSetCompressedTreeCachePartitions(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.groupSetCompressedTreeCachePartitions", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.groupSetCompressedTreeReadSize(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.groupSetCompressedTreeReadSize", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.groupSetExpandedTreeCacheSize(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.groupSetExpandedTreeCacheSize", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.groupSetExpandedTreeCachePartitions(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.groupSetExpandedTreeCachePartitions", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.groupSetSmtpRelay(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.groupSetSmtpRelay", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as String)"}, {"content":"admin.groupSetSmtpTimeout(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.groupSetSmtpTimeout", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.groupSetHttpUserAgent(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.groupSetHttpUserAgent", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as String)"}, {"content":"admin.groupSetHttpTimeout(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.groupSetHttpTimeout", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.groupSetXdqpTimeout(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.groupSetXdqpTimeout", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.groupSetHostTimeout(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.groupSetHostTimeout", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.groupSetHostInitialTimeout(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.groupSetHostInitialTimeout", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.groupSetRetryTimeout(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.groupSetRetryTimeout", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.groupSetModuleCacheTimeout(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.groupSetModuleCacheTimeout", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.groupSetSystemLogLevel(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.groupSetSystemLogLevel", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as String)"}, {"content":"admin.groupSetFileLogLevel(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.groupSetFileLogLevel", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as String)"}, {"content":"admin.groupSetRotateLogFiles(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.groupSetRotateLogFiles", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as String)"}, {"content":"admin.groupSetKeepLogFiles(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.groupSetKeepLogFiles", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.groupSetFailoverEnable(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.groupSetFailoverEnable", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.groupSetTraceEventsActivated(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.groupSetTraceEventsActivated", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.groupAddSchema(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:schemas as element(gr:schema)*})", "trigger":"admin.groupAddSchema", "description":"(config as element(configuration), group-id as xs:unsignedLong, schemas as element(gr:schema)*)"}, {"content":"admin.groupDeleteSchema(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:schemas as element(gr:schema)*})", "trigger":"admin.groupDeleteSchema", "description":"(config as element(configuration), group-id as xs:unsignedLong, schemas as element(gr:schema)*)"}, {"content":"admin.groupAddNamespace(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:namespaces as element(gr:namespace)*})", "trigger":"admin.groupAddNamespace", "description":"(config as element(configuration), group-id as xs:unsignedLong, namespaces as element(gr:namespace)*)"}, {"content":"admin.groupDeleteNamespace(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:namespaces as element(gr:namespace)*})", "trigger":"admin.groupDeleteNamespace", "description":"(config as element(configuration), group-id as xs:unsignedLong, namespaces as element(gr:namespace)*)"}, {"content":"admin.groupTraceEvent(${1:event-id as String})", "trigger":"admin.groupTraceEvent", "description":"(event-id as String)"}, {"content":"admin.groupAddTraceEvent(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:events as element(gr:event)*})", "trigger":"admin.groupAddTraceEvent", "description":"(config as element(configuration), group-id as xs:unsignedLong, events as element(gr:event)*)"}, {"content":"admin.groupDeleteTraceEvent(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:events as element(gr:event)*})", "trigger":"admin.groupDeleteTraceEvent", "description":"(config as element(configuration), group-id as xs:unsignedLong, events as element(gr:event)*)"}, {"content":"admin.groupDelete(${1:config as element(configuration)}, ${2:group-ids as xs:unsignedLong*})", "trigger":"admin.groupDelete", "description":"(config as element(configuration), group-ids as xs:unsignedLong*)"}, {"content":"admin.groupCreate(${1:config as element(configuration)}, ${2:group-name as String})", "trigger":"admin.groupCreate", "description":"(config as element(configuration), group-name as String)"}, {"content":"admin.groupCopy(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:group-name as String})", "trigger":"admin.groupCopy", "description":"(config as element(configuration), group-id as xs:unsignedLong, group-name as String)"}, {"content":"admin.groupGetAuditEnabled(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetAuditEnabled", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupSetAuditEnabled(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.groupSetAuditEnabled", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.groupGetRotateAuditFiles(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetRotateAuditFiles", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetKeepAuditFiles(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetKeepAuditFiles", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupSetRotateAuditFiles(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.groupSetRotateAuditFiles", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as String)"}, {"content":"admin.groupSetKeepAuditFiles(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.groupSetKeepAuditFiles", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.groupEnableAuditEventType(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:event-type as xs:string*})", "trigger":"admin.groupEnableAuditEventType", "description":"(config as element(configuration), group-id as xs:unsignedLong, event-type as xs:string*)"}, {"content":"admin.groupDisableAuditEventType(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:event-type as xs:string*})", "trigger":"admin.groupDisableAuditEventType", "description":"(config as element(configuration), group-id as xs:unsignedLong, event-type as xs:string*)"}, {"content":"admin.groupGetAuditEventTypeEnabled(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:event-type as String})", "trigger":"admin.groupGetAuditEventTypeEnabled", "description":"(config as element(configuration), group-id as xs:unsignedLong, event-type as String)"}, {"content":"admin.groupSetAuditUserRestriction(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:restriction-type as String}, ${4:users as xs:string*})", "trigger":"admin.groupSetAuditUserRestriction", "description":"(config as element(configuration), group-id as xs:unsignedLong, restriction-type as String, users as xs:string*)"}, {"content":"admin.groupGetAuditExcludedUsers(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetAuditExcludedUsers", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetAuditIncludedUsers(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetAuditIncludedUsers", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupSetAuditRoleRestriction(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:restriction-type as String}, ${4:roles as xs:string*})", "trigger":"admin.groupSetAuditRoleRestriction", "description":"(config as element(configuration), group-id as xs:unsignedLong, restriction-type as String, roles as xs:string*)"}, {"content":"admin.groupGetAuditExcludedRoles(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetAuditExcludedRoles", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetAuditIncludedRoles(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetAuditIncludedRoles", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupSetAuditUriRestriction(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:restriction-type as String}, ${4:uris as xs:string*})", "trigger":"admin.groupSetAuditUriRestriction", "description":"(config as element(configuration), group-id as xs:unsignedLong, restriction-type as String, uris as xs:string*)"}, {"content":"admin.groupGetAuditExcludedUris(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetAuditExcludedUris", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetAuditIncludedUris(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetAuditIncludedUris", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupSetAuditOutcomeRestriction(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:outcome as xs:string*})", "trigger":"admin.groupSetAuditOutcomeRestriction", "description":"(config as element(configuration), group-id as xs:unsignedLong, outcome as xs:string*)"}, {"content":"admin.groupGetAuditOutcomeRestriction(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetAuditOutcomeRestriction", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.mimetypesAdd(${1:config as element(configuration)}, ${2:mimetypes as element(mt:mimetype)*})", "trigger":"admin.mimetypesAdd", "description":"(config as element(configuration), mimetypes as element(mt:mimetype)*)"}, {"content":"admin.mimetypesDelete(${1:config as element(configuration)}, ${2:mimetypes as element(mt:mimetype)*})", "trigger":"admin.mimetypesDelete", "description":"(config as element(configuration), mimetypes as element(mt:mimetype)*)"}, {"content":"admin.mimetypesGet(${1:config as element(configuration)})", "trigger":"admin.mimetypesGet", "description":"(config as element(configuration))"}, {"content":"admin.mimetype(${1:name as String}, ${2:extensions as String}, ${3:format as String})", "trigger":"admin.mimetype", "description":"(name as String, extensions as String, format as String)"}, {"content":"admin.databaseDailyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:start-time as xs:time}, ${4:max-backups as xs:unsignedLong}, ${5:backup-security-db as Boolean}, ${6:backup-schemas-db as Boolean}, ${7:backup-triggers-db as Boolean})", "trigger":"admin.databaseDailyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, start-time as xs:time, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean)"}, {"content":"admin.databaseDailyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:start-time as xs:time}, ${4:max-backups as xs:unsignedLong}, ${5:backup-security-db as Boolean}, ${6:backup-schemas-db as Boolean}, ${7:backup-triggers-db as Boolean}, ${8:include-replicas as Boolean})", "trigger":"admin.databaseDailyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, start-time as xs:time, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean)"}, {"content":"admin.databaseDailyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:start-time as xs:time}, ${4:max-backups as xs:unsignedLong}, ${5:backup-security-db as Boolean}, ${6:backup-schemas-db as Boolean}, ${7:backup-triggers-db as Boolean}, ${8:include-replicas as Boolean}, ${9:journal-archiving as xs:boolean?})", "trigger":"admin.databaseDailyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, start-time as xs:time, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, journal-archiving as xs:boolean?)"}, {"content":"admin.databaseDailyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:start-time as xs:time}, ${4:max-backups as xs:unsignedLong}, ${5:backup-security-db as Boolean}, ${6:backup-schemas-db as Boolean}, ${7:backup-triggers-db as Boolean}, ${8:include-replicas as Boolean}, ${9:journal-archiving as xs:boolean?}, ${10:journal-archive-path as xs:string?})", "trigger":"admin.databaseDailyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, start-time as xs:time, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, journal-archiving as xs:boolean?, journal-archive-path as xs:string?)"}, {"content":"admin.databaseDailyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:start-time as xs:time}, ${4:max-backups as xs:unsignedLong}, ${5:backup-security-db as Boolean}, ${6:backup-schemas-db as Boolean}, ${7:backup-triggers-db as Boolean}, ${8:include-replicas as Boolean}, ${9:journal-archiving as xs:boolean?}, ${10:journal-archive-path as xs:string?}, ${11:lag-limit as xs:unsignedLong?})", "trigger":"admin.databaseDailyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, start-time as xs:time, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, journal-archiving as xs:boolean?, journal-archive-path as xs:string?, lag-limit as xs:unsignedLong?)"}, {"content":"admin.databaseDailyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:start-time as xs:time}, ${4:backup-security-db as Boolean}, ${5:backup-schemas-db as Boolean}, ${6:backup-triggers-db as Boolean})", "trigger":"admin.databaseDailyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, start-time as xs:time, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean)"}, {"content":"admin.databaseDailyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:start-time as xs:time}, ${4:backup-security-db as Boolean}, ${5:backup-schemas-db as Boolean}, ${6:backup-triggers-db as Boolean}, ${7:include-replicas as Boolean})", "trigger":"admin.databaseDailyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, start-time as xs:time, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean)"}, {"content":"admin.databaseDailyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:start-time as xs:time}, ${4:backup-security-db as Boolean}, ${5:backup-schemas-db as Boolean}, ${6:backup-triggers-db as Boolean}, ${7:include-replicas as Boolean}, ${8:incremental-dir as xs:string?})", "trigger":"admin.databaseDailyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, start-time as xs:time, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?)"}, {"content":"admin.databaseDailyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:start-time as xs:time}, ${4:backup-security-db as Boolean}, ${5:backup-schemas-db as Boolean}, ${6:backup-triggers-db as Boolean}, ${7:include-replicas as Boolean}, ${8:incremental-dir as xs:string?}, ${9:purge-journal-archive as xs:boolean?})", "trigger":"admin.databaseDailyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, start-time as xs:time, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?, purge-journal-archive as xs:boolean?)"}, {"content":"admin.databaseDailyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:start-time as xs:time}, ${4:backup-security-db as Boolean}, ${5:backup-schemas-db as Boolean}, ${6:backup-triggers-db as Boolean}, ${7:include-replicas as Boolean}, ${8:incremental-dir as xs:string?}, ${9:purge-journal-archive as xs:boolean?}, ${10:journal-archiving as xs:boolean?})", "trigger":"admin.databaseDailyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, start-time as xs:time, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?, purge-journal-archive as xs:boolean?, journal-archiving as xs:boolean?)"}, {"content":"admin.databaseDailyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:start-time as xs:time}, ${4:backup-security-db as Boolean}, ${5:backup-schemas-db as Boolean}, ${6:backup-triggers-db as Boolean}, ${7:include-replicas as Boolean}, ${8:incremental-dir as xs:string?}, ${9:purge-journal-archive as xs:boolean?}, ${10:journal-archiving as xs:boolean?}, ${11:journal-archive-path as xs:string?})", "trigger":"admin.databaseDailyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, start-time as xs:time, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?, purge-journal-archive as xs:boolean?, journal-archiving as xs:boolean?, journal-archive-path as xs:string?)"}, {"content":"admin.databaseDailyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:start-time as xs:time}, ${4:backup-security-db as Boolean}, ${5:backup-schemas-db as Boolean}, ${6:backup-triggers-db as Boolean}, ${7:include-replicas as Boolean}, ${8:incremental-dir as xs:string?}, ${9:purge-journal-archive as xs:boolean?}, ${10:journal-archiving as xs:boolean?}, ${11:journal-archive-path as xs:string?}, ${12:lag-limit as xs:unsignedLong?})", "trigger":"admin.databaseDailyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, start-time as xs:time, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?, purge-journal-archive as xs:boolean?, journal-archiving as xs:boolean?, journal-archive-path as xs:string?, lag-limit as xs:unsignedLong?)"}, {"content":"admin.databaseHourlyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:start-minute as xs:nonNegativeInteger}, ${4:max-backups as xs:unsignedLong}, ${5:backup-security-db as Boolean}, ${6:backup-schemas-db as Boolean}, ${7:backup-triggers-db as Boolean})", "trigger":"admin.databaseHourlyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, start-minute as xs:nonNegativeInteger, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean)"}, {"content":"admin.databaseHourlyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:start-minute as xs:nonNegativeInteger}, ${4:max-backups as xs:unsignedLong}, ${5:backup-security-db as Boolean}, ${6:backup-schemas-db as Boolean}, ${7:backup-triggers-db as Boolean}, ${8:include-replicas as Boolean})", "trigger":"admin.databaseHourlyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, start-minute as xs:nonNegativeInteger, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean)"}, {"content":"admin.databaseHourlyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:start-minute as xs:nonNegativeInteger}, ${4:max-backups as xs:unsignedLong}, ${5:backup-security-db as Boolean}, ${6:backup-schemas-db as Boolean}, ${7:backup-triggers-db as Boolean}, ${8:include-replicas as Boolean}, ${9:journal-archiving as xs:boolean?})", "trigger":"admin.databaseHourlyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, start-minute as xs:nonNegativeInteger, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, journal-archiving as xs:boolean?)"}, {"content":"admin.databaseHourlyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:start-minute as xs:nonNegativeInteger}, ${4:max-backups as xs:unsignedLong}, ${5:backup-security-db as Boolean}, ${6:backup-schemas-db as Boolean}, ${7:backup-triggers-db as Boolean}, ${8:include-replicas as Boolean}, ${9:journal-archiving as xs:boolean?}, ${10:journal-archive-path as xs:string?})", "trigger":"admin.databaseHourlyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, start-minute as xs:nonNegativeInteger, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, journal-archiving as xs:boolean?, journal-archive-path as xs:string?)"}, {"content":"admin.databaseHourlyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:start-minute as xs:nonNegativeInteger}, ${4:max-backups as xs:unsignedLong}, ${5:backup-security-db as Boolean}, ${6:backup-schemas-db as Boolean}, ${7:backup-triggers-db as Boolean}, ${8:include-replicas as Boolean}, ${9:journal-archiving as xs:boolean?}, ${10:journal-archive-path as xs:string?}, ${11:lag-limit as xs:unsignedLong?})", "trigger":"admin.databaseHourlyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, start-minute as xs:nonNegativeInteger, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, journal-archiving as xs:boolean?, journal-archive-path as xs:string?, lag-limit as xs:unsignedLong?)"}, {"content":"admin.databaseHourlyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:start-minute as xs:nonNegativeInteger}, ${4:backup-security-db as Boolean}, ${5:backup-schemas-db as Boolean}, ${6:backup-triggers-db as Boolean})", "trigger":"admin.databaseHourlyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, start-minute as xs:nonNegativeInteger, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean)"}, {"content":"admin.databaseHourlyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:start-minute as xs:nonNegativeInteger}, ${4:backup-security-db as Boolean}, ${5:backup-schemas-db as Boolean}, ${6:backup-triggers-db as Boolean}, ${7:include-replicas as Boolean})", "trigger":"admin.databaseHourlyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, start-minute as xs:nonNegativeInteger, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean)"}, {"content":"admin.databaseHourlyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:start-minute as xs:nonNegativeInteger}, ${4:backup-security-db as Boolean}, ${5:backup-schemas-db as Boolean}, ${6:backup-triggers-db as Boolean}, ${7:include-replicas as Boolean}, ${8:incremental-dir as xs:string?})", "trigger":"admin.databaseHourlyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, start-minute as xs:nonNegativeInteger, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?)"}, {"content":"admin.databaseHourlyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:start-minute as xs:nonNegativeInteger}, ${4:backup-security-db as Boolean}, ${5:backup-schemas-db as Boolean}, ${6:backup-triggers-db as Boolean}, ${7:include-replicas as Boolean}, ${8:incremental-dir as xs:string?}, ${9:purge-journal-archive as xs:boolean?})", "trigger":"admin.databaseHourlyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, start-minute as xs:nonNegativeInteger, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?, purge-journal-archive as xs:boolean?)"}, {"content":"admin.databaseHourlyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:start-minute as xs:nonNegativeInteger}, ${4:backup-security-db as Boolean}, ${5:backup-schemas-db as Boolean}, ${6:backup-triggers-db as Boolean}, ${7:include-replicas as Boolean}, ${8:incremental-dir as xs:string?}, ${9:purge-journal-archive as xs:boolean?}, ${10:journal-archiving as xs:boolean?})", "trigger":"admin.databaseHourlyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, start-minute as xs:nonNegativeInteger, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?, purge-journal-archive as xs:boolean?, journal-archiving as xs:boolean?)"}, {"content":"admin.databaseHourlyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:start-minute as xs:nonNegativeInteger}, ${4:backup-security-db as Boolean}, ${5:backup-schemas-db as Boolean}, ${6:backup-triggers-db as Boolean}, ${7:include-replicas as Boolean}, ${8:incremental-dir as xs:string?}, ${9:purge-journal-archive as xs:boolean?}, ${10:journal-archiving as xs:boolean?}, ${11:journal-archive-path as xs:string?})", "trigger":"admin.databaseHourlyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, start-minute as xs:nonNegativeInteger, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?, purge-journal-archive as xs:boolean?, journal-archiving as xs:boolean?, journal-archive-path as xs:string?)"}, {"content":"admin.databaseHourlyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:start-minute as xs:nonNegativeInteger}, ${4:backup-security-db as Boolean}, ${5:backup-schemas-db as Boolean}, ${6:backup-triggers-db as Boolean}, ${7:include-replicas as Boolean}, ${8:incremental-dir as xs:string?}, ${9:purge-journal-archive as xs:boolean?}, ${10:journal-archiving as xs:boolean?}, ${11:journal-archive-path as xs:string?}, ${12:lag-limit as xs:unsignedLong?})", "trigger":"admin.databaseHourlyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, start-minute as xs:nonNegativeInteger, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?, purge-journal-archive as xs:boolean?, journal-archiving as xs:boolean?, journal-archive-path as xs:string?, lag-limit as xs:unsignedLong?)"}, {"content":"admin.databaseMinutelyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:max-backups as xs:unsignedLong}, ${4:backup-security-db as Boolean}, ${5:backup-schemas-db as Boolean}, ${6:backup-triggers-db as Boolean})", "trigger":"admin.databaseMinutelyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean)"}, {"content":"admin.databaseMinutelyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:max-backups as xs:unsignedLong}, ${4:backup-security-db as Boolean}, ${5:backup-schemas-db as Boolean}, ${6:backup-triggers-db as Boolean}, ${7:include-replicas as Boolean})", "trigger":"admin.databaseMinutelyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean)"}, {"content":"admin.databaseMinutelyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:max-backups as xs:unsignedLong}, ${4:backup-security-db as Boolean}, ${5:backup-schemas-db as Boolean}, ${6:backup-triggers-db as Boolean}, ${7:include-replicas as Boolean}, ${8:journal-archiving as xs:boolean?})", "trigger":"admin.databaseMinutelyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, journal-archiving as xs:boolean?)"}, {"content":"admin.databaseMinutelyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:max-backups as xs:unsignedLong}, ${4:backup-security-db as Boolean}, ${5:backup-schemas-db as Boolean}, ${6:backup-triggers-db as Boolean}, ${7:include-replicas as Boolean}, ${8:journal-archiving as xs:boolean?}, ${9:journal-archive-path as xs:string?})", "trigger":"admin.databaseMinutelyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, journal-archiving as xs:boolean?, journal-archive-path as xs:string?)"}, {"content":"admin.databaseMinutelyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:max-backups as xs:unsignedLong}, ${4:backup-security-db as Boolean}, ${5:backup-schemas-db as Boolean}, ${6:backup-triggers-db as Boolean}, ${7:include-replicas as Boolean}, ${8:journal-archiving as xs:boolean?}, ${9:journal-archive-path as xs:string?}, ${10:lag-limit as xs:unsignedLong?})", "trigger":"admin.databaseMinutelyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, max-backups as xs:unsignedLong, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, journal-archiving as xs:boolean?, journal-archive-path as xs:string?, lag-limit as xs:unsignedLong?)"}, {"content":"admin.databaseMinutelyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:backup-security-db as Boolean}, ${4:backup-schemas-db as Boolean}, ${5:backup-triggers-db as Boolean})", "trigger":"admin.databaseMinutelyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean)"}, {"content":"admin.databaseMinutelyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:backup-security-db as Boolean}, ${4:backup-schemas-db as Boolean}, ${5:backup-triggers-db as Boolean}, ${6:include-replicas as Boolean})", "trigger":"admin.databaseMinutelyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean)"}, {"content":"admin.databaseMinutelyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:backup-security-db as Boolean}, ${4:backup-schemas-db as Boolean}, ${5:backup-triggers-db as Boolean}, ${6:include-replicas as Boolean}, ${7:incremental-dir as xs:string?})", "trigger":"admin.databaseMinutelyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?)"}, {"content":"admin.databaseMinutelyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:backup-security-db as Boolean}, ${4:backup-schemas-db as Boolean}, ${5:backup-triggers-db as Boolean}, ${6:include-replicas as Boolean}, ${7:incremental-dir as xs:string?}, ${8:purge-journal-archive as xs:boolean?})", "trigger":"admin.databaseMinutelyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?, purge-journal-archive as xs:boolean?)"}, {"content":"admin.databaseMinutelyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:backup-security-db as Boolean}, ${4:backup-schemas-db as Boolean}, ${5:backup-triggers-db as Boolean}, ${6:include-replicas as Boolean}, ${7:incremental-dir as xs:string?}, ${8:purge-journal-archive as xs:boolean?}, ${9:journal-archiving as xs:boolean?})", "trigger":"admin.databaseMinutelyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?, purge-journal-archive as xs:boolean?, journal-archiving as xs:boolean?)"}, {"content":"admin.databaseMinutelyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:backup-security-db as Boolean}, ${4:backup-schemas-db as Boolean}, ${5:backup-triggers-db as Boolean}, ${6:include-replicas as Boolean}, ${7:incremental-dir as xs:string?}, ${8:purge-journal-archive as xs:boolean?}, ${9:journal-archiving as xs:boolean?}, ${10:journal-archive-path as xs:string?})", "trigger":"admin.databaseMinutelyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?, purge-journal-archive as xs:boolean?, journal-archiving as xs:boolean?, journal-archive-path as xs:string?)"}, {"content":"admin.databaseMinutelyIncrementalBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:backup-security-db as Boolean}, ${4:backup-schemas-db as Boolean}, ${5:backup-triggers-db as Boolean}, ${6:include-replicas as Boolean}, ${7:incremental-dir as xs:string?}, ${8:purge-journal-archive as xs:boolean?}, ${9:journal-archiving as xs:boolean?}, ${10:journal-archive-path as xs:string?}, ${11:lag-limit as xs:unsignedLong?})", "trigger":"admin.databaseMinutelyIncrementalBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, backup-security-db as Boolean, backup-schemas-db as Boolean, backup-triggers-db as Boolean, include-replicas as Boolean, incremental-dir as xs:string?, purge-journal-archive as xs:boolean?, journal-archiving as xs:boolean?, journal-archive-path as xs:string?, lag-limit as xs:unsignedLong?)"}, {"content":"admin.forestHourlyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:start-minute as xs:nonNegativeInteger})", "trigger":"admin.forestHourlyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, start-minute as xs:nonNegativeInteger)"}, {"content":"admin.forestMinutelyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger})", "trigger":"admin.forestMinutelyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger)"}, {"content":"admin.groupGetScheduledTasks(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetScheduledTasks", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupAddScheduledTask(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:scheduled-tasks as element(gr:scheduled-task)*})", "trigger":"admin.groupAddScheduledTask", "description":"(config as element(configuration), group-id as xs:unsignedLong, scheduled-tasks as element(gr:scheduled-task)*)"}, {"content":"admin.groupDeleteScheduledTask(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:scheduled-tasks as element(gr:scheduled-task)*})", "trigger":"admin.groupDeleteScheduledTask", "description":"(config as element(configuration), group-id as xs:unsignedLong, scheduled-tasks as element(gr:scheduled-task)*)"}, {"content":"admin.groupOneTimeScheduledTask(${1:task-path as String}, ${2:task-root as String}, ${3:task-start as xs:dateTime}, ${4:task-database as xs:unsignedLong}, ${5:task-modules as xs:unsignedLong}, ${6:task-user as xs:unsignedLong}, ${7:task-host as xs:unsignedLong?})", "trigger":"admin.groupOneTimeScheduledTask", "description":"(task-path as String, task-root as String, task-start as xs:dateTime, task-database as xs:unsignedLong, task-modules as xs:unsignedLong, task-user as xs:unsignedLong, task-host as xs:unsignedLong?)"}, {"content":"admin.groupOneTimeScheduledTask(${1:task-path as String}, ${2:task-root as String}, ${3:task-start as xs:dateTime}, ${4:task-database as xs:unsignedLong}, ${5:task-modules as xs:unsignedLong}, ${6:task-user as xs:unsignedLong}, ${7:task-host as xs:unsignedLong?}, ${8:task-priority as xs:string?})", "trigger":"admin.groupOneTimeScheduledTask", "description":"(task-path as String, task-root as String, task-start as xs:dateTime, task-database as xs:unsignedLong, task-modules as xs:unsignedLong, task-user as xs:unsignedLong, task-host as xs:unsignedLong?, task-priority as xs:string?)"}, {"content":"admin.groupMonthlyScheduledTask(${1:task-path as String}, ${2:task-root as String}, ${3:task-period as xs:positiveInteger}, ${4:task-month-day as xs:unsignedLong}, ${5:task-start-time as xs:time}, ${6:task-database as xs:unsignedLong}, ${7:task-modules as xs:unsignedLong}, ${8:task-user as xs:unsignedLong}, ${9:task-host as xs:unsignedLong?})", "trigger":"admin.groupMonthlyScheduledTask", "description":"(task-path as String, task-root as String, task-period as xs:positiveInteger, task-month-day as xs:unsignedLong, task-start-time as xs:time, task-database as xs:unsignedLong, task-modules as xs:unsignedLong, task-user as xs:unsignedLong, task-host as xs:unsignedLong?)"}, {"content":"admin.groupMonthlyScheduledTask(${1:task-path as String}, ${2:task-root as String}, ${3:task-period as xs:positiveInteger}, ${4:task-month-day as xs:unsignedLong}, ${5:task-start-time as xs:time}, ${6:task-database as xs:unsignedLong}, ${7:task-modules as xs:unsignedLong}, ${8:task-user as xs:unsignedLong}, ${9:task-host as xs:unsignedLong?}, ${10:task-priority as xs:string?})", "trigger":"admin.groupMonthlyScheduledTask", "description":"(task-path as String, task-root as String, task-period as xs:positiveInteger, task-month-day as xs:unsignedLong, task-start-time as xs:time, task-database as xs:unsignedLong, task-modules as xs:unsignedLong, task-user as xs:unsignedLong, task-host as xs:unsignedLong?, task-priority as xs:string?)"}, {"content":"admin.groupWeeklyScheduledTask(${1:task-path as String}, ${2:task-root as String}, ${3:task-period as xs:positiveInteger}, ${4:task-days as xs:string+}, ${5:task-start-time as xs:time}, ${6:task-database as xs:unsignedLong}, ${7:task-modules as xs:unsignedLong}, ${8:task-user as xs:unsignedLong}, ${9:task-host as xs:unsignedLong?})", "trigger":"admin.groupWeeklyScheduledTask", "description":"(task-path as String, task-root as String, task-period as xs:positiveInteger, task-days as xs:string+, task-start-time as xs:time, task-database as xs:unsignedLong, task-modules as xs:unsignedLong, task-user as xs:unsignedLong, task-host as xs:unsignedLong?)"}, {"content":"admin.groupWeeklyScheduledTask(${1:task-path as String}, ${2:task-root as String}, ${3:task-period as xs:positiveInteger}, ${4:task-days as xs:string+}, ${5:task-start-time as xs:time}, ${6:task-database as xs:unsignedLong}, ${7:task-modules as xs:unsignedLong}, ${8:task-user as xs:unsignedLong}, ${9:task-host as xs:unsignedLong?}, ${10:task-priority as xs:string?})", "trigger":"admin.groupWeeklyScheduledTask", "description":"(task-path as String, task-root as String, task-period as xs:positiveInteger, task-days as xs:string+, task-start-time as xs:time, task-database as xs:unsignedLong, task-modules as xs:unsignedLong, task-user as xs:unsignedLong, task-host as xs:unsignedLong?, task-priority as xs:string?)"}, {"content":"admin.groupDailyScheduledTask(${1:task-path as String}, ${2:task-root as String}, ${3:task-period as xs:positiveInteger}, ${4:task-start-time as xs:time}, ${5:task-database as xs:unsignedLong}, ${6:task-modules as xs:unsignedLong}, ${7:task-user as xs:unsignedLong}, ${8:task-host as xs:unsignedLong?})", "trigger":"admin.groupDailyScheduledTask", "description":"(task-path as String, task-root as String, task-period as xs:positiveInteger, task-start-time as xs:time, task-database as xs:unsignedLong, task-modules as xs:unsignedLong, task-user as xs:unsignedLong, task-host as xs:unsignedLong?)"}, {"content":"admin.groupDailyScheduledTask(${1:task-path as String}, ${2:task-root as String}, ${3:task-period as xs:positiveInteger}, ${4:task-start-time as xs:time}, ${5:task-database as xs:unsignedLong}, ${6:task-modules as xs:unsignedLong}, ${7:task-user as xs:unsignedLong}, ${8:task-host as xs:unsignedLong?}, ${9:task-priority as xs:string?})", "trigger":"admin.groupDailyScheduledTask", "description":"(task-path as String, task-root as String, task-period as xs:positiveInteger, task-start-time as xs:time, task-database as xs:unsignedLong, task-modules as xs:unsignedLong, task-user as xs:unsignedLong, task-host as xs:unsignedLong?, task-priority as xs:string?)"}, {"content":"admin.groupHourlyScheduledTask(${1:task-path as String}, ${2:task-root as String}, ${3:task-period as xs:positiveInteger}, ${4:task-minute as xs:nonNegativeInteger}, ${5:task-database as xs:unsignedLong}, ${6:task-modules as xs:unsignedLong}, ${7:task-user as xs:unsignedLong}, ${8:task-host as xs:unsignedLong?})", "trigger":"admin.groupHourlyScheduledTask", "description":"(task-path as String, task-root as String, task-period as xs:positiveInteger, task-minute as xs:nonNegativeInteger, task-database as xs:unsignedLong, task-modules as xs:unsignedLong, task-user as xs:unsignedLong, task-host as xs:unsignedLong?)"}, {"content":"admin.groupHourlyScheduledTask(${1:task-path as String}, ${2:task-root as String}, ${3:task-period as xs:positiveInteger}, ${4:task-minute as xs:nonNegativeInteger}, ${5:task-database as xs:unsignedLong}, ${6:task-modules as xs:unsignedLong}, ${7:task-user as xs:unsignedLong}, ${8:task-host as xs:unsignedLong?}, ${9:task-priority as xs:string?})", "trigger":"admin.groupHourlyScheduledTask", "description":"(task-path as String, task-root as String, task-period as xs:positiveInteger, task-minute as xs:nonNegativeInteger, task-database as xs:unsignedLong, task-modules as xs:unsignedLong, task-user as xs:unsignedLong, task-host as xs:unsignedLong?, task-priority as xs:string?)"}, {"content":"admin.groupMinutelyScheduledTask(${1:task-path as String}, ${2:task-root as String}, ${3:task-period as xs:positiveInteger}, ${4:task-database as xs:unsignedLong}, ${5:task-modules as xs:unsignedLong}, ${6:task-user as xs:unsignedLong}, ${7:task-host as xs:unsignedLong?})", "trigger":"admin.groupMinutelyScheduledTask", "description":"(task-path as String, task-root as String, task-period as xs:positiveInteger, task-database as xs:unsignedLong, task-modules as xs:unsignedLong, task-user as xs:unsignedLong, task-host as xs:unsignedLong?)"}, {"content":"admin.groupMinutelyScheduledTask(${1:task-path as String}, ${2:task-root as String}, ${3:task-period as xs:positiveInteger}, ${4:task-database as xs:unsignedLong}, ${5:task-modules as xs:unsignedLong}, ${6:task-user as xs:unsignedLong}, ${7:task-host as xs:unsignedLong?}, ${8:task-priority as xs:string?})", "trigger":"admin.groupMinutelyScheduledTask", "description":"(task-path as String, task-root as String, task-period as xs:positiveInteger, task-database as xs:unsignedLong, task-modules as xs:unsignedLong, task-user as xs:unsignedLong, task-host as xs:unsignedLong?, task-priority as xs:string?)"}, {"content":"admin.appserverGetSslCertificateTemplate(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetSslCertificateTemplate", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetSslCiphers(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetSslCiphers", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetSslHostname(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetSslHostname", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverSetSslCertificateTemplate(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as xs:unsignedLong})", "trigger":"admin.appserverSetSslCertificateTemplate", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as xs:unsignedLong)"}, {"content":"admin.appserverSetSslCiphers(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetSslCiphers", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetSslHostname(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetSslHostname", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverGetSslAllowSslv3(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetSslAllowSslv3", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetSslAllowTls(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetSslAllowTls", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetSslClientCertificateAuthorities(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetSslClientCertificateAuthorities", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverSetSslAllowSslv3(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.appserverSetSslAllowSslv3", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.appserverSetSslAllowTls(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.appserverSetSslAllowTls", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.appserverSetSslClientCertificateAuthorities(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as xs:unsignedLong*})", "trigger":"admin.appserverSetSslClientCertificateAuthorities", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as xs:unsignedLong*)"}, {"content":"admin.forestDailyBackup(${1:backup-dir as String}, ${2:backup-period as xs:positiveInteger}, ${3:start-time as xs:time})", "trigger":"admin.forestDailyBackup", "description":"(backup-dir as String, backup-period as xs:positiveInteger, start-time as xs:time)"}, {"content":"admin.databaseSetTfNormalization(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.databaseSetTfNormalization", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as String)"}, {"content":"admin.databaseGetTfNormalization(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetTfNormalization", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.groupGetXdqpSslEnabled(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetXdqpSslEnabled", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetXdqpSslAllowSslv3(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetXdqpSslAllowSslv3", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetXdqpSslAllowTls(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetXdqpSslAllowTls", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetXdqpSslCiphers(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetXdqpSslCiphers", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupSetXdqpSslEnabled(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.groupSetXdqpSslEnabled", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.groupSetXdqpSslAllowSslv3(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.groupSetXdqpSslAllowSslv3", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.groupSetXdqpSslAllowTls(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.groupSetXdqpSslAllowTls", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.groupSetXdqpSslCiphers(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.groupSetXdqpSslCiphers", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverGetSslRequireClientCertificate(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetSslRequireClientCertificate", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverSetSslRequireClientCertificate(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.appserverSetSslRequireClientCertificate", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseExists(${1:config as element(configuration)}, ${2:database-name as String})", "trigger":"admin.databaseExists", "description":"(config as element(configuration), database-name as String)"}, {"content":"admin.forestExists(${1:config as element(configuration)}, ${2:forest-name as String})", "trigger":"admin.forestExists", "description":"(config as element(configuration), forest-name as String)"}, {"content":"admin.forestGetDatabase(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong})", "trigger":"admin.forestGetDatabase", "description":"(config as element(configuration), forest-id as xs:unsignedLong)"}, {"content":"admin.forestGetReplicas(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong})", "trigger":"admin.forestGetReplicas", "description":"(config as element(configuration), forest-id as xs:unsignedLong)"}, {"content":"admin.forestAddReplica(${1:config as element(configuration)}, ${2:master-id as xs:unsignedLong}, ${3:replica-id as xs:unsignedLong})", "trigger":"admin.forestAddReplica", "description":"(config as element(configuration), master-id as xs:unsignedLong, replica-id as xs:unsignedLong)"}, {"content":"admin.forestRemoveReplica(${1:config as element(configuration)}, ${2:master-id as xs:unsignedLong}, ${3:replica-id as xs:unsignedLong})", "trigger":"admin.forestRemoveReplica", "description":"(config as element(configuration), master-id as xs:unsignedLong, replica-id as xs:unsignedLong)"}, {"content":"admin.hostExists(${1:config as element(configuration)}, ${2:host-name as String})", "trigger":"admin.hostExists", "description":"(config as element(configuration), host-name as String)"}, {"content":"admin.appserverExists(${1:config as element(configuration)}, ${2:group-ids as xs:unsignedLong*}, ${3:appserver-name as String})", "trigger":"admin.appserverExists", "description":"(config as element(configuration), group-ids as xs:unsignedLong*, appserver-name as String)"}, {"content":"admin.groupExists(${1:config as element(configuration)}, ${2:group-name as String})", "trigger":"admin.groupExists", "description":"(config as element(configuration), group-name as String)"}, {"content":"admin.databaseSetFieldValuePositions(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String}, ${4:value as xs:boolean?})", "trigger":"admin.databaseSetFieldValuePositions", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String, value as xs:boolean?)"}, {"content":"admin.databaseSetFieldValueSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String}, ${4:value as xs:boolean?})", "trigger":"admin.databaseSetFieldValueSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String, value as xs:boolean?)"}, {"content":"admin.databaseGetFieldValuePositions(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String})", "trigger":"admin.databaseGetFieldValuePositions", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String)"}, {"content":"admin.databaseGetFieldValueSearches(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String})", "trigger":"admin.databaseGetFieldValueSearches", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String)"}, {"content":"admin.databaseSetPreloadReplicaMappedData(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetPreloadReplicaMappedData", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseGetPreloadReplicaMappedData(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetPreloadReplicaMappedData", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseForeignReplica(${1:foreign-cluster-id as xs:unsignedLong}, ${2:foreign-database-id as xs:unsignedLong}, ${3:connect-forests-by-name as Boolean}, ${4:lag-limit as xs:unsignedInt})", "trigger":"admin.databaseForeignReplica", "description":"(foreign-cluster-id as xs:unsignedLong, foreign-database-id as xs:unsignedLong, connect-forests-by-name as Boolean, lag-limit as xs:unsignedInt)"}, {"content":"admin.databaseForeignReplica(${1:foreign-cluster-id as xs:unsignedLong}, ${2:foreign-database-id as xs:unsignedLong}, ${3:connect-forests-by-name as Boolean}, ${4:lag-limit as xs:unsignedInt}, ${5:replication-enabled as Boolean})", "trigger":"admin.databaseForeignReplica", "description":"(foreign-cluster-id as xs:unsignedLong, foreign-database-id as xs:unsignedLong, connect-forests-by-name as Boolean, lag-limit as xs:unsignedInt, replication-enabled as Boolean)"}, {"content":"admin.databaseForeignReplica(${1:foreign-cluster-id as xs:unsignedLong}, ${2:foreign-database-id as xs:unsignedLong}, ${3:connect-forests-by-name as Boolean}, ${4:lag-limit as xs:unsignedInt}, ${5:replication-enabled as Boolean}, ${6:queue-size as xs:unsignedInt})", "trigger":"admin.databaseForeignReplica", "description":"(foreign-cluster-id as xs:unsignedLong, foreign-database-id as xs:unsignedLong, connect-forests-by-name as Boolean, lag-limit as xs:unsignedInt, replication-enabled as Boolean, queue-size as xs:unsignedInt)"}, {"content":"admin.databaseForeignReplicaGetClusterId(${1:foreign-replica as element(db:foreign-replica)})", "trigger":"admin.databaseForeignReplicaGetClusterId", "description":"(foreign-replica as element(db:foreign-replica))"}, {"content":"admin.databaseForeignReplicaGetDatabaseId(${1:foreign-replica as element(db:foreign-replica)})", "trigger":"admin.databaseForeignReplicaGetDatabaseId", "description":"(foreign-replica as element(db:foreign-replica))"}, {"content":"admin.databaseForeignReplicaGetConnectForestsByName(${1:foreign-replica as element(db:foreign-replica)})", "trigger":"admin.databaseForeignReplicaGetConnectForestsByName", "description":"(foreign-replica as element(db:foreign-replica))"}, {"content":"admin.databaseForeignReplicaGetLagLimit(${1:foreign-replica as element(db:foreign-replica)})", "trigger":"admin.databaseForeignReplicaGetLagLimit", "description":"(foreign-replica as element(db:foreign-replica))"}, {"content":"admin.databaseForeignReplicaSetLagLimit(${1:foreign-replica as element(db:foreign-replica)}, ${2:lag-limit as xs:unsignedInt})", "trigger":"admin.databaseForeignReplicaSetLagLimit", "description":"(foreign-replica as element(db:foreign-replica), lag-limit as xs:unsignedInt)"}, {"content":"admin.databaseForeignReplicaGetReplicationEnabled(${1:foreign-replica as element(db:foreign-replica)})", "trigger":"admin.databaseForeignReplicaGetReplicationEnabled", "description":"(foreign-replica as element(db:foreign-replica))"}, {"content":"admin.databaseForeignReplicaSetReplicationEnabled(${1:foreign-replica as element(db:foreign-replica)}, ${2:enabled as Boolean})", "trigger":"admin.databaseForeignReplicaSetReplicationEnabled", "description":"(foreign-replica as element(db:foreign-replica), enabled as Boolean)"}, {"content":"admin.databaseForeignMaster(${1:foreign-cluster-id as xs:unsignedLong}, ${2:foreign-database-id as xs:unsignedLong}, ${3:connect-forests-by-name as Boolean})", "trigger":"admin.databaseForeignMaster", "description":"(foreign-cluster-id as xs:unsignedLong, foreign-database-id as xs:unsignedLong, connect-forests-by-name as Boolean)"}, {"content":"admin.databaseForeignMasterGetClusterId(${1:foreign-master as element(db:foreign-master)})", "trigger":"admin.databaseForeignMasterGetClusterId", "description":"(foreign-master as element(db:foreign-master))"}, {"content":"admin.databaseForeignMasterGetDatabaseId(${1:foreign-master as element(db:foreign-master)})", "trigger":"admin.databaseForeignMasterGetDatabaseId", "description":"(foreign-master as element(db:foreign-master))"}, {"content":"admin.databaseForeignMasterGetConnectForestsByName(${1:foreign-master as element(db:foreign-master)})", "trigger":"admin.databaseForeignMasterGetConnectForestsByName", "description":"(foreign-master as element(db:foreign-master))"}, {"content":"admin.databaseSetForeignMaster(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:foreign-master as element(db:foreign-master)})", "trigger":"admin.databaseSetForeignMaster", "description":"(config as element(configuration), database-id as xs:unsignedLong, foreign-master as element(db:foreign-master))"}, {"content":"admin.databaseDeleteForeignMaster(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseDeleteForeignMaster", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetForeignMaster(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetForeignMaster", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseAddForeignReplicas(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:replicas as element(db:foreign-replica)*})", "trigger":"admin.databaseAddForeignReplicas", "description":"(config as element(configuration), database-id as xs:unsignedLong, replicas as element(db:foreign-replica)*)"}, {"content":"admin.databaseSetForeignReplicas(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:replicas as element(db:foreign-replica)*})", "trigger":"admin.databaseSetForeignReplicas", "description":"(config as element(configuration), database-id as xs:unsignedLong, replicas as element(db:foreign-replica)*)"}, {"content":"admin.databaseDeleteForeignReplicas(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:foreign-replicas as element(db:foreign-replica)*})", "trigger":"admin.databaseDeleteForeignReplicas", "description":"(config as element(configuration), database-id as xs:unsignedLong, foreign-replicas as element(db:foreign-replica)*)"}, {"content":"admin.databaseGetForeignReplicas(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetForeignReplicas", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.forestForeignReplica(${1:foreign-cluster-id as xs:unsignedLong}, ${2:foreign-database-id as xs:unsignedLong}, ${3:foreign-forest-id as xs:unsignedLong})", "trigger":"admin.forestForeignReplica", "description":"(foreign-cluster-id as xs:unsignedLong, foreign-database-id as xs:unsignedLong, foreign-forest-id as xs:unsignedLong)"}, {"content":"admin.forestForeignReplicaGetClusterId(${1:foreign-replica as element(as:foreign-replica)})", "trigger":"admin.forestForeignReplicaGetClusterId", "description":"(foreign-replica as element(as:foreign-replica))"}, {"content":"admin.forestForeignReplicaGetDatabaseId(${1:foreign-replica as element(as:foreign-replica)})", "trigger":"admin.forestForeignReplicaGetDatabaseId", "description":"(foreign-replica as element(as:foreign-replica))"}, {"content":"admin.forestForeignReplicaGetForestId(${1:foreign-replica as element(as:foreign-replica)})", "trigger":"admin.forestForeignReplicaGetForestId", "description":"(foreign-replica as element(as:foreign-replica))"}, {"content":"admin.forestForeignMaster(${1:foreign-cluster-id as xs:unsignedLong}, ${2:foreign-database-id as xs:unsignedLong}, ${3:foreign-forest-id as xs:unsignedLong})", "trigger":"admin.forestForeignMaster", "description":"(foreign-cluster-id as xs:unsignedLong, foreign-database-id as xs:unsignedLong, foreign-forest-id as xs:unsignedLong)"}, {"content":"admin.forestForeignMasterGetClusterId(${1:foreign-master as element(as:foreign-master)})", "trigger":"admin.forestForeignMasterGetClusterId", "description":"(foreign-master as element(as:foreign-master))"}, {"content":"admin.forestForeignMasterGetDatabaseId(${1:foreign-master as element(as:foreign-master)})", "trigger":"admin.forestForeignMasterGetDatabaseId", "description":"(foreign-master as element(as:foreign-master))"}, {"content":"admin.forestForeignMasterGetForestId(${1:foreign-master as element(as:foreign-master)})", "trigger":"admin.forestForeignMasterGetForestId", "description":"(foreign-master as element(as:foreign-master))"}, {"content":"admin.forestSetForeignMaster(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong}, ${3:foreign-master as element(as:foreign-master)})", "trigger":"admin.forestSetForeignMaster", "description":"(config as element(configuration), forest-id as xs:unsignedLong, foreign-master as element(as:foreign-master))"}, {"content":"admin.forestDeleteForeignMaster(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong})", "trigger":"admin.forestDeleteForeignMaster", "description":"(config as element(configuration), forest-id as xs:unsignedLong)"}, {"content":"admin.forestGetForeignMaster(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong})", "trigger":"admin.forestGetForeignMaster", "description":"(config as element(configuration), forest-id as xs:unsignedLong)"}, {"content":"admin.forestAddForeignReplicas(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong}, ${3:foreign-replicas as element(as:foreign-replica)*})", "trigger":"admin.forestAddForeignReplicas", "description":"(config as element(configuration), forest-id as xs:unsignedLong, foreign-replicas as element(as:foreign-replica)*)"}, {"content":"admin.forestSetForeignReplicas(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong}, ${3:foreign-replicas as element(as:foreign-replica)*})", "trigger":"admin.forestSetForeignReplicas", "description":"(config as element(configuration), forest-id as xs:unsignedLong, foreign-replicas as element(as:foreign-replica)*)"}, {"content":"admin.forestDeleteForeignReplicas(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong}, ${3:foreign-replicas as element(as:foreign-replica)*})", "trigger":"admin.forestDeleteForeignReplicas", "description":"(config as element(configuration), forest-id as xs:unsignedLong, foreign-replicas as element(as:foreign-replica)*)"}, {"content":"admin.forestGetForeignReplicas(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong})", "trigger":"admin.forestGetForeignReplicas", "description":"(config as element(configuration), forest-id as xs:unsignedLong)"}, {"content":"admin.hostGetForeignPort(${1:config as element(configuration)}, ${2:host-id as xs:unsignedLong})", "trigger":"admin.hostGetForeignPort", "description":"(config as element(configuration), host-id as xs:unsignedLong)"}, {"content":"admin.hostSetForeignPort(${1:config as element(configuration)}, ${2:host-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.hostSetForeignPort", "description":"(config as element(configuration), host-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.clusterGetId(${1:config as element(configuration)})", "trigger":"admin.clusterGetId", "description":"(config as element(configuration))"}, {"content":"admin.clusterGetName(${1:config as element(configuration)})", "trigger":"admin.clusterGetName", "description":"(config as element(configuration))"}, {"content":"admin.clusterSetName(${1:config as element(configuration)}, ${2:name as String})", "trigger":"admin.clusterSetName", "description":"(config as element(configuration), name as String)"}, {"content":"admin.clusterSetXdqpSslCertificate(${1:config as element(configuration)}, ${2:value as String})", "trigger":"admin.clusterSetXdqpSslCertificate", "description":"(config as element(configuration), value as String)"}, {"content":"admin.clusterGetXdqpSslCertificate(${1:config as element(configuration)})", "trigger":"admin.clusterGetXdqpSslCertificate", "description":"(config as element(configuration))"}, {"content":"admin.clusterGetXdqpSslPrivateKey(${1:config as element(configuration)})", "trigger":"admin.clusterGetXdqpSslPrivateKey", "description":"(config as element(configuration))"}, {"content":"admin.clusterSetXdqpSslPrivateKey(${1:config as element(configuration)}, ${2:value as String})", "trigger":"admin.clusterSetXdqpSslPrivateKey", "description":"(config as element(configuration), value as String)"}, {"content":"admin.clusterSetXdqpBootstrapHosts(${1:config as element(configuration)}, ${2:host-ids as xs:unsignedLong*})", "trigger":"admin.clusterSetXdqpBootstrapHosts", "description":"(config as element(configuration), host-ids as xs:unsignedLong*)"}, {"content":"admin.clusterGetXdqpBootstrapHosts(${1:config as element(configuration)})", "trigger":"admin.clusterGetXdqpBootstrapHosts", "description":"(config as element(configuration))"}, {"content":"admin.foreignHost(${1:host-id as xs:unsignedLong}, ${2:host-name as String}, ${3:connect-port as xs:unsignedInt})", "trigger":"admin.foreignHost", "description":"(host-id as xs:unsignedLong, host-name as String, connect-port as xs:unsignedInt)"}, {"content":"admin.foreignHostGetId(${1:fh as element(cl:foreign-host)})", "trigger":"admin.foreignHostGetId", "description":"(fh as element(cl:foreign-host))"}, {"content":"admin.foreignHostGetName(${1:fh as element(cl:foreign-host)})", "trigger":"admin.foreignHostGetName", "description":"(fh as element(cl:foreign-host))"}, {"content":"admin.foreignHostGetConnectPort(${1:fh as element(cl:foreign-host)})", "trigger":"admin.foreignHostGetConnectPort", "description":"(fh as element(cl:foreign-host))"}, {"content":"admin.foreignClusterDelete(${1:config as element(configuration)}, ${2:cluster-id as xs:unsignedLong})", "trigger":"admin.foreignClusterDelete", "description":"(config as element(configuration), cluster-id as xs:unsignedLong)"}, {"content":"admin.foreignClusterReplace(${1:config as element(configuration)}, ${2:cluster-id as xs:unsignedLong}, ${3:cluster-name as String}, ${4:xdqp-timeout as xs:unsignedInt?}, ${5:host-timeout as xs:unsignedInt?}, ${6:ssl-certificate as xs:string?}, ${7:xdqp-ssl-enabled as xs:boolean?}, ${8:xdqp-ssl-allow-sslv3 as xs:boolean?}, ${9:xdqp-ssl-allow-tls as xs:boolean?}, ${10:xdqp-ssl-ciphers as xs:string?}, ${11:foreign-bootstrap-hosts as element(cl:foreign-host)*})", "trigger":"admin.foreignClusterReplace", "description":"(config as element(configuration), cluster-id as xs:unsignedLong, cluster-name as String, xdqp-timeout as xs:unsignedInt?, host-timeout as xs:unsignedInt?, ssl-certificate as xs:string?, xdqp-ssl-enabled as xs:boolean?, xdqp-ssl-allow-sslv3 as xs:boolean?, xdqp-ssl-allow-tls as xs:boolean?, xdqp-ssl-ciphers as xs:string?, foreign-bootstrap-hosts as element(cl:foreign-host)*)"}, {"content":"admin.foreignClusterCreate(${1:config as element(configuration)}, ${2:cluster-id as xs:unsignedLong}, ${3:cluster-name as String}, ${4:xdqp-timeout as xs:unsignedInt?}, ${5:host-timeout as xs:unsignedInt?}, ${6:ssl-certificate as xs:string?}, ${7:xdqp-ssl-enabled as xs:boolean?}, ${8:xdqp-ssl-allow-sslv3 as xs:boolean?}, ${9:xdqp-ssl-allow-tls as xs:boolean?}, ${10:xdqp-ssl-ciphers as xs:string?}, ${11:foreign-bootstrap-hosts as element(cl:foreign-host)*})", "trigger":"admin.foreignClusterCreate", "description":"(config as element(configuration), cluster-id as xs:unsignedLong, cluster-name as String, xdqp-timeout as xs:unsignedInt?, host-timeout as xs:unsignedInt?, ssl-certificate as xs:string?, xdqp-ssl-enabled as xs:boolean?, xdqp-ssl-allow-sslv3 as xs:boolean?, xdqp-ssl-allow-tls as xs:boolean?, xdqp-ssl-ciphers as xs:string?, foreign-bootstrap-hosts as element(cl:foreign-host)*)"}, {"content":"admin.clusterGetForeignClusterIds(${1:config as element(configuration)})", "trigger":"admin.clusterGetForeignClusterIds", "description":"(config as element(configuration))"}, {"content":"admin.clusterGetForeignClusterId(${1:config as element(configuration)}, ${2:name as String})", "trigger":"admin.clusterGetForeignClusterId", "description":"(config as element(configuration), name as String)"}, {"content":"admin.foreignClusterGetName(${1:config as element(configuration)}, ${2:cluster-id as xs:unsignedLong})", "trigger":"admin.foreignClusterGetName", "description":"(config as element(configuration), cluster-id as xs:unsignedLong)"}, {"content":"admin.foreignClusterSetName(${1:config as element(configuration)}, ${2:cluster-id as xs:unsignedLong}, ${3:cluster-name as String})", "trigger":"admin.foreignClusterSetName", "description":"(config as element(configuration), cluster-id as xs:unsignedLong, cluster-name as String)"}, {"content":"admin.foreignClusterSetXdqpTimeout(${1:config as element(configuration)}, ${2:cluster-id as xs:unsignedLong}, ${3:xdqp-timeout as xs:unsignedInt})", "trigger":"admin.foreignClusterSetXdqpTimeout", "description":"(config as element(configuration), cluster-id as xs:unsignedLong, xdqp-timeout as xs:unsignedInt)"}, {"content":"admin.foreignClusterGetXdqpTimeout(${1:config as element(configuration)}, ${2:cluster-id as xs:unsignedLong})", "trigger":"admin.foreignClusterGetXdqpTimeout", "description":"(config as element(configuration), cluster-id as xs:unsignedLong)"}, {"content":"admin.foreignClusterSetHostTimeout(${1:config as element(configuration)}, ${2:cluster-id as xs:unsignedLong}, ${3:host-timeout as xs:unsignedInt})", "trigger":"admin.foreignClusterSetHostTimeout", "description":"(config as element(configuration), cluster-id as xs:unsignedLong, host-timeout as xs:unsignedInt)"}, {"content":"admin.foreignClusterGetHostTimeout(${1:config as element(configuration)}, ${2:cluster-id as xs:unsignedLong})", "trigger":"admin.foreignClusterGetHostTimeout", "description":"(config as element(configuration), cluster-id as xs:unsignedLong)"}, {"content":"admin.foreignClusterGetSslCertificate(${1:config as element(configuration)}, ${2:cluster-id as xs:unsignedLong})", "trigger":"admin.foreignClusterGetSslCertificate", "description":"(config as element(configuration), cluster-id as xs:unsignedLong)"}, {"content":"admin.foreignClusterSetSslCertificate(${1:config as element(configuration)}, ${2:cluster-id as xs:unsignedLong}, ${3:ssl-certificate as xs:string?})", "trigger":"admin.foreignClusterSetSslCertificate", "description":"(config as element(configuration), cluster-id as xs:unsignedLong, ssl-certificate as xs:string?)"}, {"content":"admin.foreignClusterGetXdqpSslEnabled(${1:config as element(configuration)}, ${2:cluster-id as xs:unsignedLong})", "trigger":"admin.foreignClusterGetXdqpSslEnabled", "description":"(config as element(configuration), cluster-id as xs:unsignedLong)"}, {"content":"admin.foreignClusterSetXdqpSslEnabled(${1:config as element(configuration)}, ${2:cluster-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.foreignClusterSetXdqpSslEnabled", "description":"(config as element(configuration), cluster-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.foreignClusterGetXdqpSslAllowSslv3(${1:config as element(configuration)}, ${2:cluster-id as xs:unsignedLong})", "trigger":"admin.foreignClusterGetXdqpSslAllowSslv3", "description":"(config as element(configuration), cluster-id as xs:unsignedLong)"}, {"content":"admin.foreignClusterSetXdqpSslAllowSslv3(${1:config as element(configuration)}, ${2:cluster-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.foreignClusterSetXdqpSslAllowSslv3", "description":"(config as element(configuration), cluster-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.foreignClusterGetXdqpSslAllowTls(${1:config as element(configuration)}, ${2:cluster-id as xs:unsignedLong})", "trigger":"admin.foreignClusterGetXdqpSslAllowTls", "description":"(config as element(configuration), cluster-id as xs:unsignedLong)"}, {"content":"admin.foreignClusterSetXdqpSslAllowTls(${1:config as element(configuration)}, ${2:cluster-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.foreignClusterSetXdqpSslAllowTls", "description":"(config as element(configuration), cluster-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.foreignClusterGetXdqpSslCiphers(${1:config as element(configuration)}, ${2:cluster-id as xs:unsignedLong})", "trigger":"admin.foreignClusterGetXdqpSslCiphers", "description":"(config as element(configuration), cluster-id as xs:unsignedLong)"}, {"content":"admin.foreignClusterSetXdqpSslCiphers(${1:config as element(configuration)}, ${2:cluster-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.foreignClusterSetXdqpSslCiphers", "description":"(config as element(configuration), cluster-id as xs:unsignedLong, value as String)"}, {"content":"admin.foreignClusterGetBootstrapHosts(${1:config as element(configuration)}, ${2:cluster-id as xs:unsignedLong})", "trigger":"admin.foreignClusterGetBootstrapHosts", "description":"(config as element(configuration), cluster-id as xs:unsignedLong)"}, {"content":"admin.foreignClusterSetBootstrapHosts(${1:config as element(configuration)}, ${2:cluster-id as xs:unsignedLong}, ${3:bootstrap-hosts as element(cl:foreign-host)*})", "trigger":"admin.foreignClusterSetBootstrapHosts", "description":"(config as element(configuration), cluster-id as xs:unsignedLong, bootstrap-hosts as element(cl:foreign-host)*)"}, {"content":"admin.databaseGetLargeSizeThreshold(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetLargeSizeThreshold", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.forestGetFastDataDirectory(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong})", "trigger":"admin.forestGetFastDataDirectory", "description":"(config as element(configuration), forest-id as xs:unsignedLong)"}, {"content":"admin.clusterGetForeignReplicaDatabases(${1:config as element(configuration)}, ${2:foreign-cluster-id as xs:unsignedLong}, ${3:database-ids as xs:unsignedLong*})", "trigger":"admin.clusterGetForeignReplicaDatabases", "description":"(config as element(configuration), foreign-cluster-id as xs:unsignedLong, database-ids as xs:unsignedLong*)"}, {"content":"admin.clusterGetForeignMasterDatabase(${1:config as element(configuration)}, ${2:foreign-cluster-id as xs:unsignedLong}, ${3:database-ids as xs:unsignedLong*})", "trigger":"admin.clusterGetForeignMasterDatabase", "description":"(config as element(configuration), foreign-cluster-id as xs:unsignedLong, database-ids as xs:unsignedLong*)"}, {"content":"admin.databaseGetConfigForForeignReplicasOnForeignCluster(${1:config as element(configuration)}, ${2:foreign-cluster-id as xs:unsignedLong})", "trigger":"admin.databaseGetConfigForForeignReplicasOnForeignCluster", "description":"(config as element(configuration), foreign-cluster-id as xs:unsignedLong)"}, {"content":"admin.databaseGetConfigForForeignMasterOnForeignCluster(${1:config as element(configuration)}, ${2:foreign-cluster-id as xs:unsignedLong})", "trigger":"admin.databaseGetConfigForForeignMasterOnForeignCluster", "description":"(config as element(configuration), foreign-cluster-id as xs:unsignedLong)"}, {"content":"admin.appserverGetOutputMethod(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetOutputMethod", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetOutputByteOrderMark(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetOutputByteOrderMark", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetOutputCdataSectionNamespaceUri(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetOutputCdataSectionNamespaceUri", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetOutputCdataSectionLocalname(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetOutputCdataSectionLocalname", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetOutputDoctypePublic(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetOutputDoctypePublic", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetOutputDoctypeSystem(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetOutputDoctypeSystem", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetOutputEscapeUriAttributes(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetOutputEscapeUriAttributes", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetOutputIncludeContentType(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetOutputIncludeContentType", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetOutputIndent(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetOutputIndent", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetOutputIndentTabs(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetOutputIndentTabs", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetOutputIndentUntyped(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetOutputIndentUntyped", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetOutputMediaType(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetOutputMediaType", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetOutputNormalizationForm(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetOutputNormalizationForm", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetOutputOmitXmlDeclaration(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetOutputOmitXmlDeclaration", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetOutputStandalone(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetOutputStandalone", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetOutputUndeclarePrefixes(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetOutputUndeclarePrefixes", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetOutputVersion(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetOutputVersion", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetOutputIncludeDefaultAttributes(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetOutputIncludeDefaultAttributes", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverSetOutputMethod(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetOutputMethod", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetOutputByteOrderMark(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetOutputByteOrderMark", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetOutputCdataSectionNamespaceUri(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetOutputCdataSectionNamespaceUri", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetOutputCdataSectionLocalname(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetOutputCdataSectionLocalname", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetOutputDoctypePublic(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetOutputDoctypePublic", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetOutputDoctypeSystem(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetOutputDoctypeSystem", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetOutputEscapeUriAttributes(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetOutputEscapeUriAttributes", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetOutputIncludeContentType(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetOutputIncludeContentType", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetOutputIndent(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetOutputIndent", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetOutputIndentTabs(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetOutputIndentTabs", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetOutputIndentUntyped(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetOutputIndentUntyped", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetOutputMediaType(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetOutputMediaType", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetOutputNormalizationForm(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetOutputNormalizationForm", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetOutputOmitXmlDeclaration(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetOutputOmitXmlDeclaration", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetOutputStandalone(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetOutputStandalone", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetOutputUndeclarePrefixes(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetOutputUndeclarePrefixes", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetOutputVersion(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetOutputVersion", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.appserverSetOutputIncludeDefaultAttributes(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetOutputIncludeDefaultAttributes", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.databaseAddForeignDatabase(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:foreign-cluster-id as xs:unsignedLong}, ${4:foreign-database-id as xs:unsignedLong})", "trigger":"admin.databaseAddForeignDatabase", "description":"(config as element(configuration), database-id as xs:unsignedLong, foreign-cluster-id as xs:unsignedLong, foreign-database-id as xs:unsignedLong)"}, {"content":"admin.databaseDeleteForeignDatabase(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:foreign-cluster-id as xs:unsignedLong}, ${4:foreign-database-id as xs:unsignedLong})", "trigger":"admin.databaseDeleteForeignDatabase", "description":"(config as element(configuration), database-id as xs:unsignedLong, foreign-cluster-id as xs:unsignedLong, foreign-database-id as xs:unsignedLong)"}, {"content":"admin.databasePathNamespace(${1:prefix as String}, ${2:namespace-uri as String})", "trigger":"admin.databasePathNamespace", "description":"(prefix as String, namespace-uri as String)"}, {"content":"admin.databaseGetPathNamespaces(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetPathNamespaces", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseInUsePathNamespacePrefixes(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseInUsePathNamespacePrefixes", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseAddPathNamespace(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:path-namespaces as element(db:path-namespace)*})", "trigger":"admin.databaseAddPathNamespace", "description":"(config as element(configuration), database-id as xs:unsignedLong, path-namespaces as element(db:path-namespace)*)"}, {"content":"admin.databaseDeletePathNamespace(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:path-namespaces as element(db:path-namespace)*})", "trigger":"admin.databaseDeletePathNamespace", "description":"(config as element(configuration), database-id as xs:unsignedLong, path-namespaces as element(db:path-namespace)*)"}, {"content":"admin.databaseRangePathIndex(${1:database-id as xs:unsignedLong}, ${2:scalar-type as String}, ${3:pathexpr as String}, ${4:collation as xs:string?}, ${5:range-value-positions as Boolean}, ${6:invalid-values as String})", "trigger":"admin.databaseRangePathIndex", "description":"(database-id as xs:unsignedLong, scalar-type as String, pathexpr as String, collation as xs:string?, range-value-positions as Boolean, invalid-values as String)"}, {"content":"admin.databaseGetRangePathIndexes(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetRangePathIndexes", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseAddRangePathIndex(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:range-indexes as element(db:range-path-index)*})", "trigger":"admin.databaseAddRangePathIndex", "description":"(config as element(configuration), database-id as xs:unsignedLong, range-indexes as element(db:range-path-index)*)"}, {"content":"admin.databaseDeleteRangePathIndex(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:range-indexes as element(db:range-path-index)*})", "trigger":"admin.databaseDeleteRangePathIndex", "description":"(config as element(configuration), database-id as xs:unsignedLong, range-indexes as element(db:range-path-index)*)"}, {"content":"admin.databaseGeospatialPathIndex(${1:pathexpr as String}, ${2:coordinate-system as String}, ${3:range-value-positions as Boolean}, ${4:point-format as String}, ${5:invalid-values as String})", "trigger":"admin.databaseGeospatialPathIndex", "description":"(pathexpr as String, coordinate-system as String, range-value-positions as Boolean, point-format as String, invalid-values as String)"}, {"content":"admin.databaseGetGeospatialPathIndexes(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetGeospatialPathIndexes", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseAddGeospatialPathIndex(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:geospatial-path-indexes as element(db:geospatial-path-index)*})", "trigger":"admin.databaseAddGeospatialPathIndex", "description":"(config as element(configuration), database-id as xs:unsignedLong, geospatial-path-indexes as element(db:geospatial-path-index)*)"}, {"content":"admin.databaseDeleteGeospatialPathIndex(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:geospatial-path-indexes as element(db:geospatial-path-index)*})", "trigger":"admin.databaseDeleteGeospatialPathIndex", "description":"(config as element(configuration), database-id as xs:unsignedLong, geospatial-path-indexes as element(db:geospatial-path-index)*)"}, {"content":"admin.groupGetOdbcserverIds(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetOdbcserverIds", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.odbcServerCreate(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:appserver-name as String}, ${4:root as String}, ${5:port as xs:unsignedLong}, ${6:modules-id as item()}, ${7:database-id as xs:unsignedLong})", "trigger":"admin.odbcServerCreate", "description":"(config as element(configuration), group-id as xs:unsignedLong, appserver-name as String, root as String, port as xs:unsignedLong, modules-id as item(), database-id as xs:unsignedLong)"}, {"content":"admin.clusterGetSslFipsEnabled(${1:config as element(configuration)})", "trigger":"admin.clusterGetSslFipsEnabled", "description":"(config as element(configuration))"}, {"content":"admin.clusterSetSslFipsEnabled(${1:config as element(configuration)}, ${2:flag as Boolean})", "trigger":"admin.clusterSetSslFipsEnabled", "description":"(config as element(configuration), flag as Boolean)"}, {"content":"admin.databaseValidatePathExpression(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:pathexpr as String}, ${4:ignore-ns as Boolean})", "trigger":"admin.databaseValidatePathExpression", "description":"(config as element(configuration), database-id as xs:unsignedLong, pathexpr as String, ignore-ns as Boolean)"}, {"content":"admin.databaseValidatePathNamespaces(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:pathexpr as String})", "trigger":"admin.databaseValidatePathNamespaces", "description":"(config as element(configuration), database-id as xs:unsignedLong, pathexpr as String)"}, {"content":"admin.groupGetBackgroundIoLimit(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetBackgroundIoLimit", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupSetBackgroundIoLimit(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:max-megabytes-per-second as xs:unsignedInt})", "trigger":"admin.groupSetBackgroundIoLimit", "description":"(config as element(configuration), group-id as xs:unsignedLong, max-megabytes-per-second as xs:unsignedInt)"}, {"content":"admin.groupGetS3Domain(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetS3Domain", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupSetS3Domain(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:domain as String})", "trigger":"admin.groupSetS3Domain", "description":"(config as element(configuration), group-id as xs:unsignedLong, domain as String)"}, {"content":"admin.groupGetS3Protocol(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetS3Protocol", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupSetS3Protocol(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:protocol as String})", "trigger":"admin.groupSetS3Protocol", "description":"(config as element(configuration), group-id as xs:unsignedLong, protocol as String)"}, {"content":"admin.groupGetS3ServerSideEncryption(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetS3ServerSideEncryption", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupSetS3ServerSideEncryption(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:protocol as String})", "trigger":"admin.groupSetS3ServerSideEncryption", "description":"(config as element(configuration), group-id as xs:unsignedLong, protocol as String)"}, {"content":"admin.groupGetSecurityDatabase(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetSecurityDatabase", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupSetSecurityDatabase(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedLong})", "trigger":"admin.groupSetSecurityDatabase", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedLong)"}, {"content":"admin.appserverGetRewriteResolvesGlobally(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetRewriteResolvesGlobally", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverSetRewriteResolvesGlobally(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.appserverSetRewriteResolvesGlobally", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseFieldPath(${1:field-path as String}, ${2:weight as xs:double})", "trigger":"admin.databaseFieldPath", "description":"(field-path as String, weight as xs:double)"}, {"content":"admin.databasePathField(${1:field-name as String}, ${2:field-paths as element(db:field-path)+})", "trigger":"admin.databasePathField", "description":"(field-name as String, field-paths as element(db:field-path)+)"}, {"content":"admin.databaseValidateFieldPaths(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-paths as element(db:field-path)*})", "trigger":"admin.databaseValidateFieldPaths", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-paths as element(db:field-path)*)"}, {"content":"admin.databaseValidatePathFields(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:fields as element(db:field)*})", "trigger":"admin.databaseValidatePathFields", "description":"(config as element(configuration), database-id as xs:unsignedLong, fields as element(db:field)*)"}, {"content":"admin.databaseDeleteFieldPaths(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String}, ${4:field-paths as element(db:field-path)*})", "trigger":"admin.databaseDeleteFieldPaths", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String, field-paths as element(db:field-path)*)"}, {"content":"admin.databaseAddFieldPaths(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String}, ${4:field-paths as element(db:field-path)*})", "trigger":"admin.databaseAddFieldPaths", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String, field-paths as element(db:field-path)*)"}, {"content":"admin.databaseGetFieldPaths(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String})", "trigger":"admin.databaseGetFieldPaths", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String)"}, {"content":"admin.forestRename(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong}, ${3:new-name as String})", "trigger":"admin.forestRename", "description":"(config as element(configuration), forest-id as xs:unsignedLong, new-name as String)"}, {"content":"admin.databaseSetTripleIndex(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetTripleIndex", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetTriplePositions(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetTriplePositions", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetInMemoryTripleIndexSize(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.databaseSetInMemoryTripleIndexSize", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.databaseGetTripleIndex(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetTripleIndex", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetTriplePositions(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetTriplePositions", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetInMemoryTripleIndexSize(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetInMemoryTripleIndexSize", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.groupGetTripleCacheSize(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetTripleCacheSize", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetTripleCachePartitions(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetTripleCachePartitions", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetTripleValueCacheSize(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetTripleValueCacheSize", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetTripleValueCachePartitions(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetTripleValueCachePartitions", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupSetTripleCacheSize(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.groupSetTripleCacheSize", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.groupSetTripleCachePartitions(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.groupSetTripleCachePartitions", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.groupSetTripleValueCacheSize(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.groupSetTripleValueCacheSize", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.groupSetTripleValueCachePartitions(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.groupSetTripleValueCachePartitions", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.groupGetTripleCacheTimeout(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetTripleCacheTimeout", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetTripleValueCacheTimeout(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetTripleValueCacheTimeout", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupSetTripleCacheTimeout(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.groupSetTripleCacheTimeout", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.groupSetTripleValueCacheTimeout(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.groupSetTripleValueCacheTimeout", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.appserverGetUsingNamespaces(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetUsingNamespaces", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetModuleLocations(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetModuleLocations", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverAddUsingNamespace(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:namespaces as element(gr:using-namespace)*})", "trigger":"admin.appserverAddUsingNamespace", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, namespaces as element(gr:using-namespace)*)"}, {"content":"admin.appserverDeleteUsingNamespace(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:namespaces as element(gr:using-namespace)*})", "trigger":"admin.appserverDeleteUsingNamespace", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, namespaces as element(gr:using-namespace)*)"}, {"content":"admin.appserverAddModuleLocation(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:module-locations as element(gr:module-location)*})", "trigger":"admin.appserverAddModuleLocation", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, module-locations as element(gr:module-location)*)"}, {"content":"admin.groupGetUsingNamespaces(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetUsingNamespaces", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetModuleLocations(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetModuleLocations", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.appserverDeleteModuleLocation(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:module-locations as element(gr:module-location)*})", "trigger":"admin.appserverDeleteModuleLocation", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, module-locations as element(gr:module-location)*)"}, {"content":"admin.groupUsingNamespace(${1:namespace-uri as String})", "trigger":"admin.groupUsingNamespace", "description":"(namespace-uri as String)"}, {"content":"admin.groupModuleLocation(${1:namespace-uri as String}, ${2:location as String})", "trigger":"admin.groupModuleLocation", "description":"(namespace-uri as String, location as String)"}, {"content":"admin.groupAddUsingNamespace(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:namespaces as element(gr:using-namespace)*})", "trigger":"admin.groupAddUsingNamespace", "description":"(config as element(configuration), group-id as xs:unsignedLong, namespaces as element(gr:using-namespace)*)"}, {"content":"admin.groupDeleteUsingNamespace(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:namespaces as element(gr:using-namespace)*})", "trigger":"admin.groupDeleteUsingNamespace", "description":"(config as element(configuration), group-id as xs:unsignedLong, namespaces as element(gr:using-namespace)*)"}, {"content":"admin.groupAddModuleLocation(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:module-locations as element(gr:module-location)*})", "trigger":"admin.groupAddModuleLocation", "description":"(config as element(configuration), group-id as xs:unsignedLong, module-locations as element(gr:module-location)*)"}, {"content":"admin.groupDeleteModuleLocation(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:module-locations as element(gr:module-location)*})", "trigger":"admin.groupDeleteModuleLocation", "description":"(config as element(configuration), group-id as xs:unsignedLong, module-locations as element(gr:module-location)*)"}, {"content":"admin.databaseTokenizerOverride(${1:character as String}, ${2:class as String})", "trigger":"admin.databaseTokenizerOverride", "description":"(character as String, class as String)"}, {"content":"admin.databaseGetFieldTokenizerOverrides(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String})", "trigger":"admin.databaseGetFieldTokenizerOverrides", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String)"}, {"content":"admin.databaseAddFieldTokenizerOverride(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String}, ${4:tokenizer-overrides as element(db:tokenizer-override)*})", "trigger":"admin.databaseAddFieldTokenizerOverride", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String, tokenizer-overrides as element(db:tokenizer-override)*)"}, {"content":"admin.databaseDeleteFieldTokenizerOverride(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-name as String}, ${4:tokenizer-overrides as element(db:tokenizer-override)*})", "trigger":"admin.databaseDeleteFieldTokenizerOverride", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-name as String, tokenizer-overrides as element(db:tokenizer-override)*)"}, {"content":"admin.databaseSetRebalancerEnable(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetRebalancerEnable", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseSetRebalancerThrottle(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.databaseSetRebalancerThrottle", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.databaseGetRebalancerEnable(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetRebalancerEnable", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseGetRebalancerThrottle(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetRebalancerThrottle", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseSetAssignmentPolicy(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:policy as element(db:assignment-policy)})", "trigger":"admin.databaseSetAssignmentPolicy", "description":"(config as element(configuration), database-id as xs:unsignedLong, policy as element(db:assignment-policy))"}, {"content":"admin.databaseGetAssignmentPolicy(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetAssignmentPolicy", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.legacyAssignmentPolicy()", "trigger":"admin.legacyAssignmentPolicy", "description":"()"}, {"content":"admin.bucketAssignmentPolicy()", "trigger":"admin.bucketAssignmentPolicy", "description":"()"}, {"content":"admin.statisticalAssignmentPolicy()", "trigger":"admin.statisticalAssignmentPolicy", "description":"()"}, {"content":"admin.databaseIsForestRetired(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:forest-id as xs:unsignedLong})", "trigger":"admin.databaseIsForestRetired", "description":"(config as element(configuration), database-id as xs:unsignedLong, forest-id as xs:unsignedLong)"}, {"content":"admin.databaseIsForestEmployed(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:forest-id as xs:unsignedLong})", "trigger":"admin.databaseIsForestEmployed", "description":"(config as element(configuration), database-id as xs:unsignedLong, forest-id as xs:unsignedLong)"}, {"content":"admin.databaseRetireForest(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:forest-id as xs:unsignedLong})", "trigger":"admin.databaseRetireForest", "description":"(config as element(configuration), database-id as xs:unsignedLong, forest-id as xs:unsignedLong)"}, {"content":"admin.databaseEmployForest(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:forest-id as xs:unsignedLong})", "trigger":"admin.databaseEmployForest", "description":"(config as element(configuration), database-id as xs:unsignedLong, forest-id as xs:unsignedLong)"}, {"content":"admin.databaseReorderForests(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:forest-ids as xs:unsignedLong*})", "trigger":"admin.databaseReorderForests", "description":"(config as element(configuration), database-id as xs:unsignedLong, forest-ids as xs:unsignedLong*)"}, {"content":"admin.forestGetRebalancerEnable(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong})", "trigger":"admin.forestGetRebalancerEnable", "description":"(config as element(configuration), forest-id as xs:unsignedLong)"}, {"content":"admin.forestSetRebalancerEnable(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.forestSetRebalancerEnable", "description":"(config as element(configuration), forest-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseGetRetiredForests(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetRetiredForests", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.rangeAssignmentPolicy(${1:partition-key as cts:reference}, ${2:lower-bound-included as Boolean})", "trigger":"admin.rangeAssignmentPolicy", "description":"(partition-key as cts:reference, lower-bound-included as Boolean)"}, {"content":"admin.databaseGetRangePolicyPartitionKey(${1:range-policy as element(db:assignment-policy)})", "trigger":"admin.databaseGetRangePolicyPartitionKey", "description":"(range-policy as element(db:assignment-policy))"}, {"content":"admin.forestGetRangePolicyLowerBound(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong})", "trigger":"admin.forestGetRangePolicyLowerBound", "description":"(config as element(configuration), forest-id as xs:unsignedLong)"}, {"content":"admin.forestGetRangePolicyUpperBound(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong})", "trigger":"admin.forestGetRangePolicyUpperBound", "description":"(config as element(configuration), forest-id as xs:unsignedLong)"}, {"content":"admin.forestIsRangePolicyRangeSet(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong})", "trigger":"admin.forestIsRangePolicyRangeSet", "description":"(config as element(configuration), forest-id as xs:unsignedLong)"}, {"content":"admin.forestSetRangePolicyRange(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong}, ${3:lower-bound as item()?}, ${4:upper-bound as item()?})", "trigger":"admin.forestSetRangePolicyRange", "description":"(config as element(configuration), forest-id as xs:unsignedLong, lower-bound as item()?, upper-bound as item()?)"}, {"content":"admin.appserverGetInternalSecurity(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetInternalSecurity", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverGetExternalSecurity(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetExternalSecurity", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverSetInternalSecurity(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.appserverSetInternalSecurity", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.appserverSetExternalSecurity(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String}, ${4:value2 as Boolean}, ${5:value3 as String})", "trigger":"admin.appserverSetExternalSecurity", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String, value2 as Boolean, value3 as String)"}, {"content":"admin.hostGetZone(${1:config as element(configuration)}, ${2:host-id as xs:unsignedLong})", "trigger":"admin.hostGetZone", "description":"(config as element(configuration), host-id as xs:unsignedLong)"}, {"content":"admin.hostSetZone(${1:config as element(configuration)}, ${2:host-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.hostSetZone", "description":"(config as element(configuration), host-id as xs:unsignedLong, value as String)"}, {"content":"admin.groupSetMeteringEnabled(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.groupSetMeteringEnabled", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.groupSetMetersDatabase(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedLong})", "trigger":"admin.groupSetMetersDatabase", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedLong)"}, {"content":"admin.groupSetPerformanceMeteringEnabled(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.groupSetPerformanceMeteringEnabled", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.groupSetPerformanceMeteringPeriod(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.groupSetPerformanceMeteringPeriod", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.groupSetPerformanceMeteringRetainRaw(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.groupSetPerformanceMeteringRetainRaw", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.groupSetPerformanceMeteringRetainHourly(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.groupSetPerformanceMeteringRetainHourly", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.groupSetPerformanceMeteringRetainDaily(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.groupSetPerformanceMeteringRetainDaily", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.databaseDetachSubDatabase(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:subdatabase-id as xs:unsignedLong})", "trigger":"admin.databaseDetachSubDatabase", "description":"(config as element(configuration), database-id as xs:unsignedLong, subdatabase-id as xs:unsignedLong)"}, {"content":"admin.databaseDetachSubDatabase(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:subdatabase-id as xs:unsignedLong}, ${4:foreign-cluster-id as xs:unsignedLong})", "trigger":"admin.databaseDetachSubDatabase", "description":"(config as element(configuration), database-id as xs:unsignedLong, subdatabase-id as xs:unsignedLong, foreign-cluster-id as xs:unsignedLong)"}, {"content":"admin.databaseAttachSubDatabase(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:subdatabase-id as xs:unsignedLong})", "trigger":"admin.databaseAttachSubDatabase", "description":"(config as element(configuration), database-id as xs:unsignedLong, subdatabase-id as xs:unsignedLong)"}, {"content":"admin.databaseAttachSubDatabase(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:subdatabase-id as xs:unsignedLong}, ${4:foreign-cluster-id as xs:unsignedLong})", "trigger":"admin.databaseAttachSubDatabase", "description":"(config as element(configuration), database-id as xs:unsignedLong, subdatabase-id as xs:unsignedLong, foreign-cluster-id as xs:unsignedLong)"}, {"content":"admin.databaseSubDatabases(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseSubDatabases", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseSuperDatabases(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseSuperDatabases", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.checkRangePolicyConfig(${1:database as node()}, ${2:assignments as node()*})", "trigger":"admin.checkRangePolicyConfig", "description":"(database as node(), assignments as node()*)"}, {"content":"admin.databaseValidateFieldPath(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:field-path as element(db:field-path)})", "trigger":"admin.databaseValidateFieldPath", "description":"(config as element(configuration), database-id as xs:unsignedLong, field-path as element(db:field-path))"}, {"content":"admin.forestGetAvailability(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong})", "trigger":"admin.forestGetAvailability", "description":"(config as element(configuration), forest-id as xs:unsignedLong)"}, {"content":"admin.forestSetAvailability(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.forestSetAvailability", "description":"(config as element(configuration), forest-id as xs:unsignedLong, value as String)"}, {"content":"admin.groupGetMeteringEnabled(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetMeteringEnabled", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetMetersDatabase(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetMetersDatabase", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetPerformanceMeteringEnabled(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetPerformanceMeteringEnabled", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetPerformanceMeteringPeriod(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetPerformanceMeteringPeriod", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetPerformanceMeteringRetainRaw(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetPerformanceMeteringRetainRaw", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetPerformanceMeteringRetainHourly(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetPerformanceMeteringRetainHourly", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.groupGetPerformanceMeteringRetainDaily(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.groupGetPerformanceMeteringRetainDaily", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.databaseSetRetainUntilBackup(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:value as Boolean})", "trigger":"admin.databaseSetRetainUntilBackup", "description":"(config as element(configuration), database-id as xs:unsignedLong, value as Boolean)"}, {"content":"admin.databaseGetRetainUntilBackup(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetRetainUntilBackup", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databasePathReference(${1:scalar-type as String}, ${2:pathexpr as String}, ${3:collation as xs:string?})", "trigger":"admin.databasePathReference", "description":"(scalar-type as String, pathexpr as String, collation as xs:string?)"}, {"content":"admin.databaseFieldReference(${1:scalar-type as String}, ${2:fieldname as String}, ${3:collation as xs:string?})", "trigger":"admin.databaseFieldReference", "description":"(scalar-type as String, fieldname as String, collation as xs:string?)"}, {"content":"admin.databaseElementAttributeReference(${1:scalar-type as String}, ${2:parent-namespace as xs:string?}, ${3:parent-localname as String}, ${4:namespace as xs:string?}, ${5:localname as String}, ${6:collation as xs:string?})", "trigger":"admin.databaseElementAttributeReference", "description":"(scalar-type as String, parent-namespace as xs:string?, parent-localname as String, namespace as xs:string?, localname as String, collation as xs:string?)"}, {"content":"admin.databaseElementReference(${1:scalar-type as String}, ${2:namespace as xs:string?}, ${3:localname as String}, ${4:collation as xs:string?})", "trigger":"admin.databaseElementReference", "description":"(scalar-type as String, namespace as xs:string?, localname as String, collation as xs:string?)"}, {"content":"admin.appserverGetDefaultInferenceSize(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetDefaultInferenceSize", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverSetDefaultInferenceSize(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.appserverSetDefaultInferenceSize", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.taskserverGetDefaultInferenceSize(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.taskserverGetDefaultInferenceSize", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.taskserverSetDefaultInferenceSize(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.taskserverSetDefaultInferenceSize", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.appserverGetMaxInferenceSize(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetMaxInferenceSize", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverSetMaxInferenceSize(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.appserverSetMaxInferenceSize", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.taskserverGetMaxInferenceSize(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong})", "trigger":"admin.taskserverGetMaxInferenceSize", "description":"(config as element(configuration), group-id as xs:unsignedLong)"}, {"content":"admin.taskserverSetMaxInferenceSize(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as xs:unsignedInt})", "trigger":"admin.taskserverSetMaxInferenceSize", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as xs:unsignedInt)"}, {"content":"admin.databaseRuleset(${1:location as String})", "trigger":"admin.databaseRuleset", "description":"(location as String)"}, {"content":"admin.databaseAddDefaultRuleset(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:rulesets as element(db:default-ruleset)*})", "trigger":"admin.databaseAddDefaultRuleset", "description":"(config as element(configuration), database-id as xs:unsignedLong, rulesets as element(db:default-ruleset)*)"}, {"content":"admin.databaseGetDefaultRulesets(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetDefaultRulesets", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseDeleteDefaultRuleset(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:rulesets as element(db:default-ruleset)*})", "trigger":"admin.databaseDeleteDefaultRuleset", "description":"(config as element(configuration), database-id as xs:unsignedLong, rulesets as element(db:default-ruleset)*)"}, {"content":"admin.databaseForeignReplicaGetQueueSize(${1:foreign-replica as element(db:foreign-replica)})", "trigger":"admin.databaseForeignReplicaGetQueueSize", "description":"(foreign-replica as element(db:foreign-replica))"}, {"content":"admin.databaseForeignReplicaSetQueueSize(${1:foreign-replica as element(db:foreign-replica)}, ${2:value as xs:unsignedInt})", "trigger":"admin.databaseForeignReplicaSetQueueSize", "description":"(foreign-replica as element(db:foreign-replica), value as xs:unsignedInt)"}, {"content":"admin.databaseBackupGetEnabled(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:backup-id as xs:unsignedLong})", "trigger":"admin.databaseBackupGetEnabled", "description":"(config as element(configuration), database-id as xs:unsignedLong, backup-id as xs:unsignedLong)"}, {"content":"admin.databaseBackupSetEnabled(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:backup-id as xs:unsignedLong}, ${4:enabled as Boolean})", "trigger":"admin.databaseBackupSetEnabled", "description":"(config as element(configuration), database-id as xs:unsignedLong, backup-id as xs:unsignedLong, enabled as Boolean)"}, {"content":"admin.databaseDeleteBackupById(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:backup-id as xs:unsignedLong*})", "trigger":"admin.databaseDeleteBackupById", "description":"(config as element(configuration), database-id as xs:unsignedLong, backup-id as xs:unsignedLong*)"}, {"content":"admin.forestBackupGetEnabled(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong}, ${3:backup-id as xs:unsignedLong})", "trigger":"admin.forestBackupGetEnabled", "description":"(config as element(configuration), forest-id as xs:unsignedLong, backup-id as xs:unsignedLong)"}, {"content":"admin.forestBackupSetEnabled(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong}, ${3:backup-id as xs:unsignedLong}, ${4:enabled as Boolean})", "trigger":"admin.forestBackupSetEnabled", "description":"(config as element(configuration), forest-id as xs:unsignedLong, backup-id as xs:unsignedLong, enabled as Boolean)"}, {"content":"admin.forestDeleteBackupById(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong}, ${3:backup-id as xs:unsignedLong*})", "trigger":"admin.forestDeleteBackupById", "description":"(config as element(configuration), forest-id as xs:unsignedLong, backup-id as xs:unsignedLong*)"}, {"content":"admin.groupGetScheduledTask(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:task-id as xs:unsignedLong})", "trigger":"admin.groupGetScheduledTask", "description":"(config as element(configuration), group-id as xs:unsignedLong, task-id as xs:unsignedLong)"}, {"content":"admin.groupScheduledTaskSetEnabled(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:task-id as xs:unsignedLong}, ${4:enabled as Boolean})", "trigger":"admin.groupScheduledTaskSetEnabled", "description":"(config as element(configuration), group-id as xs:unsignedLong, task-id as xs:unsignedLong, enabled as Boolean)"}, {"content":"admin.groupScheduledTaskGetEnabled(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:task-id as xs:unsignedLong})", "trigger":"admin.groupScheduledTaskGetEnabled", "description":"(config as element(configuration), group-id as xs:unsignedLong, task-id as xs:unsignedLong)"}, {"content":"admin.groupDeleteScheduledTaskById(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:delete-ids as xs:unsignedLong*})", "trigger":"admin.groupDeleteScheduledTaskById", "description":"(config as element(configuration), group-id as xs:unsignedLong, delete-ids as xs:unsignedLong*)"}, {"content":"admin.appserverGetDefaultErrorFormat(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetDefaultErrorFormat", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverSetDefaultErrorFormat(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetDefaultErrorFormat", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.clusterGetEffectiveVersion(${1:config as element(configuration)})", "trigger":"admin.clusterGetEffectiveVersion", "description":"(config as element(configuration))"}, {"content":"admin.commitUpgrade(${1:config as element(configuration)})", "trigger":"admin.commitUpgrade", "description":"(config as element(configuration))"}, {"content":"admin.canCommitUpgrade()", "trigger":"admin.canCommitUpgrade", "description":"()"}, {"content":"admin.hostGetMode(${1:config as element(configuration)}, ${2:host-id as xs:unsignedLong})", "trigger":"admin.hostGetMode", "description":"(config as element(configuration), host-id as xs:unsignedLong)"}, {"content":"admin.hostGetModeDescription(${1:config as element(configuration)}, ${2:host-id as xs:unsignedLong})", "trigger":"admin.hostGetModeDescription", "description":"(config as element(configuration), host-id as xs:unsignedLong)"}, {"content":"admin.hostSetMode(${1:config as element(configuration)}, ${2:host-id as xs:unsignedLong}, ${3:mode as String}, ${4:description as xs:string?})", "trigger":"admin.hostSetMode", "description":"(config as element(configuration), host-id as xs:unsignedLong, mode as String, description as xs:string?)"}, {"content":"admin.queryAssignmentPolicy()", "trigger":"admin.queryAssignmentPolicy", "description":"()"}, {"content":"admin.queryAssignmentPolicy(${1:default-partition as xs:unsignedInt})", "trigger":"admin.queryAssignmentPolicy", "description":"(default-partition as xs:unsignedInt)"}, {"content":"admin.forestGetPartitionNumber(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong})", "trigger":"admin.forestGetPartitionNumber", "description":"(config as element(configuration), forest-id as xs:unsignedLong)"}, {"content":"admin.forestSetPartitionNumber(${1:config as element(configuration)}, ${2:forest-id as xs:unsignedLong}, ${3:value as xs:unsignedInt?})", "trigger":"admin.forestSetPartitionNumber", "description":"(config as element(configuration), forest-id as xs:unsignedLong, value as xs:unsignedInt?)"}, {"content":"admin.appserverGetCoordinateSystem(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong})", "trigger":"admin.appserverGetCoordinateSystem", "description":"(config as element(configuration), appserver-id as xs:unsignedLong)"}, {"content":"admin.appserverSetCoordinateSystem(${1:config as element(configuration)}, ${2:appserver-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.appserverSetCoordinateSystem", "description":"(config as element(configuration), appserver-id as xs:unsignedLong, value as String)"}, {"content":"admin.clusterSetKeystoreHostName(${1:config as element(configuration)}, ${2:host-name as String})", "trigger":"admin.clusterSetKeystoreHostName", "description":"(config as element(configuration), host-name as String)"}, {"content":"admin.clusterGetKeystoreHostName(${1:config as element(configuration)})", "trigger":"admin.clusterGetKeystoreHostName", "description":"(config as element(configuration))"}, {"content":"admin.clusterSetKeystorePort(${1:config as element(configuration)}, ${2:port as xs:unsignedLong})", "trigger":"admin.clusterSetKeystorePort", "description":"(config as element(configuration), port as xs:unsignedLong)"}, {"content":"admin.clusterGetKeystorePort(${1:config as element(configuration)})", "trigger":"admin.clusterGetKeystorePort", "description":"(config as element(configuration))"}, {"content":"admin.clusterSetDataEncryptionKeyId(${1:config as element(configuration)}, ${2:data-encryption-key-id as String})", "trigger":"admin.clusterSetDataEncryptionKeyId", "description":"(config as element(configuration), data-encryption-key-id as String)"}, {"content":"admin.clusterGetDataEncryptionKeyId(${1:config as element(configuration)})", "trigger":"admin.clusterGetDataEncryptionKeyId", "description":"(config as element(configuration))"}, {"content":"admin.clusterSetConfigEncryptionKeyId(${1:config as element(configuration)}, ${2:config-encryption-key-id as String})", "trigger":"admin.clusterSetConfigEncryptionKeyId", "description":"(config as element(configuration), config-encryption-key-id as String)"}, {"content":"admin.clusterGetConfigEncryptionKeyId(${1:config as element(configuration)})", "trigger":"admin.clusterGetConfigEncryptionKeyId", "description":"(config as element(configuration))"}, {"content":"admin.clusterSetLogsEncryptionKeyId(${1:logs as element(configuration)}, ${2:logs-encryption-key-id as String})", "trigger":"admin.clusterSetLogsEncryptionKeyId", "description":"(logs as element(configuration), logs-encryption-key-id as String)"}, {"content":"admin.clusterGetLogsEncryptionKeyId(${1:config as element(configuration)})", "trigger":"admin.clusterGetLogsEncryptionKeyId", "description":"(config as element(configuration))"}, {"content":"admin.clusterSetDataEncryption(${1:config as element(configuration)}, ${2:data-encryption as String})", "trigger":"admin.clusterSetDataEncryption", "description":"(config as element(configuration), data-encryption as String)"}, {"content":"admin.clusterGetDataEncryption(${1:config as element(configuration)})", "trigger":"admin.clusterGetDataEncryption", "description":"(config as element(configuration))"}, {"content":"admin.clusterSetConfigEncryption(${1:config as element(configuration)}, ${2:config-encryption as String})", "trigger":"admin.clusterSetConfigEncryption", "description":"(config as element(configuration), config-encryption as String)"}, {"content":"admin.clusterGetConfigEncryption(${1:config as element(configuration)})", "trigger":"admin.clusterGetConfigEncryption", "description":"(config as element(configuration))"}, {"content":"admin.clusterSetLogsEncryption(${1:config as element(configuration)}, ${2:logs-encryption as String})", "trigger":"admin.clusterSetLogsEncryption", "description":"(config as element(configuration), logs-encryption as String)"}, {"content":"admin.clusterGetLogsEncryption(${1:config as element(configuration)})", "trigger":"admin.clusterGetLogsEncryption", "description":"(config as element(configuration))"}, {"content":"admin.databaseSetEncryptionKeyId(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:encryption-key-id as String})", "trigger":"admin.databaseSetEncryptionKeyId", "description":"(config as element(configuration), database-id as xs:unsignedLong, encryption-key-id as String)"}, {"content":"admin.databaseGetEncryptionKeyId(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetEncryptionKeyId", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.databaseSetDataEncryption(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong}, ${3:data-encryption as String})", "trigger":"admin.databaseSetDataEncryption", "description":"(config as element(configuration), database-id as xs:unsignedLong, data-encryption as String)"}, {"content":"admin.databaseGetDataEncryption(${1:config as element(configuration)}, ${2:database-id as xs:unsignedLong})", "trigger":"admin.databaseGetDataEncryption", "description":"(config as element(configuration), database-id as xs:unsignedLong)"}, {"content":"admin.clusterSetKeystore(${1:config as element(configuration)}, ${2:host-name as xs:string?}, ${3:port as xs:unsignedLong?}, ${4:data-encryption as xs:string?}, ${5:data-encryption-key-id as xs:string?}, ${6:config-encryption as xs:string?}, ${7:config-encryption-key-id as xs:string?}, ${8:logs-encryption as xs:string?}, ${9:logs-encryption-key-id as xs:string?}, ${10:client-cert as xs:string?}, ${11:server-cert as xs:string?})", "trigger":"admin.clusterSetKeystore", "description":"(config as element(configuration), host-name as xs:string?, port as xs:unsignedLong?, data-encryption as xs:string?, data-encryption-key-id as xs:string?, config-encryption as xs:string?, config-encryption-key-id as xs:string?, logs-encryption as xs:string?, logs-encryption-key-id as xs:string?, client-cert as xs:string?, server-cert as xs:string?)"}, {"content":"admin.groupSetTelemetryLogLevel(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.groupSetTelemetryLogLevel", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as String)"}, {"content":"admin.groupSetTelemetryConfig(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.groupSetTelemetryConfig", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as String)"}, {"content":"admin.groupSetTelemetryMetering(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.groupSetTelemetryMetering", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as String)"}, {"content":"admin.groupSetTelemetrySessionUri(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.groupSetTelemetrySessionUri", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as String)"}, {"content":"admin.groupSetOpsdirectorLogLevel(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.groupSetOpsdirectorLogLevel", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as String)"}, {"content":"admin.groupSetOpsdirectorConfig(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.groupSetOpsdirectorConfig", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as String)"}, {"content":"admin.groupSetOpsdirectorMetering(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.groupSetOpsdirectorMetering", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as String)"}, {"content":"admin.groupSetOpsdirectorSessionUri(${1:config as element(configuration)}, ${2:group-id as xs:unsignedLong}, ${3:value as String})", "trigger":"admin.groupSetOpsdirectorSessionUri", "description":"(config as element(configuration), group-id as xs:unsignedLong, value as String)"}, {"content":"xdmp.forestBackup(${1:forestID as xs:unsignedLong}, ${2:pathname as String})", "trigger":"xdmp.forestBackup", "description":"(forestID as xs:unsignedLong, pathname as String)"}, {"content":"xdmp.forestRestore(${1:forestID as xs:unsignedLong}, ${2:pathname as String})", "trigger":"xdmp.forestRestore", "description":"(forestID as xs:unsignedLong, pathname as String)"}, {"content":"xdmp.forestClear(${1:forestIDs as xs:unsignedLong*})", "trigger":"xdmp.forestClear", "description":"(forestIDs as xs:unsignedLong*)"}, {"content":"xdmp.forestRestart(${1:forestIDs as xs:unsignedLong*})", "trigger":"xdmp.forestRestart", "description":"(forestIDs as xs:unsignedLong*)"}, {"content":"xdmp.forestRollback(${1:forestIDs as xs:unsignedLong*}, ${2:timestamp as xs:unsignedLong})", "trigger":"xdmp.forestRollback", "description":"(forestIDs as xs:unsignedLong*, timestamp as xs:unsignedLong)"}, {"content":"xdmp.databaseBackupValidate(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String})", "trigger":"xdmp.databaseBackupValidate", "description":"(forestIDs as xs:unsignedLong*, pathname as String)"}, {"content":"xdmp.databaseBackupValidate(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String}, ${3:include-replicas as xs:boolean?})", "trigger":"xdmp.databaseBackupValidate", "description":"(forestIDs as xs:unsignedLong*, pathname as String, include-replicas as xs:boolean?)"}, {"content":"xdmp.databaseBackupValidate(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String}, ${3:include-replicas as xs:boolean?}, ${4:journal-archiving as xs:boolean?})", "trigger":"xdmp.databaseBackupValidate", "description":"(forestIDs as xs:unsignedLong*, pathname as String, include-replicas as xs:boolean?, journal-archiving as xs:boolean?)"}, {"content":"xdmp.databaseBackupValidate(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String}, ${3:include-replicas as xs:boolean?}, ${4:journal-archiving as xs:boolean?}, ${5:journal-archive-path as xs:string?})", "trigger":"xdmp.databaseBackupValidate", "description":"(forestIDs as xs:unsignedLong*, pathname as String, include-replicas as xs:boolean?, journal-archiving as xs:boolean?, journal-archive-path as xs:string?)"}, {"content":"xdmp.databaseBackupValidate(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String}, ${3:include-replicas as xs:boolean?}, ${4:journal-archiving as xs:boolean?}, ${5:journal-archive-path as xs:string?}, ${6:lag-limit as xs:unsignedLong?})", "trigger":"xdmp.databaseBackupValidate", "description":"(forestIDs as xs:unsignedLong*, pathname as String, include-replicas as xs:boolean?, journal-archiving as xs:boolean?, journal-archive-path as xs:string?, lag-limit as xs:unsignedLong?)"}, {"content":"xdmp.databaseIncrementalBackupValidate(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String})", "trigger":"xdmp.databaseIncrementalBackupValidate", "description":"(forestIDs as xs:unsignedLong*, pathname as String)"}, {"content":"xdmp.databaseIncrementalBackupValidate(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String}, ${3:include-replicas as xs:boolean?})", "trigger":"xdmp.databaseIncrementalBackupValidate", "description":"(forestIDs as xs:unsignedLong*, pathname as String, include-replicas as xs:boolean?)"}, {"content":"xdmp.databaseIncrementalBackupValidate(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String}, ${3:include-replicas as xs:boolean?}, ${4:incremental-dir as xs:string?})", "trigger":"xdmp.databaseIncrementalBackupValidate", "description":"(forestIDs as xs:unsignedLong*, pathname as String, include-replicas as xs:boolean?, incremental-dir as xs:string?)"}, {"content":"xdmp.databaseIncrementalBackupValidate(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String}, ${3:include-replicas as xs:boolean?}, ${4:incremental-dir as xs:string?}, ${5:journal-archiving as xs:boolean?})", "trigger":"xdmp.databaseIncrementalBackupValidate", "description":"(forestIDs as xs:unsignedLong*, pathname as String, include-replicas as xs:boolean?, incremental-dir as xs:string?, journal-archiving as xs:boolean?)"}, {"content":"xdmp.databaseIncrementalBackupValidate(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String}, ${3:include-replicas as xs:boolean?}, ${4:incremental-dir as xs:string?}, ${5:journal-archiving as xs:boolean?}, ${6:journal-archive-path as xs:string?})", "trigger":"xdmp.databaseIncrementalBackupValidate", "description":"(forestIDs as xs:unsignedLong*, pathname as String, include-replicas as xs:boolean?, incremental-dir as xs:string?, journal-archiving as xs:boolean?, journal-archive-path as xs:string?)"}, {"content":"xdmp.databaseIncrementalBackupValidate(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String}, ${3:include-replicas as xs:boolean?}, ${4:incremental-dir as xs:string?}, ${5:journal-archiving as xs:boolean?}, ${6:journal-archive-path as xs:string?}, ${7:lag-limit as xs:unsignedLong?})", "trigger":"xdmp.databaseIncrementalBackupValidate", "description":"(forestIDs as xs:unsignedLong*, pathname as String, include-replicas as xs:boolean?, incremental-dir as xs:string?, journal-archiving as xs:boolean?, journal-archive-path as xs:string?, lag-limit as xs:unsignedLong?)"}, {"content":"xdmp.databaseBackup(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String})", "trigger":"xdmp.databaseBackup", "description":"(forestIDs as xs:unsignedLong*, pathname as String)"}, {"content":"xdmp.databaseBackup(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String}, ${3:journal-archiving as xs:boolean?})", "trigger":"xdmp.databaseBackup", "description":"(forestIDs as xs:unsignedLong*, pathname as String, journal-archiving as xs:boolean?)"}, {"content":"xdmp.databaseBackup(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String}, ${3:journal-archiving as xs:boolean?}, ${4:journal-archive-path as xs:string?})", "trigger":"xdmp.databaseBackup", "description":"(forestIDs as xs:unsignedLong*, pathname as String, journal-archiving as xs:boolean?, journal-archive-path as xs:string?)"}, {"content":"xdmp.databaseBackup(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String}, ${3:journal-archiving as xs:boolean?}, ${4:journal-archive-path as xs:string?}, ${5:lag-limit as xs:unsignedLong?})", "trigger":"xdmp.databaseBackup", "description":"(forestIDs as xs:unsignedLong*, pathname as String, journal-archiving as xs:boolean?, journal-archive-path as xs:string?, lag-limit as xs:unsignedLong?)"}, {"content":"xdmp.databaseIncrementalBackup(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String})", "trigger":"xdmp.databaseIncrementalBackup", "description":"(forestIDs as xs:unsignedLong*, pathname as String)"}, {"content":"xdmp.databaseIncrementalBackup(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String}, ${3:incremental-dir as xs:string?})", "trigger":"xdmp.databaseIncrementalBackup", "description":"(forestIDs as xs:unsignedLong*, pathname as String, incremental-dir as xs:string?)"}, {"content":"xdmp.databaseIncrementalBackup(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String}, ${3:incremental-dir as xs:string?}, ${4:journal-archiving as xs:boolean?})", "trigger":"xdmp.databaseIncrementalBackup", "description":"(forestIDs as xs:unsignedLong*, pathname as String, incremental-dir as xs:string?, journal-archiving as xs:boolean?)"}, {"content":"xdmp.databaseIncrementalBackup(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String}, ${3:incremental-dir as xs:string?}, ${4:journal-archiving as xs:boolean?}, ${5:journal-archive-path as xs:string?})", "trigger":"xdmp.databaseIncrementalBackup", "description":"(forestIDs as xs:unsignedLong*, pathname as String, incremental-dir as xs:string?, journal-archiving as xs:boolean?, journal-archive-path as xs:string?)"}, {"content":"xdmp.databaseIncrementalBackup(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String}, ${3:incremental-dir as xs:string?}, ${4:journal-archiving as xs:boolean?}, ${5:journal-archive-path as xs:string?}, ${6:lag-limit as xs:unsignedLong?})", "trigger":"xdmp.databaseIncrementalBackup", "description":"(forestIDs as xs:unsignedLong*, pathname as String, incremental-dir as xs:string?, journal-archiving as xs:boolean?, journal-archive-path as xs:string?, lag-limit as xs:unsignedLong?)"}, {"content":"xdmp.startJournalArchiving(${1:forestIDs as xs:unsignedLong*}, ${2:journal-archive-path as String})", "trigger":"xdmp.startJournalArchiving", "description":"(forestIDs as xs:unsignedLong*, journal-archive-path as String)"}, {"content":"xdmp.startJournalArchiving(${1:forestIDs as xs:unsignedLong*}, ${2:journal-archive-path as String}, ${3:lag-limit as xs:unsignedLong?})", "trigger":"xdmp.startJournalArchiving", "description":"(forestIDs as xs:unsignedLong*, journal-archive-path as String, lag-limit as xs:unsignedLong?)"}, {"content":"xdmp.stopJournalArchiving(${1:forestIDs as xs:unsignedLong*})", "trigger":"xdmp.stopJournalArchiving", "description":"(forestIDs as xs:unsignedLong*)"}, {"content":"xdmp.databaseBackupStatus(${1:jobid as xs:unsignedLong*})", "trigger":"xdmp.databaseBackupStatus", "description":"(jobid as xs:unsignedLong*)"}, {"content":"xdmp.databaseBackupStatus(${1:jobid as xs:unsignedLong*}, ${2:hostid as xs:unsignedLong*})", "trigger":"xdmp.databaseBackupStatus", "description":"(jobid as xs:unsignedLong*, hostid as xs:unsignedLong*)"}, {"content":"xdmp.forestBackupStatus(${1:forestid as xs:unsignedLong*})", "trigger":"xdmp.forestBackupStatus", "description":"(forestid as xs:unsignedLong*)"}, {"content":"xdmp.databaseBackupCancel(${1:jobid as xs:unsignedLong})", "trigger":"xdmp.databaseBackupCancel", "description":"(jobid as xs:unsignedLong)"}, {"content":"xdmp.databaseRestoreValidate(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String})", "trigger":"xdmp.databaseRestoreValidate", "description":"(forestIDs as xs:unsignedLong*, pathname as String)"}, {"content":"xdmp.databaseRestoreValidate(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String}, ${3:restoreToTime as xs:dateTime?})", "trigger":"xdmp.databaseRestoreValidate", "description":"(forestIDs as xs:unsignedLong*, pathname as String, restoreToTime as xs:dateTime?)"}, {"content":"xdmp.databaseRestoreValidate(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String}, ${3:restoreToTime as xs:dateTime?}, ${4:include-replicas as xs:boolean?})", "trigger":"xdmp.databaseRestoreValidate", "description":"(forestIDs as xs:unsignedLong*, pathname as String, restoreToTime as xs:dateTime?, include-replicas as xs:boolean?)"}, {"content":"xdmp.databaseRestoreValidate(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String}, ${3:restoreToTime as xs:dateTime?}, ${4:include-replicas as xs:boolean?}, ${5:journal-archiving as xs:boolean?})", "trigger":"xdmp.databaseRestoreValidate", "description":"(forestIDs as xs:unsignedLong*, pathname as String, restoreToTime as xs:dateTime?, include-replicas as xs:boolean?, journal-archiving as xs:boolean?)"}, {"content":"xdmp.databaseRestoreValidate(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String}, ${3:restoreToTime as xs:dateTime?}, ${4:include-replicas as xs:boolean?}, ${5:journal-archiving as xs:boolean?}, ${6:journal-archive-path as xs:string?})", "trigger":"xdmp.databaseRestoreValidate", "description":"(forestIDs as xs:unsignedLong*, pathname as String, restoreToTime as xs:dateTime?, include-replicas as xs:boolean?, journal-archiving as xs:boolean?, journal-archive-path as xs:string?)"}, {"content":"xdmp.databaseRestoreValidate(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String}, ${3:restoreToTime as xs:dateTime?}, ${4:include-replicas as xs:boolean?}, ${5:journal-archiving as xs:boolean?}, ${6:journal-archive-path as xs:string?}, ${7:incremental-backup as xs:boolean?})", "trigger":"xdmp.databaseRestoreValidate", "description":"(forestIDs as xs:unsignedLong*, pathname as String, restoreToTime as xs:dateTime?, include-replicas as xs:boolean?, journal-archiving as xs:boolean?, journal-archive-path as xs:string?, incremental-backup as xs:boolean?)"}, {"content":"xdmp.databaseRestoreValidate(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String}, ${3:restoreToTime as xs:dateTime?}, ${4:include-replicas as xs:boolean?}, ${5:journal-archiving as xs:boolean?}, ${6:journal-archive-path as xs:string?}, ${7:incremental-backup as xs:boolean?}, ${8:incremental-backup-path as xs:string?})", "trigger":"xdmp.databaseRestoreValidate", "description":"(forestIDs as xs:unsignedLong*, pathname as String, restoreToTime as xs:dateTime?, include-replicas as xs:boolean?, journal-archiving as xs:boolean?, journal-archive-path as xs:string?, incremental-backup as xs:boolean?, incremental-backup-path as xs:string?)"}, {"content":"xdmp.databaseRestore(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String})", "trigger":"xdmp.databaseRestore", "description":"(forestIDs as xs:unsignedLong*, pathname as String)"}, {"content":"xdmp.databaseRestore(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String}, ${3:restoreToTime as xs:dateTime?})", "trigger":"xdmp.databaseRestore", "description":"(forestIDs as xs:unsignedLong*, pathname as String, restoreToTime as xs:dateTime?)"}, {"content":"xdmp.databaseRestore(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String}, ${3:restoreToTime as xs:dateTime?}, ${4:journal-archiving as xs:boolean?})", "trigger":"xdmp.databaseRestore", "description":"(forestIDs as xs:unsignedLong*, pathname as String, restoreToTime as xs:dateTime?, journal-archiving as xs:boolean?)"}, {"content":"xdmp.databaseRestore(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String}, ${3:restoreToTime as xs:dateTime?}, ${4:journal-archiving as xs:boolean?}, ${5:journal-archive-path as xs:string?})", "trigger":"xdmp.databaseRestore", "description":"(forestIDs as xs:unsignedLong*, pathname as String, restoreToTime as xs:dateTime?, journal-archiving as xs:boolean?, journal-archive-path as xs:string?)"}, {"content":"xdmp.databaseRestore(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String}, ${3:restoreToTime as xs:dateTime?}, ${4:journal-archiving as xs:boolean?}, ${5:journal-archive-path as xs:string?}, ${6:incremental-backup as xs:boolean?})", "trigger":"xdmp.databaseRestore", "description":"(forestIDs as xs:unsignedLong*, pathname as String, restoreToTime as xs:dateTime?, journal-archiving as xs:boolean?, journal-archive-path as xs:string?, incremental-backup as xs:boolean?)"}, {"content":"xdmp.databaseRestore(${1:forestIDs as xs:unsignedLong*}, ${2:pathname as String}, ${3:restoreToTime as xs:dateTime?}, ${4:journal-archiving as xs:boolean?}, ${5:journal-archive-path as xs:string?}, ${6:incremental-backup as xs:boolean?}, ${7:incremental-backup-path as xs:string?})", "trigger":"xdmp.databaseRestore", "description":"(forestIDs as xs:unsignedLong*, pathname as String, restoreToTime as xs:dateTime?, journal-archiving as xs:boolean?, journal-archive-path as xs:string?, incremental-backup as xs:boolean?, incremental-backup-path as xs:string?)"}, {"content":"xdmp.databaseRestoreStatus(${1:jobid as xs:unsignedLong})", "trigger":"xdmp.databaseRestoreStatus", "description":"(jobid as xs:unsignedLong)"}, {"content":"xdmp.databaseRestoreCancel(${1:jobid as xs:unsignedLong})", "trigger":"xdmp.databaseRestoreCancel", "description":"(jobid as xs:unsignedLong)"}, {"content":"xdmp.shutdown(${1:hostIDs as xs:unsignedLong*}, ${2:reason as String})", "trigger":"xdmp.shutdown", "description":"(hostIDs as xs:unsignedLong*, reason as String)"}, {"content":"xdmp.restart(${1:hostIDs as xs:unsignedLong*}, ${2:reason as String})", "trigger":"xdmp.restart", "description":"(hostIDs as xs:unsignedLong*, reason as String)"}, {"content":"xdmp.filesystemDirectory(${1:pathname as String})", "trigger":"xdmp.filesystemDirectory", "description":"(pathname as String)"}, {"content":"xdmp.filesystemDirectoryCreate(${1:pathname as String})", "trigger":"xdmp.filesystemDirectoryCreate", "description":"(pathname as String)"}, {"content":"xdmp.filesystemDirectoryCreate(${1:pathname as String}, ${2:options as Object?})", "trigger":"xdmp.filesystemDirectoryCreate", "description":"(pathname as String, options as Object?)"}, {"content":"xdmp.filesystemFile(${1:pathname as String})", "trigger":"xdmp.filesystemFile", "description":"(pathname as String)"}, {"content":"xdmp.filesystemIsFileEncrypted(${1:pathname as String})", "trigger":"xdmp.filesystemIsFileEncrypted", "description":"(pathname as String)"}, {"content":"xdmp.filesystemFilepath(${1:pathname as String})", "trigger":"xdmp.filesystemFilepath", "description":"(pathname as String)"}, {"content":"xdmp.filesystemFileLength(${1:pathname as String})", "trigger":"xdmp.filesystemFileLength", "description":"(pathname as String)"}, {"content":"xdmp.filesystemFileExists(${1:pathname as String})", "trigger":"xdmp.filesystemFileExists", "description":"(pathname as String)"}, {"content":"xdmp.filesystemFileExists(${1:pathname as String}, ${2:host as xs:unsignedLong?})", "trigger":"xdmp.filesystemFileExists", "description":"(pathname as String, host as xs:unsignedLong?)"}, {"content":"xdmp.castableAs(${1:namespace-uri as String}, ${2:local-name as String}, ${3:item as item()?})", "trigger":"xdmp.castableAs", "description":"(namespace-uri as String, local-name as String, item as item()?)"}, {"content":"xdmp.mergeCancel(${1:forest-ID as xs:unsignedLong}, ${2:merge-ID as xs:unsignedLong})", "trigger":"xdmp.mergeCancel", "description":"(forest-ID as xs:unsignedLong, merge-ID as xs:unsignedLong)"}, {"content":"xdmp.requestCancel(${1:hostID as xs:unsignedLong}, ${2:serverID as xs:unsignedLong}, ${3:requestID as xs:unsignedLong})", "trigger":"xdmp.requestCancel", "description":"(hostID as xs:unsignedLong, serverID as xs:unsignedLong, requestID as xs:unsignedLong)"}, {"content":"xdmp.databaseBackupPurge(${1:dir as String}, ${2:keep-num-backups as xs:unsignedInt})", "trigger":"xdmp.databaseBackupPurge", "description":"(dir as String, keep-num-backups as xs:unsignedInt)"}, {"content":"xdmp.databaseBackupPurge(${1:dir as String}, ${2:keep-num-backups as xs:unsignedInt}, ${3:incremental-dir as String})", "trigger":"xdmp.databaseBackupPurge", "description":"(dir as String, keep-num-backups as xs:unsignedInt, incremental-dir as String)"}, {"content":"xdmp.databaseJournalArchivePurge(${1:dir as String})", "trigger":"xdmp.databaseJournalArchivePurge", "description":"(dir as String)"}, {"content":"xdmp.databaseJournalArchivePurge(${1:dir as String}, ${2:incremental-dir as String})", "trigger":"xdmp.databaseJournalArchivePurge", "description":"(dir as String, incremental-dir as String)"}, {"content":"xdmp.databaseJournalArchivePurge(${1:dir as String}, ${2:incremental-dir as String}, ${3:journal-archive-path as String})", "trigger":"xdmp.databaseJournalArchivePurge", "description":"(dir as String, incremental-dir as String, journal-archive-path as String)"}, {"content":"xdmp.getOrphanedBinaries(${1:id as xs:unsignedLong})", "trigger":"xdmp.getOrphanedBinaries", "description":"(id as xs:unsignedLong)"}, {"content":"xdmp.removeOrphanedBinary(${1:forestID as xs:unsignedLong}, ${2:binaryID as xs:unsignedLong})", "trigger":"xdmp.removeOrphanedBinary", "description":"(forestID as xs:unsignedLong, binaryID as xs:unsignedLong)"}, {"content":"alert.makeConfig(${1:uri as String}, ${2:name as String}, ${3:description as String}, ${4:options as Object})", "trigger":"alert.makeConfig", "description":"(uri as String, name as String, description as String, options as Object)"}, {"content":"alert.configInsert(${1:config as Object})", "trigger":"alert.configInsert", "description":"(config as Object)"}, {"content":"alert.configGet(${1:uri as String})", "trigger":"alert.configGet", "description":"(uri as String)"}, {"content":"alert.configDelete(${1:uri as String})", "trigger":"alert.configDelete", "description":"(uri as String)"}, {"content":"alert.configGetId(${1:config as Object})", "trigger":"alert.configGetId", "description":"(config as Object)"}, {"content":"alert.configSetUri(${1:config as Object}, ${2:uri as String})", "trigger":"alert.configSetUri", "description":"(config as Object, uri as String)"}, {"content":"alert.configGetUri(${1:config as Object})", "trigger":"alert.configGetUri", "description":"(config as Object)"}, {"content":"alert.configGetName(${1:config as Object})", "trigger":"alert.configGetName", "description":"(config as Object)"}, {"content":"alert.configSetName(${1:config as Object}, ${2:name as String})", "trigger":"alert.configSetName", "description":"(config as Object, name as String)"}, {"content":"alert.configGetDescription(${1:config as Object})", "trigger":"alert.configGetDescription", "description":"(config as Object)"}, {"content":"alert.configSetDescription(${1:config as Object}, ${2:description as String})", "trigger":"alert.configSetDescription", "description":"(config as Object, description as String)"}, {"content":"alert.configGetTriggerIds(${1:config as Object})", "trigger":"alert.configGetTriggerIds", "description":"(config as Object)"}, {"content":"alert.configSetTriggerIds(${1:config as Object}, ${2:ids as xs:unsignedLong*})", "trigger":"alert.configSetTriggerIds", "description":"(config as Object, ids as xs:unsignedLong*)"}, {"content":"alert.configGetCpfDomainIds(${1:config as Object})", "trigger":"alert.configGetCpfDomainIds", "description":"(config as Object)"}, {"content":"alert.configGetCpfDomainNames(${1:config as Object})", "trigger":"alert.configGetCpfDomainNames", "description":"(config as Object)"}, {"content":"alert.configSetCpfDomainNames(${1:config as Object}, ${2:names as xs:string*})", "trigger":"alert.configSetCpfDomainNames", "description":"(config as Object, names as xs:string*)"}, {"content":"alert.configSetCpfDomainIds(${1:config as Object}, ${2:ids as xs:unsignedLong*})", "trigger":"alert.configSetCpfDomainIds", "description":"(config as Object, ids as xs:unsignedLong*)"}, {"content":"alert.configGetOptions(${1:config as Object})", "trigger":"alert.configGetOptions", "description":"(config as Object)"}, {"content":"alert.configSetOptions(${1:config as Object}, ${2:options as Object})", "trigger":"alert.configSetOptions", "description":"(config as Object, options as Object)"}, {"content":"alert.createTriggers(${1:uri as String}, ${2:events as element(trgr:data-event)*})", "trigger":"alert.createTriggers", "description":"(uri as String, events as element(trgr:data-event)*)"}, {"content":"alert.removeTriggers(${1:uri as String})", "trigger":"alert.removeTriggers", "description":"(uri as String)"}, {"content":"alert.findMatchingRules(${1:config-uri as String}, ${2:doc as node()})", "trigger":"alert.findMatchingRules", "description":"(config-uri as String, doc as node())"}, {"content":"alert.invokeMatchingActions(${1:config-uri as String}, ${2:doc as node()}, ${3:options as Object})", "trigger":"alert.invokeMatchingActions", "description":"(config-uri as String, doc as node(), options as Object)"}, {"content":"alert.spawnMatchingActions(${1:config-uri as String}, ${2:doc as node()}, ${3:options as Options})", "trigger":"alert.spawnMatchingActions", "description":"(config-uri as String, doc as node(), options as Options)"}, {"content":"alert.makeRule(${1:name as String}, ${2:description as String}, ${3:user-id as xs:unsignedLong}, ${4:query as cts:query}, ${5:action as String}, ${6:options as Object})", "trigger":"alert.makeRule", "description":"(name as String, description as String, user-id as xs:unsignedLong, query as cts:query, action as String, options as Object)"}, {"content":"alert.ruleInsert(${1:collection-uri as String}, ${2:rule as Object})", "trigger":"alert.ruleInsert", "description":"(collection-uri as String, rule as Object)"}, {"content":"alert.ruleRemove(${1:collection-uri as String}, ${2:id as xs:unsignedLong})", "trigger":"alert.ruleRemove", "description":"(collection-uri as String, id as xs:unsignedLong)"}, {"content":"alert.getAllRules(${1:collection-uri as String}, ${2:query as cts:query})", "trigger":"alert.getAllRules", "description":"(collection-uri as String, query as cts:query)"}, {"content":"alert.getMyRules(${1:collection-uri as String}, ${2:query as cts:query})", "trigger":"alert.getMyRules", "description":"(collection-uri as String, query as cts:query)"}, {"content":"alert.ruleIdQuery(${1:ids as xs:unsignedLong*})", "trigger":"alert.ruleIdQuery", "description":"(ids as xs:unsignedLong*)"}, {"content":"alert.ruleNameQuery(${1:names as xs:string*})", "trigger":"alert.ruleNameQuery", "description":"(names as xs:string*)"}, {"content":"alert.ruleUserIdQuery(${1:user-ids as xs:unsignedLong*})", "trigger":"alert.ruleUserIdQuery", "description":"(user-ids as xs:unsignedLong*)"}, {"content":"alert.ruleActionQuery(${1:actions as xs:string*})", "trigger":"alert.ruleActionQuery", "description":"(actions as xs:string*)"}, {"content":"alert.ruleGetId(${1:rule as Object})", "trigger":"alert.ruleGetId", "description":"(rule as Object)"}, {"content":"alert.ruleGetUserId(${1:rule as Object})", "trigger":"alert.ruleGetUserId", "description":"(rule as Object)"}, {"content":"alert.ruleSetUserId(${1:rule as Object}, ${2:user-id as xs:unsignedLong})", "trigger":"alert.ruleSetUserId", "description":"(rule as Object, user-id as xs:unsignedLong)"}, {"content":"alert.ruleGetAction(${1:rule as Object})", "trigger":"alert.ruleGetAction", "description":"(rule as Object)"}, {"content":"alert.ruleSetAction(${1:rule as Object}, ${2:action as String})", "trigger":"alert.ruleSetAction", "description":"(rule as Object, action as String)"}, {"content":"alert.ruleGetName(${1:rule as Object})", "trigger":"alert.ruleGetName", "description":"(rule as Object)"}, {"content":"alert.ruleSetName(${1:rule as Object}, ${2:name as String})", "trigger":"alert.ruleSetName", "description":"(rule as Object, name as String)"}, {"content":"alert.ruleGetDescription(${1:rule as Object})", "trigger":"alert.ruleGetDescription", "description":"(rule as Object)"}, {"content":"alert.ruleSetDescription(${1:rule as Object}, ${2:description as String})", "trigger":"alert.ruleSetDescription", "description":"(rule as Object, description as String)"}, {"content":"alert.ruleGetQuery(${1:rule as Object})", "trigger":"alert.ruleGetQuery", "description":"(rule as Object)"}, {"content":"alert.ruleSetQuery(${1:rule as Object}, ${2:query as cts:query})", "trigger":"alert.ruleSetQuery", "description":"(rule as Object, query as cts:query)"}, {"content":"alert.ruleGetOptions(${1:rule as Object})", "trigger":"alert.ruleGetOptions", "description":"(rule as Object)"}, {"content":"alert.ruleSetOptions(${1:rule as Object}, ${2:options as Object})", "trigger":"alert.ruleSetOptions", "description":"(rule as Object, options as Object)"}, {"content":"alert.actionGetName(${1:action as Object})", "trigger":"alert.actionGetName", "description":"(action as Object)"}, {"content":"alert.actionSetName(${1:action as Object}, ${2:name as String})", "trigger":"alert.actionSetName", "description":"(action as Object, name as String)"}, {"content":"alert.actionGetDescription(${1:action as Object})", "trigger":"alert.actionGetDescription", "description":"(action as Object)"}, {"content":"alert.actionSetDescription(${1:action as Object}, ${2:description as String})", "trigger":"alert.actionSetDescription", "description":"(action as Object, description as String)"}, {"content":"alert.actionGetModuleDb(${1:action as Object})", "trigger":"alert.actionGetModuleDb", "description":"(action as Object)"}, {"content":"alert.actionSetModuleDb(${1:action as Object}, ${2:module-db as xs:unsignedLong})", "trigger":"alert.actionSetModuleDb", "description":"(action as Object, module-db as xs:unsignedLong)"}, {"content":"alert.actionGetModuleRoot(${1:action as Object})", "trigger":"alert.actionGetModuleRoot", "description":"(action as Object)"}, {"content":"alert.actionSetModuleRoot(${1:action as Object}, ${2:module-root as String})", "trigger":"alert.actionSetModuleRoot", "description":"(action as Object, module-root as String)"}, {"content":"alert.actionGetModule(${1:action as Object})", "trigger":"alert.actionGetModule", "description":"(action as Object)"}, {"content":"alert.actionSetModule(${1:action as Object}, ${2:module as String})", "trigger":"alert.actionSetModule", "description":"(action as Object, module as String)"}, {"content":"alert.actionGetOptions(${1:action as Object})", "trigger":"alert.actionGetOptions", "description":"(action as Object)"}, {"content":"alert.actionSetOptions(${1:action as Object}, ${2:options as Object})", "trigger":"alert.actionSetOptions", "description":"(action as Object, options as Object)"}, {"content":"alert.makeAction(${1:name as String}, ${2:description as String}, ${3:module-db as xs:unsignedLong}, ${4:module-root as String}, ${5:module as String}, ${6:options as Object})", "trigger":"alert.makeAction", "description":"(name as String, description as String, module-db as xs:unsignedLong, module-root as String, module as String, options as Object)"}, {"content":"alert.makeLogAction()", "trigger":"alert.makeLogAction", "description":"()"}, {"content":"alert.actionInsert(${1:collection-uri as String}, ${2:action as Object})", "trigger":"alert.actionInsert", "description":"(collection-uri as String, action as Object)"}, {"content":"alert.actionRemove(${1:collection-uri as String}, ${2:name as String})", "trigger":"alert.actionRemove", "description":"(collection-uri as String, name as String)"}, {"content":"alert.getActions(${1:collection-uri as String}, ${2:names as xs:string*})", "trigger":"alert.getActions", "description":"(collection-uri as String, names as xs:string*)"}, {"content":"xdmp.wordConvert(${1:doc as node()}, ${2:filename as String})", "trigger":"xdmp.wordConvert", "description":"(doc as node(), filename as String)"}, {"content":"xdmp.wordConvert(${1:doc as node()}, ${2:filename as String}, ${3:options as (element()|map:map)?})", "trigger":"xdmp.wordConvert", "description":"(doc as node(), filename as String, options as (element()|map:map)?)"}, {"content":"xdmp.excelConvert(${1:doc as node()}, ${2:filename as String})", "trigger":"xdmp.excelConvert", "description":"(doc as node(), filename as String)"}, {"content":"xdmp.excelConvert(${1:doc as node()}, ${2:filename as String}, ${3:options as (element()|map:map)?})", "trigger":"xdmp.excelConvert", "description":"(doc as node(), filename as String, options as (element()|map:map)?)"}, {"content":"xdmp.powerpointConvert(${1:doc as node()}, ${2:filename as String})", "trigger":"xdmp.powerpointConvert", "description":"(doc as node(), filename as String)"}, {"content":"xdmp.powerpointConvert(${1:doc as node()}, ${2:filename as String}, ${3:options as (element()|map:map)?})", "trigger":"xdmp.powerpointConvert", "description":"(doc as node(), filename as String, options as (element()|map:map)?)"}, {"content":"fn.resolveUri(${1:relative as xs:string?})", "trigger":"fn.resolveUri", "description":"(relative as xs:string?)"}, {"content":"fn.resolveUri(${1:relative as xs:string?}, ${2:base as String})", "trigger":"fn.resolveUri", "description":"(relative as xs:string?, base as String)"}, {"content":"xdmp.resolveUri(${1:relative as xs:string?})", "trigger":"xdmp.resolveUri", "description":"(relative as xs:string?)"}, {"content":"xdmp.resolveUri(${1:relative as xs:string?}, ${2:base as String})", "trigger":"xdmp.resolveUri", "description":"(relative as xs:string?, base as String)"}, {"content":"sem.resolveIri(${1:relative as String})", "trigger":"sem.resolveIri", "description":"(relative as String)"}, {"content":"sem.resolveIri(${1:relative as String}, ${2:base as String})", "trigger":"sem.resolveIri", "description":"(relative as String, base as String)"}, {"content":"xdmp.urlEncode(${1:plaintext as String})", "trigger":"xdmp.urlEncode", "description":"(plaintext as String)"}, {"content":"xdmp.urlEncode(${1:plaintext as String}, ${2:noSpacePlus as xs:boolean?})", "trigger":"xdmp.urlEncode", "description":"(plaintext as String, noSpacePlus as xs:boolean?)"}, {"content":"xdmp.urlDecode(${1:encoded as String})", "trigger":"xdmp.urlDecode", "description":"(encoded as String)"}, {"content":"xdmp.login(${1:name as String})", "trigger":"xdmp.login", "description":"(name as String)"}, {"content":"xdmp.login(${1:name as String}, ${2:password as xs:string?})", "trigger":"xdmp.login", "description":"(name as String, password as xs:string?)"}, {"content":"xdmp.login(${1:name as String}, ${2:password as xs:string?}, ${3:set-session as xs:boolean?})", "trigger":"xdmp.login", "description":"(name as String, password as xs:string?, set-session as xs:boolean?)"}, {"content":"xdmp.login(${1:name as String}, ${2:password as xs:string?}, ${3:set-session as xs:boolean?}, ${4:role-names as xs:string*})", "trigger":"xdmp.login", "description":"(name as String, password as xs:string?, set-session as xs:boolean?, role-names as xs:string*)"}, {"content":"xdmp.gssServerNegotiate(${1:inputToken as String})", "trigger":"xdmp.gssServerNegotiate", "description":"(inputToken as String)"}, {"content":"xdmp.logout()", "trigger":"xdmp.logout", "description":"()"}, {"content":"xdmp.getRequestFieldNames()", "trigger":"xdmp.getRequestFieldNames", "description":"()"}, {"content":"xdmp.getRequestField(${1:name as String})", "trigger":"xdmp.getRequestField", "description":"(name as String)"}, {"content":"xdmp.getRequestField(${1:name as String}, ${2:default as xs:string?})", "trigger":"xdmp.getRequestField", "description":"(name as String, default as xs:string?)"}, {"content":"xdmp.getRequestFieldFilename(${1:field-name as String})", "trigger":"xdmp.getRequestFieldFilename", "description":"(field-name as String)"}, {"content":"xdmp.getRequestFieldContentType(${1:field-name as String})", "trigger":"xdmp.getRequestFieldContentType", "description":"(field-name as String)"}, {"content":"xdmp.getRequestHeaderNames()", "trigger":"xdmp.getRequestHeaderNames", "description":"()"}, {"content":"xdmp.getRequestHeader(${1:name as String})", "trigger":"xdmp.getRequestHeader", "description":"(name as String)"}, {"content":"xdmp.getRequestHeader(${1:name as String}, ${2:default as xs:string?})", "trigger":"xdmp.getRequestHeader", "description":"(name as String, default as xs:string?)"}, {"content":"xdmp.getRequestUsername()", "trigger":"xdmp.getRequestUsername", "description":"()"}, {"content":"xdmp.getRequestMethod()", "trigger":"xdmp.getRequestMethod", "description":"()"}, {"content":"xdmp.getRequestPath()", "trigger":"xdmp.getRequestPath", "description":"()"}, {"content":"xdmp.getInvokedPath()", "trigger":"xdmp.getInvokedPath", "description":"()"}, {"content":"xdmp.getRequestUrl()", "trigger":"xdmp.getRequestUrl", "description":"()"}, {"content":"xdmp.getOriginalUrl()", "trigger":"xdmp.getOriginalUrl", "description":"()"}, {"content":"xdmp.getRequestErrorFormat()", "trigger":"xdmp.getRequestErrorFormat", "description":"()"}, {"content":"xdmp.getRequestPort()", "trigger":"xdmp.getRequestPort", "description":"()"}, {"content":"xdmp.getSessionFieldNames()", "trigger":"xdmp.getSessionFieldNames", "description":"()"}, {"content":"xdmp.getSessionField(${1:name as String})", "trigger":"xdmp.getSessionField", "description":"(name as String)"}, {"content":"xdmp.getSessionField(${1:name as String}, ${2:default as item()*})", "trigger":"xdmp.getSessionField", "description":"(name as String, default as item()*)"}, {"content":"xdmp.setSessionField(${1:name as String}, ${2:value as item()*})", "trigger":"xdmp.setSessionField", "description":"(name as String, value as item()*)"}, {"content":"xdmp.getServerFieldNames()", "trigger":"xdmp.getServerFieldNames", "description":"()"}, {"content":"xdmp.getServerField(${1:name as String})", "trigger":"xdmp.getServerField", "description":"(name as String)"}, {"content":"xdmp.getServerField(${1:name as String}, ${2:default as item()*})", "trigger":"xdmp.getServerField", "description":"(name as String, default as item()*)"}, {"content":"xdmp.setServerField(${1:name as String}, ${2:value as item()*})", "trigger":"xdmp.setServerField", "description":"(name as String, value as item()*)"}, {"content":"xdmp.setServerFieldPrivilege(${1:name as String}, ${2:privilege as xs:string?})", "trigger":"xdmp.setServerFieldPrivilege", "description":"(name as String, privilege as xs:string?)"}, {"content":"xdmp.redirectResponse(${1:name as String})", "trigger":"xdmp.redirectResponse", "description":"(name as String)"}, {"content":"xdmp.setResponseCode(${1:code as xs:integer}, ${2:message as String})", "trigger":"xdmp.setResponseCode", "description":"(code as xs:integer, message as String)"}, {"content":"xdmp.getResponseCode()", "trigger":"xdmp.getResponseCode", "description":"()"}, {"content":"xdmp.setResponseContentType(${1:name as String})", "trigger":"xdmp.setResponseContentType", "description":"(name as String)"}, {"content":"xdmp.setResponseEncoding(${1:encoding as String})", "trigger":"xdmp.setResponseEncoding", "description":"(encoding as String)"}, {"content":"xdmp.getResponseEncoding()", "trigger":"xdmp.getResponseEncoding", "description":"()"}, {"content":"xdmp.setRequestTimeLimit(${1:time-limit as xs:unsignedInt})", "trigger":"xdmp.setRequestTimeLimit", "description":"(time-limit as xs:unsignedInt)"}, {"content":"xdmp.setRequestTimeLimit(${1:time-limit as xs:unsignedInt}, ${2:hostID as xs:unsignedLong?})", "trigger":"xdmp.setRequestTimeLimit", "description":"(time-limit as xs:unsignedInt, hostID as xs:unsignedLong?)"}, {"content":"xdmp.setRequestTimeLimit(${1:time-limit as xs:unsignedInt}, ${2:hostID as xs:unsignedLong?}, ${3:serverID as xs:unsignedLong?})", "trigger":"xdmp.setRequestTimeLimit", "description":"(time-limit as xs:unsignedInt, hostID as xs:unsignedLong?, serverID as xs:unsignedLong?)"}, {"content":"xdmp.setRequestTimeLimit(${1:time-limit as xs:unsignedInt}, ${2:hostID as xs:unsignedLong?}, ${3:serverID as xs:unsignedLong?}, ${4:requestID as xs:unsignedLong?})", "trigger":"xdmp.setRequestTimeLimit", "description":"(time-limit as xs:unsignedInt, hostID as xs:unsignedLong?, serverID as xs:unsignedLong?, requestID as xs:unsignedLong?)"}, {"content":"xdmp.addResponseHeader(${1:name as String}, ${2:value as String})", "trigger":"xdmp.addResponseHeader", "description":"(name as String, value as String)"}, {"content":"xdmp.uriIsFile(${1:uri as xs:string?})", "trigger":"xdmp.uriIsFile", "description":"(uri as xs:string?)"}, {"content":"xdmp.getRequestClientAddress()", "trigger":"xdmp.getRequestClientAddress", "description":"()"}, {"content":"xdmp.getRequestProtocol()", "trigger":"xdmp.getRequestProtocol", "description":"()"}, {"content":"xdmp.getRequestClientCertificate()", "trigger":"xdmp.getRequestClientCertificate", "description":"()"}, {"content":"xdmp.getRequestBody()", "trigger":"xdmp.getRequestBody", "description":"()"}, {"content":"xdmp.getRequestBody(${1:format as xs:string?})", "trigger":"xdmp.getRequestBody", "description":"(format as xs:string?)"}, {"content":"xdmp.getUrlRewriterPath()", "trigger":"xdmp.getUrlRewriterPath", "description":"()"}, {"content":"fn.true()", "trigger":"fn.true", "description":"()"}, {"content":"fn.false()", "trigger":"fn.false", "description":"()"}, {"content":"fn.not(${1:arg as item()*})", "trigger":"fn.not", "description":"(arg as item()*)"}, {"content":"cts.train(${1:trainingNodes as Array}, ${2:labels as Array})", "trigger":"cts.train", "description":"(trainingNodes as Array, labels as Array)"}, {"content":"cts.train(${1:trainingNodes as Array}, ${2:labels as Array}, ${3:options as (element()|map:map)?})", "trigger":"cts.train", "description":"(trainingNodes as Array, labels as Array, options as (element()|map:map)?)"}, {"content":"cts.classify(${1:dataNodes as Array}, ${2:classifier as Object})", "trigger":"cts.classify", "description":"(dataNodes as Array, classifier as Object)"}, {"content":"cts.classify(${1:dataNodes as Array}, ${2:classifier as Object}, ${3:options as (element()|map:map)?})", "trigger":"cts.classify", "description":"(dataNodes as Array, classifier as Object, options as (element()|map:map)?)"}, {"content":"cts.classify(${1:dataNodes as Array}, ${2:classifier as Object}, ${3:options as (element()|map:map)?}, ${4:trainingNodes as Array})", "trigger":"cts.classify", "description":"(dataNodes as Array, classifier as Object, options as (element()|map:map)?, trainingNodes as Array)"}, {"content":"cts.thresholds(${1:computedLabels as Array}, ${2:knownLabels as Array})", "trigger":"cts.thresholds", "description":"(computedLabels as Array, knownLabels as Array)"}, {"content":"cts.thresholds(${1:computedLabels as Array}, ${2:knownLabels as Array}, ${3:recallWeight as double})", "trigger":"cts.thresholds", "description":"(computedLabels as Array, knownLabels as Array, recallWeight as double)"}, {"content":"cts.cluster(${1:nodes as Array})", "trigger":"cts.cluster", "description":"(nodes as Array)"}, {"content":"cts.cluster(${1:nodes as Array}, ${2:options as (element()|map:map)?})", "trigger":"cts.cluster", "description":"(nodes as Array, options as (element()|map:map)?)"}, {"content":"fn.position()", "trigger":"fn.position", "description":"()"}, {"content":"fn.last()", "trigger":"fn.last", "description":"()"}, {"content":"fn.currentDatetime()", "trigger":"fn.currentDatetime", "description":"()"}, {"content":"fn.currentDate()", "trigger":"fn.currentDate", "description":"()"}, {"content":"fn.currentTime()", "trigger":"fn.currentTime", "description":"()"}, {"content":"fn.implicitTimezone()", "trigger":"fn.implicitTimezone", "description":"()"}, {"content":"fn.defaultCollation()", "trigger":"fn.defaultCollation", "description":"()"}, {"content":"fn.staticBaseUri()", "trigger":"fn.staticBaseUri", "description":"()"}, {"content":"cvt.basepath(${1:uri as String})", "trigger":"cvt.basepath", "description":"(uri as String)"}, {"content":"cvt.basename(${1:uri as String})", "trigger":"cvt.basename", "description":"(uri as String)"}, {"content":"cvt.destinationUri(${1:uri as String}, ${2:extension as String})", "trigger":"cvt.destinationUri", "description":"(uri as String, extension as String)"}, {"content":"cvt.partUri(${1:uri as String}, ${2:part as String})", "trigger":"cvt.partUri", "description":"(uri as String, part as String)"}, {"content":"cvt.saveConvertedDocuments(${1:source-uri as String}, ${2:destination-uri as String}, ${3:manifest as element()}, ${4:docs as document-node()*})", "trigger":"cvt.saveConvertedDocuments", "description":"(source-uri as String, destination-uri as String, manifest as element(), docs as document-node()*)"}, {"content":"cvt.saveConvertedDocuments(${1:source-uri as String}, ${2:destination-uri as String}, ${3:manifest as element()}, ${4:docs as document-node()*}, ${5:destination-collections as xs:string*})", "trigger":"cvt.saveConvertedDocuments", "description":"(source-uri as String, destination-uri as String, manifest as element(), docs as document-node()*, destination-collections as xs:string*)"}, {"content":"cpf.success(${1:docid as String}, ${2:transition as element(*, p:transition)?}, ${3:override-state as xs:anyURI?})", "trigger":"cpf.success", "description":"(docid as String, transition as element(*, p:transition)?, override-state as xs:anyURI?)"}, {"content":"cpf.failure(${1:docid as String}, ${2:transition as element(*, p:transition)?}, ${3:exception as node()?}, ${4:override-state as xs:anyURI?})", "trigger":"cpf.failure", "description":"(docid as String, transition as element(*, p:transition)?, exception as node()?, override-state as xs:anyURI?)"}, {"content":"cpf.checkTransition(${1:docid as String}, ${2:transition as element(*, p:transition)?})", "trigger":"cpf.checkTransition", "description":"(docid as String, transition as element(*, p:transition)?)"}, {"content":"cpf.documentGetState(${1:doc as String})", "trigger":"cpf.documentGetState", "description":"(doc as String)"}, {"content":"cpf.documentSetState(${1:doc as String}, ${2:state as xs:anyURI})", "trigger":"cpf.documentSetState", "description":"(doc as String, state as xs:anyURI)"}, {"content":"cpf.documentGetProcessingStatus(${1:doc as String})", "trigger":"cpf.documentGetProcessingStatus", "description":"(doc as String)"}, {"content":"cpf.documentSetProcessingStatus(${1:doc as String}, ${2:processing-status as String})", "trigger":"cpf.documentSetProcessingStatus", "description":"(doc as String, processing-status as String)"}, {"content":"cpf.documentGetLastUpdated(${1:doc as String})", "trigger":"cpf.documentGetLastUpdated", "description":"(doc as String)"}, {"content":"cpf.documentSetLastUpdated(${1:doc as String}, ${2:last-updated as xs:dateTime})", "trigger":"cpf.documentSetLastUpdated", "description":"(doc as String, last-updated as xs:dateTime)"}, {"content":"cpf.documentGetError(${1:doc as String})", "trigger":"cpf.documentGetError", "description":"(doc as String)"}, {"content":"cpf.documentSetError(${1:doc as String}, ${2:error as node()?})", "trigger":"cpf.documentSetError", "description":"(doc as String, error as node()?)"}, {"content":"xdmp.crypt(${1:password as String}, ${2:salt as String})", "trigger":"xdmp.crypt", "description":"(password as String, salt as String)"}, {"content":"xdmp.crypt2(${1:password as String})", "trigger":"xdmp.crypt2", "description":"(password as String)"}, {"content":"css.get(${1:doc as String})", "trigger":"css.get", "description":"(doc as String)"}, {"content":"css.convert(${1:css as String}, ${2:options as element()?})", "trigger":"css.convert", "description":"(css as String, options as element()?)"}, {"content":"cdict.getLanguages()", "trigger":"cdict.getLanguages", "description":"()"}, {"content":"cdict.dictionaryDelete(${1:lang as String})", "trigger":"cdict.dictionaryDelete", "description":"(lang as String)"}, {"content":"cdict.dictionaryRead(${1:lang as String})", "trigger":"cdict.dictionaryRead", "description":"(lang as String)"}, {"content":"cdict.dictionaryWrite(${1:lang as String}, ${2:dict as element(cdict:dictionary)})", "trigger":"cdict.dictionaryWrite", "description":"(lang as String, dict as element(cdict:dictionary))"}, {"content":"clang.lexer(${1:variant as String}, ${2:normalization as xs:string?})", "trigger":"clang.lexer", "description":"(variant as String, normalization as xs:string?)"}, {"content":"clang.lexer(${1:variant as String}, ${2:normalization as xs:string?}, ${3:args as item()*})", "trigger":"clang.lexer", "description":"(variant as String, normalization as xs:string?, args as item()*)"}, {"content":"clang.lexer(${1:variant as String}, ${2:normalization as xs:string?}, ${3:args as item()*}, ${4:library as String})", "trigger":"clang.lexer", "description":"(variant as String, normalization as xs:string?, args as item()*, library as String)"}, {"content":"clang.stemmer(${1:variant as String}, ${2:normalization as xs:string?})", "trigger":"clang.stemmer", "description":"(variant as String, normalization as xs:string?)"}, {"content":"clang.stemmer(${1:variant as String}, ${2:normalization as xs:string?}, ${3:args as item()*})", "trigger":"clang.stemmer", "description":"(variant as String, normalization as xs:string?, args as item()*)"}, {"content":"clang.stemmer(${1:variant as String}, ${2:normalization as xs:string?}, ${3:args as item()*}, ${4:library as String})", "trigger":"clang.stemmer", "description":"(variant as String, normalization as xs:string?, args as item()*, library as String)"}, {"content":"clang.userLanguagePlugin(${1:library as xs:string?}, ${2:lexer as element(lang:lexer)?}, ${3:stemmer as element(lang:stemmer)?})", "trigger":"clang.userLanguagePlugin", "description":"(library as xs:string?, lexer as element(lang:lexer)?, stemmer as element(lang:stemmer)?)"}, {"content":"clang.userLanguage(${1:lang as String}, ${2:plugin as element(lang:plugin)})", "trigger":"clang.userLanguage", "description":"(lang as String, plugin as element(lang:plugin))"}, {"content":"clang.userLanguage(${1:lang as String}, ${2:plugin as element(lang:plugin)}, ${3:tokenType as String})", "trigger":"clang.userLanguage", "description":"(lang as String, plugin as element(lang:plugin), tokenType as String)"}, {"content":"clang.updateUserLanguage(${1:config as element(lang:user-languages)}, ${2:$user-lang as element(lang:user-language)})", "trigger":"clang.updateUserLanguage", "description":"(config as element(lang:user-languages), $user-lang as element(lang:user-language))"}, {"content":"clang.deleteUserLanguage(${1:config as element(lang:user-languages)}, ${2:$lang as String})", "trigger":"clang.deleteUserLanguage", "description":"(config as element(lang:user-languages), $lang as String)"}, {"content":"clang.languageConfigRead(${1:config as element(lang:user-languages)})", "trigger":"clang.languageConfigRead", "description":"(config as element(lang:user-languages))"}, {"content":"clang.languageConfigDelete()", "trigger":"clang.languageConfigDelete", "description":"()"}, {"content":"clang.languageConfigWrite(${1:config as element(lang:user-languages)})", "trigger":"clang.languageConfigWrite", "description":"(config as element(lang:user-languages))"}, {"content":"dbg.invoke(${1:uri as String})", "trigger":"dbg.invoke", "description":"(uri as String)"}, {"content":"dbg.invoke(${1:uri as String}, ${2:vars as item()*})", "trigger":"dbg.invoke", "description":"(uri as String, vars as item()*)"}, {"content":"dbg.invoke(${1:uri as String}, ${2:vars as item()*}, ${3:options as (element()|map:map)?})", "trigger":"dbg.invoke", "description":"(uri as String, vars as item()*, options as (element()|map:map)?)"}, {"content":"dbg.eval(${1:xquery as String})", "trigger":"dbg.eval", "description":"(xquery as String)"}, {"content":"dbg.eval(${1:xquery as String}, ${2:vars as item()*})", "trigger":"dbg.eval", "description":"(xquery as String, vars as item()*)"}, {"content":"dbg.eval(${1:xquery as String}, ${2:vars as item()*}, ${3:options as (element()|map:map)?})", "trigger":"dbg.eval", "description":"(xquery as String, vars as item()*, options as (element()|map:map)?)"}, {"content":"dbg.attach(${1:request-id as xs:unsignedLong})", "trigger":"dbg.attach", "description":"(request-id as xs:unsignedLong)"}, {"content":"dbg.detach(${1:request-id as xs:unsignedLong})", "trigger":"dbg.detach", "description":"(request-id as xs:unsignedLong)"}, {"content":"dbg.connect(${1:server as xs:unsignedLong})", "trigger":"dbg.connect", "description":"(server as xs:unsignedLong)"}, {"content":"dbg.connected()", "trigger":"dbg.connected", "description":"()"}, {"content":"dbg.disconnect(${1:server as xs:unsignedLong})", "trigger":"dbg.disconnect", "description":"(server as xs:unsignedLong)"}, {"content":"dbg.status(${1:request-id as xs:unsignedLong*})", "trigger":"dbg.status", "description":"(request-id as xs:unsignedLong*)"}, {"content":"dbg.stopped()", "trigger":"dbg.stopped", "description":"()"}, {"content":"dbg.stopped(${1:server as xs:unsignedLong})", "trigger":"dbg.stopped", "description":"(server as xs:unsignedLong)"}, {"content":"dbg.attached()", "trigger":"dbg.attached", "description":"()"}, {"content":"dbg.attached(${1:server as xs:unsignedLong})", "trigger":"dbg.attached", "description":"(server as xs:unsignedLong)"}, {"content":"dbg.stack(${1:request as xs:unsignedLong})", "trigger":"dbg.stack", "description":"(request as xs:unsignedLong)"}, {"content":"dbg.out(${1:request as xs:unsignedLong})", "trigger":"dbg.out", "description":"(request as xs:unsignedLong)"}, {"content":"dbg.finish(${1:request as xs:unsignedLong})", "trigger":"dbg.finish", "description":"(request as xs:unsignedLong)"}, {"content":"dbg.step(${1:request as xs:unsignedLong})", "trigger":"dbg.step", "description":"(request as xs:unsignedLong)"}, {"content":"dbg.next(${1:request as xs:unsignedLong})", "trigger":"dbg.next", "description":"(request as xs:unsignedLong)"}, {"content":"dbg.continue(${1:request as xs:unsignedLong})", "trigger":"dbg.continue", "description":"(request as xs:unsignedLong)"}, {"content":"dbg.wait(${1:request-id as xs:unsignedLong*}, ${2:timeout as xs:unsignedLong})", "trigger":"dbg.wait", "description":"(request-id as xs:unsignedLong*, timeout as xs:unsignedLong)"}, {"content":"dbg.break(${1:request as xs:unsignedLong})", "trigger":"dbg.break", "description":"(request as xs:unsignedLong)"}, {"content":"dbg.break(${1:request as xs:unsignedLong}, ${2:expression as xs:unsignedLong})", "trigger":"dbg.break", "description":"(request as xs:unsignedLong, expression as xs:unsignedLong)"}, {"content":"dbg.clear(${1:request as xs:unsignedLong}, ${2:expression as xs:unsignedLong})", "trigger":"dbg.clear", "description":"(request as xs:unsignedLong, expression as xs:unsignedLong)"}, {"content":"dbg.breakpoints(${1:request as xs:unsignedLong})", "trigger":"dbg.breakpoints", "description":"(request as xs:unsignedLong)"}, {"content":"dbg.stop()", "trigger":"dbg.stop", "description":"()"}, {"content":"dbg.value(${1:request as xs:unsignedLong})", "trigger":"dbg.value", "description":"(request as xs:unsignedLong)"}, {"content":"dbg.value(${1:request as xs:unsignedLong}, ${2:expr as String})", "trigger":"dbg.value", "description":"(request as xs:unsignedLong, expr as String)"}, {"content":"dbg.line(${1:request as xs:unsignedLong}, ${2:uri as String}, ${3:line as xs:unsignedInt})", "trigger":"dbg.line", "description":"(request as xs:unsignedLong, uri as String, line as xs:unsignedInt)"}, {"content":"dbg.function(${1:request as xs:unsignedLong}, ${2:uri as String}, ${3:function as xs:QName})", "trigger":"dbg.function", "description":"(request as xs:unsignedLong, uri as String, function as xs:QName)"}, {"content":"dbg.expr(${1:request as xs:unsignedLong}, ${2:expression as xs:unsignedLong})", "trigger":"dbg.expr", "description":"(request as xs:unsignedLong, expression as xs:unsignedLong)"}, {"content":"dls.documentHistory(${1:uri as String})", "trigger":"dls.documentHistory", "description":"(uri as String)"}, {"content":"dls.documentManage(${1:uri as String}, ${2:deep as Boolean})", "trigger":"dls.documentManage", "description":"(uri as String, deep as Boolean)"}, {"content":"dls.documentManage(${1:uri as String}, ${2:deep as Boolean}, ${3:annotation as item()*})", "trigger":"dls.documentManage", "description":"(uri as String, deep as Boolean, annotation as item()*)"}, {"content":"dls.documentUnmanage(${1:uri as String}, ${2:deep as Boolean}, ${3:remove-versions as Boolean})", "trigger":"dls.documentUnmanage", "description":"(uri as String, deep as Boolean, remove-versions as Boolean)"}, {"content":"dls.documentCheckout(${1:uri as String}, ${2:deep as Boolean})", "trigger":"dls.documentCheckout", "description":"(uri as String, deep as Boolean)"}, {"content":"dls.documentCheckout(${1:uri as String}, ${2:deep as Boolean}, ${3:annotation as item()?})", "trigger":"dls.documentCheckout", "description":"(uri as String, deep as Boolean, annotation as item()?)"}, {"content":"dls.documentCheckout(${1:uri as String}, ${2:deep as Boolean}, ${3:annotation as item()?}, ${4:timeout as xs:unsignedLong?})", "trigger":"dls.documentCheckout", "description":"(uri as String, deep as Boolean, annotation as item()?, timeout as xs:unsignedLong?)"}, {"content":"dls.documentCheckin(${1:uri as String}, ${2:deep as Boolean})", "trigger":"dls.documentCheckin", "description":"(uri as String, deep as Boolean)"}, {"content":"dls.documentVersionAsOf(${1:uri as String}, ${2:as-of as xs:dateTime})", "trigger":"dls.documentVersionAsOf", "description":"(uri as String, as-of as xs:dateTime)"}, {"content":"dls.documentVersion(${1:uri as String}, ${2:version-number as xs:unsignedInt})", "trigger":"dls.documentVersion", "description":"(uri as String, version-number as xs:unsignedInt)"}, {"content":"dls.documentVersionUris(${1:uri as String})", "trigger":"dls.documentVersionUris", "description":"(uri as String)"}, {"content":"dls.documentVersionDelete(${1:uri as String}, ${2:version as xs:integer}, ${3:retain-history as Boolean})", "trigger":"dls.documentVersionDelete", "description":"(uri as String, version as xs:integer, retain-history as Boolean)"}, {"content":"dls.documentVersionsQuery(${1:uri as String})", "trigger":"dls.documentVersionsQuery", "description":"(uri as String)"}, {"content":"dls.documentVersionUri(${1:document-uri as String}, ${2:version as xs:integer})", "trigger":"dls.documentVersionUri", "description":"(document-uri as String, version as xs:integer)"}, {"content":"dls.documentDelete(${1:uri as String}, ${2:keep-old-versions as Boolean}, ${3:retain-history as Boolean})", "trigger":"dls.documentDelete", "description":"(uri as String, keep-old-versions as Boolean, retain-history as Boolean)"}, {"content":"dls.documentIsManaged(${1:uri as String})", "trigger":"dls.documentIsManaged", "description":"(uri as String)"}, {"content":"dls.retentionRule(${1:name as String}, ${2:comment as item()*}, ${3:num-versions as xs:unsignedInt?}, ${4:duration as xs:duration?}, ${5:document-query-text as xs:string?}, ${6:document-query as cts:query?})", "trigger":"dls.retentionRule", "description":"(name as String, comment as item()*, num-versions as xs:unsignedInt?, duration as xs:duration?, document-query-text as xs:string?, document-query as cts:query?)"}, {"content":"dls.retentionRuleInsert(${1:rules as element(dls:retention-rule)*})", "trigger":"dls.retentionRuleInsert", "description":"(rules as element(dls:retention-rule)*)"}, {"content":"dls.retentionRules(${1:names as xs:string*})", "trigger":"dls.retentionRules", "description":"(names as xs:string*)"}, {"content":"dls.retentionRuleRemove(${1:names as xs:string*})", "trigger":"dls.retentionRuleRemove", "description":"(names as xs:string*)"}, {"content":"dls.documentRetentionRules(${1:uri as String})", "trigger":"dls.documentRetentionRules", "description":"(uri as String)"}, {"content":"dls.purge(${1:delete as Boolean}, ${2:retain-history as Boolean})", "trigger":"dls.purge", "description":"(delete as Boolean, retain-history as Boolean)"}, {"content":"dls.documentPurge(${1:uri as String}, ${2:delete as Boolean}, ${3:retain-history as Boolean})", "trigger":"dls.documentPurge", "description":"(uri as String, delete as Boolean, retain-history as Boolean)"}, {"content":"dls.asOfQuery(${1:when as xs:dateTime})", "trigger":"dls.asOfQuery", "description":"(when as xs:dateTime)"}, {"content":"dls.authorQuery(${1:author as xs:unsignedLong})", "trigger":"dls.authorQuery", "description":"(author as xs:unsignedLong)"}, {"content":"dls.documentVersionQuery(${1:version as xs:unsignedLong})", "trigger":"dls.documentVersionQuery", "description":"(version as xs:unsignedLong)"}, {"content":"dls.documentsQuery()", "trigger":"dls.documentsQuery", "description":"()"}, {"content":"dls.linkExpand(${1:context as node()}, ${2:ref as element(xi:include)}, ${3:restriction as cts:query?})", "trigger":"dls.linkExpand", "description":"(context as node(), ref as element(xi:include), restriction as cts:query?)"}, {"content":"dls.linkReferences(${1:node as node()}, ${2:restriction as cts:query?})", "trigger":"dls.linkReferences", "description":"(node as node(), restriction as cts:query?)"}, {"content":"dls.nodeExpand(${1:node as node()}, ${2:restriction as cts:query?})", "trigger":"dls.nodeExpand", "description":"(node as node(), restriction as cts:query?)"}, {"content":"dls.documentAddCollections(${1:uri as String}, ${2:collections as xs:string*})", "trigger":"dls.documentAddCollections", "description":"(uri as String, collections as xs:string*)"}, {"content":"dls.documentAddPermissions(${1:uri as String}, ${2:permissions as item()*})", "trigger":"dls.documentAddPermissions", "description":"(uri as String, permissions as item()*)"}, {"content":"dls.documentGetPermissions(${1:uri as String})", "trigger":"dls.documentGetPermissions", "description":"(uri as String)"}, {"content":"dls.documentAddProperties(${1:uri as String}, ${2:properties as element()*})", "trigger":"dls.documentAddProperties", "description":"(uri as String, properties as element()*)"}, {"content":"dls.documentSetCollections(${1:uri as String}, ${2:collections as xs:string*})", "trigger":"dls.documentSetCollections", "description":"(uri as String, collections as xs:string*)"}, {"content":"dls.documentSetPermissions(${1:uri as String}, ${2:permissions as item()*})", "trigger":"dls.documentSetPermissions", "description":"(uri as String, permissions as item()*)"}, {"content":"dls.documentSetProperties(${1:uri as String}, ${2:properties as element()*})", "trigger":"dls.documentSetProperties", "description":"(uri as String, properties as element()*)"}, {"content":"dls.documentSetProperty(${1:uri as String}, ${2:property as element()})", "trigger":"dls.documentSetProperty", "description":"(uri as String, property as element())"}, {"content":"dls.documentSetQuality(${1:uri as String}, ${2:quality as xs:int})", "trigger":"dls.documentSetQuality", "description":"(uri as String, quality as xs:int)"}, {"content":"dls.documentRemoveCollections(${1:uri as String}, ${2:collections as xs:string*})", "trigger":"dls.documentRemoveCollections", "description":"(uri as String, collections as xs:string*)"}, {"content":"dls.documentRemovePermissions(${1:uri as String}, ${2:permissions as item()*})", "trigger":"dls.documentRemovePermissions", "description":"(uri as String, permissions as item()*)"}, {"content":"dls.documentRemoveProperties(${1:uri as String}, ${2:property-names as xs:QName*})", "trigger":"dls.documentRemoveProperties", "description":"(uri as String, property-names as xs:QName*)"}, {"content":"dls.documentUpdate(${1:uri as String}, ${2:doc as node()}, ${3:annotation as item()*}, ${4:retain-history as Boolean})", "trigger":"dls.documentUpdate", "description":"(uri as String, doc as node(), annotation as item()*, retain-history as Boolean)"}, {"content":"dls.documentUpdate(${1:uri as String}, ${2:doc as node()}, ${3:annotation as item()*}, ${4:retain-history as Boolean}, ${5:permissions as item()*})", "trigger":"dls.documentUpdate", "description":"(uri as String, doc as node(), annotation as item()*, retain-history as Boolean, permissions as item()*)"}, {"content":"dls.documentUpdate(${1:uri as String}, ${2:doc as node()}, ${3:annotation as item()*}, ${4:retain-history as Boolean}, ${5:permissions as item()*}, ${6:collections as xs:string*})", "trigger":"dls.documentUpdate", "description":"(uri as String, doc as node(), annotation as item()*, retain-history as Boolean, permissions as item()*, collections as xs:string*)"}, {"content":"dls.documentUpdate(${1:uri as String}, ${2:doc as node()}, ${3:annotation as item()*}, ${4:retain-history as Boolean}, ${5:permissions as item()*}, ${6:collections as xs:string*}, ${7:quality as xs:integer?})", "trigger":"dls.documentUpdate", "description":"(uri as String, doc as node(), annotation as item()*, retain-history as Boolean, permissions as item()*, collections as xs:string*, quality as xs:integer?)"}, {"content":"dls.documentUpdate(${1:uri as String}, ${2:doc as node()}, ${3:annotation as item()*}, ${4:retain-history as Boolean}, ${5:permissions as item()*}, ${6:collections as xs:string*}, ${7:quality as xs:integer?}, ${8:forest-ids as xs:unsignedLong*})", "trigger":"dls.documentUpdate", "description":"(uri as String, doc as node(), annotation as item()*, retain-history as Boolean, permissions as item()*, collections as xs:string*, quality as xs:integer?, forest-ids as xs:unsignedLong*)"}, {"content":"dls.breakCheckout(${1:uri as String}, ${2:deep as Boolean})", "trigger":"dls.breakCheckout", "description":"(uri as String, deep as Boolean)"}, {"content":"dls.documentExtractPart(${1:new-uri as String}, ${2:element as element()}, ${3:annotation as item()*}, ${4:retain-history as Boolean})", "trigger":"dls.documentExtractPart", "description":"(new-uri as String, element as element(), annotation as item()*, retain-history as Boolean)"}, {"content":"dls.documentExtractPart(${1:new-uri as String}, ${2:element as element()}, ${3:annotation as item()*}, ${4:retain-history as Boolean}, ${5:permissions as item()*})", "trigger":"dls.documentExtractPart", "description":"(new-uri as String, element as element(), annotation as item()*, retain-history as Boolean, permissions as item()*)"}, {"content":"dls.documentExtractPart(${1:new-uri as String}, ${2:element as element()}, ${3:annotation as item()*}, ${4:retain-history as Boolean}, ${5:permissions as item()*}, ${6:collections as xs:string*})", "trigger":"dls.documentExtractPart", "description":"(new-uri as String, element as element(), annotation as item()*, retain-history as Boolean, permissions as item()*, collections as xs:string*)"}, {"content":"dls.documentExtractPart(${1:new-uri as String}, ${2:element as element()}, ${3:annotation as item()*}, ${4:retain-history as Boolean}, ${5:permissions as item()*}, ${6:collections as xs:string*}, ${7:quality as xs:integer?})", "trigger":"dls.documentExtractPart", "description":"(new-uri as String, element as element(), annotation as item()*, retain-history as Boolean, permissions as item()*, collections as xs:string*, quality as xs:integer?)"}, {"content":"dls.documentExtractPart(${1:new-uri as String}, ${2:element as element()}, ${3:annotation as item()*}, ${4:retain-history as Boolean}, ${5:permissions as item()*}, ${6:collections as xs:string*}, ${7:quality as xs:integer?}, ${8:forest-ids as xs:unsignedLong*})", "trigger":"dls.documentExtractPart", "description":"(new-uri as String, element as element(), annotation as item()*, retain-history as Boolean, permissions as item()*, collections as xs:string*, quality as xs:integer?, forest-ids as xs:unsignedLong*)"}, {"content":"dls.documentCheckoutStatus(${1:uri as String})", "trigger":"dls.documentCheckoutStatus", "description":"(uri as String)"}, {"content":"dls.documentIncludeQuery(${1:uri as String})", "trigger":"dls.documentIncludeQuery", "description":"(uri as String)"}, {"content":"dls.documentInsertAndManage(${1:uri as String}, ${2:deep as Boolean}, ${3:doc as node()})", "trigger":"dls.documentInsertAndManage", "description":"(uri as String, deep as Boolean, doc as node())"}, {"content":"dls.documentInsertAndManage(${1:uri as String}, ${2:deep as Boolean}, ${3:doc as node()}, ${4:annotation as item()*})", "trigger":"dls.documentInsertAndManage", "description":"(uri as String, deep as Boolean, doc as node(), annotation as item()*)"}, {"content":"dls.documentInsertAndManage(${1:uri as String}, ${2:deep as Boolean}, ${3:doc as node()}, ${4:annotation as item()*}, ${5:permissions as item()*})", "trigger":"dls.documentInsertAndManage", "description":"(uri as String, deep as Boolean, doc as node(), annotation as item()*, permissions as item()*)"}, {"content":"dls.documentInsertAndManage(${1:uri as String}, ${2:deep as Boolean}, ${3:doc as node()}, ${4:annotation as item()*}, ${5:permissions as item()*}, ${6:collections as xs:string*})", "trigger":"dls.documentInsertAndManage", "description":"(uri as String, deep as Boolean, doc as node(), annotation as item()*, permissions as item()*, collections as xs:string*)"}, {"content":"dls.documentInsertAndManage(${1:uri as String}, ${2:deep as Boolean}, ${3:doc as node()}, ${4:annotation as item()*}, ${5:permissions as item()*}, ${6:collections as xs:string*}, ${7:quality as xs:integer?})", "trigger":"dls.documentInsertAndManage", "description":"(uri as String, deep as Boolean, doc as node(), annotation as item()*, permissions as item()*, collections as xs:string*, quality as xs:integer?)"}, {"content":"dls.documentInsertAndManage(${1:uri as String}, ${2:deep as Boolean}, ${3:doc as node()}, ${4:annotation as item()*}, ${5:permissions as item()*}, ${6:collections as xs:string*}, ${7:quality as xs:integer?}, ${8:forest-ids as xs:unsignedLong*})", "trigger":"dls.documentInsertAndManage", "description":"(uri as String, deep as Boolean, doc as node(), annotation as item()*, permissions as item()*, collections as xs:string*, quality as xs:integer?, forest-ids as xs:unsignedLong*)"}, {"content":"dls.documentCheckoutUpdateCheckin(${1:uri as String}, ${2:doc as node()}, ${3:annotation as item()*}, ${4:retain-history as Boolean})", "trigger":"dls.documentCheckoutUpdateCheckin", "description":"(uri as String, doc as node(), annotation as item()*, retain-history as Boolean)"}, {"content":"dls.documentCheckoutUpdateCheckin(${1:uri as String}, ${2:doc as node()}, ${3:annotation as item()*}, ${4:retain-history as Boolean}, ${5:permissions as item()*})", "trigger":"dls.documentCheckoutUpdateCheckin", "description":"(uri as String, doc as node(), annotation as item()*, retain-history as Boolean, permissions as item()*)"}, {"content":"dls.documentCheckoutUpdateCheckin(${1:uri as String}, ${2:doc as node()}, ${3:annotation as item()*}, ${4:retain-history as Boolean}, ${5:permissions as item()*}, ${6:collections as xs:string*})", "trigger":"dls.documentCheckoutUpdateCheckin", "description":"(uri as String, doc as node(), annotation as item()*, retain-history as Boolean, permissions as item()*, collections as xs:string*)"}, {"content":"dls.documentCheckoutUpdateCheckin(${1:uri as String}, ${2:doc as node()}, ${3:annotation as item()*}, ${4:retain-history as Boolean}, ${5:permissions as item()*}, ${6:collections as xs:string*}, ${7:quality as xs:integer?})", "trigger":"dls.documentCheckoutUpdateCheckin", "description":"(uri as String, doc as node(), annotation as item()*, retain-history as Boolean, permissions as item()*, collections as xs:string*, quality as xs:integer?)"}, {"content":"dls.documentCheckoutUpdateCheckin(${1:uri as String}, ${2:doc as node()}, ${3:annotation as item()*}, ${4:retain-history as Boolean}, ${5:permissions as item()*}, ${6:collections as xs:string*}, ${7:quality as xs:integer?}, ${8:forest-ids as xs:unsignedLong*})", "trigger":"dls.documentCheckoutUpdateCheckin", "description":"(uri as String, doc as node(), annotation as item()*, retain-history as Boolean, permissions as item()*, collections as xs:string*, quality as xs:integer?, forest-ids as xs:unsignedLong*)"}, {"content":"dls.startUpgrade()", "trigger":"dls.startUpgrade", "description":"()"}, {"content":"dls.validateAllDocuments(${1:verbose as Boolean})", "trigger":"dls.validateAllDocuments", "description":"(verbose as Boolean)"}, {"content":"dls.latestValidationResults()", "trigger":"dls.latestValidationResults", "description":"()"}, {"content":"dls.setUpgradeStatus(${1:promote as Boolean})", "trigger":"dls.setUpgradeStatus", "description":"(promote as Boolean)"}, {"content":"dls.updateValidationResults(${1:results as element(dls:validation-results)})", "trigger":"dls.updateValidationResults", "description":"(results as element(dls:validation-results))"}, {"content":"dbk.convert(${1:doc as node()?}, ${2:options as element()?})", "trigger":"dbk.convert", "description":"(doc as node()?, options as element()?)"}, {"content":"dom.create(${1:name as String}, ${2:description as String}, ${3:scope as element(dom:domain-scope)}, ${4:context as element(dom:evaluation-context)}, ${5:pipelines as xs:unsignedLong*}, ${6:permissions as item()*})", "trigger":"dom.create", "description":"(name as String, description as String, scope as element(dom:domain-scope), context as element(dom:evaluation-context), pipelines as xs:unsignedLong*, permissions as item()*)"}, {"content":"dom.remove(${1:domain-name as String})", "trigger":"dom.remove", "description":"(domain-name as String)"}, {"content":"dom.get(${1:domain-name as String})", "trigger":"dom.get", "description":"(domain-name as String)"}, {"content":"dom.setName(${1:domain-name as String}, ${2:new-name as String})", "trigger":"dom.setName", "description":"(domain-name as String, new-name as String)"}, {"content":"dom.setDescription(${1:domain-name as String}, ${2:description as String})", "trigger":"dom.setDescription", "description":"(domain-name as String, description as String)"}, {"content":"dom.setDomainScope(${1:domain-name as String}, ${2:scope as element(dom:domain-scope)})", "trigger":"dom.setDomainScope", "description":"(domain-name as String, scope as element(dom:domain-scope))"}, {"content":"dom.setEvaluationContext(${1:domain-name as String}, ${2:context as element(dom:evaluation-context)})", "trigger":"dom.setEvaluationContext", "description":"(domain-name as String, context as element(dom:evaluation-context))"}, {"content":"dom.setPermissions(${1:domain-name as String}, ${2:permissions as item()*})", "trigger":"dom.setPermissions", "description":"(domain-name as String, permissions as item()*)"}, {"content":"dom.addPermissions(${1:domain-name as String}, ${2:permissions as item()*})", "trigger":"dom.addPermissions", "description":"(domain-name as String, permissions as item()*)"}, {"content":"dom.removePermissions(${1:domain-name as String}, ${2:permissions as item()*})", "trigger":"dom.removePermissions", "description":"(domain-name as String, permissions as item()*)"}, {"content":"dom.addPipeline(${1:domain-name as String}, ${2:pipeline-id as xs:unsignedLong})", "trigger":"dom.addPipeline", "description":"(domain-name as String, pipeline-id as xs:unsignedLong)"}, {"content":"dom.setPipelines(${1:domain-name as String}, ${2:pipelines as xs:unsignedLong*})", "trigger":"dom.setPipelines", "description":"(domain-name as String, pipelines as xs:unsignedLong*)"}, {"content":"dom.removePipeline(${1:domain-name as String}, ${2:pipeline-id as xs:unsignedLong})", "trigger":"dom.removePipeline", "description":"(domain-name as String, pipeline-id as xs:unsignedLong)"}, {"content":"dom.collection()", "trigger":"dom.collection", "description":"()"}, {"content":"dom.domains()", "trigger":"dom.domains", "description":"()"}, {"content":"dom.domainScope(${1:document-scope as String}, ${2:uri as String}, ${3:depth as xs:string?})", "trigger":"dom.domainScope", "description":"(document-scope as String, uri as String, depth as xs:string?)"}, {"content":"dom.evaluationContext(${1:database as xs:unsignedLong}, ${2:root as String})", "trigger":"dom.evaluationContext", "description":"(database as xs:unsignedLong, root as String)"}, {"content":"dom.configurationSetEvaluationContext(${1:context as element(dom:evaluation-context)})", "trigger":"dom.configurationSetEvaluationContext", "description":"(context as element(dom:evaluation-context))"}, {"content":"dom.configurationSetRestartUser(${1:restart-user as String})", "trigger":"dom.configurationSetRestartUser", "description":"(restart-user as String)"}, {"content":"dom.configurationSetDefaultDomain(${1:domain-id as xs:unsignedLong})", "trigger":"dom.configurationSetDefaultDomain", "description":"(domain-id as xs:unsignedLong)"}, {"content":"dom.configurationSetPermissions(${1:permissions as item()*})", "trigger":"dom.configurationSetPermissions", "description":"(permissions as item()*)"}, {"content":"dom.configurationCreate(${1:restart-user as String}, ${2:evaluation-context as element(dom:evaluation-context)}, ${3:default-domain as xs:unsignedLong}, ${4:permissions as element(sec:permission)*})", "trigger":"dom.configurationCreate", "description":"(restart-user as String, evaluation-context as element(dom:evaluation-context), default-domain as xs:unsignedLong, permissions as element(sec:permission)*)"}, {"content":"dom.configurationGet()", "trigger":"dom.configurationGet", "description":"()"}, {"content":"fn.yearsFromDuration(${1:arg as xs:duration?})", "trigger":"fn.yearsFromDuration", "description":"(arg as xs:duration?)"}, {"content":"fn.monthsFromDuration(${1:arg as xs:duration?})", "trigger":"fn.monthsFromDuration", "description":"(arg as xs:duration?)"}, {"content":"fn.daysFromDuration(${1:arg as xs:duration?})", "trigger":"fn.daysFromDuration", "description":"(arg as xs:duration?)"}, {"content":"fn.hoursFromDuration(${1:arg as xs:duration?})", "trigger":"fn.hoursFromDuration", "description":"(arg as xs:duration?)"}, {"content":"fn.minutesFromDuration(${1:arg as xs:duration?})", "trigger":"fn.minutesFromDuration", "description":"(arg as xs:duration?)"}, {"content":"fn.secondsFromDuration(${1:arg as xs:duration?})", "trigger":"fn.secondsFromDuration", "description":"(arg as xs:duration?)"}, {"content":"fn.yearFromDatetime(${1:arg as xs:dateTime?})", "trigger":"fn.yearFromDatetime", "description":"(arg as xs:dateTime?)"}, {"content":"fn.monthFromDatetime(${1:arg as xs:dateTime?})", "trigger":"fn.monthFromDatetime", "description":"(arg as xs:dateTime?)"}, {"content":"fn.dayFromDatetime(${1:arg as xs:dateTime?})", "trigger":"fn.dayFromDatetime", "description":"(arg as xs:dateTime?)"}, {"content":"fn.hoursFromDatetime(${1:arg as xs:dateTime?})", "trigger":"fn.hoursFromDatetime", "description":"(arg as xs:dateTime?)"}, {"content":"fn.minutesFromDatetime(${1:arg as xs:dateTime?})", "trigger":"fn.minutesFromDatetime", "description":"(arg as xs:dateTime?)"}, {"content":"fn.secondsFromDatetime(${1:arg as xs:dateTime?})", "trigger":"fn.secondsFromDatetime", "description":"(arg as xs:dateTime?)"}, {"content":"fn.timezoneFromDatetime(${1:arg as xs:dateTime?})", "trigger":"fn.timezoneFromDatetime", "description":"(arg as xs:dateTime?)"}, {"content":"fn.yearFromDate(${1:arg as xs:date?})", "trigger":"fn.yearFromDate", "description":"(arg as xs:date?)"}, {"content":"fn.monthFromDate(${1:arg as xs:date?})", "trigger":"fn.monthFromDate", "description":"(arg as xs:date?)"}, {"content":"fn.dayFromDate(${1:arg as xs:date?})", "trigger":"fn.dayFromDate", "description":"(arg as xs:date?)"}, {"content":"xdmp.quarterFromDate(${1:arg as xs:date?})", "trigger":"xdmp.quarterFromDate", "description":"(arg as xs:date?)"}, {"content":"xdmp.weekFromDate(${1:arg as xs:date?})", "trigger":"xdmp.weekFromDate", "description":"(arg as xs:date?)"}, {"content":"xdmp.yeardayFromDate(${1:arg as xs:date?})", "trigger":"xdmp.yeardayFromDate", "description":"(arg as xs:date?)"}, {"content":"xdmp.weekdayFromDate(${1:arg as xs:date?})", "trigger":"xdmp.weekdayFromDate", "description":"(arg as xs:date?)"}, {"content":"fn.timezoneFromDate(${1:arg as xs:date?})", "trigger":"fn.timezoneFromDate", "description":"(arg as xs:date?)"}, {"content":"fn.hoursFromTime(${1:arg as xs:time?})", "trigger":"fn.hoursFromTime", "description":"(arg as xs:time?)"}, {"content":"fn.minutesFromTime(${1:arg as xs:time?})", "trigger":"fn.minutesFromTime", "description":"(arg as xs:time?)"}, {"content":"fn.secondsFromTime(${1:arg as xs:time?})", "trigger":"fn.secondsFromTime", "description":"(arg as xs:time?)"}, {"content":"fn.timezoneFromTime(${1:arg as xs:time?})", "trigger":"fn.timezoneFromTime", "description":"(arg as xs:time?)"}, {"content":"fn.adjustDatetimeToTimezone(${1:arg as xs:dateTime?})", "trigger":"fn.adjustDatetimeToTimezone", "description":"(arg as xs:dateTime?)"}, {"content":"fn.adjustDatetimeToTimezone(${1:arg as xs:dateTime?}, ${2:timezone as xs:dayTimeDuration?})", "trigger":"fn.adjustDatetimeToTimezone", "description":"(arg as xs:dateTime?, timezone as xs:dayTimeDuration?)"}, {"content":"fn.adjustDateToTimezone(${1:arg as xs:date?})", "trigger":"fn.adjustDateToTimezone", "description":"(arg as xs:date?)"}, {"content":"fn.adjustDateToTimezone(${1:arg as xs:date?}, ${2:timezone as xs:dayTimeDuration?})", "trigger":"fn.adjustDateToTimezone", "description":"(arg as xs:date?, timezone as xs:dayTimeDuration?)"}, {"content":"fn.adjustTimeToTimezone(${1:arg as xs:time?})", "trigger":"fn.adjustTimeToTimezone", "description":"(arg as xs:time?)"}, {"content":"fn.adjustTimeToTimezone(${1:arg as xs:time?}, ${2:timezone as xs:dayTimeDuration?})", "trigger":"fn.adjustTimeToTimezone", "description":"(arg as xs:time?, timezone as xs:dayTimeDuration?)"}, {"content":"fn.subtractDatetimesYieldingYearmonthduration(${1:srcval1 as xs:dateTime}, ${2:srcval1 as xs:dateTime})", "trigger":"fn.subtractDatetimesYieldingYearmonthduration", "description":"(srcval1 as xs:dateTime, srcval1 as xs:dateTime)"}, {"content":"fn.subtractDatetimesYieldingDaytimeduration(${1:srcval1 as xs:dateTime}, ${2:srcval1 as xs:dateTime})", "trigger":"fn.subtractDatetimesYieldingDaytimeduration", "description":"(srcval1 as xs:dateTime, srcval1 as xs:dateTime)"}, {"content":"sql.datepart(${1:datepart as xs:string?}, ${2:date as xs:genericDateTimeArg})", "trigger":"sql.datepart", "description":"(datepart as xs:string?, date as xs:genericDateTimeArg)"}, {"content":"sql.datediff(${1:datepart as String}, ${2:startdate as item()}, ${3:enddate as item()})", "trigger":"sql.datediff", "description":"(datepart as String, startdate as item(), enddate as item())"}, {"content":"sql.dateadd(${1:datepart as String}, ${2:number as xs:integer}, ${3:date as item()})", "trigger":"sql.dateadd", "description":"(datepart as String, number as xs:integer, date as item())"}, {"content":"ec2.describeImages(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String})", "trigger":"ec2.describeImages", "description":"(access-key as String, secret-key as String, ec2-region as String)"}, {"content":"ec2.describeImages(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:image-ids as xs:string*})", "trigger":"ec2.describeImages", "description":"(access-key as String, secret-key as String, ec2-region as String, image-ids as xs:string*)"}, {"content":"ec2.describeImages(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:image-ids as xs:string*}, ${5:executable-by as xs:string*})", "trigger":"ec2.describeImages", "description":"(access-key as String, secret-key as String, ec2-region as String, image-ids as xs:string*, executable-by as xs:string*)"}, {"content":"ec2.describeImages(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:image-ids as xs:string*}, ${5:executable-by as xs:string*}, ${6:owners as xs:string*})", "trigger":"ec2.describeImages", "description":"(access-key as String, secret-key as String, ec2-region as String, image-ids as xs:string*, executable-by as xs:string*, owners as xs:string*)"}, {"content":"ec2.describeAvailabilityZones(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String})", "trigger":"ec2.describeAvailabilityZones", "description":"(access-key as String, secret-key as String, ec2-region as String)"}, {"content":"ec2.describeAvailabilityZones(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:zone-name as xs:string*})", "trigger":"ec2.describeAvailabilityZones", "description":"(access-key as String, secret-key as String, ec2-region as String, zone-name as xs:string*)"}, {"content":"ec2.describeRegions(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String})", "trigger":"ec2.describeRegions", "description":"(access-key as String, secret-key as String, ec2-region as String)"}, {"content":"ec2.describeRegions(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:region-names as xs:string*})", "trigger":"ec2.describeRegions", "description":"(access-key as String, secret-key as String, ec2-region as String, region-names as xs:string*)"}, {"content":"ec2.attachVolume(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:volume-id as String}, ${5:instance-id as String}, ${6:device as String})", "trigger":"ec2.attachVolume", "description":"(access-key as String, secret-key as String, ec2-region as String, volume-id as String, instance-id as String, device as String)"}, {"content":"ec2.createSnapshot(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:volume-id as String})", "trigger":"ec2.createSnapshot", "description":"(access-key as String, secret-key as String, ec2-region as String, volume-id as String)"}, {"content":"ec2.createSnapshot(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:volume-id as String}, ${5:description as xs:string?})", "trigger":"ec2.createSnapshot", "description":"(access-key as String, secret-key as String, ec2-region as String, volume-id as String, description as xs:string?)"}, {"content":"ec2.createVolume(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:availability-zone as String}, ${5:size as xs:integer})", "trigger":"ec2.createVolume", "description":"(access-key as String, secret-key as String, ec2-region as String, availability-zone as String, size as xs:integer)"}, {"content":"ec2.createVolumeFromSnapshot(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:availability-zone as String}, ${5:snapshot-id as String})", "trigger":"ec2.createVolumeFromSnapshot", "description":"(access-key as String, secret-key as String, ec2-region as String, availability-zone as String, snapshot-id as String)"}, {"content":"ec2.createVolumeFromSnapshot(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:availability-zone as String}, ${5:snapshot-id as String}, ${6:size as xs:integer?})", "trigger":"ec2.createVolumeFromSnapshot", "description":"(access-key as String, secret-key as String, ec2-region as String, availability-zone as String, snapshot-id as String, size as xs:integer?)"}, {"content":"ec2.deleteSnapshot(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:snapshot-id as String})", "trigger":"ec2.deleteSnapshot", "description":"(access-key as String, secret-key as String, ec2-region as String, snapshot-id as String)"}, {"content":"ec2.deleteVolume(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:volume-id as String})", "trigger":"ec2.deleteVolume", "description":"(access-key as String, secret-key as String, ec2-region as String, volume-id as String)"}, {"content":"ec2.describeSnapshotCreateVolumePermission(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:snapshot-ids as xs:string*})", "trigger":"ec2.describeSnapshotCreateVolumePermission", "description":"(access-key as String, secret-key as String, ec2-region as String, snapshot-ids as xs:string*)"}, {"content":"ec2.describeSnapshots(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String})", "trigger":"ec2.describeSnapshots", "description":"(access-key as String, secret-key as String, ec2-region as String)"}, {"content":"ec2.describeSnapshots(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:snapshot-ids as xs:string*})", "trigger":"ec2.describeSnapshots", "description":"(access-key as String, secret-key as String, ec2-region as String, snapshot-ids as xs:string*)"}, {"content":"ec2.describeSnapshots(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:snapshot-ids as xs:string*}, ${5:owners as xs:string*})", "trigger":"ec2.describeSnapshots", "description":"(access-key as String, secret-key as String, ec2-region as String, snapshot-ids as xs:string*, owners as xs:string*)"}, {"content":"ec2.describeSnapshots(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:snapshot-ids as xs:string*}, ${5:owners as xs:string*}, ${6:restorable-bys as xs:string*})", "trigger":"ec2.describeSnapshots", "description":"(access-key as String, secret-key as String, ec2-region as String, snapshot-ids as xs:string*, owners as xs:string*, restorable-bys as xs:string*)"}, {"content":"ec2.describeVolumes(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String})", "trigger":"ec2.describeVolumes", "description":"(access-key as String, secret-key as String, ec2-region as String)"}, {"content":"ec2.describeVolumes(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:volume-ids as xs:string*})", "trigger":"ec2.describeVolumes", "description":"(access-key as String, secret-key as String, ec2-region as String, volume-ids as xs:string*)"}, {"content":"ec2.detachVolume(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:volume-id as String})", "trigger":"ec2.detachVolume", "description":"(access-key as String, secret-key as String, ec2-region as String, volume-id as String)"}, {"content":"ec2.detachVolume(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:volume-id as String}, ${5:instance-id as xs:string?})", "trigger":"ec2.detachVolume", "description":"(access-key as String, secret-key as String, ec2-region as String, volume-id as String, instance-id as xs:string?)"}, {"content":"ec2.detachVolume(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:volume-id as String}, ${5:instance-id as xs:string?}, ${6:device as xs:string?})", "trigger":"ec2.detachVolume", "description":"(access-key as String, secret-key as String, ec2-region as String, volume-id as String, instance-id as xs:string?, device as xs:string?)"}, {"content":"ec2.detachVolume(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:volume-id as String}, ${5:instance-id as xs:string?}, ${6:device as xs:string?}, ${7:force as xs:boolean?})", "trigger":"ec2.detachVolume", "description":"(access-key as String, secret-key as String, ec2-region as String, volume-id as String, instance-id as xs:string?, device as xs:string?, force as xs:boolean?)"}, {"content":"ec2.addSnapshotCreateVolumePermissionUsers(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:snapshot-ids as xs:string*}, ${5:user-ids as xs:string*})", "trigger":"ec2.addSnapshotCreateVolumePermissionUsers", "description":"(access-key as String, secret-key as String, ec2-region as String, snapshot-ids as xs:string*, user-ids as xs:string*)"}, {"content":"ec2.addSnapshotCreateVolumePermissionGroups(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:snapshot-ids as xs:string*}, ${5:user-groups as xs:string*})", "trigger":"ec2.addSnapshotCreateVolumePermissionGroups", "description":"(access-key as String, secret-key as String, ec2-region as String, snapshot-ids as xs:string*, user-groups as xs:string*)"}, {"content":"ec2.removeSnapshotCreateVolumePermissionUsers(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:snapshot-ids as xs:string*}, ${5:user-ids as xs:string*})", "trigger":"ec2.removeSnapshotCreateVolumePermissionUsers", "description":"(access-key as String, secret-key as String, ec2-region as String, snapshot-ids as xs:string*, user-ids as xs:string*)"}, {"content":"ec2.removeSnapshotCreateVolumePermissionGroups(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:snapshot-ids as xs:string*}, ${5:user-groups as xs:string*})", "trigger":"ec2.removeSnapshotCreateVolumePermissionGroups", "description":"(access-key as String, secret-key as String, ec2-region as String, snapshot-ids as xs:string*, user-groups as xs:string*)"}, {"content":"ec2.resetSnapshotCreateVolumePermission(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:snapshot-ids as xs:string*})", "trigger":"ec2.resetSnapshotCreateVolumePermission", "description":"(access-key as String, secret-key as String, ec2-region as String, snapshot-ids as xs:string*)"}, {"content":"ec2.allocateAddress(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String})", "trigger":"ec2.allocateAddress", "description":"(access-key as String, secret-key as String, ec2-region as String)"}, {"content":"ec2.associateAddress(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:public-ip as String}, ${5:instance-id as String})", "trigger":"ec2.associateAddress", "description":"(access-key as String, secret-key as String, ec2-region as String, public-ip as String, instance-id as String)"}, {"content":"ec2.describeAddresses(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String})", "trigger":"ec2.describeAddresses", "description":"(access-key as String, secret-key as String, ec2-region as String)"}, {"content":"ec2.describeAddresses(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:public-ips as xs:string*})", "trigger":"ec2.describeAddresses", "description":"(access-key as String, secret-key as String, ec2-region as String, public-ips as xs:string*)"}, {"content":"ec2.disassociateAddress(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:public-ip as String})", "trigger":"ec2.disassociateAddress", "description":"(access-key as String, secret-key as String, ec2-region as String, public-ip as String)"}, {"content":"ec2.releaseAddress(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:public-ip as String})", "trigger":"ec2.releaseAddress", "description":"(access-key as String, secret-key as String, ec2-region as String, public-ip as String)"}, {"content":"ec2.getConsoleOutput(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:instance-id as String})", "trigger":"ec2.getConsoleOutput", "description":"(access-key as String, secret-key as String, ec2-region as String, instance-id as String)"}, {"content":"ec2.describeInstanceBlockDeviceMapping(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:instance-ids as String})", "trigger":"ec2.describeInstanceBlockDeviceMapping", "description":"(access-key as String, secret-key as String, ec2-region as String, instance-ids as String)"}, {"content":"ec2.describeInstanceDisableApiTermination(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:instance-ids as String})", "trigger":"ec2.describeInstanceDisableApiTermination", "description":"(access-key as String, secret-key as String, ec2-region as String, instance-ids as String)"}, {"content":"ec2.describeInstanceInitiatedShutdownBehavior(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:instance-ids as String})", "trigger":"ec2.describeInstanceInitiatedShutdownBehavior", "description":"(access-key as String, secret-key as String, ec2-region as String, instance-ids as String)"}, {"content":"ec2.describeInstanceKernel(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:instance-ids as String})", "trigger":"ec2.describeInstanceKernel", "description":"(access-key as String, secret-key as String, ec2-region as String, instance-ids as String)"}, {"content":"ec2.describeInstanceRamdisk(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:instance-ids as String})", "trigger":"ec2.describeInstanceRamdisk", "description":"(access-key as String, secret-key as String, ec2-region as String, instance-ids as String)"}, {"content":"ec2.describeInstanceRootDeviceName(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:instance-ids as String})", "trigger":"ec2.describeInstanceRootDeviceName", "description":"(access-key as String, secret-key as String, ec2-region as String, instance-ids as String)"}, {"content":"ec2.describeInstanceType(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:instance-ids as String})", "trigger":"ec2.describeInstanceType", "description":"(access-key as String, secret-key as String, ec2-region as String, instance-ids as String)"}, {"content":"ec2.describeInstanceUserData(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:instance-ids as String})", "trigger":"ec2.describeInstanceUserData", "description":"(access-key as String, secret-key as String, ec2-region as String, instance-ids as String)"}, {"content":"ec2.describeInstances(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String})", "trigger":"ec2.describeInstances", "description":"(access-key as String, secret-key as String, ec2-region as String)"}, {"content":"ec2.describeInstances(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:instance-ids as xs:string*})", "trigger":"ec2.describeInstances", "description":"(access-key as String, secret-key as String, ec2-region as String, instance-ids as xs:string*)"}, {"content":"ec2.modifyInstanceBlockDeviceMapping(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:instance-id as String}, ${5:value as String})", "trigger":"ec2.modifyInstanceBlockDeviceMapping", "description":"(access-key as String, secret-key as String, ec2-region as String, instance-id as String, value as String)"}, {"content":"ec2.modifyInstanceDisableApiTermination(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:instance-id as String}, ${5:value as Boolean})", "trigger":"ec2.modifyInstanceDisableApiTermination", "description":"(access-key as String, secret-key as String, ec2-region as String, instance-id as String, value as Boolean)"}, {"content":"ec2.modifyInstanceInitiatedShutdownBehavior(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:instance-id as String}, ${5:value as String})", "trigger":"ec2.modifyInstanceInitiatedShutdownBehavior", "description":"(access-key as String, secret-key as String, ec2-region as String, instance-id as String, value as String)"}, {"content":"ec2.modifyInstanceKernel(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:instance-id as String}, ${5:value as String})", "trigger":"ec2.modifyInstanceKernel", "description":"(access-key as String, secret-key as String, ec2-region as String, instance-id as String, value as String)"}, {"content":"ec2.modifyInstanceRamdisk(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:instance-id as String}, ${5:value as String})", "trigger":"ec2.modifyInstanceRamdisk", "description":"(access-key as String, secret-key as String, ec2-region as String, instance-id as String, value as String)"}, {"content":"ec2.modifyInstanceRootDeviceName(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:instance-id as String}, ${5:value as String})", "trigger":"ec2.modifyInstanceRootDeviceName", "description":"(access-key as String, secret-key as String, ec2-region as String, instance-id as String, value as String)"}, {"content":"ec2.modifyInstanceType(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:instance-id as String}, ${5:value as String})", "trigger":"ec2.modifyInstanceType", "description":"(access-key as String, secret-key as String, ec2-region as String, instance-id as String, value as String)"}, {"content":"ec2.modifyInstanceUserData(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:instance-id as String}, ${5:value as String})", "trigger":"ec2.modifyInstanceUserData", "description":"(access-key as String, secret-key as String, ec2-region as String, instance-id as String, value as String)"}, {"content":"ec2.rebootInstances(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:instance-ids as xs:string+})", "trigger":"ec2.rebootInstances", "description":"(access-key as String, secret-key as String, ec2-region as String, instance-ids as xs:string+)"}, {"content":"ec2.resetInstanceKernel(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:instance-ids as xs:string*})", "trigger":"ec2.resetInstanceKernel", "description":"(access-key as String, secret-key as String, ec2-region as String, instance-ids as xs:string*)"}, {"content":"ec2.resetInstanceRamdisk(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:instance-ids as xs:string*})", "trigger":"ec2.resetInstanceRamdisk", "description":"(access-key as String, secret-key as String, ec2-region as String, instance-ids as xs:string*)"}, {"content":"ec2.runInstances(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:image-id as String}, ${5:min-count as xs:integer}, ${6:max-count as xs:integer}, ${7:instance-type as xs:string?}, ${8:key-pair as xs:string?}, ${9:security-group as xs:string*}, ${10:instance-options as xs:string*})", "trigger":"ec2.runInstances", "description":"(access-key as String, secret-key as String, ec2-region as String, image-id as String, min-count as xs:integer, max-count as xs:integer, instance-type as xs:string?, key-pair as xs:string?, security-group as xs:string*, instance-options as xs:string*)"}, {"content":"ec2.startInstances(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:instance-ids as xs:string+})", "trigger":"ec2.startInstances", "description":"(access-key as String, secret-key as String, ec2-region as String, instance-ids as xs:string+)"}, {"content":"ec2.stopInstances(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:instance-ids as xs:string+}, ${5:force as Boolean})", "trigger":"ec2.stopInstances", "description":"(access-key as String, secret-key as String, ec2-region as String, instance-ids as xs:string+, force as Boolean)"}, {"content":"ec2.terminateInstances(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:instance-ids as xs:string+})", "trigger":"ec2.terminateInstances", "description":"(access-key as String, secret-key as String, ec2-region as String, instance-ids as xs:string+)"}, {"content":"ec2.createKeyPair(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:key-name as String})", "trigger":"ec2.createKeyPair", "description":"(access-key as String, secret-key as String, ec2-region as String, key-name as String)"}, {"content":"ec2.deleteKeyPair(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:key-name as String})", "trigger":"ec2.deleteKeyPair", "description":"(access-key as String, secret-key as String, ec2-region as String, key-name as String)"}, {"content":"ec2.describeKeyPairs(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String})", "trigger":"ec2.describeKeyPairs", "description":"(access-key as String, secret-key as String, ec2-region as String)"}, {"content":"ec2.describeKeyPairs(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:key-names as xs:string*})", "trigger":"ec2.describeKeyPairs", "description":"(access-key as String, secret-key as String, ec2-region as String, key-names as xs:string*)"}, {"content":"ec2.monitorInstances(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:instance-ids as xs:string+})", "trigger":"ec2.monitorInstances", "description":"(access-key as String, secret-key as String, ec2-region as String, instance-ids as xs:string+)"}, {"content":"ec2.unmonitorInstances(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:instance-ids as xs:string+})", "trigger":"ec2.unmonitorInstances", "description":"(access-key as String, secret-key as String, ec2-region as String, instance-ids as xs:string+)"}, {"content":"ec2.authorizeGroupIngress(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:group-name as String}, ${5:source-group-owner-id as String}, ${6:source-group-name as String})", "trigger":"ec2.authorizeGroupIngress", "description":"(access-key as String, secret-key as String, ec2-region as String, group-name as String, source-group-owner-id as String, source-group-name as String)"}, {"content":"ec2.authorizeIcmpIngress(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:group-name as String}, ${5:icmp-type as xs:integer}, ${6:icmp-code as xs:integer}, ${7:cidr-ip as String})", "trigger":"ec2.authorizeIcmpIngress", "description":"(access-key as String, secret-key as String, ec2-region as String, group-name as String, icmp-type as xs:integer, icmp-code as xs:integer, cidr-ip as String)"}, {"content":"ec2.authorizeTcpIngress(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:group-name as String}, ${5:port-range as xs:integer+}, ${6:cidr-ip as String})", "trigger":"ec2.authorizeTcpIngress", "description":"(access-key as String, secret-key as String, ec2-region as String, group-name as String, port-range as xs:integer+, cidr-ip as String)"}, {"content":"ec2.authorizeUdpIngress(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:group-name as String}, ${5:port-range as xs:integer+}, ${6:cidr-ip as String})", "trigger":"ec2.authorizeUdpIngress", "description":"(access-key as String, secret-key as String, ec2-region as String, group-name as String, port-range as xs:integer+, cidr-ip as String)"}, {"content":"ec2.createSecurityGroup(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:group-name as String}, ${5:group-description as String})", "trigger":"ec2.createSecurityGroup", "description":"(access-key as String, secret-key as String, ec2-region as String, group-name as String, group-description as String)"}, {"content":"ec2.deleteSecurityGroup(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:group-name as String})", "trigger":"ec2.deleteSecurityGroup", "description":"(access-key as String, secret-key as String, ec2-region as String, group-name as String)"}, {"content":"ec2.describeSecurityGroups(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String})", "trigger":"ec2.describeSecurityGroups", "description":"(access-key as String, secret-key as String, ec2-region as String)"}, {"content":"ec2.describeSecurityGroups(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:group-names as xs:string*})", "trigger":"ec2.describeSecurityGroups", "description":"(access-key as String, secret-key as String, ec2-region as String, group-names as xs:string*)"}, {"content":"ec2.revokeGroupIngress(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:group-name as String}, ${5:source-group-owner-id as String}, ${6:source-group-name as String})", "trigger":"ec2.revokeGroupIngress", "description":"(access-key as String, secret-key as String, ec2-region as String, group-name as String, source-group-owner-id as String, source-group-name as String)"}, {"content":"ec2.revokeIcmpIngress(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:group-name as String}, ${5:icmp-type as xs:integer}, ${6:icmp-code as xs:integer}, ${7:cidr-ip as String})", "trigger":"ec2.revokeIcmpIngress", "description":"(access-key as String, secret-key as String, ec2-region as String, group-name as String, icmp-type as xs:integer, icmp-code as xs:integer, cidr-ip as String)"}, {"content":"ec2.revokeTcpIngress(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:group-name as String}, ${5:port-range as xs:integer+}, ${6:cidr-ip as String})", "trigger":"ec2.revokeTcpIngress", "description":"(access-key as String, secret-key as String, ec2-region as String, group-name as String, port-range as xs:integer+, cidr-ip as String)"}, {"content":"ec2.revokeUdpIngress(${1:access-key as String}, ${2:secret-key as String}, ${3:ec2-region as String}, ${4:group-name as String}, ${5:port-range as xs:integer+}, ${6:cidr-ip as String})", "trigger":"ec2.revokeUdpIngress", "description":"(access-key as String, secret-key as String, ec2-region as String, group-name as String, port-range as xs:integer+, cidr-ip as String)"}, {"content":"fn.error()", "trigger":"fn.error", "description":"()"}, {"content":"fn.error(${1:error as xs:QName?})", "trigger":"fn.error", "description":"(error as xs:QName?)"}, {"content":"fn.error(${1:error as xs:QName?}, ${2:description as String})", "trigger":"fn.error", "description":"(error as xs:QName?, description as String)"}, {"content":"fn.error(${1:error as xs:QName?}, ${2:description as String}, ${3:data as item()*})", "trigger":"fn.error", "description":"(error as xs:QName?, description as String, data as item()*)"}, {"content":"xdmp.eval(${1:javascript as String})", "trigger":"xdmp.eval", "description":"(javascript as String)"}, {"content":"xdmp.eval(${1:javascript as String}, ${2:vars as Object})", "trigger":"xdmp.eval", "description":"(javascript as String, vars as Object)"}, {"content":"xdmp.eval(${1:javascript as String}, ${2:vars as Object}, ${3:options as (element()|map:map)?})", "trigger":"xdmp.eval", "description":"(javascript as String, vars as Object, options as (element()|map:map)?)"}, {"content":"xdmp.xqueryEval(${1:xquery as String})", "trigger":"xdmp.xqueryEval", "description":"(xquery as String)"}, {"content":"xdmp.xqueryEval(${1:xquery as String}, ${2:vars as Object})", "trigger":"xdmp.xqueryEval", "description":"(xquery as String, vars as Object)"}, {"content":"xdmp.xqueryEval(${1:xquery as String}, ${2:vars as Object}, ${3:options as (element()|map:map)?})", "trigger":"xdmp.xqueryEval", "description":"(xquery as String, vars as Object, options as (element()|map:map)?)"}, {"content":"xdmp.javascriptEval(${1:javascript as String})", "trigger":"xdmp.javascriptEval", "description":"(javascript as String)"}, {"content":"xdmp.javascriptEval(${1:javascript as String}, ${2:vars as item()*})", "trigger":"xdmp.javascriptEval", "description":"(javascript as String, vars as item()*)"}, {"content":"xdmp.javascriptEval(${1:javascript as String}, ${2:vars as item()*}, ${3:options as node()?})", "trigger":"xdmp.javascriptEval", "description":"(javascript as String, vars as item()*, options as node()?)"}, {"content":"xdmp.evalIn(${1:xquery as String}, ${2:ID as xs:unsignedLong*})", "trigger":"xdmp.evalIn", "description":"(xquery as String, ID as xs:unsignedLong*)"}, {"content":"xdmp.evalIn(${1:xquery as String}, ${2:ID as xs:unsignedLong*}, ${3:vars as item()*})", "trigger":"xdmp.evalIn", "description":"(xquery as String, ID as xs:unsignedLong*, vars as item()*)"}, {"content":"xdmp.evalIn(${1:xquery as String}, ${2:ID as xs:unsignedLong*}, ${3:vars as item()*}, ${4:modules as xs:unsignedLong?})", "trigger":"xdmp.evalIn", "description":"(xquery as String, ID as xs:unsignedLong*, vars as item()*, modules as xs:unsignedLong?)"}, {"content":"xdmp.evalIn(${1:xquery as String}, ${2:ID as xs:unsignedLong*}, ${3:vars as item()*}, ${4:modules as xs:unsignedLong?}, ${5:root as xs:string?})", "trigger":"xdmp.evalIn", "description":"(xquery as String, ID as xs:unsignedLong*, vars as item()*, modules as xs:unsignedLong?, root as xs:string?)"}, {"content":"xdmp.invoke(${1:path as String})", "trigger":"xdmp.invoke", "description":"(path as String)"}, {"content":"xdmp.invoke(${1:path as String}, ${2:vars as Object})", "trigger":"xdmp.invoke", "description":"(path as String, vars as Object)"}, {"content":"xdmp.invoke(${1:path as String}, ${2:vars as Object}, ${3:options as (element()|map:map)?})", "trigger":"xdmp.invoke", "description":"(path as String, vars as Object, options as (element()|map:map)?)"}, {"content":"xdmp.invokeFunction(${1:path as function() as item()*})", "trigger":"xdmp.invokeFunction", "description":"(path as function() as item()*)"}, {"content":"xdmp.invokeFunction(${1:path as function() as item()*}, ${2:options as (element()|map:map)?})", "trigger":"xdmp.invokeFunction", "description":"(path as function() as item()*, options as (element()|map:map)?)"}, {"content":"xdmp.invokeFunction(${1:jsFunc as function()})", "trigger":"xdmp.invokeFunction", "description":"(jsFunc as function())"}, {"content":"xdmp.invokeFunction(${1:jsFunc as function()}, ${2:options as (element()|map:map)?})", "trigger":"xdmp.invokeFunction", "description":"(jsFunc as function(), options as (element()|map:map)?)"}, {"content":"xdmp.invokeIn(${1:uri as String}, ${2:ID as xs:unsignedLong*})", "trigger":"xdmp.invokeIn", "description":"(uri as String, ID as xs:unsignedLong*)"}, {"content":"xdmp.invokeIn(${1:uri as String}, ${2:ID as xs:unsignedLong*}, ${3:vars as item()*})", "trigger":"xdmp.invokeIn", "description":"(uri as String, ID as xs:unsignedLong*, vars as item()*)"}, {"content":"xdmp.invokeIn(${1:uri as String}, ${2:ID as xs:unsignedLong*}, ${3:vars as item()*}, ${4:modules as xs:unsignedLong?})", "trigger":"xdmp.invokeIn", "description":"(uri as String, ID as xs:unsignedLong*, vars as item()*, modules as xs:unsignedLong?)"}, {"content":"xdmp.invokeIn(${1:uri as String}, ${2:ID as xs:unsignedLong*}, ${3:vars as item()*}, ${4:modules as xs:unsignedLong?}, ${5:root as xs:string?})", "trigger":"xdmp.invokeIn", "description":"(uri as String, ID as xs:unsignedLong*, vars as item()*, modules as xs:unsignedLong?, root as xs:string?)"}, {"content":"xdmp.value(${1:expr as String})", "trigger":"xdmp.value", "description":"(expr as String)"}, {"content":"xdmp.value(${1:expr as String}, ${2:map as map:map})", "trigger":"xdmp.value", "description":"(expr as String, map as map:map)"}, {"content":"xdmp.unpath(${1:expr as String})", "trigger":"xdmp.unpath", "description":"(expr as String)"}, {"content":"xdmp.unpath(${1:expr as String}, ${2:map as map:map})", "trigger":"xdmp.unpath", "description":"(expr as String, map as map:map)"}, {"content":"xdmp.xsltInvoke(${1:path as String})", "trigger":"xdmp.xsltInvoke", "description":"(path as String)"}, {"content":"xdmp.xsltInvoke(${1:path as String}, ${2:input as node()?})", "trigger":"xdmp.xsltInvoke", "description":"(path as String, input as node()?)"}, {"content":"xdmp.xsltInvoke(${1:path as String}, ${2:input as node()?}, ${3:params as map:map?})", "trigger":"xdmp.xsltInvoke", "description":"(path as String, input as node()?, params as map:map?)"}, {"content":"xdmp.xsltInvoke(${1:path as String}, ${2:input as node()?}, ${3:params as map:map?}, ${4:options as (element()|map:map)?})", "trigger":"xdmp.xsltInvoke", "description":"(path as String, input as node()?, params as map:map?, options as (element()|map:map)?)"}, {"content":"xdmp.xsltEval(${1:stylesheet as node()})", "trigger":"xdmp.xsltEval", "description":"(stylesheet as node())"}, {"content":"xdmp.xsltEval(${1:stylesheet as node()}, ${2:input as node()?})", "trigger":"xdmp.xsltEval", "description":"(stylesheet as node(), input as node()?)"}, {"content":"xdmp.xsltEval(${1:stylesheet as node()}, ${2:input as node()?}, ${3:params as map:map?})", "trigger":"xdmp.xsltEval", "description":"(stylesheet as node(), input as node()?, params as map:map?)"}, {"content":"xdmp.xsltEval(${1:stylesheet as node()}, ${2:input as node()?}, ${3:params as map:map?}, ${4:options as (element()|map:map)?})", "trigger":"xdmp.xsltEval", "description":"(stylesheet as node(), input as node()?, params as map:map?, options as (element()|map:map)?)"}, {"content":"xdmp.spawn(${1:path as String})", "trigger":"xdmp.spawn", "description":"(path as String)"}, {"content":"xdmp.spawn(${1:path as String}, ${2:vars as Object})", "trigger":"xdmp.spawn", "description":"(path as String, vars as Object)"}, {"content":"xdmp.spawn(${1:path as String}, ${2:vars as Object}, ${3:options as (element()|map:map)?})", "trigger":"xdmp.spawn", "description":"(path as String, vars as Object, options as (element()|map:map)?)"}, {"content":"xdmp.spawnFunction(${1:function as function() as item()*})", "trigger":"xdmp.spawnFunction", "description":"(function as function() as item()*)"}, {"content":"xdmp.spawnFunction(${1:function as function() as item()*}, ${2:options as (element()|map:map)?})", "trigger":"xdmp.spawnFunction", "description":"(function as function() as item()*, options as (element()|map:map)?)"}, {"content":"xdmp.spawnIn(${1:path as String}, ${2:ID as xs:unsignedLong})", "trigger":"xdmp.spawnIn", "description":"(path as String, ID as xs:unsignedLong)"}, {"content":"xdmp.spawnIn(${1:path as String}, ${2:ID as xs:unsignedLong}, ${3:vars as item()*})", "trigger":"xdmp.spawnIn", "description":"(path as String, ID as xs:unsignedLong, vars as item()*)"}, {"content":"xdmp.spawnIn(${1:path as String}, ${2:ID as xs:unsignedLong}, ${3:vars as item()*}, ${4:modules as xs:unsignedLong?})", "trigger":"xdmp.spawnIn", "description":"(path as String, ID as xs:unsignedLong, vars as item()*, modules as xs:unsignedLong?)"}, {"content":"xdmp.spawnIn(${1:path as String}, ${2:ID as xs:unsignedLong}, ${3:vars as item()*}, ${4:modules as xs:unsignedLong?}, ${5:root as xs:string?})", "trigger":"xdmp.spawnIn", "description":"(path as String, ID as xs:unsignedLong, vars as item()*, modules as xs:unsignedLong?, root as xs:string?)"}, {"content":"excel.clean(${1:uri as String}, ${2:doc as node()?})", "trigger":"excel.clean", "description":"(uri as String, doc as node()?)"}, {"content":"exsl.nodeSet(${1:value as item()*})", "trigger":"exsl.nodeSet", "description":"(value as item()*)"}, {"content":"exsl.objectType(${1:value as item()*})", "trigger":"exsl.objectType", "description":"(value as item()*)"}, {"content":"xdmp.strftime(${1:format as String}, ${2:value as xs:dateTime})", "trigger":"xdmp.strftime", "description":"(format as String, value as xs:dateTime)"}, {"content":"xdmp.exists(${1:expression as item()*})", "trigger":"xdmp.exists", "description":"(expression as item()*)"}, {"content":"cts.exists(${1:query as cts:query?})", "trigger":"cts.exists", "description":"(query as cts:query?)"}, {"content":"cts.exists(${1:query as cts:query?}, ${2:options as (cts:order|xs:string)*})", "trigger":"cts.exists", "description":"(query as cts:query?, options as (cts:order|xs:string)*)"}, {"content":"cts.exists(${1:query as cts:query?}, ${2:options as (cts:order|xs:string)*}, ${3:quality-weight as xs:double?})", "trigger":"cts.exists", "description":"(query as cts:query?, options as (cts:order|xs:string)*, quality-weight as xs:double?)"}, {"content":"cts.exists(${1:query as cts:query?}, ${2:options as (cts:order|xs:string)*}, ${3:quality-weight as xs:double?}, ${4:forest-ids as xs:unsignedLong*})", "trigger":"cts.exists", "description":"(query as cts:query?, options as (cts:order|xs:string)*, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"xdmp.estimate(${1:expression as item()*})", "trigger":"xdmp.estimate", "description":"(expression as item()*)"}, {"content":"xdmp.estimate(${1:expression as item()*}, ${2:maximum as xs:double?})", "trigger":"xdmp.estimate", "description":"(expression as item()*, maximum as xs:double?)"}, {"content":"cts.estimate(${1:query as cts:query?})", "trigger":"cts.estimate", "description":"(query as cts:query?)"}, {"content":"cts.estimate(${1:query as cts:query?}, ${2:options as (cts:order|xs:string)*})", "trigger":"cts.estimate", "description":"(query as cts:query?, options as (cts:order|xs:string)*)"}, {"content":"cts.estimate(${1:query as cts:query?}, ${2:options as (cts:order|xs:string)*}, ${3:quality-weight as xs:double?})", "trigger":"cts.estimate", "description":"(query as cts:query?, options as (cts:order|xs:string)*, quality-weight as xs:double?)"}, {"content":"cts.estimate(${1:query as cts:query?}, ${2:options as (cts:order|xs:string)*}, ${3:quality-weight as xs:double?}, ${4:forest-ids as xs:unsignedLong*})", "trigger":"cts.estimate", "description":"(query as cts:query?, options as (cts:order|xs:string)*, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.estimate(${1:query as cts:query?}, ${2:options as (cts:order|xs:string)*}, ${3:quality-weight as xs:double?}, ${4:forest-ids as xs:unsignedLong*}, ${5:maximum as xs:double?})", "trigger":"cts.estimate", "description":"(query as cts:query?, options as (cts:order|xs:string)*, quality-weight as xs:double?, forest-ids as xs:unsignedLong*, maximum as xs:double?)"}, {"content":"xdmp.plan(${1:expression as item()*})", "trigger":"xdmp.plan", "description":"(expression as item()*)"}, {"content":"xdmp.plan(${1:expression as item()*}, ${2:maximum as xs:double?})", "trigger":"xdmp.plan", "description":"(expression as item()*, maximum as xs:double?)"}, {"content":"cts.plan(${1:query as cts:query?})", "trigger":"cts.plan", "description":"(query as cts:query?)"}, {"content":"cts.plan(${1:query as cts:query?}, ${2:options as (cts:order|xs:string)*})", "trigger":"cts.plan", "description":"(query as cts:query?, options as (cts:order|xs:string)*)"}, {"content":"cts.plan(${1:query as cts:query?}, ${2:options as (cts:order|xs:string)*}, ${3:quality-weight as xs:double?})", "trigger":"cts.plan", "description":"(query as cts:query?, options as (cts:order|xs:string)*, quality-weight as xs:double?)"}, {"content":"cts.plan(${1:query as cts:query?}, ${2:options as (cts:order|xs:string)*}, ${3:quality-weight as xs:double?}, ${4:forest-ids as xs:unsignedLong*})", "trigger":"cts.plan", "description":"(query as cts:query?, options as (cts:order|xs:string)*, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.plan(${1:query as cts:query?}, ${2:options as (cts:order|xs:string)*}, ${3:quality-weight as xs:double?}, ${4:forest-ids as xs:unsignedLong*}, ${5:maximum as xs:double?})", "trigger":"cts.plan", "description":"(query as cts:query?, options as (cts:order|xs:string)*, quality-weight as xs:double?, forest-ids as xs:unsignedLong*, maximum as xs:double?)"}, {"content":"xdmp.plannable(${1:expression as item()*})", "trigger":"xdmp.plannable", "description":"(expression as item()*)"}, {"content":"xdmp.version()", "trigger":"xdmp.version", "description":"()"}, {"content":"xdmp.clusterEffectiveVersion()", "trigger":"xdmp.clusterEffectiveVersion", "description":"()"}, {"content":"xdmp.clusterVersionAtLeast(${1:version as xs:unsignedInt})", "trigger":"xdmp.clusterVersionAtLeast", "description":"(version as xs:unsignedInt)"}, {"content":"xdmp.clusterDataEncryptionAtRest()", "trigger":"xdmp.clusterDataEncryptionAtRest", "description":"()"}, {"content":"xdmp.clusterConfigEncryptionAtRest()", "trigger":"xdmp.clusterConfigEncryptionAtRest", "description":"()"}, {"content":"xdmp.clusterLogsEncryptionAtRest()", "trigger":"xdmp.clusterLogsEncryptionAtRest", "description":"()"}, {"content":"xdmp.clusterDataEncryptionKeyId()", "trigger":"xdmp.clusterDataEncryptionKeyId", "description":"()"}, {"content":"xdmp.clusterConfigEncryptionKeyId()", "trigger":"xdmp.clusterConfigEncryptionKeyId", "description":"()"}, {"content":"xdmp.clusterLogsEncryptionKeyId()", "trigger":"xdmp.clusterLogsEncryptionKeyId", "description":"()"}, {"content":"xdmp.xqueryVersion()", "trigger":"xdmp.xqueryVersion", "description":"()"}, {"content":"xdmp.platform()", "trigger":"xdmp.platform", "description":"()"}, {"content":"xdmp.architecture()", "trigger":"xdmp.architecture", "description":"()"}, {"content":"xdmp.path(${1:node as node()})", "trigger":"xdmp.path", "description":"(node as node())"}, {"content":"xdmp.path(${1:node as node()}, ${2:include-document as xs:boolean?})", "trigger":"xdmp.path", "description":"(node as node(), include-document as xs:boolean?)"}, {"content":"xdmp.describe(${1:item as item()*})", "trigger":"xdmp.describe", "description":"(item as item()*)"}, {"content":"xdmp.describe(${1:item as item()*}, ${2:max-sequence-length as xs:unsignedInt?})", "trigger":"xdmp.describe", "description":"(item as item()*, max-sequence-length as xs:unsignedInt?)"}, {"content":"xdmp.describe(${1:item as item()*}, ${2:max-sequence-length as xs:unsignedInt?}, ${3:max-item-length as xs:unsignedInt?})", "trigger":"xdmp.describe", "description":"(item as item()*, max-sequence-length as xs:unsignedInt?, max-item-length as xs:unsignedInt?)"}, {"content":"xdmp.hash32(${1:string as String})", "trigger":"xdmp.hash32", "description":"(string as String)"}, {"content":"xdmp.hash64(${1:string as String})", "trigger":"xdmp.hash64", "description":"(string as String)"}, {"content":"xdmp.step64(${1:initial as xs:unsignedLong}, ${2:step as xs:unsignedLong})", "trigger":"xdmp.step64", "description":"(initial as xs:unsignedLong, step as xs:unsignedLong)"}, {"content":"xdmp.add64(${1:x as xs:unsignedLong}, ${2:y as xs:unsignedLong})", "trigger":"xdmp.add64", "description":"(x as xs:unsignedLong, y as xs:unsignedLong)"}, {"content":"xdmp.and64(${1:x as xs:unsignedLong}, ${2:y as xs:unsignedLong})", "trigger":"xdmp.and64", "description":"(x as xs:unsignedLong, y as xs:unsignedLong)"}, {"content":"xdmp.mul64(${1:x as xs:unsignedLong}, ${2:y as xs:unsignedLong})", "trigger":"xdmp.mul64", "description":"(x as xs:unsignedLong, y as xs:unsignedLong)"}, {"content":"xdmp.not64(${1:x as xs:unsignedLong})", "trigger":"xdmp.not64", "description":"(x as xs:unsignedLong)"}, {"content":"xdmp.or64(${1:x as xs:unsignedLong}, ${2:y as xs:unsignedLong})", "trigger":"xdmp.or64", "description":"(x as xs:unsignedLong, y as xs:unsignedLong)"}, {"content":"xdmp.xor64(${1:x as xs:unsignedLong}, ${2:y as xs:unsignedLong})", "trigger":"xdmp.xor64", "description":"(x as xs:unsignedLong, y as xs:unsignedLong)"}, {"content":"xdmp.lshift64(${1:x as xs:unsignedLong}, ${2:y as xs:integer})", "trigger":"xdmp.lshift64", "description":"(x as xs:unsignedLong, y as xs:integer)"}, {"content":"xdmp.rshift64(${1:x as xs:unsignedLong}, ${2:y as xs:integer})", "trigger":"xdmp.rshift64", "description":"(x as xs:unsignedLong, y as xs:integer)"}, {"content":"xdmp.random()", "trigger":"xdmp.random", "description":"()"}, {"content":"xdmp.random(${1:max as xs:unsignedLong})", "trigger":"xdmp.random", "description":"(max as xs:unsignedLong)"}, {"content":"xdmp.hexToInteger(${1:hex as String})", "trigger":"xdmp.hexToInteger", "description":"(hex as String)"}, {"content":"xdmp.integerToHex(${1:val as xs:integer})", "trigger":"xdmp.integerToHex", "description":"(val as xs:integer)"}, {"content":"xdmp.octalToInteger(${1:octal as String})", "trigger":"xdmp.octalToInteger", "description":"(octal as String)"}, {"content":"xdmp.integerToOctal(${1:val as xs:integer})", "trigger":"xdmp.integerToOctal", "description":"(val as xs:integer)"}, {"content":"xdmp.requestTimestamp()", "trigger":"xdmp.requestTimestamp", "description":"()"}, {"content":"xdmp.securityDatabase()", "trigger":"xdmp.securityDatabase", "description":"()"}, {"content":"xdmp.securityDatabase(${1:database-id as xs:unsignedLong})", "trigger":"xdmp.securityDatabase", "description":"(database-id as xs:unsignedLong)"}, {"content":"xdmp.schemaDatabase()", "trigger":"xdmp.schemaDatabase", "description":"()"}, {"content":"xdmp.schemaDatabase(${1:database-id as xs:unsignedLong})", "trigger":"xdmp.schemaDatabase", "description":"(database-id as xs:unsignedLong)"}, {"content":"xdmp.modulesDatabase()", "trigger":"xdmp.modulesDatabase", "description":"()"}, {"content":"xdmp.triggersDatabase()", "trigger":"xdmp.triggersDatabase", "description":"()"}, {"content":"xdmp.triggersDatabase(${1:database-id as xs:unsignedLong})", "trigger":"xdmp.triggersDatabase", "description":"(database-id as xs:unsignedLong)"}, {"content":"xdmp.quote(${1:arg as item()*})", "trigger":"xdmp.quote", "description":"(arg as item()*)"}, {"content":"xdmp.quote(${1:arg as item()*}, ${2:options as (element()|map:map)?})", "trigger":"xdmp.quote", "description":"(arg as item()*, options as (element()|map:map)?)"}, {"content":"xdmp.unquote(${1:arg as String})", "trigger":"xdmp.unquote", "description":"(arg as String)"}, {"content":"xdmp.unquote(${1:arg as String}, ${2:default-namespace as xs:string?})", "trigger":"xdmp.unquote", "description":"(arg as String, default-namespace as xs:string?)"}, {"content":"xdmp.unquote(${1:arg as String}, ${2:default-namespace as xs:string?}, ${3:options as xs:string*})", "trigger":"xdmp.unquote", "description":"(arg as String, default-namespace as xs:string?, options as xs:string*)"}, {"content":"xdmp.log(${1:msg as ValueIterator | Object | String | Array | Null | Number | Boolean})", "trigger":"xdmp.log", "description":"(msg as ValueIterator | Object | String | Array | Null | Number | Boolean)"}, {"content":"xdmp.log(${1:msg as ValueIterator | Object | String | Array | Null | Number | Boolean}, ${2:level as xs:string?})", "trigger":"xdmp.log", "description":"(msg as ValueIterator | Object | String | Array | Null | Number | Boolean, level as xs:string?)"}, {"content":"xdmp.logLevel()", "trigger":"xdmp.logLevel", "description":"()"}, {"content":"xdmp.traceEnabled(${1:name as String})", "trigger":"xdmp.traceEnabled", "description":"(name as String)"}, {"content":"xdmp.queryMeters()", "trigger":"xdmp.queryMeters", "description":"()"}, {"content":"xdmp.elapsedTime()", "trigger":"xdmp.elapsedTime", "description":"()"}, {"content":"xdmp.queryTrace(${1:enabled as Boolean})", "trigger":"xdmp.queryTrace", "description":"(enabled as Boolean)"}, {"content":"xdmp.databasePathNamespaces()", "trigger":"xdmp.databasePathNamespaces", "description":"()"}, {"content":"xdmp.databasePathNamespaces(${1:dbid as xs:unsignedLong})", "trigger":"xdmp.databasePathNamespaces", "description":"(dbid as xs:unsignedLong)"}, {"content":"xdmp.nodeUri(${1:node as node()})", "trigger":"xdmp.nodeUri", "description":"(node as node())"}, {"content":"xdmp.nodeDatabase(${1:node as node()})", "trigger":"xdmp.nodeDatabase", "description":"(node as node())"}, {"content":"xdmp.productEdition()", "trigger":"xdmp.productEdition", "description":"()"}, {"content":"xdmp.productEnvironment()", "trigger":"xdmp.productEnvironment", "description":"()"}, {"content":"xdmp.documentLocks()", "trigger":"xdmp.documentLocks", "description":"()"}, {"content":"xdmp.documentLocks(${1:uri as xs:string*})", "trigger":"xdmp.documentLocks", "description":"(uri as xs:string*)"}, {"content":"xdmp.documentProperties()", "trigger":"xdmp.documentProperties", "description":"()"}, {"content":"xdmp.documentProperties(${1:uri as xs:string*})", "trigger":"xdmp.documentProperties", "description":"(uri as xs:string*)"}, {"content":"xdmp.documentGetQuality(${1:uri as String})", "trigger":"xdmp.documentGetQuality", "description":"(uri as String)"}, {"content":"xdmp.documentTimestamp(${1:uri as String})", "trigger":"xdmp.documentTimestamp", "description":"(uri as String)"}, {"content":"xdmp.documentForest(${1:uri as String})", "trigger":"xdmp.documentForest", "description":"(uri as String)"}, {"content":"xdmp.documentForest(${1:uri as String}, ${2:forest-ids as xs:unsignedLong*})", "trigger":"xdmp.documentForest", "description":"(uri as String, forest-ids as xs:unsignedLong*)"}, {"content":"xdmp.forest(${1:name as String})", "trigger":"xdmp.forest", "description":"(name as String)"}, {"content":"xdmp.database()", "trigger":"xdmp.database", "description":"()"}, {"content":"xdmp.database(${1:name as String})", "trigger":"xdmp.database", "description":"(name as String)"}, {"content":"xdmp.databaseForests(${1:database-id as xs:unsignedLong})", "trigger":"xdmp.databaseForests", "description":"(database-id as xs:unsignedLong)"}, {"content":"xdmp.databaseForests(${1:database-id as xs:unsignedLong}, ${2:include-replicas as Boolean})", "trigger":"xdmp.databaseForests", "description":"(database-id as xs:unsignedLong, include-replicas as Boolean)"}, {"content":"xdmp.forestOpenReplica(${1:forestIDs as xs:unsignedLong*})", "trigger":"xdmp.forestOpenReplica", "description":"(forestIDs as xs:unsignedLong*)"}, {"content":"xdmp.forestUpdatesAllowed(${1:forest-id as xs:unsignedLong})", "trigger":"xdmp.forestUpdatesAllowed", "description":"(forest-id as xs:unsignedLong)"}, {"content":"xdmp.databaseName(${1:database-id as xs:unsignedLong})", "trigger":"xdmp.databaseName", "description":"(database-id as xs:unsignedLong)"}, {"content":"xdmp.databaseIsReplica(${1:database-id as xs:unsignedLong})", "trigger":"xdmp.databaseIsReplica", "description":"(database-id as xs:unsignedLong)"}, {"content":"xdmp.databaseNonblockingTimestamp(${1:database-id as xs:unsignedLong})", "trigger":"xdmp.databaseNonblockingTimestamp", "description":"(database-id as xs:unsignedLong)"}, {"content":"xdmp.databaseGlobalNonblockingTimestamp(${1:database-id as xs:unsignedLong})", "trigger":"xdmp.databaseGlobalNonblockingTimestamp", "description":"(database-id as xs:unsignedLong)"}, {"content":"xdmp.databaseIsForestRetired(${1:database-id as xs:unsignedLong}, ${2:forest-id as xs:unsignedLong})", "trigger":"xdmp.databaseIsForestRetired", "description":"(database-id as xs:unsignedLong, forest-id as xs:unsignedLong)"}, {"content":"xdmp.databaseAssignmentPolicy(${1:database-id as xs:unsignedLong})", "trigger":"xdmp.databaseAssignmentPolicy", "description":"(database-id as xs:unsignedLong)"}, {"content":"xdmp.groupGetAuditEventTypeEnabled(${1:group-id as xs:unsignedLong}, ${2:event-type as xs:unsignedLong})", "trigger":"xdmp.groupGetAuditEventTypeEnabled", "description":"(group-id as xs:unsignedLong, event-type as xs:unsignedLong)"}, {"content":"xdmp.databaseIsRebalancerEnable(${1:database-id as xs:unsignedLong})", "trigger":"xdmp.databaseIsRebalancerEnable", "description":"(database-id as xs:unsignedLong)"}, {"content":"xdmp.databaseEncryptionKeyId(${1:database-id as xs:unsignedLong})", "trigger":"xdmp.databaseEncryptionKeyId", "description":"(database-id as xs:unsignedLong)"}, {"content":"xdmp.databaseEncryptionAtRest(${1:database-id as xs:unsignedLong})", "trigger":"xdmp.databaseEncryptionAtRest", "description":"(database-id as xs:unsignedLong)"}, {"content":"xdmp.serverName(${1:id as xs:unsignedLong})", "trigger":"xdmp.serverName", "description":"(id as xs:unsignedLong)"}, {"content":"xdmp.serverGroup(${1:id as xs:unsignedLong})", "trigger":"xdmp.serverGroup", "description":"(id as xs:unsignedLong)"}, {"content":"xdmp.serverPort(${1:id as xs:unsignedLong})", "trigger":"xdmp.serverPort", "description":"(id as xs:unsignedLong)"}, {"content":"xdmp.serverSslCertificateTemplate(${1:id as xs:unsignedLong})", "trigger":"xdmp.serverSslCertificateTemplate", "description":"(id as xs:unsignedLong)"}, {"content":"xdmp.serverDatabase(${1:id as xs:unsignedLong})", "trigger":"xdmp.serverDatabase", "description":"(id as xs:unsignedLong)"}, {"content":"xdmp.serverModulesDatabase(${1:id as xs:unsignedLong})", "trigger":"xdmp.serverModulesDatabase", "description":"(id as xs:unsignedLong)"}, {"content":"xdmp.serverCollation(${1:id as xs:unsignedLong})", "trigger":"xdmp.serverCollation", "description":"(id as xs:unsignedLong)"}, {"content":"xdmp.serverRoot(${1:id as xs:unsignedLong})", "trigger":"xdmp.serverRoot", "description":"(id as xs:unsignedLong)"}, {"content":"xdmp.serverDefaultXqueryVersion(${1:id as xs:unsignedLong})", "trigger":"xdmp.serverDefaultXqueryVersion", "description":"(id as xs:unsignedLong)"}, {"content":"xdmp.forestName(${1:forest-id as xs:unsignedLong})", "trigger":"xdmp.forestName", "description":"(forest-id as xs:unsignedLong)"}, {"content":"xdmp.forestHost(${1:id as xs:unsignedLong})", "trigger":"xdmp.forestHost", "description":"(id as xs:unsignedLong)"}, {"content":"xdmp.databases()", "trigger":"xdmp.databases", "description":"()"}, {"content":"xdmp.forests()", "trigger":"xdmp.forests", "description":"()"}, {"content":"xdmp.forestDatabases(${1:forest as xs:unsignedLong})", "trigger":"xdmp.forestDatabases", "description":"(forest as xs:unsignedLong)"}, {"content":"xdmp.documentGet(${1:location as String})", "trigger":"xdmp.documentGet", "description":"(location as String)"}, {"content":"xdmp.documentGet(${1:location as String}, ${2:options as (element()|map:map)?})", "trigger":"xdmp.documentGet", "description":"(location as String, options as (element()|map:map)?)"}, {"content":"xdmp.get(${1:path as String})", "trigger":"xdmp.get", "description":"(path as String)"}, {"content":"xdmp.get(${1:path as String}, ${2:default-namespace as xs:string?})", "trigger":"xdmp.get", "description":"(path as String, default-namespace as xs:string?)"}, {"content":"xdmp.get(${1:path as String}, ${2:default-namespace as xs:string?}, ${3:options as xs:string*})", "trigger":"xdmp.get", "description":"(path as String, default-namespace as xs:string?, options as xs:string*)"}, {"content":"xdmp.directory(${1:uri as xs:string*})", "trigger":"xdmp.directory", "description":"(uri as xs:string*)"}, {"content":"xdmp.directory(${1:uri as xs:string*}, ${2:depth as xs:string?})", "trigger":"xdmp.directory", "description":"(uri as xs:string*, depth as xs:string?)"}, {"content":"xdmp.directoryProperties(${1:uri as xs:string*})", "trigger":"xdmp.directoryProperties", "description":"(uri as xs:string*)"}, {"content":"xdmp.directoryProperties(${1:uri as xs:string*}, ${2:depth as xs:string?})", "trigger":"xdmp.directoryProperties", "description":"(uri as xs:string*, depth as xs:string?)"}, {"content":"xdmp.collectionProperties()", "trigger":"xdmp.collectionProperties", "description":"()"}, {"content":"xdmp.collectionProperties(${1:uri as xs:string*})", "trigger":"xdmp.collectionProperties", "description":"(uri as xs:string*)"}, {"content":"xdmp.directoryLocks(${1:uri as xs:string*})", "trigger":"xdmp.directoryLocks", "description":"(uri as xs:string*)"}, {"content":"xdmp.directoryLocks(${1:uri as xs:string*}, ${2:depth as xs:string?})", "trigger":"xdmp.directoryLocks", "description":"(uri as xs:string*, depth as xs:string?)"}, {"content":"xdmp.collectionLocks()", "trigger":"xdmp.collectionLocks", "description":"()"}, {"content":"xdmp.collectionLocks(${1:uri as xs:string*})", "trigger":"xdmp.collectionLocks", "description":"(uri as xs:string*)"}, {"content":"xdmp.uriContentType(${1:uri as String})", "trigger":"xdmp.uriContentType", "description":"(uri as String)"}, {"content":"xdmp.uriFormat(${1:uri as String})", "trigger":"xdmp.uriFormat", "description":"(uri as String)"}, {"content":"xdmp.documentGetProperties(${1:uri as String}, ${2:property as xs:QName})", "trigger":"xdmp.documentGetProperties", "description":"(uri as String, property as xs:QName)"}, {"content":"xdmp.access(${1:uri as String}, ${2:action as String})", "trigger":"xdmp.access", "description":"(uri as String, action as String)"}, {"content":"xdmp.httpGet(${1:uri as String})", "trigger":"xdmp.httpGet", "description":"(uri as String)"}, {"content":"xdmp.httpGet(${1:uri as String}, ${2:options as (element()|map:map)?})", "trigger":"xdmp.httpGet", "description":"(uri as String, options as (element()|map:map)?)"}, {"content":"xdmp.httpHead(${1:uri as String})", "trigger":"xdmp.httpHead", "description":"(uri as String)"}, {"content":"xdmp.httpHead(${1:uri as String}, ${2:options as (element()|map:map)?})", "trigger":"xdmp.httpHead", "description":"(uri as String, options as (element()|map:map)?)"}, {"content":"xdmp.httpOptions(${1:uri as String})", "trigger":"xdmp.httpOptions", "description":"(uri as String)"}, {"content":"xdmp.httpOptions(${1:uri as String}, ${2:options as (element()|map:map)?})", "trigger":"xdmp.httpOptions", "description":"(uri as String, options as (element()|map:map)?)"}, {"content":"xdmp.httpDelete(${1:uri as String})", "trigger":"xdmp.httpDelete", "description":"(uri as String)"}, {"content":"xdmp.httpDelete(${1:uri as String}, ${2:options as (element()|map:map)?})", "trigger":"xdmp.httpDelete", "description":"(uri as String, options as (element()|map:map)?)"}, {"content":"xdmp.httpPost(${1:uri as String})", "trigger":"xdmp.httpPost", "description":"(uri as String)"}, {"content":"xdmp.httpPost(${1:uri as String}, ${2:options as (element()|map:map)?})", "trigger":"xdmp.httpPost", "description":"(uri as String, options as (element()|map:map)?)"}, {"content":"xdmp.httpPost(${1:uri as String}, ${2:options as (element()|map:map)?}, ${3:data as node()?})", "trigger":"xdmp.httpPost", "description":"(uri as String, options as (element()|map:map)?, data as node()?)"}, {"content":"xdmp.httpPut(${1:uri as String})", "trigger":"xdmp.httpPut", "description":"(uri as String)"}, {"content":"xdmp.httpPut(${1:uri as String}, ${2:options as (element()|map:map)?})", "trigger":"xdmp.httpPut", "description":"(uri as String, options as (element()|map:map)?)"}, {"content":"xdmp.httpPut(${1:uri as String}, ${2:options as (element()|map:map)?}, ${3:data as node()?})", "trigger":"xdmp.httpPut", "description":"(uri as String, options as (element()|map:map)?, data as node()?)"}, {"content":"xdmp.base64Encode(${1:plaintext as String})", "trigger":"xdmp.base64Encode", "description":"(plaintext as String)"}, {"content":"xdmp.base64Decode(${1:encoded as String})", "trigger":"xdmp.base64Decode", "description":"(encoded as String)"}, {"content":"xdmp.subbinary(${1:source as binary()}, ${2:starting-location as xs:double})", "trigger":"xdmp.subbinary", "description":"(source as binary(), starting-location as xs:double)"}, {"content":"xdmp.subbinary(${1:source as binary()}, ${2:starting-location as xs:double}, ${3:length as xs:double})", "trigger":"xdmp.subbinary", "description":"(source as binary(), starting-location as xs:double, length as xs:double)"}, {"content":"xdmp.externalBinary(${1:path as String})", "trigger":"xdmp.externalBinary", "description":"(path as String)"}, {"content":"xdmp.externalBinary(${1:path as String}, ${2:starting-location as xs:double})", "trigger":"xdmp.externalBinary", "description":"(path as String, starting-location as xs:double)"}, {"content":"xdmp.externalBinary(${1:path as String}, ${2:starting-location as xs:double}, ${3:length as xs:double})", "trigger":"xdmp.externalBinary", "description":"(path as String, starting-location as xs:double, length as xs:double)"}, {"content":"xdmp.binarySize()", "trigger":"xdmp.binarySize", "description":"()"}, {"content":"xdmp.binarySize(${1:source as binary()?})", "trigger":"xdmp.binarySize", "description":"(source as binary()?)"}, {"content":"xdmp.binaryIsExternal(${1:source as binary()})", "trigger":"xdmp.binaryIsExternal", "description":"(source as binary())"}, {"content":"xdmp.binaryIsSmall(${1:source as binary()})", "trigger":"xdmp.binaryIsSmall", "description":"(source as binary())"}, {"content":"xdmp.binaryIsLarge(${1:source as binary()})", "trigger":"xdmp.binaryIsLarge", "description":"(source as binary())"}, {"content":"xdmp.externalBinaryPath(${1:source as binary()})", "trigger":"xdmp.externalBinaryPath", "description":"(source as binary())"}, {"content":"xdmp.trace(${1:name as String}, ${2:value as item()*})", "trigger":"xdmp.trace", "description":"(name as String, value as item()*)"}, {"content":"xdmp.set(${1:variable as item()*}, ${2:expr as item()*})", "trigger":"xdmp.set", "description":"(variable as item()*, expr as item()*)"}, {"content":"xdmp.host()", "trigger":"xdmp.host", "description":"()"}, {"content":"xdmp.host(${1:name as String})", "trigger":"xdmp.host", "description":"(name as String)"}, {"content":"xdmp.hostName()", "trigger":"xdmp.hostName", "description":"()"}, {"content":"xdmp.hostName(${1:ID as xs:unsignedLong})", "trigger":"xdmp.hostName", "description":"(ID as xs:unsignedLong)"}, {"content":"xdmp.hostGroup()", "trigger":"xdmp.hostGroup", "description":"()"}, {"content":"xdmp.hostGroup(${1:ID as xs:unsignedLong})", "trigger":"xdmp.hostGroup", "description":"(ID as xs:unsignedLong)"}, {"content":"xdmp.softwareVersion()", "trigger":"xdmp.softwareVersion", "description":"()"}, {"content":"xdmp.effectiveVersion()", "trigger":"xdmp.effectiveVersion", "description":"()"}, {"content":"xdmp.hostMode()", "trigger":"xdmp.hostMode", "description":"()"}, {"content":"xdmp.hostModeDescription()", "trigger":"xdmp.hostModeDescription", "description":"()"}, {"content":"xdmp.hostModeDescription(${1:ID as xs:unsignedLong})", "trigger":"xdmp.hostModeDescription", "description":"(ID as xs:unsignedLong)"}, {"content":"xdmp.hosts()", "trigger":"xdmp.hosts", "description":"()"}, {"content":"xdmp.bootstrapHosts()", "trigger":"xdmp.bootstrapHosts", "description":"()"}, {"content":"xdmp.cluster()", "trigger":"xdmp.cluster", "description":"()"}, {"content":"xdmp.cluster(${1:name as String})", "trigger":"xdmp.cluster", "description":"(name as String)"}, {"content":"xdmp.clusterName()", "trigger":"xdmp.clusterName", "description":"()"}, {"content":"xdmp.clusterName(${1:id as xs:unsignedLong})", "trigger":"xdmp.clusterName", "description":"(id as xs:unsignedLong)"}, {"content":"xdmp.foreignClusters()", "trigger":"xdmp.foreignClusters", "description":"()"}, {"content":"xdmp.server()", "trigger":"xdmp.server", "description":"()"}, {"content":"xdmp.server(${1:name as String})", "trigger":"xdmp.server", "description":"(name as String)"}, {"content":"xdmp.server(${1:name as String}, ${2:group as xs:unsignedLong})", "trigger":"xdmp.server", "description":"(name as String, group as xs:unsignedLong)"}, {"content":"xdmp.servers()", "trigger":"xdmp.servers", "description":"()"}, {"content":"xdmp.groups()", "trigger":"xdmp.groups", "description":"()"}, {"content":"xdmp.group()", "trigger":"xdmp.group", "description":"()"}, {"content":"xdmp.group(${1:name as String})", "trigger":"xdmp.group", "description":"(name as String)"}, {"content":"xdmp.groupName()", "trigger":"xdmp.groupName", "description":"()"}, {"content":"xdmp.groupName(${1:groupID as xs:unsignedLong})", "trigger":"xdmp.groupName", "description":"(groupID as xs:unsignedLong)"}, {"content":"xdmp.groupHosts()", "trigger":"xdmp.groupHosts", "description":"()"}, {"content":"xdmp.groupHosts(${1:groupID as xs:unsignedLong})", "trigger":"xdmp.groupHosts", "description":"(groupID as xs:unsignedLong)"}, {"content":"xdmp.groupServers()", "trigger":"xdmp.groupServers", "description":"()"}, {"content":"xdmp.groupServers(${1:groupID as xs:unsignedLong})", "trigger":"xdmp.groupServers", "description":"(groupID as xs:unsignedLong)"}, {"content":"xdmp.request()", "trigger":"xdmp.request", "description":"()"}, {"content":"xdmp.modulesRoot()", "trigger":"xdmp.modulesRoot", "description":"()"}, {"content":"xdmp.diacriticLess(${1:string as String})", "trigger":"xdmp.diacriticLess", "description":"(string as String)"}, {"content":"xdmp.collationCanonicalUri(${1:collation-uri as String})", "trigger":"xdmp.collationCanonicalUri", "description":"(collation-uri as String)"}, {"content":"map.map()", "trigger":"map.map", "description":"()"}, {"content":"map.map(${1:map as element(map:map)})", "trigger":"map.map", "description":"(map as element(map:map))"}, {"content":"map.new()", "trigger":"map.new", "description":"()"}, {"content":"map.new(${1:maps as map:map*})", "trigger":"map.new", "description":"(maps as map:map*)"}, {"content":"map.entry(${1:key as String}, ${2:value as item()*})", "trigger":"map.entry", "description":"(key as String, value as item()*)"}, {"content":"map.put(${1:map as map:map}, ${2:key as String}, ${3:value as item()*})", "trigger":"map.put", "description":"(map as map:map, key as String, value as item()*)"}, {"content":"map.with(${1:map as map:map}, ${2:key as String}, ${3:value as item()*})", "trigger":"map.with", "description":"(map as map:map, key as String, value as item()*)"}, {"content":"map.get(${1:map as map:map}, ${2:key as String})", "trigger":"map.get", "description":"(map as map:map, key as String)"}, {"content":"map.contains(${1:map as map:map}, ${2:key as String})", "trigger":"map.contains", "description":"(map as map:map, key as String)"}, {"content":"map.keys(${1:map as map:map})", "trigger":"map.keys", "description":"(map as map:map)"}, {"content":"map.clear(${1:map as map:map})", "trigger":"map.clear", "description":"(map as map:map)"}, {"content":"map.count(${1:map as map:map})", "trigger":"map.count", "description":"(map as map:map)"}, {"content":"map.delete(${1:map as map:map}, ${2:key as String})", "trigger":"map.delete", "description":"(map as map:map, key as String)"}, {"content":"sem.binding()", "trigger":"sem.binding", "description":"()"}, {"content":"sem.binding(${1:map as element(json:object)})", "trigger":"sem.binding", "description":"(map as element(json:object))"}, {"content":"json.object()", "trigger":"json.object", "description":"()"}, {"content":"json.object(${1:map as element(json:object)})", "trigger":"json.object", "description":"(map as element(json:object))"}, {"content":"json.objectDefine()", "trigger":"json.objectDefine", "description":"()"}, {"content":"json.objectDefine(${1:keys as xs:string*})", "trigger":"json.objectDefine", "description":"(keys as xs:string*)"}, {"content":"json.array()", "trigger":"json.array", "description":"()"}, {"content":"json.array(${1:array as element(json:array)})", "trigger":"json.array", "description":"(array as element(json:array))"}, {"content":"json.toArray()", "trigger":"json.toArray", "description":"()"}, {"content":"json.toArray(${1:items as item()*})", "trigger":"json.toArray", "description":"(items as item()*)"}, {"content":"json.toArray(${1:items as item()*}, ${2:limit as xs:double?})", "trigger":"json.toArray", "description":"(items as item()*, limit as xs:double?)"}, {"content":"json.toArray(${1:items as item()*}, ${2:limit as xs:double?}, ${3:zero as item()?})", "trigger":"json.toArray", "description":"(items as item()*, limit as xs:double?, zero as item()?)"}, {"content":"json.arrayValues(${1:array as json:array})", "trigger":"json.arrayValues", "description":"(array as json:array)"}, {"content":"json.arrayValues(${1:array as json:array}, ${2:flatten as xs:boolean?})", "trigger":"json.arrayValues", "description":"(array as json:array, flatten as xs:boolean?)"}, {"content":"xdmp.arrayValues(${1:Array as json:array})", "trigger":"xdmp.arrayValues", "description":"(Array as json:array)"}, {"content":"xdmp.arrayValues(${1:Array as json:array}, ${2:flatten as Boolean})", "trigger":"xdmp.arrayValues", "description":"(Array as json:array, flatten as Boolean)"}, {"content":"json.arraySize(${1:array as json:array?})", "trigger":"json.arraySize", "description":"(array as json:array?)"}, {"content":"json.setItemAt(${1:array as json:array}, ${2:pos as xs:double}, ${3:value as item()*})", "trigger":"json.setItemAt", "description":"(array as json:array, pos as xs:double, value as item()*)"}, {"content":"json.arrayResize(${1:array as json:array}, ${2:newSize as xs:unsignedLong})", "trigger":"json.arrayResize", "description":"(array as json:array, newSize as xs:unsignedLong)"}, {"content":"json.arrayResize(${1:array as json:array}, ${2:newSize as xs:unsignedLong}, ${3:zero as item()?})", "trigger":"json.arrayResize", "description":"(array as json:array, newSize as xs:unsignedLong, zero as item()?)"}, {"content":"json.arrayPush(${1:array as json:array}, ${2:item as item()*})", "trigger":"json.arrayPush", "description":"(array as json:array, item as item()*)"}, {"content":"json.arrayWith(${1:array as json:array}, ${2:item as item()*})", "trigger":"json.arrayWith", "description":"(array as json:array, item as item()*)"}, {"content":"json.arrayPop(${1:array as json:array})", "trigger":"json.arrayPop", "description":"(array as json:array)"}, {"content":"json.subarray(${1:array as json:array}, ${2:startingLoc as xs:double})", "trigger":"json.subarray", "description":"(array as json:array, startingLoc as xs:double)"}, {"content":"json.subarray(${1:array as json:array}, ${2:startingLoc as xs:double}, ${3:length as xs:double})", "trigger":"json.subarray", "description":"(array as json:array, startingLoc as xs:double, length as xs:double)"}, {"content":"json.null()", "trigger":"json.null", "description":"()"}, {"content":"xdmp.sleep(${1:msec as xs:unsignedInt})", "trigger":"xdmp.sleep", "description":"(msec as xs:unsignedInt)"}, {"content":"xdmp.withNamespaces(${1:nsbindings as (xs:string*|map:map)}, ${2:expr as item()*})", "trigger":"xdmp.withNamespaces", "description":"(nsbindings as (xs:string*|map:map), expr as item()*)"}, {"content":"xdmp.elementContentType(${1:element as element()})", "trigger":"xdmp.elementContentType", "description":"(element as element())"}, {"content":"xdmp.prettyPrint(${1:xquery as String})", "trigger":"xdmp.prettyPrint", "description":"(xquery as String)"}, {"content":"xdmp.keyFromQname(${1:name as xs:QName})", "trigger":"xdmp.keyFromQname", "description":"(name as xs:QName)"}, {"content":"xdmp.QNameFromKey(${1:key as String})", "trigger":"xdmp.QNameFromKey", "description":"(key as String)"}, {"content":"xdmp.multipartEncode(${1:separator as String}, ${2:manifest as Array|Node}, ${3:content as Array|ValueIterator})", "trigger":"xdmp.multipartEncode", "description":"(separator as String, manifest as Array|Node, content as Array|ValueIterator)"}, {"content":"xdmp.multipartDecode(${1:separator as String}, ${2:data as binary()})", "trigger":"xdmp.multipartDecode", "description":"(separator as String, data as binary())"}, {"content":"xdmp.multipartDecode(${1:separator as String}, ${2:data as binary()}, ${3:options as element()})", "trigger":"xdmp.multipartDecode", "description":"(separator as String, data as binary(), options as element())"}, {"content":"xdmp.encodingLanguageDetect(${1:document as node()})", "trigger":"xdmp.encodingLanguageDetect", "description":"(document as node())"}, {"content":"xdmp.binaryDecode(${1:encoded as node()}, ${2:encoding-name as String})", "trigger":"xdmp.binaryDecode", "description":"(encoded as node(), encoding-name as String)"}, {"content":"xdmp.hostForests(${1:ID as xs:unsignedLong})", "trigger":"xdmp.hostForests", "description":"(ID as xs:unsignedLong)"}, {"content":"xdmp.validate(${1:node as node()})", "trigger":"xdmp.validate", "description":"(node as node())"}, {"content":"xdmp.validate(${1:node as node()}, ${2:mode as String})", "trigger":"xdmp.validate", "description":"(node as node(), mode as String)"}, {"content":"xdmp.validate(${1:node as node()}, ${2:mode as String}, ${3:typeName as xs:QName})", "trigger":"xdmp.validate", "description":"(node as node(), mode as String, typeName as xs:QName)"}, {"content":"xdmp.timestampToWallclock(${1:timestamp as xs:unsignedLong})", "trigger":"xdmp.timestampToWallclock", "description":"(timestamp as xs:unsignedLong)"}, {"content":"xdmp.wallclockToTimestamp(${1:timestamp as xs:dateTime})", "trigger":"xdmp.wallclockToTimestamp", "description":"(timestamp as xs:dateTime)"}, {"content":"xdmp.configurationTimestamp()", "trigger":"xdmp.configurationTimestamp", "description":"()"}, {"content":"xdmp.configurationTimestamp(${1:name as String})", "trigger":"xdmp.configurationTimestamp", "description":"(name as String)"}, {"content":"xdmp.eager(${1:arg as item()*})", "trigger":"xdmp.eager", "description":"(arg as item()*)"}, {"content":"xdmp.lazy(${1:arg as item()*})", "trigger":"xdmp.lazy", "description":"(arg as item()*)"}, {"content":"xdmp.callerDialect()", "trigger":"xdmp.callerDialect", "description":"()"}, {"content":"xdmp.ldapSearch(${1:query as String})", "trigger":"xdmp.ldapSearch", "description":"(query as String)"}, {"content":"xdmp.ldapSearch(${1:query as String}, ${2:options as (element()|map:map)?})", "trigger":"xdmp.ldapSearch", "description":"(query as String, options as (element()|map:map)?)"}, {"content":"xdmp.ldapLookup(${1:DN as String})", "trigger":"xdmp.ldapLookup", "description":"(DN as String)"}, {"content":"xdmp.ldapLookup(${1:DN as String}, ${2:options as (element()|map:map)?})", "trigger":"xdmp.ldapLookup", "description":"(DN as String, options as (element()|map:map)?)"}, {"content":"flexrep.binaryChunkUris(${1:ts as xs:dateTime})", "trigger":"flexrep.binaryChunkUris", "description":"(ts as xs:dateTime)"}, {"content":"flexrep.configurationDomainIds()", "trigger":"flexrep.configurationDomainIds", "description":"()"}, {"content":"flexrep.configurationCreate(${1:domain-id as xs:unsignedLong})", "trigger":"flexrep.configurationCreate", "description":"(domain-id as xs:unsignedLong)"}, {"content":"flexrep.configurationCreate(${1:domain-id as xs:unsignedLong}, ${2:alerting-uri as xs:string?})", "trigger":"flexrep.configurationCreate", "description":"(domain-id as xs:unsignedLong, alerting-uri as xs:string?)"}, {"content":"flexrep.configurationInsert(${1:cfg as element(flexrep:configuration)})", "trigger":"flexrep.configurationInsert", "description":"(cfg as element(flexrep:configuration))"}, {"content":"flexrep.configurationGet(${1:domain-id as xs:unsignedLong})", "trigger":"flexrep.configurationGet", "description":"(domain-id as xs:unsignedLong)"}, {"content":"flexrep.configurationGet(${1:domain-id as xs:unsignedLong}, ${2:assert as Boolean})", "trigger":"flexrep.configurationGet", "description":"(domain-id as xs:unsignedLong, assert as Boolean)"}, {"content":"flexrep.configurationDelete(${1:domain-id as xs:unsignedLong})", "trigger":"flexrep.configurationDelete", "description":"(domain-id as xs:unsignedLong)"}, {"content":"flexrep.targetCreate(${1:cfg as element(flexrep:configuration)}, ${2:name as String}, ${3:urls as xs:string*}, ${4:retry-seconds-min as xs:unsignedInt?}, ${5:retry-seconds-max as xs:unsignedInt?}, ${6:documents-per-batch as xs:unsignedInt?}, ${7:enabled as xs:boolean?}, ${8:http-options as element(flexrep:http-options)?}, ${9:replicate-cpf as xs:boolean?}, ${10:filter-module as xs:string?}, ${11:filter-options as element(flexrep:filter-options)?})", "trigger":"flexrep.targetCreate", "description":"(cfg as element(flexrep:configuration), name as String, urls as xs:string*, retry-seconds-min as xs:unsignedInt?, retry-seconds-max as xs:unsignedInt?, documents-per-batch as xs:unsignedInt?, enabled as xs:boolean?, http-options as element(flexrep:http-options)?, replicate-cpf as xs:boolean?, filter-module as xs:string?, filter-options as element(flexrep:filter-options)?)"}, {"content":"flexrep.targetCreate(${1:cfg as element(flexrep:configuration)}, ${2:name as String}, ${3:urls as xs:string*}, ${4:retry-seconds-min as xs:unsignedInt?}, ${5:retry-seconds-max as xs:unsignedInt?}, ${6:documents-per-batch as xs:unsignedInt?}, ${7:enabled as xs:boolean?}, ${8:http-options as element(flexrep:http-options)?}, ${9:replicate-cpf as xs:boolean?}, ${10:filter-module as xs:string?}, ${11:filter-options as element(flexrep:filter-options)?}, ${12:user-id as xs:unsignedLong?})", "trigger":"flexrep.targetCreate", "description":"(cfg as element(flexrep:configuration), name as String, urls as xs:string*, retry-seconds-min as xs:unsignedInt?, retry-seconds-max as xs:unsignedInt?, documents-per-batch as xs:unsignedInt?, enabled as xs:boolean?, http-options as element(flexrep:http-options)?, replicate-cpf as xs:boolean?, filter-module as xs:string?, filter-options as element(flexrep:filter-options)?, user-id as xs:unsignedLong?)"}, {"content":"flexrep.targetCreate(${1:cfg as element(flexrep:configuration)}, ${2:name as String}, ${3:urls as xs:string*}, ${4:retry-seconds-min as xs:unsignedInt?}, ${5:retry-seconds-max as xs:unsignedInt?}, ${6:documents-per-batch as xs:unsignedInt?}, ${7:enabled as xs:boolean?}, ${8:http-options as element(flexrep:http-options)?}, ${9:replicate-cpf as xs:boolean?}, ${10:filter-module as xs:string?}, ${11:filter-options as element(flexrep:filter-options)?}, ${12:user-id as xs:unsignedLong?}, ${13:immediate-push as Boolean})", "trigger":"flexrep.targetCreate", "description":"(cfg as element(flexrep:configuration), name as String, urls as xs:string*, retry-seconds-min as xs:unsignedInt?, retry-seconds-max as xs:unsignedInt?, documents-per-batch as xs:unsignedInt?, enabled as xs:boolean?, http-options as element(flexrep:http-options)?, replicate-cpf as xs:boolean?, filter-module as xs:string?, filter-options as element(flexrep:filter-options)?, user-id as xs:unsignedLong?, immediate-push as Boolean)"}, {"content":"flexrep.targetDelete(${1:cfg as element(flexrep:configuration)}, ${2:target-id as xs:unsignedLong})", "trigger":"flexrep.targetDelete", "description":"(cfg as element(flexrep:configuration), target-id as xs:unsignedLong)"}, {"content":"flexrep.configurationTargets(${1:cfg as element(flexrep:configuration)})", "trigger":"flexrep.configurationTargets", "description":"(cfg as element(flexrep:configuration))"}, {"content":"flexrep.configurationTarget(${1:cfg as element(flexrep:configuration)}, ${2:target-id as xs:unsignedLong})", "trigger":"flexrep.configurationTarget", "description":"(cfg as element(flexrep:configuration), target-id as xs:unsignedLong)"}, {"content":"flexrep.configurationTarget(${1:cfg as element(flexrep:configuration)}, ${2:target-id as xs:unsignedLong}, ${3:assert as Boolean})", "trigger":"flexrep.configurationTarget", "description":"(cfg as element(flexrep:configuration), target-id as xs:unsignedLong, assert as Boolean)"}, {"content":"flexrep.configurationTargetGetId(${1:cfg as element(flexrep:configuration)}, ${2:target-name as String})", "trigger":"flexrep.configurationTargetGetId", "description":"(cfg as element(flexrep:configuration), target-name as String)"}, {"content":"flexrep.configurationTargetGetName(${1:cfg as element(flexrep:configuration)}, ${2:target-id as xs:unsignedLong})", "trigger":"flexrep.configurationTargetGetName", "description":"(cfg as element(flexrep:configuration), target-id as xs:unsignedLong)"}, {"content":"flexrep.configurationTargetGetUrls(${1:cfg as element(flexrep:configuration)}, ${2:target-id as xs:unsignedLong})", "trigger":"flexrep.configurationTargetGetUrls", "description":"(cfg as element(flexrep:configuration), target-id as xs:unsignedLong)"}, {"content":"flexrep.configurationTargetGetRetrySecondsMin(${1:cfg as element(flexrep:configuration)}, ${2:target-id as xs:unsignedLong})", "trigger":"flexrep.configurationTargetGetRetrySecondsMin", "description":"(cfg as element(flexrep:configuration), target-id as xs:unsignedLong)"}, {"content":"flexrep.configurationTargetGetDocumentsPerBatch(${1:cfg as element(flexrep:configuration)}, ${2:target-id as xs:unsignedLong})", "trigger":"flexrep.configurationTargetGetDocumentsPerBatch", "description":"(cfg as element(flexrep:configuration), target-id as xs:unsignedLong)"}, {"content":"flexrep.configurationTargetGetEnabled(${1:cfg as element(flexrep:configuration)}, ${2:target-id as xs:unsignedLong})", "trigger":"flexrep.configurationTargetGetEnabled", "description":"(cfg as element(flexrep:configuration), target-id as xs:unsignedLong)"}, {"content":"flexrep.configurationTargetGetReplicateCpf(${1:cfg as element(flexrep:configuration)}, ${2:target-id as xs:unsignedLong})", "trigger":"flexrep.configurationTargetGetReplicateCpf", "description":"(cfg as element(flexrep:configuration), target-id as xs:unsignedLong)"}, {"content":"flexrep.configurationTargetGetHttpOptions(${1:cfg as element(flexrep:configuration)}, ${2:target-id as xs:unsignedLong})", "trigger":"flexrep.configurationTargetGetHttpOptions", "description":"(cfg as element(flexrep:configuration), target-id as xs:unsignedLong)"}, {"content":"flexrep.configurationTargetGetFilterModule(${1:cfg as element(flexrep:configuration)}, ${2:target-id as xs:unsignedLong})", "trigger":"flexrep.configurationTargetGetFilterModule", "description":"(cfg as element(flexrep:configuration), target-id as xs:unsignedLong)"}, {"content":"flexrep.configurationTargetGetFilterOptions(${1:cfg as element(flexrep:configuration)}, ${2:target-id as xs:unsignedLong})", "trigger":"flexrep.configurationTargetGetFilterOptions", "description":"(cfg as element(flexrep:configuration), target-id as xs:unsignedLong)"}, {"content":"flexrep.configurationTargetSetName(${1:cfg as element(flexrep:configuration)}, ${2:target-id as xs:unsignedLong}, ${3:name as String})", "trigger":"flexrep.configurationTargetSetName", "description":"(cfg as element(flexrep:configuration), target-id as xs:unsignedLong, name as String)"}, {"content":"flexrep.configurationTargetSetUrls(${1:cfg as element(flexrep:configuration)}, ${2:target-id as xs:unsignedLong}, ${3:urls as xs:string*})", "trigger":"flexrep.configurationTargetSetUrls", "description":"(cfg as element(flexrep:configuration), target-id as xs:unsignedLong, urls as xs:string*)"}, {"content":"flexrep.configurationTargetSetRetrySecondsMin(${1:cfg as element(flexrep:configuration)}, ${2:target-id as xs:unsignedLong}, ${3:val as xs:integer})", "trigger":"flexrep.configurationTargetSetRetrySecondsMin", "description":"(cfg as element(flexrep:configuration), target-id as xs:unsignedLong, val as xs:integer)"}, {"content":"flexrep.configurationTargetGetRetrySecondsMax(${1:cfg as element(flexrep:configuration)}, ${2:target-id as xs:unsignedLong})", "trigger":"flexrep.configurationTargetGetRetrySecondsMax", "description":"(cfg as element(flexrep:configuration), target-id as xs:unsignedLong)"}, {"content":"flexrep.configurationTargetSetDocumentsPerBatch(${1:cfg as element(flexrep:configuration)}, ${2:target-id as xs:unsignedLong}, ${3:val as xs:integer})", "trigger":"flexrep.configurationTargetSetDocumentsPerBatch", "description":"(cfg as element(flexrep:configuration), target-id as xs:unsignedLong, val as xs:integer)"}, {"content":"flexrep.configurationTargetSetEnabled(${1:cfg as element(flexrep:configuration)}, ${2:target-id as xs:unsignedLong}, ${3:val as Boolean})", "trigger":"flexrep.configurationTargetSetEnabled", "description":"(cfg as element(flexrep:configuration), target-id as xs:unsignedLong, val as Boolean)"}, {"content":"flexrep.configurationTargetSetReplicateCpf(${1:cfg as element(flexrep:configuration)}, ${2:target-id as xs:unsignedLong}, ${3:val as Boolean})", "trigger":"flexrep.configurationTargetSetReplicateCpf", "description":"(cfg as element(flexrep:configuration), target-id as xs:unsignedLong, val as Boolean)"}, {"content":"flexrep.configurationTargetSetHttpOptions(${1:cfg as element(flexrep:configuration)}, ${2:target-id as xs:unsignedLong}, ${3:val as element(flexrep:http-options)})", "trigger":"flexrep.configurationTargetSetHttpOptions", "description":"(cfg as element(flexrep:configuration), target-id as xs:unsignedLong, val as element(flexrep:http-options))"}, {"content":"flexrep.configurationTargetSetFilterModule(${1:cfg as element(flexrep:configuration)}, ${2:target-id as xs:unsignedLong}, ${3:uri as String})", "trigger":"flexrep.configurationTargetSetFilterModule", "description":"(cfg as element(flexrep:configuration), target-id as xs:unsignedLong, uri as String)"}, {"content":"flexrep.configurationTargetSetFilterOptions(${1:cfg as element(flexrep:configuration)}, ${2:target-id as xs:unsignedLong}, ${3:val as element(flexrep:filter-options)})", "trigger":"flexrep.configurationTargetSetFilterOptions", "description":"(cfg as element(flexrep:configuration), target-id as xs:unsignedLong, val as element(flexrep:filter-options))"}, {"content":"flexrep.pullCreate(${1:name as String}, ${2:domain-id as xs:unsignedLong}, ${3:target-id as xs:unsignedLong}, ${4:urls as xs:string+}, ${5:http-options as element(flexrep:http-options)?})", "trigger":"flexrep.pullCreate", "description":"(name as String, domain-id as xs:unsignedLong, target-id as xs:unsignedLong, urls as xs:string+, http-options as element(flexrep:http-options)?)"}, {"content":"flexrep.pullInsert(${1:pull as element(flexrep:pull)})", "trigger":"flexrep.pullInsert", "description":"(pull as element(flexrep:pull))"}, {"content":"flexrep.pullDelete(${1:domain-id as xs:unsignedLong})", "trigger":"flexrep.pullDelete", "description":"(domain-id as xs:unsignedLong)"}, {"content":"flexrep.pullDelete(${1:domain-id as xs:unsignedLong}, ${2:target-id as xs:unsignedLong})", "trigger":"flexrep.pullDelete", "description":"(domain-id as xs:unsignedLong, target-id as xs:unsignedLong)"}, {"content":"flexrep.pullGet(${1:domain-id as xs:unsignedLong})", "trigger":"flexrep.pullGet", "description":"(domain-id as xs:unsignedLong)"}, {"content":"flexrep.pullGet(${1:domain-id as xs:unsignedLong}, ${2:assert as Boolean})", "trigger":"flexrep.pullGet", "description":"(domain-id as xs:unsignedLong, assert as Boolean)"}, {"content":"flexrep.pullGetAll()", "trigger":"flexrep.pullGetAll", "description":"()"}, {"content":"flexrep.pullGetDomainId(${1:pull as element(flexrep:pull)})", "trigger":"flexrep.pullGetDomainId", "description":"(pull as element(flexrep:pull))"}, {"content":"flexrep.pullGetTargetId(${1:pull as element(flexrep:pull)})", "trigger":"flexrep.pullGetTargetId", "description":"(pull as element(flexrep:pull))"}, {"content":"flexrep.pullGetUrls(${1:pull as element(flexrep:pull)})", "trigger":"flexrep.pullGetUrls", "description":"(pull as element(flexrep:pull))"}, {"content":"flexrep.pullGetHttpOptions(${1:pull as element(flexrep:pull)})", "trigger":"flexrep.pullGetHttpOptions", "description":"(pull as element(flexrep:pull))"}, {"content":"flexrep.pullSetUrls(${1:pull as element(flexrep:pull)}, ${2:urls as xs:string+})", "trigger":"flexrep.pullSetUrls", "description":"(pull as element(flexrep:pull), urls as xs:string+)"}, {"content":"flexrep.pullSetHttpOptions(${1:pull as element(flexrep:pull)}, ${2:http-options as element(flexrep:http-options)})", "trigger":"flexrep.pullSetHttpOptions", "description":"(pull as element(flexrep:pull), http-options as element(flexrep:http-options))"}, {"content":"flexrep.configureDatabase(${1:config as element(configuration)}, ${2:dbid as xs:unsignedLong})", "trigger":"flexrep.configureDatabase", "description":"(config as element(configuration), dbid as xs:unsignedLong)"}, {"content":"flexrep.apply(${1:update as element(flexrep:update)}, ${2:content as document-node()?})", "trigger":"flexrep.apply", "description":"(update as element(flexrep:update), content as document-node()?)"}, {"content":"flexrep.delete(${1:delete as element(flexrep:delete)})", "trigger":"flexrep.delete", "description":"(delete as element(flexrep:delete))"}, {"content":"flexrep.poll(${1:domain-id as xs:unsignedLong}, ${2:target-id as xs:unsignedLong}, ${3:start as xs:integer?}, ${4:size as xs:integer?}, ${5:forest-ids as xs:unsignedLong*})", "trigger":"flexrep.poll", "description":"(domain-id as xs:unsignedLong, target-id as xs:unsignedLong, start as xs:integer?, size as xs:integer?, forest-ids as xs:unsignedLong*)"}, {"content":"flexrep.process(${1:domain-id as xs:unsignedLong})", "trigger":"flexrep.process", "description":"(domain-id as xs:unsignedLong)"}, {"content":"flexrep.process(${1:domain-id as xs:unsignedLong}, ${2:size as xs:unsignedInt?})", "trigger":"flexrep.process", "description":"(domain-id as xs:unsignedLong, size as xs:unsignedInt?)"}, {"content":"flexrep.process(${1:domain-id as xs:unsignedLong}, ${2:size as xs:unsignedInt?}, ${3:targets as xs:unsignedLong*})", "trigger":"flexrep.process", "description":"(domain-id as xs:unsignedLong, size as xs:unsignedInt?, targets as xs:unsignedLong*)"}, {"content":"flexrep.process(${1:domain-id as xs:unsignedLong}, ${2:size as xs:unsignedInt?}, ${3:targets as xs:unsignedLong*}, ${4:forest-ids as xs:unsignedLong*})", "trigger":"flexrep.process", "description":"(domain-id as xs:unsignedLong, size as xs:unsignedInt?, targets as xs:unsignedLong*, forest-ids as xs:unsignedLong*)"}, {"content":"flexrep.process(${1:domain-id as xs:unsignedLong}, ${2:size as xs:unsignedInt?}, ${3:targets as xs:unsignedLong*}, ${4:forest-ids as xs:unsignedLong*}, ${5:uris as xs:string*})", "trigger":"flexrep.process", "description":"(domain-id as xs:unsignedLong, size as xs:unsignedInt?, targets as xs:unsignedLong*, forest-ids as xs:unsignedLong*, uris as xs:string*)"}, {"content":"flexrep.doPull(${1:pull as element(flexrep:pull)})", "trigger":"flexrep.doPull", "description":"(pull as element(flexrep:pull))"}, {"content":"flexrep.domainStatus(${1:domain-id as xs:unsignedLong})", "trigger":"flexrep.domainStatus", "description":"(domain-id as xs:unsignedLong)"}, {"content":"flexrep.domainStatus(${1:domain-id as xs:unsignedLong}, ${2:with-targets as Boolean})", "trigger":"flexrep.domainStatus", "description":"(domain-id as xs:unsignedLong, with-targets as Boolean)"}, {"content":"flexrep.domainStatus(${1:domain-id as xs:unsignedLong}, ${2:with-targets as Boolean}, ${3:terse as Boolean})", "trigger":"flexrep.domainStatus", "description":"(domain-id as xs:unsignedLong, with-targets as Boolean, terse as Boolean)"}, {"content":"flexrep.targetStatus(${1:domain-id as xs:unsignedLong}, ${2:target-ids as xs:unsignedLong*})", "trigger":"flexrep.targetStatus", "description":"(domain-id as xs:unsignedLong, target-ids as xs:unsignedLong*)"}, {"content":"flexrep.remoteTargetStatus(${1:pull as element(flexrep:pull)})", "trigger":"flexrep.remoteTargetStatus", "description":"(pull as element(flexrep:pull))"}, {"content":"flexrep.documentStatus(${1:domain-id as xs:unsignedLong}, ${2:uri as String})", "trigger":"flexrep.documentStatus", "description":"(domain-id as xs:unsignedLong, uri as String)"}, {"content":"flexrep.pullGetId(${1:pull as element(flexrep:pull)})", "trigger":"flexrep.pullGetId", "description":"(pull as element(flexrep:pull))"}, {"content":"flexrep.pullGetName(${1:pull as element(flexrep:pull)})", "trigger":"flexrep.pullGetName", "description":"(pull as element(flexrep:pull))"}, {"content":"flexrep.pullSetName(${1:pull as element(flexrep:pull)}, ${2:name as String})", "trigger":"flexrep.pullSetName", "description":"(pull as element(flexrep:pull), name as String)"}, {"content":"flexrep.pullSetDomainId(${1:pull as element(flexrep:pull)}, ${2:domain-id as xs:unsignedLong})", "trigger":"flexrep.pullSetDomainId", "description":"(pull as element(flexrep:pull), domain-id as xs:unsignedLong)"}, {"content":"flexrep.pullSetTargetId(${1:pull as element(flexrep:pull)}, ${2:target-id as xs:unsignedLong})", "trigger":"flexrep.pullSetTargetId", "description":"(pull as element(flexrep:pull), target-id as xs:unsignedLong)"}, {"content":"flexrep.configurationGetId(${1:cfg as element(flexrep:configuration)})", "trigger":"flexrep.configurationGetId", "description":"(cfg as element(flexrep:configuration))"}, {"content":"flexrep.configurationGetDomainName(${1:cfg as element(flexrep:configuration)})", "trigger":"flexrep.configurationGetDomainName", "description":"(cfg as element(flexrep:configuration))"}, {"content":"flexrep.domainTargetStatuses()", "trigger":"flexrep.domainTargetStatuses", "description":"()"}, {"content":"flexrep.targetErrorDocuments(${1:domain-id as xs:unsignedLong}, ${2:target-ids as xs:unsignedLong*})", "trigger":"flexrep.targetErrorDocuments", "description":"(domain-id as xs:unsignedLong, target-ids as xs:unsignedLong*)"}, {"content":"flexrep.domainTargetReset(${1:domain-id as xs:unsignedLong}, ${2:target-ids as xs:unsignedLong*})", "trigger":"flexrep.domainTargetReset", "description":"(domain-id as xs:unsignedLong, target-ids as xs:unsignedLong*)"}, {"content":"flexrep.domainTargetReset(${1:domain-id as xs:unsignedLong}, ${2:target-ids as xs:unsignedLong*}, ${3:errors-only as Boolean})", "trigger":"flexrep.domainTargetReset", "description":"(domain-id as xs:unsignedLong, target-ids as xs:unsignedLong*, errors-only as Boolean)"}, {"content":"flexrep.documentReset(${1:uri as String}, ${2:domain-id as xs:unsignedLong})", "trigger":"flexrep.documentReset", "description":"(uri as String, domain-id as xs:unsignedLong)"}, {"content":"flexrep.documentReset(${1:uri as String}, ${2:domain-id as xs:unsignedLong}, ${3:target-ids as xs:unsignedLong*})", "trigger":"flexrep.documentReset", "description":"(uri as String, domain-id as xs:unsignedLong, target-ids as xs:unsignedLong*)"}, {"content":"flexrep.configurationTargetSetRetrySecondsMax(${1:cfg as element(flexrep:configuration)}, ${2:target-id as xs:unsignedLong}, ${3:val as xs:integer})", "trigger":"flexrep.configurationTargetSetRetrySecondsMax", "description":"(cfg as element(flexrep:configuration), target-id as xs:unsignedLong, val as xs:integer)"}, {"content":"flexrep.validateUrl(${1:url as String})", "trigger":"flexrep.validateUrl", "description":"(url as String)"}, {"content":"flexrep.applyEncodedUpdates(${1:dts as element(flexrep:domain-target-status)}, ${2:boundary as String}, ${3:data as binary()})", "trigger":"flexrep.applyEncodedUpdates", "description":"(dts as element(flexrep:domain-target-status), boundary as String, data as binary())"}, {"content":"flexrep.replicate(${1:uri as String}, ${2:label as String}, ${3:cfg as element(flexrep:configuration)}, ${4:domain as element(dom:domain)}, ${5:doc-status as element(flexrep:document-status)}, ${6:is-delete as Boolean}, ${7:is-retry as Boolean})", "trigger":"flexrep.replicate", "description":"(uri as String, label as String, cfg as element(flexrep:configuration), domain as element(dom:domain), doc-status as element(flexrep:document-status), is-delete as Boolean, is-retry as Boolean)"}, {"content":"flexrep.multipartEncode(${1:boundary as String}, ${2:parts as node()*})", "trigger":"flexrep.multipartEncode", "description":"(boundary as String, parts as node()*)"}, {"content":"flexrep.ackApply(${1:domain-id as xs:unsignedLong}, ${2:target-id as xs:unsignedLong}, ${3:acks as element(flexrep:ack)*})", "trigger":"flexrep.ackApply", "description":"(domain-id as xs:unsignedLong, target-id as xs:unsignedLong, acks as element(flexrep:ack)*)"}, {"content":"flexrep.validateName(${1:name as String})", "trigger":"flexrep.validateName", "description":"(name as String)"}, {"content":"flexrep.pullGetById(${1:pull-id as xs:unsignedLong})", "trigger":"flexrep.pullGetById", "description":"(pull-id as xs:unsignedLong)"}, {"content":"flexrep.pullGetById(${1:pull-id as xs:unsignedLong}, ${2:assert as Boolean})", "trigger":"flexrep.pullGetById", "description":"(pull-id as xs:unsignedLong, assert as Boolean)"}, {"content":"flexrep.pushLocalForest(${1:domain-id as xs:unsignedLong}, ${2:forest-id as xs:unsignedLong}, ${3:max-spawn as xs:unsignedLong})", "trigger":"flexrep.pushLocalForest", "description":"(domain-id as xs:unsignedLong, forest-id as xs:unsignedLong, max-spawn as xs:unsignedLong)"}, {"content":"flexrep.pushLocalForests()", "trigger":"flexrep.pushLocalForests", "description":"()"}, {"content":"flexrep.databaseNeedsConfiguration(${1:config as element(configuration)}, ${2:dbid as xs:unsignedLong})", "trigger":"flexrep.databaseNeedsConfiguration", "description":"(config as element(configuration), dbid as xs:unsignedLong)"}, {"content":"flexrep.pushForestBinaries(${1:domain-id as xs:unsignedLong}, ${2:target-id as xs:unsignedLong}, ${3:forest-id as xs:unsignedLong}, ${4:max-spawn as xs:unsignedLong})", "trigger":"flexrep.pushForestBinaries", "description":"(domain-id as xs:unsignedLong, target-id as xs:unsignedLong, forest-id as xs:unsignedLong, max-spawn as xs:unsignedLong)"}, {"content":"flexrep.pushBinary(${1:domain-id as xs:unsignedLong}, ${2:target-id as xs:unsignedLong}, ${3:forest-id as xs:unsignedLong}, ${4:key as xs:unsignedLong})", "trigger":"flexrep.pushBinary", "description":"(domain-id as xs:unsignedLong, target-id as xs:unsignedLong, forest-id as xs:unsignedLong, key as xs:unsignedLong)"}, {"content":"flexrep.pushBinaryChunk(${1:status-doc as document-node()}, ${2:use-server-field as Boolean})", "trigger":"flexrep.pushBinaryChunk", "description":"(status-doc as document-node(), use-server-field as Boolean)"}, {"content":"flexrep.pushBinaryDocs(${1:domain-id as xs:unsignedLong}, ${2:target-id as xs:unsignedLong}, ${3:forest-id as xs:unsignedLong}, ${4:map as map:map})", "trigger":"flexrep.pushBinaryDocs", "description":"(domain-id as xs:unsignedLong, target-id as xs:unsignedLong, forest-id as xs:unsignedLong, map as map:map)"}, {"content":"flexrep.applyBinaryChunk(${1:key as String}, ${2:offset as String}, ${3:bn as node()}, ${4:forests as xs:string*})", "trigger":"flexrep.applyBinaryChunk", "description":"(key as String, offset as String, bn as node(), forests as xs:string*)"}, {"content":"flexrep.applyBinaryJoin(${1:key as String}, ${2:forests as xs:string*})", "trigger":"flexrep.applyBinaryJoin", "description":"(key as String, forests as xs:string*)"}, {"content":"flexrep.applyBinaryGc(${1:key as String})", "trigger":"flexrep.applyBinaryGc", "description":"(key as String)"}, {"content":"flexrep.pushBinaries(${1:domain-id as xs:unsignedLong})", "trigger":"flexrep.pushBinaries", "description":"(domain-id as xs:unsignedLong)"}, {"content":"flexrep.pollBinaryChunk()", "trigger":"flexrep.pollBinaryChunk", "description":"()"}, {"content":"flexrep.getUpdateBinarydocUri(${1:domain-id as xs:unsignedLong}, ${2:target-id as xs:unsignedLong}, ${3:key as xs:unsignedLong})", "trigger":"flexrep.getUpdateBinarydocUri", "description":"(domain-id as xs:unsignedLong, target-id as xs:unsignedLong, key as xs:unsignedLong)"}, {"content":"flexrep.pullBinaries(${1:pull as element(flexrep:pull)}, ${2:max-spawn as xs:unsignedLong})", "trigger":"flexrep.pullBinaries", "description":"(pull as element(flexrep:pull), max-spawn as xs:unsignedLong)"}, {"content":"flexrep.pullBinaryChunk(${1:pull as element(flexrep:pull)})", "trigger":"flexrep.pullBinaryChunk", "description":"(pull as element(flexrep:pull))"}, {"content":"flexrep.ackBinaryChunkApply(${1:domain-id as xs:unsignedLong}, ${2:target-id as xs:unsignedLong}, ${3:key as xs:unsignedLong}, ${4:offset as xs:unsignedLong}, ${5:subsize as xs:unsignedLong})", "trigger":"flexrep.ackBinaryChunkApply", "description":"(domain-id as xs:unsignedLong, target-id as xs:unsignedLong, key as xs:unsignedLong, offset as xs:unsignedLong, subsize as xs:unsignedLong)"}, {"content":"flexrep.targetBinaryPushStatusDocuments(${1:domain-id as xs:unsignedLong}, ${2:target-ids as xs:unsignedLong*})", "trigger":"flexrep.targetBinaryPushStatusDocuments", "description":"(domain-id as xs:unsignedLong, target-ids as xs:unsignedLong*)"}, {"content":"flexrep.targetBinaryPushStatusDocument(${1:domain-id as xs:unsignedLong}, ${2:target-id as xs:unsignedLong}, ${3:uri as String})", "trigger":"flexrep.targetBinaryPushStatusDocument", "description":"(domain-id as xs:unsignedLong, target-id as xs:unsignedLong, uri as String)"}, {"content":"flexrep._binaryPushStatusUri(${1:domain-id as xs:unsignedLong}, ${2:target-id as xs:unsignedLong}, ${3:key as xs:unsignedLong})", "trigger":"flexrep._binaryPushStatusUri", "description":"(domain-id as xs:unsignedLong, target-id as xs:unsignedLong, key as xs:unsignedLong)"}, {"content":"flexrep.coalesceDomainStatuses(${1:domain-id as xs:unsignedLong})", "trigger":"flexrep.coalesceDomainStatuses", "description":"(domain-id as xs:unsignedLong)"}, {"content":"flexrep.pullCheckDuplicate(${1:pull as element(flexrep:pull)})", "trigger":"flexrep.pullCheckDuplicate", "description":"(pull as element(flexrep:pull))"}, {"content":"flexrep.configurationSetAlertingUri(${1:cfg as element(flexrep:configuration)}, ${2:uri as xs:string?})", "trigger":"flexrep.configurationSetAlertingUri", "description":"(cfg as element(flexrep:configuration), uri as xs:string?)"}, {"content":"flexrep.configurationGetAlertingUri(${1:cfg as element(flexrep:configuration)})", "trigger":"flexrep.configurationGetAlertingUri", "description":"(cfg as element(flexrep:configuration))"}, {"content":"flexrep.domainAlertingUri(${1:domain-id as xs:unsignedLong})", "trigger":"flexrep.domainAlertingUri", "description":"(domain-id as xs:unsignedLong)"}, {"content":"flexrep.pushLocalForestTarget(${1:domain-id as xs:unsignedLong}, ${2:target-id as xs:unsignedLong}, ${3:forest-id as xs:unsignedLong}, ${4:max-spawn as xs:unsignedLong})", "trigger":"flexrep.pushLocalForestTarget", "description":"(domain-id as xs:unsignedLong, target-id as xs:unsignedLong, forest-id as xs:unsignedLong, max-spawn as xs:unsignedLong)"}, {"content":"flexrep.getDomainName(${1:domain-id as xs:unsignedLong})", "trigger":"flexrep.getDomainName", "description":"(domain-id as xs:unsignedLong)"}, {"content":"flexrep.getTargetName(${1:domain-id as xs:unsignedLong}, ${2:target-id as xs:unsignedLong})", "trigger":"flexrep.getTargetName", "description":"(domain-id as xs:unsignedLong, target-id as xs:unsignedLong)"}, {"content":"flexrep.configurationTargetGetUserId(${1:cfg as element(flexrep:configuration)}, ${2:target-id as xs:unsignedLong})", "trigger":"flexrep.configurationTargetGetUserId", "description":"(cfg as element(flexrep:configuration), target-id as xs:unsignedLong)"}, {"content":"flexrep.configurationTargetGetImmediatePush(${1:cfg as element(flexrep:configuration)}, ${2:target-id as xs:unsignedLong})", "trigger":"flexrep.configurationTargetGetImmediatePush", "description":"(cfg as element(flexrep:configuration), target-id as xs:unsignedLong)"}, {"content":"flexrep.configurationTargetSetUserId(${1:cfg as element(flexrep:configuration)}, ${2:target-id as xs:unsignedLong}, ${3:user-id as xs:unsignedLong?})", "trigger":"flexrep.configurationTargetSetUserId", "description":"(cfg as element(flexrep:configuration), target-id as xs:unsignedLong, user-id as xs:unsignedLong?)"}, {"content":"flexrep.configurationTargetSetImmediatePush(${1:cfg as element(flexrep:configuration)}, ${2:target-id as xs:unsignedLong}, ${3:immediate-push as Boolean})", "trigger":"flexrep.configurationTargetSetImmediatePush", "description":"(cfg as element(flexrep:configuration), target-id as xs:unsignedLong, immediate-push as Boolean)"}, {"content":"flexrep.pullSetEnabled(${1:pull as element(flexrep:pull)}, ${2:flag as Boolean})", "trigger":"flexrep.pullSetEnabled", "description":"(pull as element(flexrep:pull), flag as Boolean)"}, {"content":"flexrep.pullGetEnabled(${1:pull as element(flexrep:pull)})", "trigger":"flexrep.pullGetEnabled", "description":"(pull as element(flexrep:pull))"}, {"content":"flexrep.configurationTargetGetExternalUser(${1:cfg as element(flexrep:configuration)}, ${2:target-id as xs:unsignedLong})", "trigger":"flexrep.configurationTargetGetExternalUser", "description":"(cfg as element(flexrep:configuration), target-id as xs:unsignedLong)"}, {"content":"flexrep.inboundFilterCreate(${1:filter-module as String}, ${2:filter-options as element(flexrep:filter-options)?})", "trigger":"flexrep.inboundFilterCreate", "description":"(filter-module as String, filter-options as element(flexrep:filter-options)?)"}, {"content":"flexrep.inboundFilterInsert(${1:filter as element(flexrep:inbound-filter)})", "trigger":"flexrep.inboundFilterInsert", "description":"(filter as element(flexrep:inbound-filter))"}, {"content":"flexrep.inboundFilterDelete()", "trigger":"flexrep.inboundFilterDelete", "description":"()"}, {"content":"flexrep.inboundFilterGet()", "trigger":"flexrep.inboundFilterGet", "description":"()"}, {"content":"flexrep.createAppserver(${1:cfg as element(configuration)}, ${2:group as xs:unsignedLong}, ${3:name as String}, ${4:port as xs:unsignedLong}, ${5:db as xs:unsignedLong})", "trigger":"flexrep.createAppserver", "description":"(cfg as element(configuration), group as xs:unsignedLong, name as String, port as xs:unsignedLong, db as xs:unsignedLong)"}, {"content":"flexrep.upgradeAppserver(${1:cfg as element(configuration)}, ${2:ids as xs:unsignedLong*})", "trigger":"flexrep.upgradeAppserver", "description":"(cfg as element(configuration), ids as xs:unsignedLong*)"}, {"content":"fn.formatDatetime(${1:value as xs:dateTime}, ${2:picture as String})", "trigger":"fn.formatDatetime", "description":"(value as xs:dateTime, picture as String)"}, {"content":"fn.formatDatetime(${1:value as xs:dateTime}, ${2:picture as String}, ${3:language as String})", "trigger":"fn.formatDatetime", "description":"(value as xs:dateTime, picture as String, language as String)"}, {"content":"fn.formatDatetime(${1:value as xs:dateTime}, ${2:picture as String}, ${3:language as String}, ${4:calendar as String})", "trigger":"fn.formatDatetime", "description":"(value as xs:dateTime, picture as String, language as String, calendar as String)"}, {"content":"fn.formatDatetime(${1:value as xs:dateTime}, ${2:picture as String}, ${3:language as String}, ${4:calendar as String}, ${5:country as String})", "trigger":"fn.formatDatetime", "description":"(value as xs:dateTime, picture as String, language as String, calendar as String, country as String)"}, {"content":"fn.formatDate(${1:value as xs:date}, ${2:picture as String})", "trigger":"fn.formatDate", "description":"(value as xs:date, picture as String)"}, {"content":"fn.formatDate(${1:value as xs:date}, ${2:picture as String}, ${3:language as String})", "trigger":"fn.formatDate", "description":"(value as xs:date, picture as String, language as String)"}, {"content":"fn.formatDate(${1:value as xs:date}, ${2:picture as String}, ${3:language as String}, ${4:calendar as String})", "trigger":"fn.formatDate", "description":"(value as xs:date, picture as String, language as String, calendar as String)"}, {"content":"fn.formatDate(${1:value as xs:date}, ${2:picture as String}, ${3:language as String}, ${4:calendar as String}, ${5:country as String})", "trigger":"fn.formatDate", "description":"(value as xs:date, picture as String, language as String, calendar as String, country as String)"}, {"content":"fn.formatTime(${1:value as xs:time}, ${2:picture as String})", "trigger":"fn.formatTime", "description":"(value as xs:time, picture as String)"}, {"content":"fn.formatTime(${1:value as xs:time}, ${2:picture as String}, ${3:language as String})", "trigger":"fn.formatTime", "description":"(value as xs:time, picture as String, language as String)"}, {"content":"fn.formatTime(${1:value as xs:time}, ${2:picture as String}, ${3:language as String}, ${4:calendar as String})", "trigger":"fn.formatTime", "description":"(value as xs:time, picture as String, language as String, calendar as String)"}, {"content":"fn.formatTime(${1:value as xs:time}, ${2:picture as String}, ${3:language as String}, ${4:calendar as String}, ${5:country as String})", "trigger":"fn.formatTime", "description":"(value as xs:time, picture as String, language as String, calendar as String, country as String)"}, {"content":"xdmp.parseDatetime(${1:picture as String}, ${2:value as String})", "trigger":"xdmp.parseDatetime", "description":"(picture as String, value as String)"}, {"content":"xdmp.parseDatetime(${1:picture as String}, ${2:value as String}, ${3:language as xs:string?})", "trigger":"xdmp.parseDatetime", "description":"(picture as String, value as String, language as xs:string?)"}, {"content":"xdmp.parseDatetime(${1:picture as String}, ${2:value as String}, ${3:language as xs:string?}, ${4:calendar as xs:string?})", "trigger":"xdmp.parseDatetime", "description":"(picture as String, value as String, language as xs:string?, calendar as xs:string?)"}, {"content":"xdmp.parseDatetime(${1:picture as String}, ${2:value as String}, ${3:language as xs:string?}, ${4:calendar as xs:string?}, ${5:country as xs:string?})", "trigger":"xdmp.parseDatetime", "description":"(picture as String, value as String, language as xs:string?, calendar as xs:string?, country as xs:string?)"}, {"content":"xdmp.parseYymmdd(${1:picture as String}, ${2:value as String})", "trigger":"xdmp.parseYymmdd", "description":"(picture as String, value as String)"}, {"content":"xdmp.parseYymmdd(${1:picture as String}, ${2:value as String}, ${3:language as xs:string?})", "trigger":"xdmp.parseYymmdd", "description":"(picture as String, value as String, language as xs:string?)"}, {"content":"xdmp.parseYymmdd(${1:picture as String}, ${2:value as String}, ${3:language as xs:string?}, ${4:calendar as xs:string?})", "trigger":"xdmp.parseYymmdd", "description":"(picture as String, value as String, language as xs:string?, calendar as xs:string?)"}, {"content":"xdmp.parseYymmdd(${1:picture as String}, ${2:value as String}, ${3:language as xs:string?}, ${4:calendar as xs:string?}, ${5:country as xs:string?})", "trigger":"xdmp.parseYymmdd", "description":"(picture as String, value as String, language as xs:string?, calendar as xs:string?, country as xs:string?)"}, {"content":"fn.formatNumber(${1:value as xs:double}, ${2:picture as String})", "trigger":"fn.formatNumber", "description":"(value as xs:double, picture as String)"}, {"content":"fn.formatNumber(${1:value as xs:double}, ${2:picture as String}, ${3:decimal-format-name as String})", "trigger":"fn.formatNumber", "description":"(value as xs:double, picture as String, decimal-format-name as String)"}, {"content":"xdmp.formatNumber(${1:value as xs:numeric*})", "trigger":"xdmp.formatNumber", "description":"(value as xs:numeric*)"}, {"content":"xdmp.formatNumber(${1:value as xs:numeric*}, ${2:picture as xs:string?})", "trigger":"xdmp.formatNumber", "description":"(value as xs:numeric*, picture as xs:string?)"}, {"content":"xdmp.formatNumber(${1:value as xs:numeric*}, ${2:picture as xs:string?}, ${3:language as xs:string?})", "trigger":"xdmp.formatNumber", "description":"(value as xs:numeric*, picture as xs:string?, language as xs:string?)"}, {"content":"xdmp.formatNumber(${1:value as xs:numeric*}, ${2:picture as xs:string?}, ${3:language as xs:string?}, ${4:letter-value as xs:string?})", "trigger":"xdmp.formatNumber", "description":"(value as xs:numeric*, picture as xs:string?, language as xs:string?, letter-value as xs:string?)"}, {"content":"xdmp.formatNumber(${1:value as xs:numeric*}, ${2:picture as xs:string?}, ${3:language as xs:string?}, ${4:letter-value as xs:string?}, ${5:ordchar as xs:string?})", "trigger":"xdmp.formatNumber", "description":"(value as xs:numeric*, picture as xs:string?, language as xs:string?, letter-value as xs:string?, ordchar as xs:string?)"}, {"content":"xdmp.formatNumber(${1:value as xs:numeric*}, ${2:picture as xs:string?}, ${3:language as xs:string?}, ${4:letter-value as xs:string?}, ${5:ordchar as xs:string?}, ${6:zero-padding as xs:string?})", "trigger":"xdmp.formatNumber", "description":"(value as xs:numeric*, picture as xs:string?, language as xs:string?, letter-value as xs:string?, ordchar as xs:string?, zero-padding as xs:string?)"}, {"content":"xdmp.formatNumber(${1:value as xs:numeric*}, ${2:picture as xs:string?}, ${3:language as xs:string?}, ${4:letter-value as xs:string?}, ${5:ordchar as xs:string?}, ${6:zero-padding as xs:string?}, ${7:grouping-separator as xs:string?})", "trigger":"xdmp.formatNumber", "description":"(value as xs:numeric*, picture as xs:string?, language as xs:string?, letter-value as xs:string?, ordchar as xs:string?, zero-padding as xs:string?, grouping-separator as xs:string?)"}, {"content":"xdmp.formatNumber(${1:value as xs:numeric*}, ${2:picture as xs:string?}, ${3:language as xs:string?}, ${4:letter-value as xs:string?}, ${5:ordchar as xs:string?}, ${6:zero-padding as xs:string?}, ${7:grouping-separator as xs:string?}, ${8:grouping-size as xs:integer?})", "trigger":"xdmp.formatNumber", "description":"(value as xs:numeric*, picture as xs:string?, language as xs:string?, letter-value as xs:string?, ordchar as xs:string?, zero-padding as xs:string?, grouping-separator as xs:string?, grouping-size as xs:integer?)"}, {"content":"xdmp.monthNameFromDate(${1:arg as xs:date?})", "trigger":"xdmp.monthNameFromDate", "description":"(arg as xs:date?)"}, {"content":"xdmp.daynameFromDate(${1:arg as xs:date?})", "trigger":"xdmp.daynameFromDate", "description":"(arg as xs:date?)"}, {"content":"xdmp.functionName(${1:function as xdmp:function})", "trigger":"xdmp.functionName", "description":"(function as xdmp:function)"}, {"content":"fn.functionName(${1:function as function(*)})", "trigger":"fn.functionName", "description":"(function as function(*))"}, {"content":"xdmp.functionModule(${1:function as xdmp:function})", "trigger":"xdmp.functionModule", "description":"(function as xdmp:function)"}, {"content":"fn.functionArity(${1:function as function(*)})", "trigger":"fn.functionArity", "description":"(function as function(*))"}, {"content":"xdmp.functionSignature(${1:function as function(*)})", "trigger":"xdmp.functionSignature", "description":"(function as function(*))"}, {"content":"xdmp.functionParameterName(${1:function as function(*)}, ${2:position as xs:integer})", "trigger":"xdmp.functionParameterName", "description":"(function as function(*), position as xs:integer)"}, {"content":"xdmp.functionParameterType(${1:function as function(*)}, ${2:position as xs:integer})", "trigger":"xdmp.functionParameterType", "description":"(function as function(*), position as xs:integer)"}, {"content":"xdmp.functionReturnType(${1:function as function(*)})", "trigger":"xdmp.functionReturnType", "description":"(function as function(*))"}, {"content":"xdmp.function(${1:function as xs:QName?})", "trigger":"xdmp.function", "description":"(function as xs:QName?)"}, {"content":"xdmp.function(${1:function as xs:QName?}, ${2:module-path as xs:string?})", "trigger":"xdmp.function", "description":"(function as xs:QName?, module-path as xs:string?)"}, {"content":"fn.functionLookup(${1:name as xs:QName}, ${2:arity as xs:integer})", "trigger":"fn.functionLookup", "description":"(name as xs:QName, arity as xs:integer)"}, {"content":"xdmp.apply(${1:function as xdmp:function})", "trigger":"xdmp.apply", "description":"(function as xdmp:function)"}, {"content":"xdmp.apply(${1:function as xdmp:function}, ${2:params-1-to-N as item()*})", "trigger":"xdmp.apply", "description":"(function as xdmp:function, params-1-to-N as item()*)"}, {"content":"fn.head(${1:seq as item()*}, ${2:arg as ValueIterator})", "trigger":"fn.head", "description":"(seq as item()*, arg as ValueIterator)"}, {"content":"fn.tail(${1:seq as item()*})", "trigger":"fn.tail", "description":"(seq as item()*)"}, {"content":"fn.map(${1:function as function(item()) as item()*}, ${2:seq as item()*})", "trigger":"fn.map", "description":"(function as function(item()) as item()*, seq as item()*)"}, {"content":"fn.filter(${1:function as function(item()) as xs:boolean}, ${2:seq as item()*})", "trigger":"fn.filter", "description":"(function as function(item()) as xs:boolean, seq as item()*)"}, {"content":"fn.foldLeft(${1:function as function(item()*, item()) as item()*}, ${2:zero as item()*}, ${3:seq as item()*})", "trigger":"fn.foldLeft", "description":"(function as function(item()*, item()) as item()*, zero as item()*, seq as item()*)"}, {"content":"fn.foldRight(${1:function as function(item(), item()*) as item()*}, ${2:zero as item()*}, ${3:seq as item()*})", "trigger":"fn.foldRight", "description":"(function as function(item(), item()*) as item()*, zero as item()*, seq as item()*)"}, {"content":"fn.mapPairs(${1:function as function(item(), item()) as item()*}, ${2:seq1 as item()*}, ${3:seq2 as item()*})", "trigger":"fn.mapPairs", "description":"(function as function(item(), item()) as item()*, seq1 as item()*, seq2 as item()*)"}, {"content":"xdmp.functions()", "trigger":"xdmp.functions", "description":"()"}, {"content":"xdmp.annotation(${1:function as function(*)}, ${2:name as xs:QName})", "trigger":"xdmp.annotation", "description":"(function as function(*), name as xs:QName)"}, {"content":"geojson.point(${1:point as object-node()})", "trigger":"geojson.point", "description":"(point as object-node())"}, {"content":"geojson.multiPoint(${1:multi-point as object-node()})", "trigger":"geojson.multiPoint", "description":"(multi-point as object-node())"}, {"content":"geojson.box(${1:box as object-node()})", "trigger":"geojson.box", "description":"(box as object-node())"}, {"content":"geojson.circle(${1:radius as xs:double}, ${2:center as object-node()})", "trigger":"geojson.circle", "description":"(radius as xs:double, center as object-node())"}, {"content":"geojson.linestring(${1:linestring as object-node()})", "trigger":"geojson.linestring", "description":"(linestring as object-node())"}, {"content":"geojson.multiLinestring(${1:multi-linestring as object-node()})", "trigger":"geojson.multiLinestring", "description":"(multi-linestring as object-node())"}, {"content":"geojson.polygon(${1:polygon-or-points as object-node()+})", "trigger":"geojson.polygon", "description":"(polygon-or-points as object-node()+)"}, {"content":"geojson.interiorPolygon(${1:polygon as object-node()})", "trigger":"geojson.interiorPolygon", "description":"(polygon as object-node())"}, {"content":"geojson.complexPolygon(${1:complex-polygon as node()})", "trigger":"geojson.complexPolygon", "description":"(complex-polygon as node())"}, {"content":"geojson.geospatialQuery(${1:regions as cts:region*})", "trigger":"geojson.geospatialQuery", "description":"(regions as cts:region*)"}, {"content":"geojson.geospatialQuery(${1:regions as cts:region*}, ${2:options as xs:string*})", "trigger":"geojson.geospatialQuery", "description":"(regions as cts:region*, options as xs:string*)"}, {"content":"geojson.geospatialQuery(${1:regions as cts:region*}, ${2:options as xs:string*}, ${3:weight as xs:double?})", "trigger":"geojson.geospatialQuery", "description":"(regions as cts:region*, options as xs:string*, weight as xs:double?)"}, {"content":"geojson.geospatialQueryFromNodes(${1:regions as node()*})", "trigger":"geojson.geospatialQueryFromNodes", "description":"(regions as node()*)"}, {"content":"geojson.geospatialQueryFromNodes(${1:regions as node()*}, ${2:options as xs:string*})", "trigger":"geojson.geospatialQueryFromNodes", "description":"(regions as node()*, options as xs:string*)"}, {"content":"geojson.geospatialQueryFromNodes(${1:regions as node()*}, ${2:options as xs:string*}, ${3:weight as xs:double?})", "trigger":"geojson.geospatialQueryFromNodes", "description":"(regions as node()*, options as xs:string*, weight as xs:double?)"}, {"content":"geojson.parseGeojson(${1:geojson as object-node()*})", "trigger":"geojson.parseGeojson", "description":"(geojson as object-node()*)"}, {"content":"geojson.toGeojson(${1:regions as cts:region*})", "trigger":"geojson.toGeojson", "description":"(regions as cts:region*)"}, {"content":"georss.point(${1:point as element(georss:point)})", "trigger":"georss.point", "description":"(point as element(georss:point))"}, {"content":"georss.circle(${1:radius as xs:double}, ${2:center as element(georss:point)})", "trigger":"georss.circle", "description":"(radius as xs:double, center as element(georss:point))"}, {"content":"georss.linestring(${1:linestring as element(georss:line)})", "trigger":"georss.linestring", "description":"(linestring as element(georss:line))"}, {"content":"georss.polygon(${1:polygon-or-points as element()+})", "trigger":"georss.polygon", "description":"(polygon-or-points as element()+)"}, {"content":"georss.complexPolygon(${1:complex-polygon as node()})", "trigger":"georss.complexPolygon", "description":"(complex-polygon as node())"}, {"content":"georss.geospatialQuery(${1:regions as cts:region*})", "trigger":"georss.geospatialQuery", "description":"(regions as cts:region*)"}, {"content":"georss.geospatialQuery(${1:regions as cts:region*}, ${2:options as xs:string*})", "trigger":"georss.geospatialQuery", "description":"(regions as cts:region*, options as xs:string*)"}, {"content":"georss.geospatialQuery(${1:regions as cts:region*}, ${2:options as xs:string*}, ${3:weight as xs:double?})", "trigger":"georss.geospatialQuery", "description":"(regions as cts:region*, options as xs:string*, weight as xs:double?)"}, {"content":"georss.parseGeorss(${1:georss as element()*})", "trigger":"georss.parseGeorss", "description":"(georss as element()*)"}, {"content":"georss.toGeorss(${1:regions as cts:region*})", "trigger":"georss.toGeorss", "description":"(regions as cts:region*)"}, {"content":"geo.point(${1:point as node()})", "trigger":"geo.point", "description":"(point as node())"}, {"content":"geo.box(${1:box as node()})", "trigger":"geo.box", "description":"(box as node())"}, {"content":"geo.circle(${1:radius as xs:double}, ${2:center as node()})", "trigger":"geo.circle", "description":"(radius as xs:double, center as node())"}, {"content":"geo.linestring(${1:linestring as node()})", "trigger":"geo.linestring", "description":"(linestring as node())"}, {"content":"geo.polygon(${1:polygon-or-points as node()+})", "trigger":"geo.polygon", "description":"(polygon-or-points as node()+)"}, {"content":"geo.interiorPolygon(${1:polygon as node()})", "trigger":"geo.interiorPolygon", "description":"(polygon as node())"}, {"content":"geo.complexPolygon(${1:complex-polygon as node()})", "trigger":"geo.complexPolygon", "description":"(complex-polygon as node())"}, {"content":"geo.geospatialQuery(${1:regions as cts:region*})", "trigger":"geo.geospatialQuery", "description":"(regions as cts:region*)"}, {"content":"geo.geospatialQuery(${1:regions as cts:region*}, ${2:options as xs:string*})", "trigger":"geo.geospatialQuery", "description":"(regions as cts:region*, options as xs:string*)"}, {"content":"geo.geospatialQuery(${1:regions as cts:region*}, ${2:options as xs:string*}, ${3:weight as xs:double?})", "trigger":"geo.geospatialQuery", "description":"(regions as cts:region*, options as xs:string*, weight as xs:double?)"}, {"content":"geo.geospatialQueryFromElements(${1:regions as element()*})", "trigger":"geo.geospatialQueryFromElements", "description":"(regions as element()*)"}, {"content":"geo.geospatialQueryFromElements(${1:regions as element()*}, ${2:options as xs:string*})", "trigger":"geo.geospatialQueryFromElements", "description":"(regions as element()*, options as xs:string*)"}, {"content":"geo.geospatialQueryFromElements(${1:regions as element()*}, ${2:options as xs:string*}, ${3:weight as xs:double?})", "trigger":"geo.geospatialQueryFromElements", "description":"(regions as element()*, options as xs:string*, weight as xs:double?)"}, {"content":"geo.geospatialQueryFromNodes()", "trigger":"geo.geospatialQueryFromNodes", "description":"()"}, {"content":"cts.point(${1:latitude as xs:float}, ${2:longitude as xs:float})", "trigger":"cts.point", "description":"(latitude as xs:float, longitude as xs:float)"}, {"content":"cts.pointLatitude(${1:point as cts:point})", "trigger":"cts.pointLatitude", "description":"(point as cts:point)"}, {"content":"cts.pointLongitude(${1:point as cts:point})", "trigger":"cts.pointLongitude", "description":"(point as cts:point)"}, {"content":"cts.box(${1:south as xs:float}, ${2:west as xs:float}, ${3:north as xs:float}, ${4:east as xs:float})", "trigger":"cts.box", "description":"(south as xs:float, west as xs:float, north as xs:float, east as xs:float)"}, {"content":"cts.boxSouth(${1:box as cts:box})", "trigger":"cts.boxSouth", "description":"(box as cts:box)"}, {"content":"cts.boxWest(${1:box as cts:box})", "trigger":"cts.boxWest", "description":"(box as cts:box)"}, {"content":"cts.boxNorth(${1:box as cts:box})", "trigger":"cts.boxNorth", "description":"(box as cts:box)"}, {"content":"cts.boxEast(${1:box as cts:box})", "trigger":"cts.boxEast", "description":"(box as cts:box)"}, {"content":"cts.circle(${1:radius as xs:double}, ${2:center as cts:point})", "trigger":"cts.circle", "description":"(radius as xs:double, center as cts:point)"}, {"content":"cts.circleRadius(${1:circle as cts:circle})", "trigger":"cts.circleRadius", "description":"(circle as cts:circle)"}, {"content":"cts.circleCenter(${1:circle as cts:circle})", "trigger":"cts.circleCenter", "description":"(circle as cts:circle)"}, {"content":"cts.polygon(${1:vertices as cts:point*})", "trigger":"cts.polygon", "description":"(vertices as cts:point*)"}, {"content":"cts.polygonVertices(${1:polygon as cts:polygon})", "trigger":"cts.polygonVertices", "description":"(polygon as cts:polygon)"}, {"content":"cts.linestring(${1:vertices as cts:point*})", "trigger":"cts.linestring", "description":"(vertices as cts:point*)"}, {"content":"cts.linestringVertices(${1:linestring as cts:linestring})", "trigger":"cts.linestringVertices", "description":"(linestring as cts:linestring)"}, {"content":"cts.complexPolygon(${1:outer as cts:polygon}, ${2:inner as cts:polygon*})", "trigger":"cts.complexPolygon", "description":"(outer as cts:polygon, inner as cts:polygon*)"}, {"content":"cts.complexPolygonOuter(${1:complexPolygon as cts:complex-polygon})", "trigger":"cts.complexPolygonOuter", "description":"(complexPolygon as cts:complex-polygon)"}, {"content":"cts.complexPolygonInner(${1:complexPolygon as cts:complex-polygon})", "trigger":"cts.complexPolygonInner", "description":"(complexPolygon as cts:complex-polygon)"}, {"content":"cts.elementGeospatialQuery(${1:element-name as xs:QName*}, ${2:regions as cts:region*})", "trigger":"cts.elementGeospatialQuery", "description":"(element-name as xs:QName*, regions as cts:region*)"}, {"content":"cts.elementGeospatialQuery(${1:element-name as xs:QName*}, ${2:regions as cts:region*}, ${3:options as xs:string*})", "trigger":"cts.elementGeospatialQuery", "description":"(element-name as xs:QName*, regions as cts:region*, options as xs:string*)"}, {"content":"cts.elementGeospatialQuery(${1:element-name as xs:QName*}, ${2:regions as cts:region*}, ${3:options as xs:string*}, ${4:weight as xs:double?})", "trigger":"cts.elementGeospatialQuery", "description":"(element-name as xs:QName*, regions as cts:region*, options as xs:string*, weight as xs:double?)"}, {"content":"cts.elementGeospatialQueryElementName(${1:query as cts:element-geospatial-query})", "trigger":"cts.elementGeospatialQueryElementName", "description":"(query as cts:element-geospatial-query)"}, {"content":"cts.elementGeospatialQueryRegion(${1:query as cts:element-geospatial-query})", "trigger":"cts.elementGeospatialQueryRegion", "description":"(query as cts:element-geospatial-query)"}, {"content":"cts.elementGeospatialQueryOptions(${1:query as cts:element-geospatial-query})", "trigger":"cts.elementGeospatialQueryOptions", "description":"(query as cts:element-geospatial-query)"}, {"content":"cts.elementGeospatialQueryWeight(${1:query as cts:element-geospatial-query})", "trigger":"cts.elementGeospatialQueryWeight", "description":"(query as cts:element-geospatial-query)"}, {"content":"cts.jsonPropertyGeospatialQuery(${1:property-name as xs:string*}, ${2:regions as cts:region*})", "trigger":"cts.jsonPropertyGeospatialQuery", "description":"(property-name as xs:string*, regions as cts:region*)"}, {"content":"cts.jsonPropertyGeospatialQuery(${1:property-name as xs:string*}, ${2:regions as cts:region*}, ${3:options as xs:string*})", "trigger":"cts.jsonPropertyGeospatialQuery", "description":"(property-name as xs:string*, regions as cts:region*, options as xs:string*)"}, {"content":"cts.jsonPropertyGeospatialQuery(${1:property-name as xs:string*}, ${2:regions as cts:region*}, ${3:options as xs:string*}, ${4:weight as xs:double?})", "trigger":"cts.jsonPropertyGeospatialQuery", "description":"(property-name as xs:string*, regions as cts:region*, options as xs:string*, weight as xs:double?)"}, {"content":"cts.jsonPropertyGeospatialQueryPropertyName(${1:query as cts:json-property-geospatial-query})", "trigger":"cts.jsonPropertyGeospatialQueryPropertyName", "description":"(query as cts:json-property-geospatial-query)"}, {"content":"cts.jsonPropertyGeospatialQueryRegion(${1:query as cts:json-property-geospatial-query})", "trigger":"cts.jsonPropertyGeospatialQueryRegion", "description":"(query as cts:json-property-geospatial-query)"}, {"content":"cts.jsonPropertyGeospatialQueryOptions(${1:query as cts:json-property-geospatial-query})", "trigger":"cts.jsonPropertyGeospatialQueryOptions", "description":"(query as cts:json-property-geospatial-query)"}, {"content":"cts.jsonPropertyGeospatialQueryWeight(${1:query as cts:json-property-geospatial-query})", "trigger":"cts.jsonPropertyGeospatialQueryWeight", "description":"(query as cts:json-property-geospatial-query)"}, {"content":"cts.elementChildGeospatialQuery(${1:parent-element-name as xs:QName*}, ${2:child-element-names as xs:QName*}, ${3:regions as cts:region*})", "trigger":"cts.elementChildGeospatialQuery", "description":"(parent-element-name as xs:QName*, child-element-names as xs:QName*, regions as cts:region*)"}, {"content":"cts.elementChildGeospatialQuery(${1:parent-element-name as xs:QName*}, ${2:child-element-names as xs:QName*}, ${3:regions as cts:region*}, ${4:options as xs:string*})", "trigger":"cts.elementChildGeospatialQuery", "description":"(parent-element-name as xs:QName*, child-element-names as xs:QName*, regions as cts:region*, options as xs:string*)"}, {"content":"cts.elementChildGeospatialQuery(${1:parent-element-name as xs:QName*}, ${2:child-element-names as xs:QName*}, ${3:regions as cts:region*}, ${4:options as xs:string*}, ${5:weight as xs:double?})", "trigger":"cts.elementChildGeospatialQuery", "description":"(parent-element-name as xs:QName*, child-element-names as xs:QName*, regions as cts:region*, options as xs:string*, weight as xs:double?)"}, {"content":"cts.elementChildGeospatialQueryElementName(${1:query as cts:element-child-geospatial-query})", "trigger":"cts.elementChildGeospatialQueryElementName", "description":"(query as cts:element-child-geospatial-query)"}, {"content":"cts.elementChildGeospatialQueryChildName(${1:query as cts:element-child-geospatial-query})", "trigger":"cts.elementChildGeospatialQueryChildName", "description":"(query as cts:element-child-geospatial-query)"}, {"content":"cts.elementChildGeospatialQueryRegion(${1:query as cts:element-child-geospatial-query})", "trigger":"cts.elementChildGeospatialQueryRegion", "description":"(query as cts:element-child-geospatial-query)"}, {"content":"cts.elementChildGeospatialQueryOptions(${1:query as cts:element-child-geospatial-query})", "trigger":"cts.elementChildGeospatialQueryOptions", "description":"(query as cts:element-child-geospatial-query)"}, {"content":"cts.elementChildGeospatialQueryWeight(${1:query as cts:element-child-geospatial-query})", "trigger":"cts.elementChildGeospatialQueryWeight", "description":"(query as cts:element-child-geospatial-query)"}, {"content":"cts.jsonPropertyChildGeospatialQuery(${1:parent-property-name as xs:string*}, ${2:child-property-names as xs:string*}, ${3:regions as cts:region*})", "trigger":"cts.jsonPropertyChildGeospatialQuery", "description":"(parent-property-name as xs:string*, child-property-names as xs:string*, regions as cts:region*)"}, {"content":"cts.jsonPropertyChildGeospatialQuery(${1:parent-property-name as xs:string*}, ${2:child-property-names as xs:string*}, ${3:regions as cts:region*}, ${4:options as xs:string*})", "trigger":"cts.jsonPropertyChildGeospatialQuery", "description":"(parent-property-name as xs:string*, child-property-names as xs:string*, regions as cts:region*, options as xs:string*)"}, {"content":"cts.jsonPropertyChildGeospatialQuery(${1:parent-property-name as xs:string*}, ${2:child-property-names as xs:string*}, ${3:regions as cts:region*}, ${4:options as xs:string*}, ${5:weight as xs:double?})", "trigger":"cts.jsonPropertyChildGeospatialQuery", "description":"(parent-property-name as xs:string*, child-property-names as xs:string*, regions as cts:region*, options as xs:string*, weight as xs:double?)"}, {"content":"cts.jsonPropertyChildGeospatialQueryPropertyName(${1:query as cts:json-property-child-geospatial-query})", "trigger":"cts.jsonPropertyChildGeospatialQueryPropertyName", "description":"(query as cts:json-property-child-geospatial-query)"}, {"content":"cts.jsonPropertyChildGeospatialQueryChildName(${1:query as cts:json-property-child-geospatial-query})", "trigger":"cts.jsonPropertyChildGeospatialQueryChildName", "description":"(query as cts:json-property-child-geospatial-query)"}, {"content":"cts.jsonPropertyChildGeospatialQueryRegion(${1:query as cts:json-property-child-geospatial-query})", "trigger":"cts.jsonPropertyChildGeospatialQueryRegion", "description":"(query as cts:json-property-child-geospatial-query)"}, {"content":"cts.jsonPropertyChildGeospatialQueryOptions(${1:query as cts:json-property-child-geospatial-query})", "trigger":"cts.jsonPropertyChildGeospatialQueryOptions", "description":"(query as cts:json-property-child-geospatial-query)"}, {"content":"cts.jsonPropertyChildGeospatialQueryWeight(${1:query as cts:json-property-child-geospatial-query})", "trigger":"cts.jsonPropertyChildGeospatialQueryWeight", "description":"(query as cts:json-property-child-geospatial-query)"}, {"content":"cts.elementPairGeospatialQuery(${1:element-name as xs:QName*}, ${2:latitude-element-names as xs:QName*}, ${3:longitude-element-names as xs:QName*}, ${4:regions as cts:region*})", "trigger":"cts.elementPairGeospatialQuery", "description":"(element-name as xs:QName*, latitude-element-names as xs:QName*, longitude-element-names as xs:QName*, regions as cts:region*)"}, {"content":"cts.elementPairGeospatialQuery(${1:element-name as xs:QName*}, ${2:latitude-element-names as xs:QName*}, ${3:longitude-element-names as xs:QName*}, ${4:regions as cts:region*}, ${5:options as xs:string*})", "trigger":"cts.elementPairGeospatialQuery", "description":"(element-name as xs:QName*, latitude-element-names as xs:QName*, longitude-element-names as xs:QName*, regions as cts:region*, options as xs:string*)"}, {"content":"cts.elementPairGeospatialQuery(${1:element-name as xs:QName*}, ${2:latitude-element-names as xs:QName*}, ${3:longitude-element-names as xs:QName*}, ${4:regions as cts:region*}, ${5:options as xs:string*}, ${6:weight as xs:double?})", "trigger":"cts.elementPairGeospatialQuery", "description":"(element-name as xs:QName*, latitude-element-names as xs:QName*, longitude-element-names as xs:QName*, regions as cts:region*, options as xs:string*, weight as xs:double?)"}, {"content":"cts.elementPairGeospatialQueryElementName(${1:query as cts:element-pair-geospatial-query})", "trigger":"cts.elementPairGeospatialQueryElementName", "description":"(query as cts:element-pair-geospatial-query)"}, {"content":"cts.elementPairGeospatialQueryLatitudeName(${1:query as cts:element-pair-geospatial-query})", "trigger":"cts.elementPairGeospatialQueryLatitudeName", "description":"(query as cts:element-pair-geospatial-query)"}, {"content":"cts.elementPairGeospatialQueryLongitudeName(${1:query as cts:element-pair-geospatial-query})", "trigger":"cts.elementPairGeospatialQueryLongitudeName", "description":"(query as cts:element-pair-geospatial-query)"}, {"content":"cts.elementPairGeospatialQueryRegion(${1:query as cts:element-pair-geospatial-query})", "trigger":"cts.elementPairGeospatialQueryRegion", "description":"(query as cts:element-pair-geospatial-query)"}, {"content":"cts.elementPairGeospatialQueryOptions(${1:query as cts:element-pair-geospatial-query})", "trigger":"cts.elementPairGeospatialQueryOptions", "description":"(query as cts:element-pair-geospatial-query)"}, {"content":"cts.elementPairGeospatialQueryWeight(${1:query as cts:element-pair-geospatial-query})", "trigger":"cts.elementPairGeospatialQueryWeight", "description":"(query as cts:element-pair-geospatial-query)"}, {"content":"cts.jsonPropertyPairGeospatialQuery(${1:property-name as xs:string*}, ${2:latitude-property-names as xs:string*}, ${3:longitude-property-names as xs:string*}, ${4:regions as cts:region*})", "trigger":"cts.jsonPropertyPairGeospatialQuery", "description":"(property-name as xs:string*, latitude-property-names as xs:string*, longitude-property-names as xs:string*, regions as cts:region*)"}, {"content":"cts.jsonPropertyPairGeospatialQuery(${1:property-name as xs:string*}, ${2:latitude-property-names as xs:string*}, ${3:longitude-property-names as xs:string*}, ${4:regions as cts:region*}, ${5:options as xs:string*})", "trigger":"cts.jsonPropertyPairGeospatialQuery", "description":"(property-name as xs:string*, latitude-property-names as xs:string*, longitude-property-names as xs:string*, regions as cts:region*, options as xs:string*)"}, {"content":"cts.jsonPropertyPairGeospatialQuery(${1:property-name as xs:string*}, ${2:latitude-property-names as xs:string*}, ${3:longitude-property-names as xs:string*}, ${4:regions as cts:region*}, ${5:options as xs:string*}, ${6:weight as xs:double?})", "trigger":"cts.jsonPropertyPairGeospatialQuery", "description":"(property-name as xs:string*, latitude-property-names as xs:string*, longitude-property-names as xs:string*, regions as cts:region*, options as xs:string*, weight as xs:double?)"}, {"content":"cts.jsonPropertyPairGeospatialQueryPropertyName(${1:query as cts:json-property-pair-geospatial-query})", "trigger":"cts.jsonPropertyPairGeospatialQueryPropertyName", "description":"(query as cts:json-property-pair-geospatial-query)"}, {"content":"cts.jsonPropertyPairGeospatialQueryLatitudeName(${1:query as cts:json-property-pair-geospatial-query})", "trigger":"cts.jsonPropertyPairGeospatialQueryLatitudeName", "description":"(query as cts:json-property-pair-geospatial-query)"}, {"content":"cts.jsonPropertyPairGeospatialQueryLongitudeName(${1:query as cts:json-property-pair-geospatial-query})", "trigger":"cts.jsonPropertyPairGeospatialQueryLongitudeName", "description":"(query as cts:json-property-pair-geospatial-query)"}, {"content":"cts.jsonPropertyPairGeospatialQueryRegion(${1:query as cts:json-property-pair-geospatial-query})", "trigger":"cts.jsonPropertyPairGeospatialQueryRegion", "description":"(query as cts:json-property-pair-geospatial-query)"}, {"content":"cts.jsonPropertyPairGeospatialQueryOptions(${1:query as cts:json-property-pair-geospatial-query})", "trigger":"cts.jsonPropertyPairGeospatialQueryOptions", "description":"(query as cts:json-property-pair-geospatial-query)"}, {"content":"cts.jsonPropertyPairGeospatialQueryWeight(${1:query as cts:json-property-pair-geospatial-query})", "trigger":"cts.jsonPropertyPairGeospatialQueryWeight", "description":"(query as cts:json-property-pair-geospatial-query)"}, {"content":"cts.elementAttributePairGeospatialQuery(${1:element-name as xs:QName*}, ${2:latitude-attribute-names as xs:QName*}, ${3:longitude-attribute-names as xs:QName*}, ${4:regions as cts:region*})", "trigger":"cts.elementAttributePairGeospatialQuery", "description":"(element-name as xs:QName*, latitude-attribute-names as xs:QName*, longitude-attribute-names as xs:QName*, regions as cts:region*)"}, {"content":"cts.elementAttributePairGeospatialQuery(${1:element-name as xs:QName*}, ${2:latitude-attribute-names as xs:QName*}, ${3:longitude-attribute-names as xs:QName*}, ${4:regions as cts:region*}, ${5:options as xs:string*})", "trigger":"cts.elementAttributePairGeospatialQuery", "description":"(element-name as xs:QName*, latitude-attribute-names as xs:QName*, longitude-attribute-names as xs:QName*, regions as cts:region*, options as xs:string*)"}, {"content":"cts.elementAttributePairGeospatialQuery(${1:element-name as xs:QName*}, ${2:latitude-attribute-names as xs:QName*}, ${3:longitude-attribute-names as xs:QName*}, ${4:regions as cts:region*}, ${5:options as xs:string*}, ${6:weight as xs:double?})", "trigger":"cts.elementAttributePairGeospatialQuery", "description":"(element-name as xs:QName*, latitude-attribute-names as xs:QName*, longitude-attribute-names as xs:QName*, regions as cts:region*, options as xs:string*, weight as xs:double?)"}, {"content":"cts.elementAttributePairGeospatialQueryElementName(${1:query as cts:element-attribute-pair-geospatial-query})", "trigger":"cts.elementAttributePairGeospatialQueryElementName", "description":"(query as cts:element-attribute-pair-geospatial-query)"}, {"content":"cts.elementAttributePairGeospatialQueryLatitudeName(${1:query as cts:element-attribute-pair-geospatial-query})", "trigger":"cts.elementAttributePairGeospatialQueryLatitudeName", "description":"(query as cts:element-attribute-pair-geospatial-query)"}, {"content":"cts.elementAttributePairGeospatialQueryLongitudeName(${1:query as cts:element-attribute-pair-geospatial-query})", "trigger":"cts.elementAttributePairGeospatialQueryLongitudeName", "description":"(query as cts:element-attribute-pair-geospatial-query)"}, {"content":"cts.elementAttributePairGeospatialQueryRegion(${1:query as cts:element-attribute-pair-geospatial-query})", "trigger":"cts.elementAttributePairGeospatialQueryRegion", "description":"(query as cts:element-attribute-pair-geospatial-query)"}, {"content":"cts.elementAttributePairGeospatialQueryOptions(${1:query as cts:element-attribute-pair-geospatial-query})", "trigger":"cts.elementAttributePairGeospatialQueryOptions", "description":"(query as cts:element-attribute-pair-geospatial-query)"}, {"content":"cts.elementAttributePairGeospatialQueryWeight(${1:query as cts:element-attribute-pair-geospatial-query})", "trigger":"cts.elementAttributePairGeospatialQueryWeight", "description":"(query as cts:element-attribute-pair-geospatial-query)"}, {"content":"cts.pathGeospatialQuery(${1:path-expression as xs:string*}, ${2:regions as cts:region*})", "trigger":"cts.pathGeospatialQuery", "description":"(path-expression as xs:string*, regions as cts:region*)"}, {"content":"cts.pathGeospatialQuery(${1:path-expression as xs:string*}, ${2:regions as cts:region*}, ${3:options as xs:string*})", "trigger":"cts.pathGeospatialQuery", "description":"(path-expression as xs:string*, regions as cts:region*, options as xs:string*)"}, {"content":"cts.pathGeospatialQuery(${1:path-expression as xs:string*}, ${2:regions as cts:region*}, ${3:options as xs:string*}, ${4:weight as xs:double?})", "trigger":"cts.pathGeospatialQuery", "description":"(path-expression as xs:string*, regions as cts:region*, options as xs:string*, weight as xs:double?)"}, {"content":"cts.pathGeospatialQueryRegion(${1:query as cts:path-geospatial-query})", "trigger":"cts.pathGeospatialQueryRegion", "description":"(query as cts:path-geospatial-query)"}, {"content":"cts.pathGeospatialQueryOptions(${1:query as cts:path-geospatial-query})", "trigger":"cts.pathGeospatialQueryOptions", "description":"(query as cts:path-geospatial-query)"}, {"content":"cts.pathGeospatialQueryWeight(${1:query as cts:path-geospatial-query})", "trigger":"cts.pathGeospatialQueryWeight", "description":"(query as cts:path-geospatial-query)"}, {"content":"cts.pathGeospatialQueryPathExpression(${1:query as cts:path-geospatial-query})", "trigger":"cts.pathGeospatialQueryPathExpression", "description":"(query as cts:path-geospatial-query)"}, {"content":"cts.geospatialRegionQueryReference(${1:query as cts:geospatial-region-query})", "trigger":"cts.geospatialRegionQueryReference", "description":"(query as cts:geospatial-region-query)"}, {"content":"cts.geospatialRegionQueryOperation(${1:query as cts:geospatial-region-query})", "trigger":"cts.geospatialRegionQueryOperation", "description":"(query as cts:geospatial-region-query)"}, {"content":"cts.geospatialRegionQueryRegion(${1:query as cts:geospatial-region-query})", "trigger":"cts.geospatialRegionQueryRegion", "description":"(query as cts:geospatial-region-query)"}, {"content":"cts.geospatialRegionQueryOptions(${1:query as cts:geospatial-region-query})", "trigger":"cts.geospatialRegionQueryOptions", "description":"(query as cts:geospatial-region-query)"}, {"content":"cts.geospatialRegionQueryWeight(${1:query as cts:geospatial-region-query})", "trigger":"cts.geospatialRegionQueryWeight", "description":"(query as cts:geospatial-region-query)"}, {"content":"cts.elementGeospatialBoxes(${1:element-names as xs:QName*})", "trigger":"cts.elementGeospatialBoxes", "description":"(element-names as xs:QName*)"}, {"content":"cts.elementGeospatialBoxes(${1:element-names as xs:QName*}, ${2:latitude-bounds as xs:double*})", "trigger":"cts.elementGeospatialBoxes", "description":"(element-names as xs:QName*, latitude-bounds as xs:double*)"}, {"content":"cts.elementGeospatialBoxes(${1:element-names as xs:QName*}, ${2:latitude-bounds as xs:double*}, ${3:longitude-bounds as xs:double*})", "trigger":"cts.elementGeospatialBoxes", "description":"(element-names as xs:QName*, latitude-bounds as xs:double*, longitude-bounds as xs:double*)"}, {"content":"cts.elementGeospatialBoxes(${1:element-names as xs:QName*}, ${2:latitude-bounds as xs:double*}, ${3:longitude-bounds as xs:double*}, ${4:options as xs:string*})", "trigger":"cts.elementGeospatialBoxes", "description":"(element-names as xs:QName*, latitude-bounds as xs:double*, longitude-bounds as xs:double*, options as xs:string*)"}, {"content":"cts.elementGeospatialBoxes(${1:element-names as xs:QName*}, ${2:latitude-bounds as xs:double*}, ${3:longitude-bounds as xs:double*}, ${4:options as xs:string*}, ${5:query as cts:query?})", "trigger":"cts.elementGeospatialBoxes", "description":"(element-names as xs:QName*, latitude-bounds as xs:double*, longitude-bounds as xs:double*, options as xs:string*, query as cts:query?)"}, {"content":"cts.elementGeospatialBoxes(${1:element-names as xs:QName*}, ${2:latitude-bounds as xs:double*}, ${3:longitude-bounds as xs:double*}, ${4:options as xs:string*}, ${5:query as cts:query?}, ${6:quality-weight as xs:double?})", "trigger":"cts.elementGeospatialBoxes", "description":"(element-names as xs:QName*, latitude-bounds as xs:double*, longitude-bounds as xs:double*, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.elementGeospatialBoxes(${1:element-names as xs:QName*}, ${2:latitude-bounds as xs:double*}, ${3:longitude-bounds as xs:double*}, ${4:options as xs:string*}, ${5:query as cts:query?}, ${6:quality-weight as xs:double?}, ${7:forest-ids as xs:unsignedLong*})", "trigger":"cts.elementGeospatialBoxes", "description":"(element-names as xs:QName*, latitude-bounds as xs:double*, longitude-bounds as xs:double*, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.elementChildGeospatialBoxes(${1:parent-element-names as xs:QName*}, ${2:child-element-names as xs:QName*})", "trigger":"cts.elementChildGeospatialBoxes", "description":"(parent-element-names as xs:QName*, child-element-names as xs:QName*)"}, {"content":"cts.elementChildGeospatialBoxes(${1:parent-element-names as xs:QName*}, ${2:child-element-names as xs:QName*}, ${3:latitude-bounds as xs:double*})", "trigger":"cts.elementChildGeospatialBoxes", "description":"(parent-element-names as xs:QName*, child-element-names as xs:QName*, latitude-bounds as xs:double*)"}, {"content":"cts.elementChildGeospatialBoxes(${1:parent-element-names as xs:QName*}, ${2:child-element-names as xs:QName*}, ${3:latitude-bounds as xs:double*}, ${4:longitude-bounds as xs:double*})", "trigger":"cts.elementChildGeospatialBoxes", "description":"(parent-element-names as xs:QName*, child-element-names as xs:QName*, latitude-bounds as xs:double*, longitude-bounds as xs:double*)"}, {"content":"cts.elementChildGeospatialBoxes(${1:parent-element-names as xs:QName*}, ${2:child-element-names as xs:QName*}, ${3:latitude-bounds as xs:double*}, ${4:longitude-bounds as xs:double*}, ${5:options as xs:string*})", "trigger":"cts.elementChildGeospatialBoxes", "description":"(parent-element-names as xs:QName*, child-element-names as xs:QName*, latitude-bounds as xs:double*, longitude-bounds as xs:double*, options as xs:string*)"}, {"content":"cts.elementChildGeospatialBoxes(${1:parent-element-names as xs:QName*}, ${2:child-element-names as xs:QName*}, ${3:latitude-bounds as xs:double*}, ${4:longitude-bounds as xs:double*}, ${5:options as xs:string*}, ${6:query as cts:query?})", "trigger":"cts.elementChildGeospatialBoxes", "description":"(parent-element-names as xs:QName*, child-element-names as xs:QName*, latitude-bounds as xs:double*, longitude-bounds as xs:double*, options as xs:string*, query as cts:query?)"}, {"content":"cts.elementChildGeospatialBoxes(${1:parent-element-names as xs:QName*}, ${2:child-element-names as xs:QName*}, ${3:latitude-bounds as xs:double*}, ${4:longitude-bounds as xs:double*}, ${5:options as xs:string*}, ${6:query as cts:query?}, ${7:quality-weight as xs:double?})", "trigger":"cts.elementChildGeospatialBoxes", "description":"(parent-element-names as xs:QName*, child-element-names as xs:QName*, latitude-bounds as xs:double*, longitude-bounds as xs:double*, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.elementChildGeospatialBoxes(${1:parent-element-names as xs:QName*}, ${2:child-element-names as xs:QName*}, ${3:latitude-bounds as xs:double*}, ${4:longitude-bounds as xs:double*}, ${5:options as xs:string*}, ${6:query as cts:query?}, ${7:quality-weight as xs:double?}, ${8:forest-ids as xs:unsignedLong*})", "trigger":"cts.elementChildGeospatialBoxes", "description":"(parent-element-names as xs:QName*, child-element-names as xs:QName*, latitude-bounds as xs:double*, longitude-bounds as xs:double*, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.elementPairGeospatialBoxes(${1:parent-element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*})", "trigger":"cts.elementPairGeospatialBoxes", "description":"(parent-element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*)"}, {"content":"cts.elementPairGeospatialBoxes(${1:parent-element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:latitude-bounds as xs:double*})", "trigger":"cts.elementPairGeospatialBoxes", "description":"(parent-element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, latitude-bounds as xs:double*)"}, {"content":"cts.elementPairGeospatialBoxes(${1:parent-element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:latitude-bounds as xs:double*}, ${5:longitude-bounds as xs:double*})", "trigger":"cts.elementPairGeospatialBoxes", "description":"(parent-element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, latitude-bounds as xs:double*, longitude-bounds as xs:double*)"}, {"content":"cts.elementPairGeospatialBoxes(${1:parent-element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:latitude-bounds as xs:double*}, ${5:longitude-bounds as xs:double*}, ${6:options as xs:string*})", "trigger":"cts.elementPairGeospatialBoxes", "description":"(parent-element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, latitude-bounds as xs:double*, longitude-bounds as xs:double*, options as xs:string*)"}, {"content":"cts.elementPairGeospatialBoxes(${1:parent-element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:latitude-bounds as xs:double*}, ${5:longitude-bounds as xs:double*}, ${6:options as xs:string*}, ${7:query as cts:query?})", "trigger":"cts.elementPairGeospatialBoxes", "description":"(parent-element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, latitude-bounds as xs:double*, longitude-bounds as xs:double*, options as xs:string*, query as cts:query?)"}, {"content":"cts.elementPairGeospatialBoxes(${1:parent-element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:latitude-bounds as xs:double*}, ${5:longitude-bounds as xs:double*}, ${6:options as xs:string*}, ${7:query as cts:query?}, ${8:quality-weight as xs:double?})", "trigger":"cts.elementPairGeospatialBoxes", "description":"(parent-element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, latitude-bounds as xs:double*, longitude-bounds as xs:double*, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.elementPairGeospatialBoxes(${1:parent-element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:latitude-bounds as xs:double*}, ${5:longitude-bounds as xs:double*}, ${6:options as xs:string*}, ${7:query as cts:query?}, ${8:quality-weight as xs:double?}, ${9:forest-ids as xs:unsignedLong*})", "trigger":"cts.elementPairGeospatialBoxes", "description":"(parent-element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, latitude-bounds as xs:double*, longitude-bounds as xs:double*, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.elementAttributePairGeospatialBoxes(${1:parent-element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*})", "trigger":"cts.elementAttributePairGeospatialBoxes", "description":"(parent-element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*)"}, {"content":"cts.elementAttributePairGeospatialBoxes(${1:parent-element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:latitude-bounds as xs:double*})", "trigger":"cts.elementAttributePairGeospatialBoxes", "description":"(parent-element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, latitude-bounds as xs:double*)"}, {"content":"cts.elementAttributePairGeospatialBoxes(${1:parent-element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:latitude-bounds as xs:double*}, ${5:longitude-bounds as xs:double*})", "trigger":"cts.elementAttributePairGeospatialBoxes", "description":"(parent-element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, latitude-bounds as xs:double*, longitude-bounds as xs:double*)"}, {"content":"cts.elementAttributePairGeospatialBoxes(${1:parent-element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:latitude-bounds as xs:double*}, ${5:longitude-bounds as xs:double*}, ${6:options as xs:string*})", "trigger":"cts.elementAttributePairGeospatialBoxes", "description":"(parent-element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, latitude-bounds as xs:double*, longitude-bounds as xs:double*, options as xs:string*)"}, {"content":"cts.elementAttributePairGeospatialBoxes(${1:parent-element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:latitude-bounds as xs:double*}, ${5:longitude-bounds as xs:double*}, ${6:options as xs:string*}, ${7:query as cts:query?})", "trigger":"cts.elementAttributePairGeospatialBoxes", "description":"(parent-element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, latitude-bounds as xs:double*, longitude-bounds as xs:double*, options as xs:string*, query as cts:query?)"}, {"content":"cts.elementAttributePairGeospatialBoxes(${1:parent-element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:latitude-bounds as xs:double*}, ${5:longitude-bounds as xs:double*}, ${6:options as xs:string*}, ${7:query as cts:query?}, ${8:quality-weight as xs:double?})", "trigger":"cts.elementAttributePairGeospatialBoxes", "description":"(parent-element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, latitude-bounds as xs:double*, longitude-bounds as xs:double*, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.elementAttributePairGeospatialBoxes(${1:parent-element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:latitude-bounds as xs:double*}, ${5:longitude-bounds as xs:double*}, ${6:options as xs:string*}, ${7:query as cts:query?}, ${8:quality-weight as xs:double?}, ${9:forest-ids as xs:unsignedLong*})", "trigger":"cts.elementAttributePairGeospatialBoxes", "description":"(parent-element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, latitude-bounds as xs:double*, longitude-bounds as xs:double*, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.geospatialBoxes(${1:geo-indexes as cts:reference*})", "trigger":"cts.geospatialBoxes", "description":"(geo-indexes as cts:reference*)"}, {"content":"cts.geospatialBoxes(${1:geo-indexes as cts:reference*}, ${2:latitude-bounds as xs:double*})", "trigger":"cts.geospatialBoxes", "description":"(geo-indexes as cts:reference*, latitude-bounds as xs:double*)"}, {"content":"cts.geospatialBoxes(${1:geo-indexes as cts:reference*}, ${2:latitude-bounds as xs:double*}, ${3:longitude-bounds as xs:double*})", "trigger":"cts.geospatialBoxes", "description":"(geo-indexes as cts:reference*, latitude-bounds as xs:double*, longitude-bounds as xs:double*)"}, {"content":"cts.geospatialBoxes(${1:geo-indexes as cts:reference*}, ${2:latitude-bounds as xs:double*}, ${3:longitude-bounds as xs:double*}, ${4:options as xs:string*})", "trigger":"cts.geospatialBoxes", "description":"(geo-indexes as cts:reference*, latitude-bounds as xs:double*, longitude-bounds as xs:double*, options as xs:string*)"}, {"content":"cts.geospatialBoxes(${1:geo-indexes as cts:reference*}, ${2:latitude-bounds as xs:double*}, ${3:longitude-bounds as xs:double*}, ${4:options as xs:string*}, ${5:query as cts:query?})", "trigger":"cts.geospatialBoxes", "description":"(geo-indexes as cts:reference*, latitude-bounds as xs:double*, longitude-bounds as xs:double*, options as xs:string*, query as cts:query?)"}, {"content":"cts.geospatialBoxes(${1:geo-indexes as cts:reference*}, ${2:latitude-bounds as xs:double*}, ${3:longitude-bounds as xs:double*}, ${4:options as xs:string*}, ${5:query as cts:query?}, ${6:quality-weight as xs:double?})", "trigger":"cts.geospatialBoxes", "description":"(geo-indexes as cts:reference*, latitude-bounds as xs:double*, longitude-bounds as xs:double*, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.geospatialBoxes(${1:geo-indexes as cts:reference*}, ${2:latitude-bounds as xs:double*}, ${3:longitude-bounds as xs:double*}, ${4:options as xs:string*}, ${5:query as cts:query?}, ${6:quality-weight as xs:double?}, ${7:forest-ids as xs:unsignedLong*})", "trigger":"cts.geospatialBoxes", "description":"(geo-indexes as cts:reference*, latitude-bounds as xs:double*, longitude-bounds as xs:double*, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.elementGeospatialValues(${1:element-names as xs:QName*})", "trigger":"cts.elementGeospatialValues", "description":"(element-names as xs:QName*)"}, {"content":"cts.elementGeospatialValues(${1:element-names as xs:QName*}, ${2:start as cts:point?})", "trigger":"cts.elementGeospatialValues", "description":"(element-names as xs:QName*, start as cts:point?)"}, {"content":"cts.elementGeospatialValues(${1:element-names as xs:QName*}, ${2:start as cts:point?}, ${3:options as xs:string*})", "trigger":"cts.elementGeospatialValues", "description":"(element-names as xs:QName*, start as cts:point?, options as xs:string*)"}, {"content":"cts.elementGeospatialValues(${1:element-names as xs:QName*}, ${2:start as cts:point?}, ${3:options as xs:string*}, ${4:query as cts:query?})", "trigger":"cts.elementGeospatialValues", "description":"(element-names as xs:QName*, start as cts:point?, options as xs:string*, query as cts:query?)"}, {"content":"cts.elementGeospatialValues(${1:element-names as xs:QName*}, ${2:start as cts:point?}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?})", "trigger":"cts.elementGeospatialValues", "description":"(element-names as xs:QName*, start as cts:point?, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.elementGeospatialValues(${1:element-names as xs:QName*}, ${2:start as cts:point?}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?}, ${6:forest-ids as xs:unsignedLong*})", "trigger":"cts.elementGeospatialValues", "description":"(element-names as xs:QName*, start as cts:point?, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.elementChildGeospatialValues(${1:element-names as xs:QName*}, ${2:child-names as xs:QName*})", "trigger":"cts.elementChildGeospatialValues", "description":"(element-names as xs:QName*, child-names as xs:QName*)"}, {"content":"cts.elementChildGeospatialValues(${1:element-names as xs:QName*}, ${2:child-names as xs:QName*}, ${3:start as cts:point?})", "trigger":"cts.elementChildGeospatialValues", "description":"(element-names as xs:QName*, child-names as xs:QName*, start as cts:point?)"}, {"content":"cts.elementChildGeospatialValues(${1:element-names as xs:QName*}, ${2:child-names as xs:QName*}, ${3:start as cts:point?}, ${4:options as xs:string*})", "trigger":"cts.elementChildGeospatialValues", "description":"(element-names as xs:QName*, child-names as xs:QName*, start as cts:point?, options as xs:string*)"}, {"content":"cts.elementChildGeospatialValues(${1:element-names as xs:QName*}, ${2:child-names as xs:QName*}, ${3:start as cts:point?}, ${4:options as xs:string*}, ${5:query as cts:query?})", "trigger":"cts.elementChildGeospatialValues", "description":"(element-names as xs:QName*, child-names as xs:QName*, start as cts:point?, options as xs:string*, query as cts:query?)"}, {"content":"cts.elementChildGeospatialValues(${1:element-names as xs:QName*}, ${2:child-names as xs:QName*}, ${3:start as cts:point?}, ${4:options as xs:string*}, ${5:query as cts:query?}, ${6:quality-weight as xs:double?})", "trigger":"cts.elementChildGeospatialValues", "description":"(element-names as xs:QName*, child-names as xs:QName*, start as cts:point?, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.elementChildGeospatialValues(${1:element-names as xs:QName*}, ${2:child-names as xs:QName*}, ${3:start as cts:point?}, ${4:options as xs:string*}, ${5:query as cts:query?}, ${6:quality-weight as xs:double?}, ${7:forest-ids as xs:unsignedLong*})", "trigger":"cts.elementChildGeospatialValues", "description":"(element-names as xs:QName*, child-names as xs:QName*, start as cts:point?, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.elementPairGeospatialValues(${1:element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*})", "trigger":"cts.elementPairGeospatialValues", "description":"(element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*)"}, {"content":"cts.elementPairGeospatialValues(${1:element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:start as cts:point?})", "trigger":"cts.elementPairGeospatialValues", "description":"(element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, start as cts:point?)"}, {"content":"cts.elementPairGeospatialValues(${1:element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:start as cts:point?}, ${5:options as xs:string*})", "trigger":"cts.elementPairGeospatialValues", "description":"(element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, start as cts:point?, options as xs:string*)"}, {"content":"cts.elementPairGeospatialValues(${1:element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:start as cts:point?}, ${5:options as xs:string*}, ${6:query as cts:query?})", "trigger":"cts.elementPairGeospatialValues", "description":"(element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, start as cts:point?, options as xs:string*, query as cts:query?)"}, {"content":"cts.elementPairGeospatialValues(${1:element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:start as cts:point?}, ${5:options as xs:string*}, ${6:query as cts:query?}, ${7:quality-weight as xs:double?})", "trigger":"cts.elementPairGeospatialValues", "description":"(element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, start as cts:point?, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.elementPairGeospatialValues(${1:element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:start as cts:point?}, ${5:options as xs:string*}, ${6:query as cts:query?}, ${7:quality-weight as xs:double?}, ${8:forest-ids as xs:unsignedLong*})", "trigger":"cts.elementPairGeospatialValues", "description":"(element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, start as cts:point?, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.elementAttributePairGeospatialValues(${1:element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*})", "trigger":"cts.elementAttributePairGeospatialValues", "description":"(element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*)"}, {"content":"cts.elementAttributePairGeospatialValues(${1:element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:start as cts:point?})", "trigger":"cts.elementAttributePairGeospatialValues", "description":"(element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, start as cts:point?)"}, {"content":"cts.elementAttributePairGeospatialValues(${1:element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:start as cts:point?}, ${5:options as xs:string*})", "trigger":"cts.elementAttributePairGeospatialValues", "description":"(element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, start as cts:point?, options as xs:string*)"}, {"content":"cts.elementAttributePairGeospatialValues(${1:element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:start as cts:point?}, ${5:options as xs:string*}, ${6:query as cts:query?})", "trigger":"cts.elementAttributePairGeospatialValues", "description":"(element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, start as cts:point?, options as xs:string*, query as cts:query?)"}, {"content":"cts.elementAttributePairGeospatialValues(${1:element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:start as cts:point?}, ${5:options as xs:string*}, ${6:query as cts:query?}, ${7:quality-weight as xs:double?})", "trigger":"cts.elementAttributePairGeospatialValues", "description":"(element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, start as cts:point?, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.elementAttributePairGeospatialValues(${1:element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:start as cts:point?}, ${5:options as xs:string*}, ${6:query as cts:query?}, ${7:quality-weight as xs:double?}, ${8:forest-ids as xs:unsignedLong*})", "trigger":"cts.elementAttributePairGeospatialValues", "description":"(element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, start as cts:point?, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.elementGeospatialValueMatch(${1:element-names as xs:QName*}, ${2:pattern as xs:anyAtomicType})", "trigger":"cts.elementGeospatialValueMatch", "description":"(element-names as xs:QName*, pattern as xs:anyAtomicType)"}, {"content":"cts.elementGeospatialValueMatch(${1:element-names as xs:QName*}, ${2:pattern as xs:anyAtomicType}, ${3:options as xs:string*})", "trigger":"cts.elementGeospatialValueMatch", "description":"(element-names as xs:QName*, pattern as xs:anyAtomicType, options as xs:string*)"}, {"content":"cts.elementGeospatialValueMatch(${1:element-names as xs:QName*}, ${2:pattern as xs:anyAtomicType}, ${3:options as xs:string*}, ${4:query as cts:query?})", "trigger":"cts.elementGeospatialValueMatch", "description":"(element-names as xs:QName*, pattern as xs:anyAtomicType, options as xs:string*, query as cts:query?)"}, {"content":"cts.elementGeospatialValueMatch(${1:element-names as xs:QName*}, ${2:pattern as xs:anyAtomicType}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?})", "trigger":"cts.elementGeospatialValueMatch", "description":"(element-names as xs:QName*, pattern as xs:anyAtomicType, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.elementGeospatialValueMatch(${1:element-names as xs:QName*}, ${2:pattern as xs:anyAtomicType}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?}, ${6:forest-ids as xs:unsignedLong*})", "trigger":"cts.elementGeospatialValueMatch", "description":"(element-names as xs:QName*, pattern as xs:anyAtomicType, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.elementChildGeospatialValueMatch(${1:element-names as xs:QName*}, ${2:child-names as xs:QName*}, ${3:pattern as xs:anyAtomicType})", "trigger":"cts.elementChildGeospatialValueMatch", "description":"(element-names as xs:QName*, child-names as xs:QName*, pattern as xs:anyAtomicType)"}, {"content":"cts.elementChildGeospatialValueMatch(${1:element-names as xs:QName*}, ${2:child-names as xs:QName*}, ${3:pattern as xs:anyAtomicType}, ${4:options as xs:string*})", "trigger":"cts.elementChildGeospatialValueMatch", "description":"(element-names as xs:QName*, child-names as xs:QName*, pattern as xs:anyAtomicType, options as xs:string*)"}, {"content":"cts.elementChildGeospatialValueMatch(${1:element-names as xs:QName*}, ${2:child-names as xs:QName*}, ${3:pattern as xs:anyAtomicType}, ${4:options as xs:string*}, ${5:query as cts:query?})", "trigger":"cts.elementChildGeospatialValueMatch", "description":"(element-names as xs:QName*, child-names as xs:QName*, pattern as xs:anyAtomicType, options as xs:string*, query as cts:query?)"}, {"content":"cts.elementChildGeospatialValueMatch(${1:element-names as xs:QName*}, ${2:child-names as xs:QName*}, ${3:pattern as xs:anyAtomicType}, ${4:options as xs:string*}, ${5:query as cts:query?}, ${6:quality-weight as xs:double?})", "trigger":"cts.elementChildGeospatialValueMatch", "description":"(element-names as xs:QName*, child-names as xs:QName*, pattern as xs:anyAtomicType, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.elementChildGeospatialValueMatch(${1:element-names as xs:QName*}, ${2:child-names as xs:QName*}, ${3:pattern as xs:anyAtomicType}, ${4:options as xs:string*}, ${5:query as cts:query?}, ${6:quality-weight as xs:double?}, ${7:forest-ids as xs:unsignedLong*})", "trigger":"cts.elementChildGeospatialValueMatch", "description":"(element-names as xs:QName*, child-names as xs:QName*, pattern as xs:anyAtomicType, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.elementPairGeospatialValueMatch(${1:element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:pattern as xs:anyAtomicType})", "trigger":"cts.elementPairGeospatialValueMatch", "description":"(element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, pattern as xs:anyAtomicType)"}, {"content":"cts.elementPairGeospatialValueMatch(${1:element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:pattern as xs:anyAtomicType}, ${5:options as xs:string*})", "trigger":"cts.elementPairGeospatialValueMatch", "description":"(element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, pattern as xs:anyAtomicType, options as xs:string*)"}, {"content":"cts.elementPairGeospatialValueMatch(${1:element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:pattern as xs:anyAtomicType}, ${5:options as xs:string*}, ${6:query as cts:query?})", "trigger":"cts.elementPairGeospatialValueMatch", "description":"(element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, pattern as xs:anyAtomicType, options as xs:string*, query as cts:query?)"}, {"content":"cts.elementPairGeospatialValueMatch(${1:element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:pattern as xs:anyAtomicType}, ${5:options as xs:string*}, ${6:query as cts:query?}, ${7:quality-weight as xs:double?})", "trigger":"cts.elementPairGeospatialValueMatch", "description":"(element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, pattern as xs:anyAtomicType, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.elementPairGeospatialValueMatch(${1:element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:pattern as xs:anyAtomicType}, ${5:options as xs:string*}, ${6:query as cts:query?}, ${7:quality-weight as xs:double?}, ${8:forest-ids as xs:unsignedLong*})", "trigger":"cts.elementPairGeospatialValueMatch", "description":"(element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, pattern as xs:anyAtomicType, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.elementAttributePairGeospatialValueMatch(${1:element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:pattern as xs:anyAtomicType})", "trigger":"cts.elementAttributePairGeospatialValueMatch", "description":"(element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, pattern as xs:anyAtomicType)"}, {"content":"cts.elementAttributePairGeospatialValueMatch(${1:element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:pattern as xs:anyAtomicType}, ${5:options as xs:string*})", "trigger":"cts.elementAttributePairGeospatialValueMatch", "description":"(element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, pattern as xs:anyAtomicType, options as xs:string*)"}, {"content":"cts.elementAttributePairGeospatialValueMatch(${1:element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:pattern as xs:anyAtomicType}, ${5:options as xs:string*}, ${6:query as cts:query?})", "trigger":"cts.elementAttributePairGeospatialValueMatch", "description":"(element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, pattern as xs:anyAtomicType, options as xs:string*, query as cts:query?)"}, {"content":"cts.elementAttributePairGeospatialValueMatch(${1:element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:pattern as xs:anyAtomicType}, ${5:options as xs:string*}, ${6:query as cts:query?}, ${7:quality-weight as xs:double?})", "trigger":"cts.elementAttributePairGeospatialValueMatch", "description":"(element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, pattern as xs:anyAtomicType, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.elementAttributePairGeospatialValueMatch(${1:element-names as xs:QName*}, ${2:latitude-names as xs:QName*}, ${3:longitude-names as xs:QName*}, ${4:pattern as xs:anyAtomicType}, ${5:options as xs:string*}, ${6:query as cts:query?}, ${7:quality-weight as xs:double?}, ${8:forest-ids as xs:unsignedLong*})", "trigger":"cts.elementAttributePairGeospatialValueMatch", "description":"(element-names as xs:QName*, latitude-names as xs:QName*, longitude-names as xs:QName*, pattern as xs:anyAtomicType, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.elementValueGeospatialCoOccurrences(${1:element-name-1 as xs:QName}, ${2:geo-element-name as xs:QName})", "trigger":"cts.elementValueGeospatialCoOccurrences", "description":"(element-name-1 as xs:QName, geo-element-name as xs:QName)"}, {"content":"cts.elementValueGeospatialCoOccurrences(${1:element-name-1 as xs:QName}, ${2:geo-element-name as xs:QName}, ${3:coord-child-name-1 as xs:QName?})", "trigger":"cts.elementValueGeospatialCoOccurrences", "description":"(element-name-1 as xs:QName, geo-element-name as xs:QName, coord-child-name-1 as xs:QName?)"}, {"content":"cts.elementValueGeospatialCoOccurrences(${1:element-name-1 as xs:QName}, ${2:geo-element-name as xs:QName}, ${3:coord-child-name-1 as xs:QName?}, ${4:coord-child-name-2 as xs:QName?})", "trigger":"cts.elementValueGeospatialCoOccurrences", "description":"(element-name-1 as xs:QName, geo-element-name as xs:QName, coord-child-name-1 as xs:QName?, coord-child-name-2 as xs:QName?)"}, {"content":"cts.elementValueGeospatialCoOccurrences(${1:element-name-1 as xs:QName}, ${2:geo-element-name as xs:QName}, ${3:coord-child-name-1 as xs:QName?}, ${4:coord-child-name-2 as xs:QName?}, ${5:options as xs:string*})", "trigger":"cts.elementValueGeospatialCoOccurrences", "description":"(element-name-1 as xs:QName, geo-element-name as xs:QName, coord-child-name-1 as xs:QName?, coord-child-name-2 as xs:QName?, options as xs:string*)"}, {"content":"cts.elementValueGeospatialCoOccurrences(${1:element-name-1 as xs:QName}, ${2:geo-element-name as xs:QName}, ${3:coord-child-name-1 as xs:QName?}, ${4:coord-child-name-2 as xs:QName?}, ${5:options as xs:string*}, ${6:query as cts:query?})", "trigger":"cts.elementValueGeospatialCoOccurrences", "description":"(element-name-1 as xs:QName, geo-element-name as xs:QName, coord-child-name-1 as xs:QName?, coord-child-name-2 as xs:QName?, options as xs:string*, query as cts:query?)"}, {"content":"cts.elementValueGeospatialCoOccurrences(${1:element-name-1 as xs:QName}, ${2:geo-element-name as xs:QName}, ${3:coord-child-name-1 as xs:QName?}, ${4:coord-child-name-2 as xs:QName?}, ${5:options as xs:string*}, ${6:query as cts:query?}, ${7:quality-weight as xs:double?})", "trigger":"cts.elementValueGeospatialCoOccurrences", "description":"(element-name-1 as xs:QName, geo-element-name as xs:QName, coord-child-name-1 as xs:QName?, coord-child-name-2 as xs:QName?, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.elementValueGeospatialCoOccurrences(${1:element-name-1 as xs:QName}, ${2:geo-element-name as xs:QName}, ${3:coord-child-name-1 as xs:QName?}, ${4:coord-child-name-2 as xs:QName?}, ${5:options as xs:string*}, ${6:query as cts:query?}, ${7:quality-weight as xs:double?}, ${8:forest-ids as xs:unsignedLong*})", "trigger":"cts.elementValueGeospatialCoOccurrences", "description":"(element-name-1 as xs:QName, geo-element-name as xs:QName, coord-child-name-1 as xs:QName?, coord-child-name-2 as xs:QName?, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.elementAttributeValueGeospatialCoOccurrences(${1:element-name-1 as xs:QName}, ${2:attribute-name-1 as xs:QName?}, ${3:geo-element-name as xs:QName})", "trigger":"cts.elementAttributeValueGeospatialCoOccurrences", "description":"(element-name-1 as xs:QName, attribute-name-1 as xs:QName?, geo-element-name as xs:QName)"}, {"content":"cts.elementAttributeValueGeospatialCoOccurrences(${1:element-name-1 as xs:QName}, ${2:attribute-name-1 as xs:QName?}, ${3:geo-element-name as xs:QName}, ${4:child-name-1 as xs:QName?})", "trigger":"cts.elementAttributeValueGeospatialCoOccurrences", "description":"(element-name-1 as xs:QName, attribute-name-1 as xs:QName?, geo-element-name as xs:QName, child-name-1 as xs:QName?)"}, {"content":"cts.elementAttributeValueGeospatialCoOccurrences(${1:element-name-1 as xs:QName}, ${2:attribute-name-1 as xs:QName?}, ${3:geo-element-name as xs:QName}, ${4:child-name-1 as xs:QName?}, ${5:child-name-2 as xs:QName?})", "trigger":"cts.elementAttributeValueGeospatialCoOccurrences", "description":"(element-name-1 as xs:QName, attribute-name-1 as xs:QName?, geo-element-name as xs:QName, child-name-1 as xs:QName?, child-name-2 as xs:QName?)"}, {"content":"cts.elementAttributeValueGeospatialCoOccurrences(${1:element-name-1 as xs:QName}, ${2:attribute-name-1 as xs:QName?}, ${3:geo-element-name as xs:QName}, ${4:child-name-1 as xs:QName?}, ${5:child-name-2 as xs:QName?}, ${6:options as xs:string*})", "trigger":"cts.elementAttributeValueGeospatialCoOccurrences", "description":"(element-name-1 as xs:QName, attribute-name-1 as xs:QName?, geo-element-name as xs:QName, child-name-1 as xs:QName?, child-name-2 as xs:QName?, options as xs:string*)"}, {"content":"cts.elementAttributeValueGeospatialCoOccurrences(${1:element-name-1 as xs:QName}, ${2:attribute-name-1 as xs:QName?}, ${3:geo-element-name as xs:QName}, ${4:child-name-1 as xs:QName?}, ${5:child-name-2 as xs:QName?}, ${6:options as xs:string*}, ${7:query as cts:query?})", "trigger":"cts.elementAttributeValueGeospatialCoOccurrences", "description":"(element-name-1 as xs:QName, attribute-name-1 as xs:QName?, geo-element-name as xs:QName, child-name-1 as xs:QName?, child-name-2 as xs:QName?, options as xs:string*, query as cts:query?)"}, {"content":"cts.elementAttributeValueGeospatialCoOccurrences(${1:element-name-1 as xs:QName}, ${2:attribute-name-1 as xs:QName?}, ${3:geo-element-name as xs:QName}, ${4:child-name-1 as xs:QName?}, ${5:child-name-2 as xs:QName?}, ${6:options as xs:string*}, ${7:query as cts:query?}, ${8:quality-weight as xs:double?})", "trigger":"cts.elementAttributeValueGeospatialCoOccurrences", "description":"(element-name-1 as xs:QName, attribute-name-1 as xs:QName?, geo-element-name as xs:QName, child-name-1 as xs:QName?, child-name-2 as xs:QName?, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.elementAttributeValueGeospatialCoOccurrences(${1:element-name-1 as xs:QName}, ${2:attribute-name-1 as xs:QName?}, ${3:geo-element-name as xs:QName}, ${4:child-name-1 as xs:QName?}, ${5:child-name-2 as xs:QName?}, ${6:options as xs:string*}, ${7:query as cts:query?}, ${8:quality-weight as xs:double?}, ${9:forest-ids as xs:unsignedLong*})", "trigger":"cts.elementAttributeValueGeospatialCoOccurrences", "description":"(element-name-1 as xs:QName, attribute-name-1 as xs:QName?, geo-element-name as xs:QName, child-name-1 as xs:QName?, child-name-2 as xs:QName?, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.geospatialCoOccurrences(${1:geo-element-name-1 as xs:QName}, ${2:child-1-name-1 as xs:QName?}, ${3:child-1-name-2 as xs:QName?}, ${4:geo-element-name-2 as xs:QName})", "trigger":"cts.geospatialCoOccurrences", "description":"(geo-element-name-1 as xs:QName, child-1-name-1 as xs:QName?, child-1-name-2 as xs:QName?, geo-element-name-2 as xs:QName)"}, {"content":"cts.geospatialCoOccurrences(${1:geo-element-name-1 as xs:QName}, ${2:child-1-name-1 as xs:QName?}, ${3:child-1-name-2 as xs:QName?}, ${4:geo-element-name-2 as xs:QName}, ${5:child-2-name-1 as xs:QName?})", "trigger":"cts.geospatialCoOccurrences", "description":"(geo-element-name-1 as xs:QName, child-1-name-1 as xs:QName?, child-1-name-2 as xs:QName?, geo-element-name-2 as xs:QName, child-2-name-1 as xs:QName?)"}, {"content":"cts.geospatialCoOccurrences(${1:geo-element-name-1 as xs:QName}, ${2:child-1-name-1 as xs:QName?}, ${3:child-1-name-2 as xs:QName?}, ${4:geo-element-name-2 as xs:QName}, ${5:child-2-name-1 as xs:QName?}, ${6:child-2-name-2 as xs:QName?})", "trigger":"cts.geospatialCoOccurrences", "description":"(geo-element-name-1 as xs:QName, child-1-name-1 as xs:QName?, child-1-name-2 as xs:QName?, geo-element-name-2 as xs:QName, child-2-name-1 as xs:QName?, child-2-name-2 as xs:QName?)"}, {"content":"cts.geospatialCoOccurrences(${1:geo-element-name-1 as xs:QName}, ${2:child-1-name-1 as xs:QName?}, ${3:child-1-name-2 as xs:QName?}, ${4:geo-element-name-2 as xs:QName}, ${5:child-2-name-1 as xs:QName?}, ${6:child-2-name-2 as xs:QName?}, ${7:options as xs:string*})", "trigger":"cts.geospatialCoOccurrences", "description":"(geo-element-name-1 as xs:QName, child-1-name-1 as xs:QName?, child-1-name-2 as xs:QName?, geo-element-name-2 as xs:QName, child-2-name-1 as xs:QName?, child-2-name-2 as xs:QName?, options as xs:string*)"}, {"content":"cts.geospatialCoOccurrences(${1:geo-element-name-1 as xs:QName}, ${2:child-1-name-1 as xs:QName?}, ${3:child-1-name-2 as xs:QName?}, ${4:geo-element-name-2 as xs:QName}, ${5:child-2-name-1 as xs:QName?}, ${6:child-2-name-2 as xs:QName?}, ${7:options as xs:string*}, ${8:query as cts:query?})", "trigger":"cts.geospatialCoOccurrences", "description":"(geo-element-name-1 as xs:QName, child-1-name-1 as xs:QName?, child-1-name-2 as xs:QName?, geo-element-name-2 as xs:QName, child-2-name-1 as xs:QName?, child-2-name-2 as xs:QName?, options as xs:string*, query as cts:query?)"}, {"content":"cts.geospatialCoOccurrences(${1:geo-element-name-1 as xs:QName}, ${2:child-1-name-1 as xs:QName?}, ${3:child-1-name-2 as xs:QName?}, ${4:geo-element-name-2 as xs:QName}, ${5:child-2-name-1 as xs:QName?}, ${6:child-2-name-2 as xs:QName?}, ${7:options as xs:string*}, ${8:query as cts:query?}, ${9:quality-weight as xs:double?})", "trigger":"cts.geospatialCoOccurrences", "description":"(geo-element-name-1 as xs:QName, child-1-name-1 as xs:QName?, child-1-name-2 as xs:QName?, geo-element-name-2 as xs:QName, child-2-name-1 as xs:QName?, child-2-name-2 as xs:QName?, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.geospatialCoOccurrences(${1:geo-element-name-1 as xs:QName}, ${2:child-1-name-1 as xs:QName?}, ${3:child-1-name-2 as xs:QName?}, ${4:geo-element-name-2 as xs:QName}, ${5:child-2-name-1 as xs:QName?}, ${6:child-2-name-2 as xs:QName?}, ${7:options as xs:string*}, ${8:query as cts:query?}, ${9:quality-weight as xs:double?}, ${10:forest-ids as xs:unsignedLong*})", "trigger":"cts.geospatialCoOccurrences", "description":"(geo-element-name-1 as xs:QName, child-1-name-1 as xs:QName?, child-1-name-2 as xs:QName?, geo-element-name-2 as xs:QName, child-2-name-1 as xs:QName?, child-2-name-2 as xs:QName?, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.geospatialRegionQuery(${1:geospatial-region-reference as cts:reference*}, ${2:operation as String}, ${3:regions as cts:region*})", "trigger":"cts.geospatialRegionQuery", "description":"(geospatial-region-reference as cts:reference*, operation as String, regions as cts:region*)"}, {"content":"cts.geospatialRegionQuery(${1:geospatial-region-reference as cts:reference*}, ${2:operation as String}, ${3:regions as cts:region*}, ${4:options as xs:string*})", "trigger":"cts.geospatialRegionQuery", "description":"(geospatial-region-reference as cts:reference*, operation as String, regions as cts:region*, options as xs:string*)"}, {"content":"cts.geospatialRegionQuery(${1:geospatial-region-reference as cts:reference*}, ${2:operation as String}, ${3:regions as cts:region*}, ${4:options as xs:string*}, ${5:weight as xs:double?})", "trigger":"cts.geospatialRegionQuery", "description":"(geospatial-region-reference as cts:reference*, operation as String, regions as cts:region*, options as xs:string*, weight as xs:double?)"}, {"content":"cts.distance()", "trigger":"cts.distance", "description":"()"}, {"content":"geo.distance(${1:p1 as cts:point}, ${2:p2 as cts:point})", "trigger":"geo.distance", "description":"(p1 as cts:point, p2 as cts:point)"}, {"content":"geo.distance(${1:p1 as cts:point}, ${2:p2 as cts:point}, ${3:options as xs:string*})", "trigger":"geo.distance", "description":"(p1 as cts:point, p2 as cts:point, options as xs:string*)"}, {"content":"cts.shortestDistance()", "trigger":"cts.shortestDistance", "description":"()"}, {"content":"geo.shortestDistance(${1:p1 as cts:point}, ${2:region as cts:region+})", "trigger":"geo.shortestDistance", "description":"(p1 as cts:point, region as cts:region+)"}, {"content":"geo.shortestDistance(${1:p1 as cts:point}, ${2:region as cts:region+}, ${3:options as xs:string*})", "trigger":"geo.shortestDistance", "description":"(p1 as cts:point, region as cts:region+, options as xs:string*)"}, {"content":"cts.bearing()", "trigger":"cts.bearing", "description":"()"}, {"content":"geo.bearing(${1:p1 as cts:point}, ${2:p2 as cts:point})", "trigger":"geo.bearing", "description":"(p1 as cts:point, p2 as cts:point)"}, {"content":"geo.bearing(${1:p1 as cts:point}, ${2:p2 as cts:point}, ${3:options as xs:string*})", "trigger":"geo.bearing", "description":"(p1 as cts:point, p2 as cts:point, options as xs:string*)"}, {"content":"cts.destination()", "trigger":"cts.destination", "description":"()"}, {"content":"geo.destination(${1:p as cts:point}, ${2:bearing as xs:double}, ${3:distance as xs:double})", "trigger":"geo.destination", "description":"(p as cts:point, bearing as xs:double, distance as xs:double)"}, {"content":"geo.destination(${1:p as cts:point}, ${2:bearing as xs:double}, ${3:distance as xs:double}, ${4:options as xs:string*})", "trigger":"geo.destination", "description":"(p as cts:point, bearing as xs:double, distance as xs:double, options as xs:string*)"}, {"content":"cts.arcIntersection()", "trigger":"cts.arcIntersection", "description":"()"}, {"content":"geo.arcIntersection(${1:p1 as cts:point}, ${2:p2 as cts:point}, ${3:q1 as cts:point}, ${4:q2 as cts:point})", "trigger":"geo.arcIntersection", "description":"(p1 as cts:point, p2 as cts:point, q1 as cts:point, q2 as cts:point)"}, {"content":"geo.arcIntersection(${1:p1 as cts:point}, ${2:p2 as cts:point}, ${3:q1 as cts:point}, ${4:q2 as cts:point}, ${5:options as xs:string*})", "trigger":"geo.arcIntersection", "description":"(p1 as cts:point, p2 as cts:point, q1 as cts:point, q2 as cts:point, options as xs:string*)"}, {"content":"cts.boxIntersects()", "trigger":"cts.boxIntersects", "description":"()"}, {"content":"geo.boxIntersects(${1:box as cts:box}, ${2:region as cts:region*})", "trigger":"geo.boxIntersects", "description":"(box as cts:box, region as cts:region*)"}, {"content":"geo.boxIntersects(${1:box as cts:box}, ${2:region as cts:region*}, ${3:options as xs:string*})", "trigger":"geo.boxIntersects", "description":"(box as cts:box, region as cts:region*, options as xs:string*)"}, {"content":"cts.circleIntersects()", "trigger":"cts.circleIntersects", "description":"()"}, {"content":"geo.circleIntersects(${1:circle as cts:circle}, ${2:region as cts:region*})", "trigger":"geo.circleIntersects", "description":"(circle as cts:circle, region as cts:region*)"}, {"content":"geo.circleIntersects(${1:circle as cts:circle}, ${2:region as cts:region*}, ${3:options as xs:string*})", "trigger":"geo.circleIntersects", "description":"(circle as cts:circle, region as cts:region*, options as xs:string*)"}, {"content":"cts.polygonIntersects()", "trigger":"cts.polygonIntersects", "description":"()"}, {"content":"geo.polygonIntersects(${1:polygon as cts:polygon}, ${2:region as cts:region*})", "trigger":"geo.polygonIntersects", "description":"(polygon as cts:polygon, region as cts:region*)"}, {"content":"geo.polygonIntersects(${1:polygon as cts:polygon}, ${2:region as cts:region*}, ${3:options as xs:string*})", "trigger":"geo.polygonIntersects", "description":"(polygon as cts:polygon, region as cts:region*, options as xs:string*)"}, {"content":"cts.polygonContains()", "trigger":"cts.polygonContains", "description":"()"}, {"content":"geo.polygonContains(${1:polygon as cts:polygon}, ${2:region as cts:region*})", "trigger":"geo.polygonContains", "description":"(polygon as cts:polygon, region as cts:region*)"}, {"content":"geo.polygonContains(${1:polygon as cts:polygon}, ${2:region as cts:region*}, ${3:options as xs:string*})", "trigger":"geo.polygonContains", "description":"(polygon as cts:polygon, region as cts:region*, options as xs:string*)"}, {"content":"cts.complexPolygonIntersects()", "trigger":"cts.complexPolygonIntersects", "description":"()"}, {"content":"geo.complexPolygonIntersects(${1:complex-polygon as cts:complex-polygon}, ${2:region as cts:region*})", "trigger":"geo.complexPolygonIntersects", "description":"(complex-polygon as cts:complex-polygon, region as cts:region*)"}, {"content":"geo.complexPolygonIntersects(${1:complex-polygon as cts:complex-polygon}, ${2:region as cts:region*}, ${3:options as xs:string*})", "trigger":"geo.complexPolygonIntersects", "description":"(complex-polygon as cts:complex-polygon, region as cts:region*, options as xs:string*)"}, {"content":"cts.complexPolygonContains()", "trigger":"cts.complexPolygonContains", "description":"()"}, {"content":"geo.complexPolygonContains(${1:complex-polygon as cts:complex-polygon}, ${2:region as cts:region*})", "trigger":"geo.complexPolygonContains", "description":"(complex-polygon as cts:complex-polygon, region as cts:region*)"}, {"content":"geo.complexPolygonContains(${1:complex-polygon as cts:complex-polygon}, ${2:region as cts:region*}, ${3:options as xs:string*})", "trigger":"geo.complexPolygonContains", "description":"(complex-polygon as cts:complex-polygon, region as cts:region*, options as xs:string*)"}, {"content":"cts.regionIntersects()", "trigger":"cts.regionIntersects", "description":"()"}, {"content":"geo.regionIntersects(${1:target as cts:region}, ${2:region as cts:region*})", "trigger":"geo.regionIntersects", "description":"(target as cts:region, region as cts:region*)"}, {"content":"geo.regionIntersects(${1:target as cts:region}, ${2:region as cts:region*}, ${3:options as xs:string*})", "trigger":"geo.regionIntersects", "description":"(target as cts:region, region as cts:region*, options as xs:string*)"}, {"content":"cts.regionContains()", "trigger":"cts.regionContains", "description":"()"}, {"content":"geo.regionContains(${1:region as cts:region}, ${2:region as cts:region*})", "trigger":"geo.regionContains", "description":"(region as cts:region, region as cts:region*)"}, {"content":"geo.regionContains(${1:region as cts:region}, ${2:region as cts:region*}, ${3:options as xs:string*})", "trigger":"geo.regionContains", "description":"(region as cts:region, region as cts:region*, options as xs:string*)"}, {"content":"cts.boundingBoxes()", "trigger":"cts.boundingBoxes", "description":"()"}, {"content":"geo.boundingBoxes(${1:region as cts:region})", "trigger":"geo.boundingBoxes", "description":"(region as cts:region)"}, {"content":"geo.boundingBoxes(${1:region as cts:region}, ${2:options as xs:string*})", "trigger":"geo.boundingBoxes", "description":"(region as cts:region, options as xs:string*)"}, {"content":"cts.parseWkt()", "trigger":"cts.parseWkt", "description":"()"}, {"content":"geo.parseWkt(${1:wkt as xs:string*})", "trigger":"geo.parseWkt", "description":"(wkt as xs:string*)"}, {"content":"cts.toWkt()", "trigger":"cts.toWkt", "description":"()"}, {"content":"geo.toWkt(${1:wkt as cts:region*})", "trigger":"geo.toWkt", "description":"(wkt as cts:region*)"}, {"content":"geo.validateWkt(${1:wkt as String})", "trigger":"geo.validateWkt", "description":"(wkt as String)"}, {"content":"geo.parseWkb(${1:wkb as binary()})", "trigger":"geo.parseWkb", "description":"(wkb as binary())"}, {"content":"geo.toWkb(${1:wkb as cts:region*})", "trigger":"geo.toWkb", "description":"(wkb as cts:region*)"}, {"content":"geo.validateWkb(${1:wkb as binary()})", "trigger":"geo.validateWkb", "description":"(wkb as binary())"}, {"content":"cts.geospatialElementReference(${1:element as xs:QName})", "trigger":"cts.geospatialElementReference", "description":"(element as xs:QName)"}, {"content":"cts.geospatialElementReference(${1:element as xs:QName}, ${2:options as xs:string*})", "trigger":"cts.geospatialElementReference", "description":"(element as xs:QName, options as xs:string*)"}, {"content":"cts.geospatialJsonPropertyReference(${1:property as String})", "trigger":"cts.geospatialJsonPropertyReference", "description":"(property as String)"}, {"content":"cts.geospatialJsonPropertyReference(${1:property as String}, ${2:options as xs:string*})", "trigger":"cts.geospatialJsonPropertyReference", "description":"(property as String, options as xs:string*)"}, {"content":"cts.geospatialElementChildReference(${1:element as xs:QName}, ${2:child as xs:QName})", "trigger":"cts.geospatialElementChildReference", "description":"(element as xs:QName, child as xs:QName)"}, {"content":"cts.geospatialElementChildReference(${1:element as xs:QName}, ${2:child as xs:QName}, ${3:options as xs:string*})", "trigger":"cts.geospatialElementChildReference", "description":"(element as xs:QName, child as xs:QName, options as xs:string*)"}, {"content":"cts.geospatialJsonPropertyChildReference(${1:property as String}, ${2:child as String})", "trigger":"cts.geospatialJsonPropertyChildReference", "description":"(property as String, child as String)"}, {"content":"cts.geospatialJsonPropertyChildReference(${1:property as String}, ${2:child as String}, ${3:options as xs:string*})", "trigger":"cts.geospatialJsonPropertyChildReference", "description":"(property as String, child as String, options as xs:string*)"}, {"content":"cts.geospatialElementPairReference(${1:element as xs:QName}, ${2:lat as xs:QName}, ${3:long as xs:QName})", "trigger":"cts.geospatialElementPairReference", "description":"(element as xs:QName, lat as xs:QName, long as xs:QName)"}, {"content":"cts.geospatialElementPairReference(${1:element as xs:QName}, ${2:lat as xs:QName}, ${3:long as xs:QName}, ${4:options as xs:string*})", "trigger":"cts.geospatialElementPairReference", "description":"(element as xs:QName, lat as xs:QName, long as xs:QName, options as xs:string*)"}, {"content":"cts.geospatialJsonPropertyPairReference(${1:property as String}, ${2:lat as String}, ${3:long as String})", "trigger":"cts.geospatialJsonPropertyPairReference", "description":"(property as String, lat as String, long as String)"}, {"content":"cts.geospatialJsonPropertyPairReference(${1:property as String}, ${2:lat as String}, ${3:long as String}, ${4:options as xs:string*})", "trigger":"cts.geospatialJsonPropertyPairReference", "description":"(property as String, lat as String, long as String, options as xs:string*)"}, {"content":"cts.geospatialAttributePairReference(${1:element as xs:QName}, ${2:lat as xs:QName}, ${3:long as xs:QName})", "trigger":"cts.geospatialAttributePairReference", "description":"(element as xs:QName, lat as xs:QName, long as xs:QName)"}, {"content":"cts.geospatialAttributePairReference(${1:element as xs:QName}, ${2:lat as xs:QName}, ${3:long as xs:QName}, ${4:options as xs:string*})", "trigger":"cts.geospatialAttributePairReference", "description":"(element as xs:QName, lat as xs:QName, long as xs:QName, options as xs:string*)"}, {"content":"cts.geospatialPathReference(${1:path-expression as String})", "trigger":"cts.geospatialPathReference", "description":"(path-expression as String)"}, {"content":"cts.geospatialPathReference(${1:path-expression as String}, ${2:options as xs:string*})", "trigger":"cts.geospatialPathReference", "description":"(path-expression as String, options as xs:string*)"}, {"content":"cts.geospatialPathReference(${1:path-expression as String}, ${2:options as xs:string*}, ${3:map as map:map})", "trigger":"cts.geospatialPathReference", "description":"(path-expression as String, options as xs:string*, map as map:map)"}, {"content":"cts.geospatialRegionPathReference(${1:path-expression as String})", "trigger":"cts.geospatialRegionPathReference", "description":"(path-expression as String)"}, {"content":"cts.geospatialRegionPathReference(${1:path-expression as String}, ${2:options as xs:string*})", "trigger":"cts.geospatialRegionPathReference", "description":"(path-expression as String, options as xs:string*)"}, {"content":"cts.geospatialRegionPathReference(${1:path-expression as String}, ${2:options as xs:string*}, ${3:namespaces as map:map})", "trigger":"cts.geospatialRegionPathReference", "description":"(path-expression as String, options as xs:string*, namespaces as map:map)"}, {"content":"cts.approxCenter()", "trigger":"cts.approxCenter", "description":"()"}, {"content":"geo.approxCenter(${1:region as cts:region})", "trigger":"geo.approxCenter", "description":"(region as cts:region)"}, {"content":"geo.approxCenter(${1:region as cts:region}, ${2:options as xs:string*})", "trigger":"geo.approxCenter", "description":"(region as cts:region, options as xs:string*)"}, {"content":"geo.coordinateSystemCanonical(${1:name as String})", "trigger":"geo.coordinateSystemCanonical", "description":"(name as String)"}, {"content":"geo.coordinateSystemCanonical(${1:name as String}, ${2:precision as String})", "trigger":"geo.coordinateSystemCanonical", "description":"(name as String, precision as String)"}, {"content":"geo.defaultCoordinateSystem()", "trigger":"geo.defaultCoordinateSystem", "description":"()"}, {"content":"geo.regionAffineTransform(${1:region as cts:region}, ${2:transform as map:map*})", "trigger":"geo.regionAffineTransform", "description":"(region as cts:region, transform as map:map*)"}, {"content":"geo.regionAffineTransform(${1:region as cts:region}, ${2:transform as map:map*}, ${3:options as xs:string*})", "trigger":"geo.regionAffineTransform", "description":"(region as cts:region, transform as map:map*, options as xs:string*)"}, {"content":"geo.countVertices(${1:region as cts:region})", "trigger":"geo.countVertices", "description":"(region as cts:region)"}, {"content":"geo.countDistinctVertices(${1:region as cts:region})", "trigger":"geo.countDistinctVertices", "description":"(region as cts:region)"}, {"content":"geo.countDistinctVertices(${1:region as cts:region}, ${2:options as xs:string*})", "trigger":"geo.countDistinctVertices", "description":"(region as cts:region, options as xs:string*)"}, {"content":"geo.regionClean(${1:region as cts:region})", "trigger":"geo.regionClean", "description":"(region as cts:region)"}, {"content":"geo.regionClean(${1:region as cts:region}, ${2:options as xs:string*})", "trigger":"geo.regionClean", "description":"(region as cts:region, options as xs:string*)"}, {"content":"geo.interiorPoint(${1:region as cts:region})", "trigger":"geo.interiorPoint", "description":"(region as cts:region)"}, {"content":"geo.interiorPoint(${1:region as cts:region}, ${2:options as xs:string*})", "trigger":"geo.interiorPoint", "description":"(region as cts:region, options as xs:string*)"}, {"content":"geo.distanceConvert(${1:distance as xs:double}, ${2:unit1 as String}, ${3:unit2 as String})", "trigger":"geo.distanceConvert", "description":"(distance as xs:double, unit1 as String, unit2 as String)"}, {"content":"geo.removeDuplicateVertices(${1:region as cts:region})", "trigger":"geo.removeDuplicateVertices", "description":"(region as cts:region)"}, {"content":"geo.removeDuplicateVertices(${1:region as cts:region}, ${2:options as xs:string*})", "trigger":"geo.removeDuplicateVertices", "description":"(region as cts:region, options as xs:string*)"}, {"content":"geo.regionApproximate(${1:region as cts:region}, ${2:threshold as xs:double})", "trigger":"geo.regionApproximate", "description":"(region as cts:region, threshold as xs:double)"}, {"content":"geo.regionApproximate(${1:region as cts:region}, ${2:threshold as xs:double}, ${3:options as xs:string*})", "trigger":"geo.regionApproximate", "description":"(region as cts:region, threshold as xs:double, options as xs:string*)"}, {"content":"geo.circlePolygon(${1:circle as cts:circle}, ${2:arc-tolerance as xs:double})", "trigger":"geo.circlePolygon", "description":"(circle as cts:circle, arc-tolerance as xs:double)"}, {"content":"geo.circlePolygon(${1:circle as cts:circle}, ${2:arc-tolerance as xs:double}, ${3:options as xs:string*})", "trigger":"geo.circlePolygon", "description":"(circle as cts:circle, arc-tolerance as xs:double, options as xs:string*)"}, {"content":"geo.ellipsePolygon(${1:center as cts:point}, ${2:semi-major-axis as xs:double}, ${3:semi-minor-axis as xs:double}, ${4:azimuth as xs:double}, ${5:arc-tolerance as xs:double})", "trigger":"geo.ellipsePolygon", "description":"(center as cts:point, semi-major-axis as xs:double, semi-minor-axis as xs:double, azimuth as xs:double, arc-tolerance as xs:double)"}, {"content":"geo.ellipsePolygon(${1:center as cts:point}, ${2:semi-major-axis as xs:double}, ${3:semi-minor-axis as xs:double}, ${4:azimuth as xs:double}, ${5:arc-tolerance as xs:double}, ${6:options as xs:string*})", "trigger":"geo.ellipsePolygon", "description":"(center as cts:point, semi-major-axis as xs:double, semi-minor-axis as xs:double, azimuth as xs:double, arc-tolerance as xs:double, options as xs:string*)"}, {"content":"geo.geohashEncode(${1:region as cts:region})", "trigger":"geo.geohashEncode", "description":"(region as cts:region)"}, {"content":"geo.geohashEncode(${1:region as cts:region}, ${2:geohash-precision as xs:integer?})", "trigger":"geo.geohashEncode", "description":"(region as cts:region, geohash-precision as xs:integer?)"}, {"content":"geo.geohashEncode(${1:region as cts:region}, ${2:geohash-precision as xs:integer?}, ${3:options as xs:string*})", "trigger":"geo.geohashEncode", "description":"(region as cts:region, geohash-precision as xs:integer?, options as xs:string*)"}, {"content":"geo.geohashDecode(${1:hash as String})", "trigger":"geo.geohashDecode", "description":"(hash as String)"}, {"content":"geo.geohashDecodePoint(${1:hash as String})", "trigger":"geo.geohashDecodePoint", "description":"(hash as String)"}, {"content":"geo.geohashNeighbors(${1:hash as String})", "trigger":"geo.geohashNeighbors", "description":"(hash as String)"}, {"content":"geo.geohashPrecisionDimensions(${1:precision as xs:integer})", "trigger":"geo.geohashPrecisionDimensions", "description":"(precision as xs:integer)"}, {"content":"geo.geohashSubhashes(${1:hash as String}, ${2:which as String})", "trigger":"geo.geohashSubhashes", "description":"(hash as String, which as String)"}, {"content":"cts.matchRegions(${1:range-indexes as cts:reference*}, ${2:operation as String}, ${3:regions as cts:region+})", "trigger":"cts.matchRegions", "description":"(range-indexes as cts:reference*, operation as String, regions as cts:region+)"}, {"content":"cts.matchRegions(${1:range-indexes as cts:reference*}, ${2:operation as String}, ${3:regions as cts:region+}, ${4:options as xs:string*})", "trigger":"cts.matchRegions", "description":"(range-indexes as cts:reference*, operation as String, regions as cts:region+, options as xs:string*)"}, {"content":"cts.matchRegions(${1:range-indexes as cts:reference*}, ${2:operation as String}, ${3:regions as cts:region+}, ${4:options as xs:string*}, ${5:query as cts:query?})", "trigger":"cts.matchRegions", "description":"(range-indexes as cts:reference*, operation as String, regions as cts:region+, options as xs:string*, query as cts:query?)"}, {"content":"cts.matchRegions(${1:range-indexes as cts:reference*}, ${2:operation as String}, ${3:regions as cts:region+}, ${4:options as xs:string*}, ${5:query as cts:query?}, ${6:forest-ids as xs:unsignedLong*})", "trigger":"cts.matchRegions", "description":"(range-indexes as cts:reference*, operation as String, regions as cts:region+, options as xs:string*, query as cts:query?, forest-ids as xs:unsignedLong*)"}, {"content":"geogml.point(${1:point as element()})", "trigger":"geogml.point", "description":"(point as element())"}, {"content":"geogml.box(${1:box as element()})", "trigger":"geogml.box", "description":"(box as element())"}, {"content":"geogml.circle(${1:radius as xs:double}, ${2:center as element()})", "trigger":"geogml.circle", "description":"(radius as xs:double, center as element())"}, {"content":"gml.linestring(${1:linestring as element(gml:LineString)})", "trigger":"gml.linestring", "description":"(linestring as element(gml:LineString))"}, {"content":"geogml.interiorPolygon(${1:polygon-or-points as element()+})", "trigger":"geogml.interiorPolygon", "description":"(polygon-or-points as element()+)"}, {"content":"geogml.complexPolygon(${1:complex-polygon as element()})", "trigger":"geogml.complexPolygon", "description":"(complex-polygon as element())"}, {"content":"gml.complexPolygon(${1:complex-polygon as node()})", "trigger":"gml.complexPolygon", "description":"(complex-polygon as node())"}, {"content":"gml.geospatialQuery(${1:regions as cts:region*})", "trigger":"gml.geospatialQuery", "description":"(regions as cts:region*)"}, {"content":"gml.geospatialQuery(${1:regions as cts:region*}, ${2:options as xs:string*})", "trigger":"gml.geospatialQuery", "description":"(regions as cts:region*, options as xs:string*)"}, {"content":"gml.geospatialQuery(${1:regions as cts:region*}, ${2:options as xs:string*}, ${3:weight as xs:double?})", "trigger":"gml.geospatialQuery", "description":"(regions as cts:region*, options as xs:string*, weight as xs:double?)"}, {"content":"gml.geospatialQuery(${1:regions as cts:region*}, ${2:options as xs:string*}, ${3:weight as xs:double?}, ${4:namespace as xs:string?})", "trigger":"gml.geospatialQuery", "description":"(regions as cts:region*, options as xs:string*, weight as xs:double?, namespace as xs:string?)"}, {"content":"geogml.geospatialQueryFromElements(${1:regions as element()*})", "trigger":"geogml.geospatialQueryFromElements", "description":"(regions as element()*)"}, {"content":"geogml.geospatialQueryFromElements(${1:regions as element()*}, ${2:options as xs:string*})", "trigger":"geogml.geospatialQueryFromElements", "description":"(regions as element()*, options as xs:string*)"}, {"content":"geogml.geospatialQueryFromElements(${1:regions as element()*}, ${2:options as xs:string*}, ${3:weight as xs:double?})", "trigger":"geogml.geospatialQueryFromElements", "description":"(regions as element()*, options as xs:string*, weight as xs:double?)"}, {"content":"geogml.linestring(${1:linestring as element()})", "trigger":"geogml.linestring", "description":"(linestring as element())"}, {"content":"geogml.parseGml(${1:gml as element()*})", "trigger":"geogml.parseGml", "description":"(gml as element()*)"}, {"content":"geogml.toGml(${1:region as cts:region*})", "trigger":"geogml.toGml", "description":"(region as cts:region*)"}, {"content":"geogml.toGml(${1:region as cts:region*}, ${2:gml-namespace as String})", "trigger":"geogml.toGml", "description":"(region as cts:region*, gml-namespace as String)"}, {"content":"hadoop.getSplits(${1:nsbindings as xs:string*}, ${2:doc-selector as String}, ${3:query as String})", "trigger":"hadoop.getSplits", "description":"(nsbindings as xs:string*, doc-selector as String, query as String)"}, {"content":"xdmp.pdfConvert(${1:doc as node()}, ${2:filename as String})", "trigger":"xdmp.pdfConvert", "description":"(doc as node(), filename as String)"}, {"content":"xdmp.pdfConvert(${1:doc as node()}, ${2:filename as String}, ${3:options as (element()|map:map)?})", "trigger":"xdmp.pdfConvert", "description":"(doc as node(), filename as String, options as (element()|map:map)?)"}, {"content":"info.databaseCreate(${1:database-name as String})", "trigger":"info.databaseCreate", "description":"(database-name as String)"}, {"content":"info.databaseCreate(${1:database-name as String}, ${2:forests-per-host as xs:positiveInteger?})", "trigger":"info.databaseCreate", "description":"(database-name as String, forests-per-host as xs:positiveInteger?)"}, {"content":"info.databaseCreate(${1:database-name as String}, ${2:forests-per-host as xs:positiveInteger?}, ${3:group as xs:string?})", "trigger":"info.databaseCreate", "description":"(database-name as String, forests-per-host as xs:positiveInteger?, group as xs:string?)"}, {"content":"info.databaseCreate(${1:database-name as String}, ${2:forests-per-host as xs:positiveInteger?}, ${3:group as xs:string?}, ${4:data-directory as xs:string?})", "trigger":"info.databaseCreate", "description":"(database-name as String, forests-per-host as xs:positiveInteger?, group as xs:string?, data-directory as xs:string?)"}, {"content":"info.databaseCreate(${1:database-name as String}, ${2:forests-per-host as xs:positiveInteger?}, ${3:group as xs:string?}, ${4:data-directory as xs:string?}, ${5:security-db as xs:string?})", "trigger":"info.databaseCreate", "description":"(database-name as String, forests-per-host as xs:positiveInteger?, group as xs:string?, data-directory as xs:string?, security-db as xs:string?)"}, {"content":"info.databaseCreate(${1:database-name as String}, ${2:forests-per-host as xs:positiveInteger?}, ${3:group as xs:string?}, ${4:data-directory as xs:string?}, ${5:security-db as xs:string?}, ${6:schemas-db as xs:string?})", "trigger":"info.databaseCreate", "description":"(database-name as String, forests-per-host as xs:positiveInteger?, group as xs:string?, data-directory as xs:string?, security-db as xs:string?, schemas-db as xs:string?)"}, {"content":"info.databaseCreate(${1:database-name as String}, ${2:forests-per-host as xs:positiveInteger?}, ${3:group as xs:string?}, ${4:data-directory as xs:string?}, ${5:security-db as xs:string?}, ${6:schemas-db as xs:string?}, ${7:triggers-db as xs:string?})", "trigger":"info.databaseCreate", "description":"(database-name as String, forests-per-host as xs:positiveInteger?, group as xs:string?, data-directory as xs:string?, security-db as xs:string?, schemas-db as xs:string?, triggers-db as xs:string?)"}, {"content":"info.databaseSetFeature(${1:database as String}, ${2:settings as element(info:settings)})", "trigger":"info.databaseSetFeature", "description":"(database as String, settings as element(info:settings))"}, {"content":"info.databaseGetFeature(${1:database as String})", "trigger":"info.databaseGetFeature", "description":"(database as String)"}, {"content":"info.databaseGetFeature(${1:database as String}, ${2:preview-settings as element(info:settings)})", "trigger":"info.databaseGetFeature", "description":"(database as String, preview-settings as element(info:settings))"}, {"content":"info.databaseGetFeature(${1:database as String}, ${2:preview-settings as element(info:settings)}, ${3:delta as Boolean})", "trigger":"info.databaseGetFeature", "description":"(database as String, preview-settings as element(info:settings), delta as Boolean)"}, {"content":"info.load(${1:dir-path as String})", "trigger":"info.load", "description":"(dir-path as String)"}, {"content":"info.load(${1:dir-path as String}, ${2:policy-name as xs:string?})", "trigger":"info.load", "description":"(dir-path as String, policy-name as xs:string?)"}, {"content":"info.load(${1:dir-path as String}, ${2:policy-name as xs:string?}, ${3:policy-deltas as element(info:options)?})", "trigger":"info.load", "description":"(dir-path as String, policy-name as xs:string?, policy-deltas as element(info:options)?)"}, {"content":"info.load(${1:dir-path as String}, ${2:policy-name as xs:string?}, ${3:policy-deltas as element(info:options)?}, ${4:database as String})", "trigger":"info.load", "description":"(dir-path as String, policy-name as xs:string?, policy-deltas as element(info:options)?, database as String)"}, {"content":"info.policy(${1:policy-name as String})", "trigger":"info.policy", "description":"(policy-name as String)"}, {"content":"info.policyNames()", "trigger":"info.policyNames", "description":"()"}, {"content":"info.policySet()", "trigger":"info.policySet", "description":"()"}, {"content":"info.policySet(${1:policy-name as xs:string?})", "trigger":"info.policySet", "description":"(policy-name as xs:string?)"}, {"content":"info.policySet(${1:policy-name as xs:string?}, ${2:policy as element(info:options)?})", "trigger":"info.policySet", "description":"(policy-name as xs:string?, policy as element(info:options)?)"}, {"content":"info.policyDelete(${1:policy-name as String})", "trigger":"info.policyDelete", "description":"(policy-name as String)"}, {"content":"info.tickets()", "trigger":"info.tickets", "description":"()"}, {"content":"info.tickets(${1:database as xs:string*})", "trigger":"info.tickets", "description":"(database as xs:string*)"}, {"content":"info.tickets(${1:database as xs:string*}, ${2:status as xs:string*})", "trigger":"info.tickets", "description":"(database as xs:string*, status as xs:string*)"}, {"content":"info.tickets(${1:database as xs:string*}, ${2:status as xs:string*}, ${3:custom-query as schema-element(cts:query)?})", "trigger":"info.tickets", "description":"(database as xs:string*, status as xs:string*, custom-query as schema-element(cts:query)?)"}, {"content":"info.ticketDelete(${1:ticket-id as String})", "trigger":"info.ticketDelete", "description":"(ticket-id as String)"}, {"content":"info.ticket(${1:ticket-id as xs:string+})", "trigger":"info.ticket", "description":"(ticket-id as xs:string+)"}, {"content":"info.ticketErrors(${1:ticket-id as String})", "trigger":"info.ticketErrors", "description":"(ticket-id as String)"}, {"content":"info.ticketErrors(${1:ticket-id as String}, ${2:start as xs:unsignedInt?})", "trigger":"info.ticketErrors", "description":"(ticket-id as String, start as xs:unsignedInt?)"}, {"content":"info.ticketErrors(${1:ticket-id as String}, ${2:start as xs:unsignedInt?}, ${3:page-length as xs:unsignedInt?})", "trigger":"info.ticketErrors", "description":"(ticket-id as String, start as xs:unsignedInt?, page-length as xs:unsignedInt?)"}, {"content":"info.ticketErrors(${1:ticket-id as String}, ${2:start as xs:unsignedInt?}, ${3:page-length as xs:unsignedInt?}, ${4:sort-ascending as xs:boolean?})", "trigger":"info.ticketErrors", "description":"(ticket-id as String, start as xs:unsignedInt?, page-length as xs:unsignedInt?, sort-ascending as xs:boolean?)"}, {"content":"info.ticketErrors(${1:ticket-id as String}, ${2:start as xs:unsignedInt?}, ${3:page-length as xs:unsignedInt?}, ${4:sort-ascending as xs:boolean?}, ${5:filter as schema-element(cts:query)?})", "trigger":"info.ticketErrors", "description":"(ticket-id as String, start as xs:unsignedInt?, page-length as xs:unsignedInt?, sort-ascending as xs:boolean?, filter as schema-element(cts:query)?)"}, {"content":"info.databaseDelete(${1:database-name as String})", "trigger":"info.databaseDelete", "description":"(database-name as String)"}, {"content":"info.databaseDelete(${1:database-name as String}, ${2:delete-data as xs:boolean?})", "trigger":"info.databaseDelete", "description":"(database-name as String, delete-data as xs:boolean?)"}, {"content":"info.errorDetail(${1:error-id as xs:unsignedLong})", "trigger":"info.errorDetail", "description":"(error-id as xs:unsignedLong)"}, {"content":"info.unload(${1:ticket-id as String})", "trigger":"info.unload", "description":"(ticket-id as String)"}, {"content":"info.unload(${1:ticket-id as String}, ${2:database as xs:string*})", "trigger":"info.unload", "description":"(ticket-id as String, database as xs:string*)"}, {"content":"info.unload(${1:ticket-id as String}, ${2:database as xs:string*}, ${3:batch-size as xs:positiveInteger?})", "trigger":"info.unload", "description":"(ticket-id as String, database as xs:string*, batch-size as xs:positiveInteger?)"}, {"content":"info.flowCancel(${1:flow-id as String})", "trigger":"info.flowCancel", "description":"(flow-id as String)"}, {"content":"info.flowPolicy(${1:flow-id as String})", "trigger":"info.flowPolicy", "description":"(flow-id as String)"}, {"content":"info.flowStart(${1:flow-id as String})", "trigger":"info.flowStart", "description":"(flow-id as String)"}, {"content":"info.flowTickets(${1:flow-id as String})", "trigger":"info.flowTickets", "description":"(flow-id as String)"}, {"content":"info.flowTickets(${1:flow-id as String}, ${2:include-inactive as xs:boolean?})", "trigger":"info.flowTickets", "description":"(flow-id as String, include-inactive as xs:boolean?)"}, {"content":"info.flowId(${1:flow-name as String})", "trigger":"info.flowId", "description":"(flow-name as String)"}, {"content":"infodev.checkOptions(${1:options as element(info:options)})", "trigger":"infodev.checkOptions", "description":"(options as element(info:options))"}, {"content":"infodev.ticketCreate(${1:annotation as element(info:annotation)?}, ${2:database as xs:string?}, ${3:policy-name as xs:string?}, ${4:policy-deltas as element(info:options)?})", "trigger":"infodev.ticketCreate", "description":"(annotation as element(info:annotation)?, database as xs:string?, policy-name as xs:string?, policy-deltas as element(info:options)?)"}, {"content":"infodev.ticketAddAnnotation(${1:ticket-id as String}, ${2:annotation as element(info:annotation)})", "trigger":"infodev.ticketAddAnnotation", "description":"(ticket-id as String, annotation as element(info:annotation))"}, {"content":"infodev.ticketGetStatus(${1:ticket-id as String})", "trigger":"infodev.ticketGetStatus", "description":"(ticket-id as String)"}, {"content":"infodev.ticketSetStatus(${1:ticket-id as String}, ${2:status as String})", "trigger":"infodev.ticketSetStatus", "description":"(ticket-id as String, status as String)"}, {"content":"infodev.ticketSetTotalDocuments(${1:ticket-id as String}, ${2:total-documents as xs:unsignedInt})", "trigger":"infodev.ticketSetTotalDocuments", "description":"(ticket-id as String, total-documents as xs:unsignedInt)"}, {"content":"infodev.ticketSetTotalTransactions(${1:ticket-id as String}, ${2:total-transactions as xs:unsignedInt})", "trigger":"infodev.ticketSetTotalTransactions", "description":"(ticket-id as String, total-transactions as xs:unsignedInt)"}, {"content":"infodev.fileFilter(${1:policy-name as xs:string?}, ${2:policy-deltas as element(info:options)*})", "trigger":"infodev.fileFilter", "description":"(policy-name as xs:string?, policy-deltas as element(info:options)*)"}, {"content":"infodev.transactionSize(${1:policy-name as xs:string?}, ${2:policy-deltas as element(info:options)*})", "trigger":"infodev.transactionSize", "description":"(policy-name as xs:string?, policy-deltas as element(info:options)*)"}, {"content":"infodev.handleError(${1:ticket-id as String}, ${2:context as String}, ${3:error as element(error:error)})", "trigger":"infodev.handleError", "description":"(ticket-id as String, context as String, error as element(error:error))"}, {"content":"infodev.handleError(${1:ticket-id as String}, ${2:context as String}, ${3:error as element(error:error)}, ${4:annotation as element(info:annotation)?})", "trigger":"infodev.handleError", "description":"(ticket-id as String, context as String, error as element(error:error), annotation as element(info:annotation)?)"}, {"content":"infodev.handleError(${1:ticket-id as String}, ${2:context as String}, ${3:error as element(error:error)}, ${4:annotation as element(info:annotation)?}, ${5:error-log-level as xs:string?})", "trigger":"infodev.handleError", "description":"(ticket-id as String, context as String, error as element(error:error), annotation as element(info:annotation)?, error-log-level as xs:string?)"}, {"content":"infodev.logProgress(${1:ticket-id as String}, ${2:annotation as element(info:annotation)})", "trigger":"infodev.logProgress", "description":"(ticket-id as String, annotation as element(info:annotation))"}, {"content":"infodev.logProgress(${1:ticket-id as String}, ${2:annotation as element(info:annotation)}, ${3:documents-processed as xs:nonNegativeInteger?})", "trigger":"infodev.logProgress", "description":"(ticket-id as String, annotation as element(info:annotation), documents-processed as xs:nonNegativeInteger?)"}, {"content":"infodev.logProgress(${1:ticket-id as String}, ${2:annotation as element(info:annotation)}, ${3:documents-processed as xs:nonNegativeInteger?}, ${4:transactions-completed as xs:nonNegativeInteger?})", "trigger":"infodev.logProgress", "description":"(ticket-id as String, annotation as element(info:annotation), documents-processed as xs:nonNegativeInteger?, transactions-completed as xs:nonNegativeInteger?)"}, {"content":"infodev.logProgress(${1:ticket-id as String}, ${2:annotation as element(info:annotation)}, ${3:documents-processed as xs:nonNegativeInteger?}, ${4:transactions-completed as xs:nonNegativeInteger?}, ${5:error-log-level as xs:string?})", "trigger":"infodev.logProgress", "description":"(ticket-id as String, annotation as element(info:annotation), documents-processed as xs:nonNegativeInteger?, transactions-completed as xs:nonNegativeInteger?, error-log-level as xs:string?)"}, {"content":"infodev.ingest(${1:document as node()?}, ${2:path as String}, ${3:ticket-id as String})", "trigger":"infodev.ingest", "description":"(document as node()?, path as String, ticket-id as String)"}, {"content":"infodev.ingest(${1:document as node()?}, ${2:path as String}, ${3:ticket-id as String}, ${4:policy-deltas as element(info:options)?})", "trigger":"infodev.ingest", "description":"(document as node()?, path as String, ticket-id as String, policy-deltas as element(info:options)?)"}, {"content":"infodev.ingest(${1:document as node()?}, ${2:path as String}, ${3:ticket-id as String}, ${4:policy-deltas as element(info:options)?}, ${5:properties as element()*})", "trigger":"infodev.ingest", "description":"(document as node()?, path as String, ticket-id as String, policy-deltas as element(info:options)?, properties as element()*)"}, {"content":"infodev.collectorOptions(${1:policy-name as xs:string?}, ${2:policy-deltas as element(info:options)*})", "trigger":"infodev.collectorOptions", "description":"(policy-name as xs:string?, policy-deltas as element(info:options)*)"}, {"content":"infodev.effectivePolicy(${1:policy-name as xs:string?}, ${2:policy-deltas as element(info:options)*})", "trigger":"infodev.effectivePolicy", "description":"(policy-name as xs:string?, policy-deltas as element(info:options)*)"}, {"content":"infodev.filesystemWalk(${1:dir-path as String}, ${2:ticket-id as String}, ${3:function as xdmp:function}, ${4:policy-deltas as element(info:options)?})", "trigger":"infodev.filesystemWalk", "description":"(dir-path as String, ticket-id as String, function as xdmp:function, policy-deltas as element(info:options)?)"}, {"content":"infodev.filesystemWalk(${1:dir-path as String}, ${2:ticket-id as String}, ${3:function as xdmp:function}, ${4:policy-deltas as element(info:options)?}, ${5:context as item()?})", "trigger":"infodev.filesystemWalk", "description":"(dir-path as String, ticket-id as String, function as xdmp:function, policy-deltas as element(info:options)?, context as item()?)"}, {"content":"infodev.transaction(${1:document-map as map:map}, ${2:ticket-id as String}, ${3:function as xdmp:function}, ${4:policy-deltas as element(info:options)?}, ${5:transaction-index as xs:integer}, ${6:context as item()?})", "trigger":"infodev.transaction", "description":"(document-map as map:map, ticket-id as String, function as xdmp:function, policy-deltas as element(info:options)?, transaction-index as xs:integer, context as item()?)"}, {"content":"infodev.transaction(${1:document-map as map:map}, ${2:ticket-id as String}, ${3:function as xdmp:function}, ${4:policy-deltas as element(info:options)?}, ${5:transaction-index as xs:integer}, ${6:context as item()?}, ${7:error-log-level as xs:string?})", "trigger":"infodev.transaction", "description":"(document-map as map:map, ticket-id as String, function as xdmp:function, policy-deltas as element(info:options)?, transaction-index as xs:integer, context as item()?, error-log-level as xs:string?)"}, {"content":"infodev.getFile(${1:source-location as String}, ${2:ticket-id as String}, ${3:policy-deltas as element(info:options)?})", "trigger":"infodev.getFile", "description":"(source-location as String, ticket-id as String, policy-deltas as element(info:options)?)"}, {"content":"infodev.getExternalBinaryFile(${1:source-location as String})", "trigger":"infodev.getExternalBinaryFile", "description":"(source-location as String)"}, {"content":"xdmp.documentFilter(${1:doc as node()})", "trigger":"xdmp.documentFilter", "description":"(doc as node())"}, {"content":"xdmp.documentFilter(${1:doc as node()}, ${2:options as (element()|map:map)?})", "trigger":"xdmp.documentFilter", "description":"(doc as node(), options as (element()|map:map)?)"}, {"content":"Global-Object.declareUpdate()", "trigger":"Global-Object.declareUpdate", "description":"()"}, {"content":"Global-Object.declareUpdate(${1:options as Object})", "trigger":"Global-Object.declareUpdate", "description":"(options as Object)"}, {"content":"Global-Object.require(${1:location as String})", "trigger":"Global-Object.require", "description":"(location as String)"}, {"content":"cts.doc(${1:uri as String})", "trigger":"cts.doc", "description":"(uri as String)"}, {"content":"json.config(${1:strategy as String})", "trigger":"json.config", "description":"(strategy as String)"}, {"content":"json.checkConfig(${1:config as map:map})", "trigger":"json.checkConfig", "description":"(config as map:map)"}, {"content":"json.transformToJson(${1:node as node()})", "trigger":"json.transformToJson", "description":"(node as node())"}, {"content":"json.transformToJson(${1:node as node()}, ${2:config as map:map})", "trigger":"json.transformToJson", "description":"(node as node(), config as map:map)"}, {"content":"json.transformToJsonObject(${1:node as node()}, ${2:config as map:map})", "trigger":"json.transformToJsonObject", "description":"(node as node(), config as map:map)"}, {"content":"json.transformToJsonXml(${1:node as node()})", "trigger":"json.transformToJsonXml", "description":"(node as node())"}, {"content":"json.transformToJsonXml(${1:node as node()}, ${2:config as map:map})", "trigger":"json.transformToJsonXml", "description":"(node as node(), config as map:map)"}, {"content":"json.transformFromJson(${1:json as item()})", "trigger":"json.transformFromJson", "description":"(json as item())"}, {"content":"json.transformFromJson(${1:json as item()}, ${2:config as map:map})", "trigger":"json.transformFromJson", "description":"(json as item(), config as map:map)"}, {"content":"xdmp.toJson(${1:item as item()*})", "trigger":"xdmp.toJson", "description":"(item as item()*)"}, {"content":"xdmp.toJsonString(${1:item as item()*})", "trigger":"xdmp.toJsonString", "description":"(item as item()*)"}, {"content":"xdmp.fromJson(${1:arg as node()})", "trigger":"xdmp.fromJson", "description":"(arg as node())"}, {"content":"xdmp.fromJSON(${1:arg as node()})", "trigger":"xdmp.fromJSON", "description":"(arg as node())"}, {"content":"xdmp.fromJsonString(${1:arg as String})", "trigger":"xdmp.fromJsonString", "description":"(arg as String)"}, {"content":"geokml.point(${1:point as element()})", "trigger":"geokml.point", "description":"(point as element())"}, {"content":"geokml.box(${1:envelope as element()})", "trigger":"geokml.box", "description":"(envelope as element())"}, {"content":"geokml.circle(${1:radius as xs:double}, ${2:center as element()})", "trigger":"geokml.circle", "description":"(radius as xs:double, center as element())"}, {"content":"kml.linestring(${1:linestring as element(kml:LineString)})", "trigger":"kml.linestring", "description":"(linestring as element(kml:LineString))"}, {"content":"kml.polygon(${1:linestring as element()})", "trigger":"kml.polygon", "description":"(linestring as element())"}, {"content":"geokml.interiorPolygon(${1:points as element()})", "trigger":"geokml.interiorPolygon", "description":"(points as element())"}, {"content":"kml.complexPolygon(${1:complex-polygon as node()})", "trigger":"kml.complexPolygon", "description":"(complex-polygon as node())"}, {"content":"kml.geospatialQuery(${1:regions as cts:region*})", "trigger":"kml.geospatialQuery", "description":"(regions as cts:region*)"}, {"content":"kml.geospatialQuery(${1:regions as cts:region*}, ${2:options as xs:string*})", "trigger":"kml.geospatialQuery", "description":"(regions as cts:region*, options as xs:string*)"}, {"content":"kml.geospatialQuery(${1:regions as cts:region*}, ${2:options as xs:string*}, ${3:weight as xs:double?})", "trigger":"kml.geospatialQuery", "description":"(regions as cts:region*, options as xs:string*, weight as xs:double?)"}, {"content":"kml.geospatialQuery(${1:regions as cts:region*}, ${2:options as xs:string*}, ${3:weight as xs:double?}, ${4:namespace as xs:string?})", "trigger":"kml.geospatialQuery", "description":"(regions as cts:region*, options as xs:string*, weight as xs:double?, namespace as xs:string?)"}, {"content":"geokml.geospatialQueryFromElements(${1:regions as element()*})", "trigger":"geokml.geospatialQueryFromElements", "description":"(regions as element()*)"}, {"content":"geokml.geospatialQueryFromElements(${1:regions as element()*}, ${2:options as xs:string*})", "trigger":"geokml.geospatialQueryFromElements", "description":"(regions as element()*, options as xs:string*)"}, {"content":"geokml.geospatialQueryFromElements(${1:regions as element()*}, ${2:options as xs:string*}, ${3:weight as xs:double?})", "trigger":"geokml.geospatialQueryFromElements", "description":"(regions as element()*, options as xs:string*, weight as xs:double?)"}, {"content":"geokml.parseKml(${1:kml as element()*})", "trigger":"geokml.parseKml", "description":"(kml as element()*)"}, {"content":"geokml.toKml(${1:region as cts:region*})", "trigger":"geokml.toKml", "description":"(region as cts:region*)"}, {"content":"geokml.toKml(${1:region as cts:region*}, ${2:namespace as String})", "trigger":"geokml.toKml", "description":"(region as cts:region*, namespace as String)"}, {"content":"xdmp.userLastLogin()", "trigger":"xdmp.userLastLogin", "description":"()"}, {"content":"xdmp.userLastLogin(${1:user as xs:unsignedLong})", "trigger":"xdmp.userLastLogin", "description":"(user as xs:unsignedLong)"}, {"content":"lnk.create(${1:from as String}, ${2:to as String}, ${3:role as String}, ${4:rev-role as String}, ${5:strength as String})", "trigger":"lnk.create", "description":"(from as String, to as String, role as String, rev-role as String, strength as String)"}, {"content":"lnk.insert(${1:link as element(lnk:link)})", "trigger":"lnk.insert", "description":"(link as element(lnk:link))"}, {"content":"lnk.remove(${1:from as String}, ${2:to as String})", "trigger":"lnk.remove", "description":"(from as String, to as String)"}, {"content":"lnk.get(${1:from as String}, ${2:to as String})", "trigger":"lnk.get", "description":"(from as String, to as String)"}, {"content":"lnk.from(${1:from as String})", "trigger":"lnk.from", "description":"(from as String)"}, {"content":"lnk.to(${1:to as String})", "trigger":"lnk.to", "description":"(to as String)"}, {"content":"manage./manage/v2/(${1:format as string}, ${2:view as string})", "trigger":"manage./manage/v2/", "description":"(format as string, view as string)"}, {"content":"manage./manage/v2/(${1:format as string})", "trigger":"manage./manage/v2/", "description":"(format as string)"}, {"content":"manage./manage/v2/properties(${1:format as string})", "trigger":"manage./manage/v2/properties", "description":"(format as string)"}, {"content":"manage./manage/v2?view=query(${1:format as string}, ${2:name-match as string}, ${3:page-start as string}, ${4:page-length as string})", "trigger":"manage./manage/v2?view=query", "description":"(format as string, name-match as string, page-start as string, page-length as string)"}, {"content":"manage./manage/v2?view=status(${1:format as string})", "trigger":"manage./manage/v2?view=status", "description":"(format as string)"}, {"content":"manage./manage/v2/properties(${1:format as string})", "trigger":"manage./manage/v2/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/clusters(${1:format as string}, ${2:view as string}, ${3:cluster-role as string})", "trigger":"manage./manage/v2/clusters", "description":"(format as string, view as string, cluster-role as string)"}, {"content":"manage./manage/v2/clusters(${1:format as string})", "trigger":"manage./manage/v2/clusters", "description":"(format as string)"}, {"content":"manage./manage/v2/clusters?view=metrics(${1:format as string}, ${2:cluster-role as string})", "trigger":"manage./manage/v2/clusters?view=metrics", "description":"(format as string, cluster-role as string)"}, {"content":"manage./manage/v2/clusters/{id|name}(${1:format as string}, ${2:view as string})", "trigger":"manage./manage/v2/clusters/{id|name}", "description":"(format as string, view as string)"}, {"content":"manage./manage/v2/clusters/{id|name}?view=config(${1:format as string})", "trigger":"manage./manage/v2/clusters/{id|name}?view=config", "description":"(format as string)"}, {"content":"manage./manage/v2/clusters/{id|name}?view=metrics(${1:format as string})", "trigger":"manage./manage/v2/clusters/{id|name}?view=metrics", "description":"(format as string)"}, {"content":"manage./manage/v2/clusters/{id|name}?view=status(${1:format as string})", "trigger":"manage./manage/v2/clusters/{id|name}?view=status", "description":"(format as string)"}, {"content":"manage./manage/v2/clusters/{id|name}(${1:state as string}, ${2:format as string})", "trigger":"manage./manage/v2/clusters/{id|name}", "description":"(state as string, format as string)"}, {"content":"manage./manage/v2/clusters/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/clusters/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/clusters/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/clusters/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/clusters/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/clusters/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/forests(${1:format as string}, ${2:view as string}, ${3:database-id as string}, ${4:group-id as string}, ${5:host-id as string}, ${6:fullrefs as string})", "trigger":"manage./manage/v2/forests", "description":"(format as string, view as string, database-id as string, group-id as string, host-id as string, fullrefs as string)"}, {"content":"manage./manage/v2/forests?view=metrics(${1:format as string}, ${2:fullrefs as string})", "trigger":"manage./manage/v2/forests?view=metrics", "description":"(format as string, fullrefs as string)"}, {"content":"manage./manage/v2/forests?view=status(${1:format as string}, ${2:database-id as string}, ${3:group-id as string}, ${4:host-id as string}, ${5:fullrefs as string})", "trigger":"manage./manage/v2/forests?view=status", "description":"(format as string, database-id as string, group-id as string, host-id as string, fullrefs as string)"}, {"content":"manage./manage/v2/forests?view=storage(${1:format as string}, ${2:database-id as string}, ${3:group-id as string}, ${4:host-id as string}, ${5:fullrefs as string})", "trigger":"manage./manage/v2/forests?view=storage", "description":"(format as string, database-id as string, group-id as string, host-id as string, fullrefs as string)"}, {"content":"manage./manage/v2/forests()", "trigger":"manage./manage/v2/forests", "description":"()"}, {"content":"manage./manage/v2/forests(${1:format as string})", "trigger":"manage./manage/v2/forests", "description":"(format as string)"}, {"content":"manage./manage/v2/forests/{id|name}(${1:state as string}, ${2:database as string})", "trigger":"manage./manage/v2/forests/{id|name}", "description":"(state as string, database as string)"}, {"content":"manage./manage/v2/forests/{id|name}(${1:level as string}, ${2:replicas as string})", "trigger":"manage./manage/v2/forests/{id|name}", "description":"(level as string, replicas as string)"}, {"content":"manage./manage/v2/forests/{id|name}(${1:format as string}, ${2:view as string}, ${3:property as string})", "trigger":"manage./manage/v2/forests/{id|name}", "description":"(format as string, view as string, property as string)"}, {"content":"manage./manage/v2/forests/{id|name}?view=config(${1:format as string})", "trigger":"manage./manage/v2/forests/{id|name}?view=config", "description":"(format as string)"}, {"content":"manage./manage/v2/forests/{id|name}?view=counts(${1:format as string}, ${2:property as string})", "trigger":"manage./manage/v2/forests/{id|name}?view=counts", "description":"(format as string, property as string)"}, {"content":"manage./manage/v2/forests/{id|name}?view=status(${1:format as string})", "trigger":"manage./manage/v2/forests/{id|name}?view=status", "description":"(format as string)"}, {"content":"manage./manage/v2/forests/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/forests/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/forests/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/forests/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/forests/{id|name}/{custom}(${1:format as string})", "trigger":"manage./manage/v2/forests/{id|name}/{custom}", "description":"(format as string)"}, {"content":"manage./manage/v2/databases(${1:format as string}, ${2:view as string})", "trigger":"manage./manage/v2/databases", "description":"(format as string, view as string)"}, {"content":"manage./manage/v2/databases(${1:format as string})", "trigger":"manage./manage/v2/databases", "description":"(format as string)"}, {"content":"manage./manage/v2/databases?view=metrics(${1:format as string})", "trigger":"manage./manage/v2/databases?view=metrics", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}(${1:format as string}, ${2:view as string})", "trigger":"manage./manage/v2/databases/{id|name}", "description":"(format as string, view as string)"}, {"content":"manage./manage/v2/databases/{id|name}(${1:format as string}, ${2:overwrite-replicas as string})", "trigger":"manage./manage/v2/databases/{id|name}", "description":"(format as string, overwrite-replicas as string)"}, {"content":"manage./manage/v2/databases/{id|name}(${1:forest-delete as string}, ${2:format as string})", "trigger":"manage./manage/v2/databases/{id|name}", "description":"(forest-delete as string, format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}?view=config(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}?view=config", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}?view=counts(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}?view=counts", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}?view=package(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}?view=package", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}?view=status(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}?view=status", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/flexrep(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/flexrep", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/flexrep/properties(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/flexrep/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/flexrep/properties(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/flexrep/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/flexrep/configs(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/flexrep/configs", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/flexrep/configs(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/flexrep/configs", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/flexrep/configs/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/flexrep/configs/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/flexrep/configs/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/flexrep/configs/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/flexrep/configs/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/flexrep/configs/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/flexrep/configs/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/flexrep/configs/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/flexrep/pulls(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/flexrep/pulls", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/flexrep/pulls(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/flexrep/pulls", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/flexrep/pulls/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/flexrep/pulls/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/flexrep/pulls/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/flexrep/pulls/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/flexrep/pulls/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/flexrep/pulls/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/flexrep/pulls/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/flexrep/pulls/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/flexrep/configs/{id|name}/targets/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/partitions(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/partitions", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/partitions(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/partitions", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/partitions/{name}(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/partitions/{name}", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/partitions/{name}(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/partitions/{name}", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/partitions/{name}(${1:delete-data as string})", "trigger":"manage./manage/v2/databases/{id|name}/partitions/{name}", "description":"(delete-data as string)"}, {"content":"manage./manage/v2/databases/{id|name}/partitions/{name}/properties(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/partitions/{name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/partitions/{name}/properties()", "trigger":"manage./manage/v2/databases/{id|name}/partitions/{name}/properties", "description":"()"}, {"content":"manage./manage/v2/databases/{id|name}/rebalancer(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/rebalancer", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/rebalancer()", "trigger":"manage./manage/v2/databases/{id|name}/rebalancer", "description":"()"}, {"content":"manage./manage/v2/databases/{id|name}/{custom}(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/{custom}", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/subDatabases(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/subDatabases", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/subDatabases()", "trigger":"manage./manage/v2/databases/{id|name}/subDatabases", "description":"()"}, {"content":"manage./manage/v2/databases/{superId|name}/subDatabases/{subId|name}(${1:format as string})", "trigger":"manage./manage/v2/databases/{superId|name}/subDatabases/{subId|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{superId|name}/subDatabases/{subId|name}()", "trigger":"manage./manage/v2/databases/{superId|name}/subDatabases/{subId|name}", "description":"()"}, {"content":"manage./manage/v2/databases/{id|name}/superDatabases(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/superDatabases", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/superDatabases()", "trigger":"manage./manage/v2/databases/{id|name}/superDatabases", "description":"()"}, {"content":"manage./manage/v2/databases/{subId|name}/superDatabases/{superId|name}(${1:format as string})", "trigger":"manage./manage/v2/databases/{subId|name}/superDatabases/{superId|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{subId|name}/superDatabases/{superId|name}()", "trigger":"manage./manage/v2/databases/{subId|name}/superDatabases/{superId|name}", "description":"()"}, {"content":"manage./manage/v2/databases/{id|name}/alert(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/alert", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/alert/configs(${1:uri as string}, ${2:name as string}, ${3:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/alert/configs", "description":"(uri as string, name as string, format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/alert/configs(${1:uri as string}, ${2:delete-triggers as string}, ${3:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/alert/configs", "description":"(uri as string, delete-triggers as string, format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/alert/configs(${1:uri as string}, ${2:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/alert/configs", "description":"(uri as string, format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/alert/configs/properties(${1:uri as string}, ${2:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/alert/configs/properties", "description":"(uri as string, format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/alert/configs/properties(${1:uri as string}, ${2:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/alert/configs/properties", "description":"(uri as string, format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/alert/actions(${1:uri as string}, ${2:name as string}, ${3:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/alert/actions", "description":"(uri as string, name as string, format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/alert/actions(${1:uri as string}, ${2:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/alert/actions", "description":"(uri as string, format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/alert/actions/{id|name}(${1:uri as string}, ${2:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/alert/actions/{id|name}", "description":"(uri as string, format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/alert/actions/{id|name}(${1:uri as string}, ${2:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/alert/actions/{id|name}", "description":"(uri as string, format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/alert/actions/{id|name}/properties(${1:uri as string}, ${2:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/alert/actions/{id|name}/properties", "description":"(uri as string, format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/alert/actions/{id|name}/properties(${1:uri as string}, ${2:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/alert/actions/{id|name}/properties", "description":"(uri as string, format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/alert/actions/{id|name}/rules(${1:uri as string}, ${2:name as string}, ${3:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/alert/actions/{id|name}/rules", "description":"(uri as string, name as string, format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/alert/actions/{id|name}/rules(${1:uri as string}, ${2:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/alert/actions/{id|name}/rules", "description":"(uri as string, format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/alert/actions/{id|name}/rules/{id|name}(${1:uri as string}, ${2:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/alert/actions/{id|name}/rules/{id|name}", "description":"(uri as string, format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/alert/actions/{id|name}/rules/{id|name}(${1:uri as string}, ${2:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/alert/actions/{id|name}/rules/{id|name}", "description":"(uri as string, format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/alert/actions/{id|name}/rules/{id|name}/properties(${1:uri as string}, ${2:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/alert/actions/{id|name}/rules/{id|name}/properties", "description":"(uri as string, format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/alert/actions/{id|name}/rules/{id|name}/properties(${1:uri as string}, ${2:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/alert/actions/{id|name}/rules/{id|name}/properties", "description":"(uri as string, format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/triggers(${1:uri as string}, ${2:name as string}, ${3:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/triggers", "description":"(uri as string, name as string, format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/triggers(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/triggers", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/triggers{id|name}(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/triggers{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/triggers{id|name}(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/triggers{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/triggers{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/triggers{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/triggers{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/triggers{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/hosts(${1:format as string}, ${2:group-id as string}, ${3:view as string})", "trigger":"manage./manage/v2/hosts", "description":"(format as string, group-id as string, view as string)"}, {"content":"manage./manage/v2/hosts(${1:format as string})", "trigger":"manage./manage/v2/hosts", "description":"(format as string)"}, {"content":"manage./manage/v2/hosts?view=status(${1:format as string}, ${2:group-id as string})", "trigger":"manage./manage/v2/hosts?view=status", "description":"(format as string, group-id as string)"}, {"content":"manage./manage/v2/hosts?view=metrics(${1:format as string}, ${2:group-id as string})", "trigger":"manage./manage/v2/hosts?view=metrics", "description":"(format as string, group-id as string)"}, {"content":"manage./manage/v2/hosts/{id|name}(${1:format as string}, ${2:view as string})", "trigger":"manage./manage/v2/hosts/{id|name}", "description":"(format as string, view as string)"}, {"content":"manage./manage/v2/hosts/{id|name}?view=config(${1:view as string}, ${2:format as string})", "trigger":"manage./manage/v2/hosts/{id|name}?view=config", "description":"(view as string, format as string)"}, {"content":"manage./manage/v2/hosts/{id|name}?view=counts(${1:format as string})", "trigger":"manage./manage/v2/hosts/{id|name}?view=counts", "description":"(format as string)"}, {"content":"manage./manage/v2/hosts/{id|name}?view=status(${1:format as string})", "trigger":"manage./manage/v2/hosts/{id|name}?view=status", "description":"(format as string)"}, {"content":"manage./manage/v2/hosts/{id|name}(${1:state as string}, ${2:format as string})", "trigger":"manage./manage/v2/hosts/{id|name}", "description":"(state as string, format as string)"}, {"content":"manage./manage/v2/hosts/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/hosts/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/hosts/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/hosts/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/hosts/{id|name}/{custom}(${1:format as string})", "trigger":"manage./manage/v2/hosts/{id|name}/{custom}", "description":"(format as string)"}, {"content":"manage./manage/v2/servers(${1:format as string}, ${2:group-id as string}, ${3:view as string}, ${4:fullrefs as string})", "trigger":"manage./manage/v2/servers", "description":"(format as string, group-id as string, view as string, fullrefs as string)"}, {"content":"manage./manage/v2/servers?view=metrics(${1:format as string}, ${2:group-id as string}, ${3:fullrefs as string})", "trigger":"manage./manage/v2/servers?view=metrics", "description":"(format as string, group-id as string, fullrefs as string)"}, {"content":"manage./manage/v2/servers?view=status(${1:format as string}, ${2:group-id as string}, ${3:fullrefs as string})", "trigger":"manage./manage/v2/servers?view=status", "description":"(format as string, group-id as string, fullrefs as string)"}, {"content":"manage./manage/v2/servers/{id|name}(${1:group-id as string}, ${2:format as string}, ${3:view as string}, ${4:host-id as string}, ${5:fullrefs as string}, ${6:modules as string})", "trigger":"manage./manage/v2/servers/{id|name}", "description":"(group-id as string, format as string, view as string, host-id as string, fullrefs as string, modules as string)"}, {"content":"manage./manage/v2/servers/{id|name}?view=config(${1:group-id as string}, ${2:format as string})", "trigger":"manage./manage/v2/servers/{id|name}?view=config", "description":"(group-id as string, format as string)"}, {"content":"manage./manage/v2/servers/{id|name}?view=status(${1:group-id as string}, ${2:format as string}, ${3:host-id as string}, ${4:fullrefs as string})", "trigger":"manage./manage/v2/servers/{id|name}?view=status", "description":"(group-id as string, format as string, host-id as string, fullrefs as string)"}, {"content":"manage./manage/v2/servers/{id|name}?view=package(${1:group-id as string}, ${2:format as string}, ${3:modules as string})", "trigger":"manage./manage/v2/servers/{id|name}?view=package", "description":"(group-id as string, format as string, modules as string)"}, {"content":"manage./manage/v2/servers/{id|name}/{custom}(${1:group-id as string}, ${2:format as string})", "trigger":"manage./manage/v2/servers/{id|name}/{custom}", "description":"(group-id as string, format as string)"}, {"content":"manage./manage/v2/servers(${1:group-id as string}, ${2:server-type as string}, ${3:format as string})", "trigger":"manage./manage/v2/servers", "description":"(group-id as string, server-type as string, format as string)"}, {"content":"manage./manage/v2/servers/{id|name}(${1:group-id as string}, ${2:format as string})", "trigger":"manage./manage/v2/servers/{id|name}", "description":"(group-id as string, format as string)"}, {"content":"manage./manage/v2/servers/{id|name}/properties(${1:group-id as string}, ${2:format as string})", "trigger":"manage./manage/v2/servers/{id|name}/properties", "description":"(group-id as string, format as string)"}, {"content":"manage./manage/v2/servers/{id|name}/properties(${1:group-id as string}, ${2:format as string})", "trigger":"manage./manage/v2/servers/{id|name}/properties", "description":"(group-id as string, format as string)"}, {"content":"manage./manage/v2/groups(${1:format as string}, ${2:view as string})", "trigger":"manage./manage/v2/groups", "description":"(format as string, view as string)"}, {"content":"manage./manage/v2/groups(${1:format as string})", "trigger":"manage./manage/v2/groups", "description":"(format as string)"}, {"content":"manage./manage/v2/groups/{id|name}(${1:format as string}, ${2:view as string})", "trigger":"manage./manage/v2/groups/{id|name}", "description":"(format as string, view as string)"}, {"content":"manage./manage/v2/groups/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/groups/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/groups/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/groups/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/groups/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/groups/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/groups/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/groups/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/groups/{id|name}?view=config(${1:format as string})", "trigger":"manage./manage/v2/groups/{id|name}?view=config", "description":"(format as string)"}, {"content":"manage./manage/v2/groups/{id|name}?view=counts(${1:format as string})", "trigger":"manage./manage/v2/groups/{id|name}?view=counts", "description":"(format as string)"}, {"content":"manage./manage/v2/groups/{id|name}?view=status(${1:format as string})", "trigger":"manage./manage/v2/groups/{id|name}?view=status", "description":"(format as string)"}, {"content":"manage./manage/v2/requests(${1:format as string}, ${2:view as string}, ${3:group-id as string}, ${4:host-id as string}, ${5:server-id as string}, ${6:seconds-min as string}, ${7:fullrefs as string})", "trigger":"manage./manage/v2/requests", "description":"(format as string, view as string, group-id as string, host-id as string, server-id as string, seconds-min as string, fullrefs as string)"}, {"content":"manage./manage/v2/requests/{id|uri}(${1:format as string}, ${2:group-id as string}, ${3:host-id as string}, ${4:server-id as string})", "trigger":"manage./manage/v2/requests/{id|uri}", "description":"(format as string, group-id as string, host-id as string, server-id as string)"}, {"content":"manage./manage/v2/transactions(${1:format as string}, ${2:view as string}, ${3:host-id as string}, ${4:seconds-min as string}, ${5:fullrefs as string})", "trigger":"manage./manage/v2/transactions", "description":"(format as string, view as string, host-id as string, seconds-min as string, fullrefs as string)"}, {"content":"manage./manage/v2/transactions/{id|uri}(${1:format as string}, ${2:host-id as string})", "trigger":"manage./manage/v2/transactions/{id|uri}", "description":"(format as string, host-id as string)"}, {"content":"manage./manage/v2/tickets/{tid}?view=processStatus(${1:format as string})", "trigger":"manage./manage/v2/tickets/{tid}?view=processStatus", "description":"(format as string)"}, {"content":"manage./admin/v1/init(${1:format as string}, ${2:license-key as string}, ${3:licensee as string})", "trigger":"manage./admin/v1/init", "description":"(format as string, license-key as string, licensee as string)"}, {"content":"manage./admin/v1/instanceAdmin(${1:format as string}, ${2:admin-username as string}, ${3:admin-password as string})", "trigger":"manage./admin/v1/instanceAdmin", "description":"(format as string, admin-username as string, admin-password as string)"}, {"content":"manage./admin/v1/timestamp()", "trigger":"manage./admin/v1/timestamp", "description":"()"}, {"content":"manage./admin/v1/timestamp()", "trigger":"manage./admin/v1/timestamp", "description":"()"}, {"content":"manage./admin/v1/serverConfig()", "trigger":"manage./admin/v1/serverConfig", "description":"()"}, {"content":"manage./admin/v1/clusterConfig(${1:server-config as string}, ${2:group as string}, ${3:zone as string})", "trigger":"manage./admin/v1/clusterConfig", "description":"(server-config as string, group as string, zone as string)"}, {"content":"manage./admin/v1/hostConfig(${1:remote-host as string})", "trigger":"manage./admin/v1/hostConfig", "description":"(remote-host as string)"}, {"content":"manage./manage/v2/meters/resources(${1:format as string}, ${2:period as dateTime}, ${3:start as dateTime}, ${4:end as dateTime})", "trigger":"manage./manage/v2/meters/resources", "description":"(format as string, period as dateTime, start as dateTime, end as dateTime)"}, {"content":"manage./manage/v2/meters/labels(${1:format as string}, ${2:name as string}, ${3:start as dateTime}, ${4:end as dateTime})", "trigger":"manage./manage/v2/meters/labels", "description":"(format as string, name as string, start as dateTime, end as dateTime)"}, {"content":"manage./manage/v2/meters/labels(${1:format as string})", "trigger":"manage./manage/v2/meters/labels", "description":"(format as string)"}, {"content":"manage./manage/v2/meters/labels()", "trigger":"manage./manage/v2/meters/labels", "description":"()"}, {"content":"manage./manage/v2/meters/labels/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/meters/labels/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/meters/labels/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/meters/labels/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/meters/labels/{id|name}()", "trigger":"manage./manage/v2/meters/labels/{id|name}", "description":"()"}, {"content":"manage./manage/v2/meters/labels/{id|name}()", "trigger":"manage./manage/v2/meters/labels/{id|name}", "description":"()"}, {"content":"manage./manage/v2/meters/labels/{id|name}()", "trigger":"manage./manage/v2/meters/labels/{id|name}", "description":"()"}, {"content":"manage./manage/v2/databases/{id|name}/cpfConfigs(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/cpfConfigs", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/cpfConfigs(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/cpfConfigs", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/cpfConfigs/{domainId|defaultDomainName}(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/cpfConfigs/{domainId|defaultDomainName}", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/cpfConfigs/{domainId|defaultDomainName}(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/cpfConfigs/{domainId|defaultDomainName}", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/cpfConfigs/{domainId|defaultDomainName}/properties(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/cpfConfigs/{domainId|defaultDomainName}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/cpfConfigs/{domainId|defaultDomainName}/properties(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/cpfConfigs/{domainId|defaultDomainName}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/domains(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/domains", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/domains(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/domains", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/domains/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/domains/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/domains/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/domains/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/domains/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/domains/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/domains/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/domains/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/domains/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/domains/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/pipelines(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/pipelines", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/pipelines(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/pipelines", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/pipelines/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/pipelines/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/pipelines/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/pipelines/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/pipelines/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/pipelines/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/pipelines/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/pipelines/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/viewSchemas(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/viewSchemas", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/viewSchemas(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/viewSchemas", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/viewSchemas/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/viewSchemas/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/viewSchemas/{id|name}(${1:format as string}, ${2:delete-views as string})", "trigger":"manage./manage/v2/databases/{id|name}/viewSchemas/{id|name}", "description":"(format as string, delete-views as string)"}, {"content":"manage./manage/v2/databases/{id|name}/viewSchemas/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/viewSchemas/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/viewSchemas/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/viewSchemas/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/viewSchemas/{schemaName}/views(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/viewSchemas/{schemaName}/views", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/viewSchemas/{schemaName}/views(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/viewSchemas/{schemaName}/views", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/viewSchemas/{schemaName}/views/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/viewSchemas/{schemaName}/views/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/viewSchemas/{schemaName}/views/{id|name}(${1:format as string}, ${2:delete-views as string})", "trigger":"manage./manage/v2/databases/{id|name}/viewSchemas/{schemaName}/views/{id|name}", "description":"(format as string, delete-views as string)"}, {"content":"manage./manage/v2/databases/{id|name}/viewSchemas/{schemaName}/views/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/viewSchemas/{schemaName}/views/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/viewSchemas/{schemaName}/views/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/viewSchemas/{schemaName}/views/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/users(${1:format as string})", "trigger":"manage./manage/v2/users", "description":"(format as string)"}, {"content":"manage./manage/v2/users(${1:format as string})", "trigger":"manage./manage/v2/users", "description":"(format as string)"}, {"content":"manage./manage/v2/users/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/users/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/users/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/users/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/users/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/users/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/users/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/users/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/roles(${1:format as string})", "trigger":"manage./manage/v2/roles", "description":"(format as string)"}, {"content":"manage./manage/v2/roles(${1:format as string})", "trigger":"manage./manage/v2/roles", "description":"(format as string)"}, {"content":"manage./manage/v2/roles/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/roles/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/roles/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/roles/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/roles/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/roles/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/roles/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/roles/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/privileges(${1:format as string})", "trigger":"manage./manage/v2/privileges", "description":"(format as string)"}, {"content":"manage./manage/v2/privileges(${1:format as string})", "trigger":"manage./manage/v2/privileges", "description":"(format as string)"}, {"content":"manage./manage/v2/privileges/{id|name}(${1:format as string}, ${2:kind as string})", "trigger":"manage./manage/v2/privileges/{id|name}", "description":"(format as string, kind as string)"}, {"content":"manage./manage/v2/privileges/{id|name}(${1:format as string}, ${2:kind as string})", "trigger":"manage./manage/v2/privileges/{id|name}", "description":"(format as string, kind as string)"}, {"content":"manage./manage/v2/privileges/{id|name}/properties(${1:format as string}, ${2:kind as string})", "trigger":"manage./manage/v2/privileges/{id|name}/properties", "description":"(format as string, kind as string)"}, {"content":"manage./manage/v2/privileges/{id|name}/properties(${1:format as string}, ${2:kind as string})", "trigger":"manage./manage/v2/privileges/{id|name}/properties", "description":"(format as string, kind as string)"}, {"content":"manage./manage/v2/security/properties(${1:format as string}, ${2:kind as string})", "trigger":"manage./manage/v2/security/properties", "description":"(format as string, kind as string)"}, {"content":"manage./manage/v2/security/properties(${1:format as string})", "trigger":"manage./manage/v2/security/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/amps(${1:format as string})", "trigger":"manage./manage/v2/amps", "description":"(format as string)"}, {"content":"manage./manage/v2/amps(${1:format as string})", "trigger":"manage./manage/v2/amps", "description":"(format as string)"}, {"content":"manage./manage/v2/amps/{id|name}(${1:format as string}, ${2:namespace as string}, ${3:document-uri as string}, ${4:modules-database as string})", "trigger":"manage./manage/v2/amps/{id|name}", "description":"(format as string, namespace as string, document-uri as string, modules-database as string)"}, {"content":"manage./manage/v2/amps/{id|name}(${1:format as string}, ${2:namespace as string}, ${3:document-uri as string}, ${4:modules-database as string})", "trigger":"manage./manage/v2/amps/{id|name}", "description":"(format as string, namespace as string, document-uri as string, modules-database as string)"}, {"content":"manage./manage/v2/amps/{id|name}/properties(${1:format as string}, ${2:namespace as string}, ${3:document-uri as string}, ${4:modules-database as string})", "trigger":"manage./manage/v2/amps/{id|name}/properties", "description":"(format as string, namespace as string, document-uri as string, modules-database as string)"}, {"content":"manage./manage/v2/amps/{id|name}/properties(${1:format as string}, ${2:namespace as string}, ${3:document-uri as string}, ${4:modules-database as string})", "trigger":"manage./manage/v2/amps/{id|name}/properties", "description":"(format as string, namespace as string, document-uri as string, modules-database as string)"}, {"content":"manage./manage/v2/externalSecurity(${1:format as string})", "trigger":"manage./manage/v2/externalSecurity", "description":"(format as string)"}, {"content":"manage./manage/v2/externalSecurity(${1:format as string})", "trigger":"manage./manage/v2/externalSecurity", "description":"(format as string)"}, {"content":"manage./manage/v2/externalSecurity/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/externalSecurity/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/externalSecurity/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/externalSecurity/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/externalSecurity/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/externalSecurity/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/externalSecurity/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/externalSecurity/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/protectedCollections(${1:format as string})", "trigger":"manage./manage/v2/protectedCollections", "description":"(format as string)"}, {"content":"manage./manage/v2/protectedCollections(${1:format as string})", "trigger":"manage./manage/v2/protectedCollections", "description":"(format as string)"}, {"content":"manage./manage/v2/protectedCollections?uri={collectionUri}(${1:uri as string}, ${2:format as string})", "trigger":"manage./manage/v2/protectedCollections?uri={collectionUri}", "description":"(uri as string, format as string)"}, {"content":"manage./manage/v2/protectedCollections?uri={collectionUri}(${1:uri as string}, ${2:format as string})", "trigger":"manage./manage/v2/protectedCollections?uri={collectionUri}", "description":"(uri as string, format as string)"}, {"content":"manage./manage/v2/protectedCollections/properties?uri={collectionUri}(${1:uri as string}, ${2:format as string})", "trigger":"manage./manage/v2/protectedCollections/properties?uri={collectionUri}", "description":"(uri as string, format as string)"}, {"content":"manage./manage/v2/protectedCollections/properties?uri={collectionUri}(${1:uri as string}, ${2:format as string})", "trigger":"manage./manage/v2/protectedCollections/properties?uri={collectionUri}", "description":"(uri as string, format as string)"}, {"content":"manage./manage/v2/certificateAuthorities(${1:format as string})", "trigger":"manage./manage/v2/certificateAuthorities", "description":"(format as string)"}, {"content":"manage./manage/v2/certificateAuthorities(${1:format as string})", "trigger":"manage./manage/v2/certificateAuthorities", "description":"(format as string)"}, {"content":"manage./manage/v2/certificateAuthorities/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/certificateAuthorities/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/certificateAuthorities/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/certificateAuthorities/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/certificateAuthorities/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/certificateAuthorities/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/certificateTemplates(${1:format as string})", "trigger":"manage./manage/v2/certificateTemplates", "description":"(format as string)"}, {"content":"manage./manage/v2/certificateTemplates(${1:format as string})", "trigger":"manage./manage/v2/certificateTemplates", "description":"(format as string)"}, {"content":"manage./manage/v2/certificateTemplates/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/certificateTemplates/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/certificateTemplates/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/certificateTemplates/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/certificateTemplates/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/certificateTemplates/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/certificateTemplates/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/certificateTemplates/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/certificateTemplates/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/certificateTemplates/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/certificates(${1:format as string})", "trigger":"manage./manage/v2/certificates", "description":"(format as string)"}, {"content":"manage./manage/v2/certificates(${1:trusted as string}, ${2:format as string})", "trigger":"manage./manage/v2/certificates", "description":"(trusted as string, format as string)"}, {"content":"manage./manage/v2/certificates/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/certificates/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/certificates/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/certificates/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/certificates/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/certificates/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/certificateRevocationLists(${1:url as string})", "trigger":"manage./manage/v2/certificateRevocationLists", "description":"(url as string)"}, {"content":"manage./manage/v2/databases/{id|name}/temporal(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/temporal", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/temporal/axes(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/temporal/axes", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/temporal/axes(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/temporal/axes", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/temporal/axes/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/temporal/axes/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/temporal/axes/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/temporal/axes/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/temporal/axes/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/temporal/axes/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/temporal/collections(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/temporal/collections", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/temporal/collections(${1:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/temporal/collections", "description":"(format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/temporal/collections?collection={name}(${1:collection as string}, ${2:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/temporal/collections?collection={name}", "description":"(collection as string, format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/temporal/collections?collection={name}(${1:collection as string}, ${2:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/temporal/collections?collection={name}", "description":"(collection as string, format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/temporal/collections/properties?collection={name}(${1:collection as string}, ${2:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/temporal/collections/properties?collection={name}", "description":"(collection as string, format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/temporal/collections/properties?collection={name}(${1:collection as string}, ${2:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/temporal/collections/properties?collection={name}", "description":"(collection as string, format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/temporal/collections/lsqt/properties?collection={name}(${1:collection as string}, ${2:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/temporal/collections/lsqt/properties?collection={name}", "description":"(collection as string, format as string)"}, {"content":"manage./manage/v2/databases/{id|name}/temporal/collections/lsqt/properties?collection={name}(${1:collection as string}, ${2:format as string})", "trigger":"manage./manage/v2/databases/{id|name}/temporal/collections/lsqt/properties?collection={name}", "description":"(collection as string, format as string)"}, {"content":"manage./manage/v2/taskServers(${1:format as string}, ${2:group-id as string})", "trigger":"manage./manage/v2/taskServers", "description":"(format as string, group-id as string)"}, {"content":"manage./manage/v2/taskServers/{id|name}(${1:format as string}, ${2:group-id as string})", "trigger":"manage./manage/v2/taskServers/{id|name}", "description":"(format as string, group-id as string)"}, {"content":"manage./manage/v2/taskServers/{id|name}/properties(${1:format as string}, ${2:group-id as string})", "trigger":"manage./manage/v2/taskServers/{id|name}/properties", "description":"(format as string, group-id as string)"}, {"content":"manage./manage/v2/taskServers/{id|name}/properties(${1:group-id as string}, ${2:format as string})", "trigger":"manage./manage/v2/taskServers/{id|name}/properties", "description":"(group-id as string, format as string)"}, {"content":"manage./manage/v2/tasks(${1:format as string}, ${2:group-id as string})", "trigger":"manage./manage/v2/tasks", "description":"(format as string, group-id as string)"}, {"content":"manage./manage/v2/tasks(${1:group-id as string}, ${2:server-type as string}, ${3:format as string})", "trigger":"manage./manage/v2/tasks", "description":"(group-id as string, server-type as string, format as string)"}, {"content":"manage./manage/v2/tasks/{id|name}(${1:group-id as string}, ${2:format as string})", "trigger":"manage./manage/v2/tasks/{id|name}", "description":"(group-id as string, format as string)"}, {"content":"manage./manage/v2/tasks/{id|name}(${1:group-id as string}, ${2:format as string})", "trigger":"manage./manage/v2/tasks/{id|name}", "description":"(group-id as string, format as string)"}, {"content":"manage./manage/v2/tasks/{id|name}/properties(${1:group-id as string}, ${2:format as string}, ${3:kind as string})", "trigger":"manage./manage/v2/tasks/{id|name}/properties", "description":"(group-id as string, format as string, kind as string)"}, {"content":"manage./manage/v2/tasks/{id|name}/properties(${1:group-id as string}, ${2:format as string}, ${3:kind as string})", "trigger":"manage./manage/v2/tasks/{id|name}/properties", "description":"(group-id as string, format as string, kind as string)"}, {"content":"manage./manage/v2/mimetypes(${1:format as string})", "trigger":"manage./manage/v2/mimetypes", "description":"(format as string)"}, {"content":"manage./manage/v2/mimetypes(${1:format as string})", "trigger":"manage./manage/v2/mimetypes", "description":"(format as string)"}, {"content":"manage./manage/v2/mimetypes/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/mimetypes/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/mimetypes/{id|name}(${1:format as string})", "trigger":"manage./manage/v2/mimetypes/{id|name}", "description":"(format as string)"}, {"content":"manage./manage/v2/mimetypes/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/mimetypes/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v2/mimetypes/{id|name}/properties(${1:format as string})", "trigger":"manage./manage/v2/mimetypes/{id|name}/properties", "description":"(format as string)"}, {"content":"manage./manage/v1/domains(${1:format as string})", "trigger":"manage./manage/v1/domains", "description":"(format as string)"}, {"content":"manage./v1/domains/{domainIdOrDefaultDomainName}/status(${1:format as string}, ${2:with-targets as boolean})", "trigger":"manage./v1/domains/{domainIdOrDefaultDomainName}/status", "description":"(format as string, with-targets as boolean)"}, {"content":"manage./v1/domains/{domainIdOrDefaultDomainName}/targets(${1:format as string})", "trigger":"manage./v1/domains/{domainIdOrDefaultDomainName}/targets", "description":"(format as string)"}, {"content":"manage./v1/domains/{domainIdOrDefaultDomainName}/targets/{id|name}(${1:format as string}, ${2:with-targets as boolean})", "trigger":"manage./v1/domains/{domainIdOrDefaultDomainName}/targets/{id|name}", "description":"(format as string, with-targets as boolean)"}, {"content":"manage./v1/domains/{domainIdOrDefaultDomainName}/targets/{id|name}/rules(${1:format as string})", "trigger":"manage./v1/domains/{domainIdOrDefaultDomainName}/targets/{id|name}/rules", "description":"(format as string)"}, {"content":"manage./v1/domains/{domainIdOrDefaultDomainName}/targets/{id|name}/rules/alert_id(${1:format as string})", "trigger":"manage./v1/domains/{domainIdOrDefaultDomainName}/targets/{id|name}/rules/alert_id", "description":"(format as string)"}, {"content":"manage./v1/domains/{domainIdOrDefaultDomainName}/targets/{id|name}/rules/alert_id(${1:format as string})", "trigger":"manage./v1/domains/{domainIdOrDefaultDomainName}/targets/{id|name}/rules/alert_id", "description":"(format as string)"}, {"content":"manage./v1/domains/{domainIdOrDefaultDomainName}/targets/{id|name}/rules/alert_id(${1:format as string})", "trigger":"manage./v1/domains/{domainIdOrDefaultDomainName}/targets/{id|name}/rules/alert_id", "description":"(format as string)"}, {"content":"manage./v1/domains/{domainIdOrDefaultDomainName}/targets/{id|name}/rules(${1:format as string})", "trigger":"manage./v1/domains/{domainIdOrDefaultDomainName}/targets/{id|name}/rules", "description":"(format as string)"}, {"content":"manage./manage/v2/credentials(${1:format as string}, ${2:type as string})", "trigger":"manage./manage/v2/credentials", "description":"(format as string, type as string)"}, {"content":"manage./manage/v2/credentials(${1:format as string}, ${2:type as string})", "trigger":"manage./manage/v2/credentials", "description":"(format as string, type as string)"}, {"content":"manage./manage/v2/credentials(${1:format as string}, ${2:type as string})", "trigger":"manage./manage/v2/credentials", "description":"(format as string, type as string)"}, {"content":"manage./manage/v2/usageReport(${1:format as string}, ${2:previous-days as string}, ${3:start-date as dateTime}, ${4:end-date as dateTime})", "trigger":"manage./manage/v2/usageReport", "description":"(format as string, previous-days as string, start-date as dateTime, end-date as dateTime)"}, {"content":"manage./manage/v2/supportRequest(${1:format as string}, ${2:scope as string}, ${3:detail as string})", "trigger":"manage./manage/v2/supportRequest", "description":"(format as string, scope as string, detail as string)"}, {"content":"manage./manage/v2/logs(${1:format as string}, ${2:filename as string})", "trigger":"manage./manage/v2/logs", "description":"(format as string, filename as string)"}, {"content":"math.acos(${1:x as xs:double})", "trigger":"math.acos", "description":"(x as xs:double)"}, {"content":"math.asin(${1:x as xs:double})", "trigger":"math.asin", "description":"(x as xs:double)"}, {"content":"math.atan(${1:x as xs:double})", "trigger":"math.atan", "description":"(x as xs:double)"}, {"content":"math.atan2(${1:y as xs:double}, ${2:x as xs:double})", "trigger":"math.atan2", "description":"(y as xs:double, x as xs:double)"}, {"content":"math.cos(${1:x as xs:double})", "trigger":"math.cos", "description":"(x as xs:double)"}, {"content":"math.cosh(${1:x as xs:double})", "trigger":"math.cosh", "description":"(x as xs:double)"}, {"content":"math.sin(${1:x as xs:double})", "trigger":"math.sin", "description":"(x as xs:double)"}, {"content":"math.sinh(${1:x as xs:double})", "trigger":"math.sinh", "description":"(x as xs:double)"}, {"content":"math.tan(${1:x as xs:double})", "trigger":"math.tan", "description":"(x as xs:double)"}, {"content":"math.cot(${1:x as xs:double})", "trigger":"math.cot", "description":"(x as xs:double)"}, {"content":"math.tanh(${1:x as xs:double})", "trigger":"math.tanh", "description":"(x as xs:double)"}, {"content":"math.exp(${1:x as xs:double})", "trigger":"math.exp", "description":"(x as xs:double)"}, {"content":"math.frexp(${1:x as xs:double})", "trigger":"math.frexp", "description":"(x as xs:double)"}, {"content":"math.ldexp(${1:y as xs:double}, ${2:i as xs:integer})", "trigger":"math.ldexp", "description":"(y as xs:double, i as xs:integer)"}, {"content":"math.log(${1:x as xs:double})", "trigger":"math.log", "description":"(x as xs:double)"}, {"content":"math.log10(${1:x as xs:double})", "trigger":"math.log10", "description":"(x as xs:double)"}, {"content":"math.modf(${1:x as xs:double})", "trigger":"math.modf", "description":"(x as xs:double)"}, {"content":"math.pow(${1:x as xs:double}, ${2:y as xs:double})", "trigger":"math.pow", "description":"(x as xs:double, y as xs:double)"}, {"content":"math.sqrt(${1:x as xs:double})", "trigger":"math.sqrt", "description":"(x as xs:double)"}, {"content":"math.ceil(${1:x as xs:double})", "trigger":"math.ceil", "description":"(x as xs:double)"}, {"content":"math.fabs(${1:x as xs:double})", "trigger":"math.fabs", "description":"(x as xs:double)"}, {"content":"math.floor(${1:x as xs:double})", "trigger":"math.floor", "description":"(x as xs:double)"}, {"content":"math.fmod(${1:x as xs:double}, ${2:y as xs:double})", "trigger":"math.fmod", "description":"(x as xs:double, y as xs:double)"}, {"content":"math.degrees(${1:x as xs:double})", "trigger":"math.degrees", "description":"(x as xs:double)"}, {"content":"math.radians(${1:x as xs:double})", "trigger":"math.radians", "description":"(x as xs:double)"}, {"content":"math.pi()", "trigger":"math.pi", "description":"()"}, {"content":"math.varianceP(${1:arg as xs:double*})", "trigger":"math.varianceP", "description":"(arg as xs:double*)"}, {"content":"math.variance(${1:arg as xs:double*})", "trigger":"math.variance", "description":"(arg as xs:double*)"}, {"content":"math.stddevP(${1:arg as xs:double*})", "trigger":"math.stddevP", "description":"(arg as xs:double*)"}, {"content":"math.stddev(${1:arg as xs:double*})", "trigger":"math.stddev", "description":"(arg as xs:double*)"}, {"content":"math.covarianceP(${1:arg as json:array*})", "trigger":"math.covarianceP", "description":"(arg as json:array*)"}, {"content":"math.covariance(${1:arg as json:array*})", "trigger":"math.covariance", "description":"(arg as json:array*)"}, {"content":"math.correlation(${1:arg as json:array*})", "trigger":"math.correlation", "description":"(arg as json:array*)"}, {"content":"math.linearModel(${1:arg as json:array*})", "trigger":"math.linearModel", "description":"(arg as json:array*)"}, {"content":"math.linearModelIntercept(${1:linear-model as math:linear-model})", "trigger":"math.linearModelIntercept", "description":"(linear-model as math:linear-model)"}, {"content":"math.linearModelRsquared(${1:linear-model as math:linear-model})", "trigger":"math.linearModelRsquared", "description":"(linear-model as math:linear-model)"}, {"content":"math.linearModelCoeff(${1:linear-model as math:linear-model})", "trigger":"math.linearModelCoeff", "description":"(linear-model as math:linear-model)"}, {"content":"math.percentile(${1:arg as xs:double*}, ${2:p as xs:double*})", "trigger":"math.percentile", "description":"(arg as xs:double*, p as xs:double*)"}, {"content":"math.median(${1:arg as xs:double*})", "trigger":"math.median", "description":"(arg as xs:double*)"}, {"content":"cts.percentile(${1:arg as xs:double*}, ${2:p as xs:double*})", "trigger":"cts.percentile", "description":"(arg as xs:double*, p as xs:double*)"}, {"content":"cts.median(${1:arg as xs:double*})", "trigger":"cts.median", "description":"(arg as xs:double*)"}, {"content":"math.rank(${1:arg1 as xs:anyAtomicType*}, ${2:arg2 as xs:anyAtomicType})", "trigger":"math.rank", "description":"(arg1 as xs:anyAtomicType*, arg2 as xs:anyAtomicType)"}, {"content":"math.rank(${1:arg1 as xs:anyAtomicType*}, ${2:arg2 as xs:anyAtomicType}, ${3:options as xs:string*})", "trigger":"math.rank", "description":"(arg1 as xs:anyAtomicType*, arg2 as xs:anyAtomicType, options as xs:string*)"}, {"content":"math.percentRank(${1:arg as xs:anyAtomicType*}, ${2:value as xs:anyAtomicType})", "trigger":"math.percentRank", "description":"(arg as xs:anyAtomicType*, value as xs:anyAtomicType)"}, {"content":"math.percentRank(${1:arg as xs:anyAtomicType*}, ${2:value as xs:anyAtomicType}, ${3:options as xs:string*})", "trigger":"math.percentRank", "description":"(arg as xs:anyAtomicType*, value as xs:anyAtomicType, options as xs:string*)"}, {"content":"cts.rank(${1:arg as xs:anyAtomicType*}, ${2:value as xs:anyAtomicType})", "trigger":"cts.rank", "description":"(arg as xs:anyAtomicType*, value as xs:anyAtomicType)"}, {"content":"cts.rank(${1:arg as xs:anyAtomicType*}, ${2:value as xs:anyAtomicType}, ${3:options as xs:string*})", "trigger":"cts.rank", "description":"(arg as xs:anyAtomicType*, value as xs:anyAtomicType, options as xs:string*)"}, {"content":"cts.percentRank(${1:arg as xs:anyAtomicType*}, ${2:value as xs:anyAtomicType})", "trigger":"cts.percentRank", "description":"(arg as xs:anyAtomicType*, value as xs:anyAtomicType)"}, {"content":"cts.percentRank(${1:arg as xs:anyAtomicType*}, ${2:value as xs:anyAtomicType}, ${3:options as xs:string*})", "trigger":"cts.percentRank", "description":"(arg as xs:anyAtomicType*, value as xs:anyAtomicType, options as xs:string*)"}, {"content":"math.mode(${1:arg as xs:anyAtomicType*})", "trigger":"math.mode", "description":"(arg as xs:anyAtomicType*)"}, {"content":"math.mode(${1:arg as xs:anyAtomicType*}, ${2:options as xs:string*})", "trigger":"math.mode", "description":"(arg as xs:anyAtomicType*, options as xs:string*)"}, {"content":"math.trunc(${1:arg as numeric?})", "trigger":"math.trunc", "description":"(arg as numeric?)"}, {"content":"math.trunc(${1:arg as numeric?}, ${2:n as xs:integer})", "trigger":"math.trunc", "description":"(arg as numeric?, n as xs:integer)"}, {"content":"mcgm.point(${1:point as element(Dot)})", "trigger":"mcgm.point", "description":"(point as element(Dot))"}, {"content":"mcgm.circle(${1:radius as xs:double}, ${2:center as element(Dot)})", "trigger":"mcgm.circle", "description":"(radius as xs:double, center as element(Dot))"}, {"content":"mcgm.polygon(${1:vertices as element(Dot)*})", "trigger":"mcgm.polygon", "description":"(vertices as element(Dot)*)"}, {"content":"mcgm.geospatialQuery(${1:regions as cts:region*})", "trigger":"mcgm.geospatialQuery", "description":"(regions as cts:region*)"}, {"content":"mcgm.geospatialQuery(${1:regions as cts:region*}, ${2:options as xs:string*})", "trigger":"mcgm.geospatialQuery", "description":"(regions as cts:region*, options as xs:string*)"}, {"content":"mcgm.geospatialQuery(${1:regions as cts:region*}, ${2:options as xs:string*}, ${3:weight as xs:double?})", "trigger":"mcgm.geospatialQuery", "description":"(regions as cts:region*, options as xs:string*, weight as xs:double?)"}, {"content":"mcgm.geospatialQueryFromElements(${1:regions as element(Dot)*})", "trigger":"mcgm.geospatialQueryFromElements", "description":"(regions as element(Dot)*)"}, {"content":"mcgm.geospatialQueryFromElements(${1:regions as element(Dot)*}, ${2:options as xs:string*})", "trigger":"mcgm.geospatialQueryFromElements", "description":"(regions as element(Dot)*, options as xs:string*)"}, {"content":"mcgm.geospatialQueryFromElements(${1:regions as element(Dot)*}, ${2:options as xs:string*}, ${3:weight as xs:double?})", "trigger":"mcgm.geospatialQueryFromElements", "description":"(regions as element(Dot)*, options as xs:string*, weight as xs:double?)"}, {"content":"msword.clean(${1:uri as String}, ${2:doc as node()?})", "trigger":"msword.clean", "description":"(uri as String, doc as node()?)"}, {"content":"fn.name()", "trigger":"fn.name", "description":"()"}, {"content":"fn.name(${1:arg as node()?})", "trigger":"fn.name", "description":"(arg as node()?)"}, {"content":"fn.localName()", "trigger":"fn.localName", "description":"()"}, {"content":"fn.localName(${1:arg as node()?})", "trigger":"fn.localName", "description":"(arg as node()?)"}, {"content":"fn.namespaceUri()", "trigger":"fn.namespaceUri", "description":"()"}, {"content":"fn.namespaceUri(${1:arg as node()?})", "trigger":"fn.namespaceUri", "description":"(arg as node()?)"}, {"content":"fn.number()", "trigger":"fn.number", "description":"()"}, {"content":"fn.number(${1:arg as xs:anyAtomicType?})", "trigger":"fn.number", "description":"(arg as xs:anyAtomicType?)"}, {"content":"fn.lang(${1:testlang as xs:string?})", "trigger":"fn.lang", "description":"(testlang as xs:string?)"}, {"content":"fn.lang(${1:testlang as xs:string?}, ${2:node as node()})", "trigger":"fn.lang", "description":"(testlang as xs:string?, node as node())"}, {"content":"fn.root()", "trigger":"fn.root", "description":"()"}, {"content":"fn.root(${1:arg as node()?})", "trigger":"fn.root", "description":"(arg as node()?)"}, {"content":"fn.generateId()", "trigger":"fn.generateId", "description":"()"}, {"content":"fn.generateId(${1:node as node()?})", "trigger":"fn.generateId", "description":"(node as node()?)"}, {"content":"fn.abs(${1:arg as numeric?})", "trigger":"fn.abs", "description":"(arg as numeric?)"}, {"content":"fn.ceiling(${1:arg as numeric?})", "trigger":"fn.ceiling", "description":"(arg as numeric?)"}, {"content":"fn.floor(${1:arg as numeric?})", "trigger":"fn.floor", "description":"(arg as numeric?)"}, {"content":"fn.round(${1:arg as numeric?})", "trigger":"fn.round", "description":"(arg as numeric?)"}, {"content":"fn.roundHalfToEven(${1:arg as numeric?})", "trigger":"fn.roundHalfToEven", "description":"(arg as numeric?)"}, {"content":"fn.roundHalfToEven(${1:arg as numeric?}, ${2:precision as xs:integer})", "trigger":"fn.roundHalfToEven", "description":"(arg as numeric?, precision as xs:integer)"}, {"content":"cts.indexOrder(${1:index as cts:reference})", "trigger":"cts.indexOrder", "description":"(index as cts:reference)"}, {"content":"cts.indexOrder(${1:index as cts:reference}, ${2:options as xs:string*})", "trigger":"cts.indexOrder", "description":"(index as cts:reference, options as xs:string*)"}, {"content":"cts.scoreOrder()", "trigger":"cts.scoreOrder", "description":"()"}, {"content":"cts.scoreOrder(${1:options as xs:string*})", "trigger":"cts.scoreOrder", "description":"(options as xs:string*)"}, {"content":"cts.fitnessOrder()", "trigger":"cts.fitnessOrder", "description":"()"}, {"content":"cts.fitnessOrder(${1:options as xs:string*})", "trigger":"cts.fitnessOrder", "description":"(options as xs:string*)"}, {"content":"cts.confidenceOrder()", "trigger":"cts.confidenceOrder", "description":"()"}, {"content":"cts.confidenceOrder(${1:options as xs:string*})", "trigger":"cts.confidenceOrder", "description":"(options as xs:string*)"}, {"content":"cts.qualityOrder()", "trigger":"cts.qualityOrder", "description":"()"}, {"content":"cts.qualityOrder(${1:options as xs:string*})", "trigger":"cts.qualityOrder", "description":"(options as xs:string*)"}, {"content":"cts.documentOrder()", "trigger":"cts.documentOrder", "description":"()"}, {"content":"cts.documentOrder(${1:options as xs:string*})", "trigger":"cts.documentOrder", "description":"(options as xs:string*)"}, {"content":"cts.unordered()", "trigger":"cts.unordered", "description":"()"}, {"content":"pkg.create(${1:pkgname as String})", "trigger":"pkg.create", "description":"(pkgname as String)"}, {"content":"pkg.create(${1:pkgname as String}, ${2:pkgbody as node()})", "trigger":"pkg.create", "description":"(pkgname as String, pkgbody as node())"}, {"content":"pkg.exists(${1:pkgname as String})", "trigger":"pkg.exists", "description":"(pkgname as String)"}, {"content":"pkg.getPackageList()", "trigger":"pkg.getPackageList", "description":"()"}, {"content":"pkg.getPackageList(${1:start as xs:unsignedLong})", "trigger":"pkg.getPackageList", "description":"(start as xs:unsignedLong)"}, {"content":"pkg.getPackageList(${1:start as xs:unsignedLong}, ${2:pageLength as xs:unsignedLong})", "trigger":"pkg.getPackageList", "description":"(start as xs:unsignedLong, pageLength as xs:unsignedLong)"}, {"content":"pkg.installable(${1:pkgname as String})", "trigger":"pkg.installable", "description":"(pkgname as String)"}, {"content":"pkg.install(${1:pkgname as String})", "trigger":"pkg.install", "description":"(pkgname as String)"}, {"content":"pkg.valid(${1:pkgname as String})", "trigger":"pkg.valid", "description":"(pkgname as String)"}, {"content":"pkg.errors(${1:pkgname as String})", "trigger":"pkg.errors", "description":"(pkgname as String)"}, {"content":"pkg.revert(${1:ticket-id as String})", "trigger":"pkg.revert", "description":"(ticket-id as String)"}, {"content":"pkg.databaseConfiguration(${1:database as String})", "trigger":"pkg.databaseConfiguration", "description":"(database as String)"}, {"content":"pkg.putDatabase(${1:pkgname as String}, ${2:dbxml as element(db:package-database)})", "trigger":"pkg.putDatabase", "description":"(pkgname as String, dbxml as element(db:package-database))"}, {"content":"pkg.getDatabase(${1:pkgname as String}, ${2:database as String})", "trigger":"pkg.getDatabase", "description":"(pkgname as String, database as String)"}, {"content":"pkg.removeDatabase(${1:pkgname as String}, ${2:database as String})", "trigger":"pkg.removeDatabase", "description":"(pkgname as String, database as String)"}, {"content":"pkg.getDatabaseList(${1:pkgname as String})", "trigger":"pkg.getDatabaseList", "description":"(pkgname as String)"}, {"content":"pkg.getDatabaseList(${1:pkgname as String}, ${2:start as xs:unsignedLong})", "trigger":"pkg.getDatabaseList", "description":"(pkgname as String, start as xs:unsignedLong)"}, {"content":"pkg.getDatabaseList(${1:pkgname as String}, ${2:start as xs:unsignedLong}, ${3:pageLength as xs:unsignedLong})", "trigger":"pkg.getDatabaseList", "description":"(pkgname as String, start as xs:unsignedLong, pageLength as xs:unsignedLong)"}, {"content":"pkg.serverConfiguration(${1:group as String}, ${2:server as String})", "trigger":"pkg.serverConfiguration", "description":"(group as String, server as String)"}, {"content":"pkg.serverConfiguration(${1:group as String}, ${2:server as String}, ${3:include-modules as Boolean})", "trigger":"pkg.serverConfiguration", "description":"(group as String, server as String, include-modules as Boolean)"}, {"content":"pkg.putServer(${1:pkgname as String}, ${2:srvxml as element()})", "trigger":"pkg.putServer", "description":"(pkgname as String, srvxml as element())"}, {"content":"pkg.getServer(${1:pkgname as String}, ${2:group as String}, ${3:server as String})", "trigger":"pkg.getServer", "description":"(pkgname as String, group as String, server as String)"}, {"content":"pkg.removeServer(${1:pkgname as String}, ${2:group as String}, ${3:server as String})", "trigger":"pkg.removeServer", "description":"(pkgname as String, group as String, server as String)"}, {"content":"pkg.getServerList(${1:pkgname as String})", "trigger":"pkg.getServerList", "description":"(pkgname as String)"}, {"content":"pkg.getServerList(${1:pkgname as String}, ${2:start as xs:unsignedLong})", "trigger":"pkg.getServerList", "description":"(pkgname as String, start as xs:unsignedLong)"}, {"content":"pkg.getServerList(${1:pkgname as String}, ${2:start as xs:unsignedLong}, ${3:pageLength as xs:unsignedLong})", "trigger":"pkg.getServerList", "description":"(pkgname as String, start as xs:unsignedLong, pageLength as xs:unsignedLong)"}, {"content":"pkg.getPackage(${1:pkgname as String})", "trigger":"pkg.getPackage", "description":"(pkgname as String)"}, {"content":"pkg.getPackage(${1:pkgname as String}, ${2:mimetype as xs:string?})", "trigger":"pkg.getPackage", "description":"(pkgname as String, mimetype as xs:string?)"}, {"content":"pkg.delete(${1:pkgname as String})", "trigger":"pkg.delete", "description":"(pkgname as String)"}, {"content":"pkg.differences(${1:pkgname as String})", "trigger":"pkg.differences", "description":"(pkgname as String)"}, {"content":"pkg.differences(${1:pkgname as String}, ${2:only-diffs as Boolean})", "trigger":"pkg.differences", "description":"(pkgname as String, only-diffs as Boolean)"}, {"content":"pkg.putModules(${1:pkgname as String}, ${2:group as String}, ${3:server as String})", "trigger":"pkg.putModules", "description":"(pkgname as String, group as String, server as String)"}, {"content":"pkg.getModules(${1:pkgname as String}, ${2:group as String}, ${3:server as String})", "trigger":"pkg.getModules", "description":"(pkgname as String, group as String, server as String)"}, {"content":"pkg.removeModules(${1:pkgname as String}, ${2:group as String}, ${3:server as String})", "trigger":"pkg.removeModules", "description":"(pkgname as String, group as String, server as String)"}, {"content":"ooxml.packageUris(${1:package as node()})", "trigger":"ooxml.packageUris", "description":"(package as node())"}, {"content":"ooxml.packageParts(${1:package as node()})", "trigger":"ooxml.packageParts", "description":"(package as node())"}, {"content":"ooxml.packagePartsInsert(${1:directory as xs:string?}, ${2:package-uris as xs:string*}, ${3:package-parts as node()*})", "trigger":"ooxml.packagePartsInsert", "description":"(directory as xs:string?, package-uris as xs:string*, package-parts as node()*)"}, {"content":"ooxml.packagePartsInsert(${1:directory as xs:string?}, ${2:package-uris as xs:string*}, ${3:package-parts as node()*}, ${4:permissions as item()*})", "trigger":"ooxml.packagePartsInsert", "description":"(directory as xs:string?, package-uris as xs:string*, package-parts as node()*, permissions as item()*)"}, {"content":"ooxml.packagePartsInsert(${1:directory as xs:string?}, ${2:package-uris as xs:string*}, ${3:package-parts as node()*}, ${4:permissions as item()*}, ${5:collections as xs:string*})", "trigger":"ooxml.packagePartsInsert", "description":"(directory as xs:string?, package-uris as xs:string*, package-parts as node()*, permissions as item()*, collections as xs:string*)"}, {"content":"ooxml.packagePartsInsert(${1:directory as xs:string?}, ${2:package-uris as xs:string*}, ${3:package-parts as node()*}, ${4:permissions as item()*}, ${5:collections as xs:string*}, ${6:quality as xs:int?})", "trigger":"ooxml.packagePartsInsert", "description":"(directory as xs:string?, package-uris as xs:string*, package-parts as node()*, permissions as item()*, collections as xs:string*, quality as xs:int?)"}, {"content":"ooxml.packagePartsInsert(${1:directory as xs:string?}, ${2:package-uris as xs:string*}, ${3:package-parts as node()*}, ${4:permissions as item()*}, ${5:collections as xs:string*}, ${6:quality as xs:int?}, ${7:forest-ids as xs:unsignedLong*})", "trigger":"ooxml.packagePartsInsert", "description":"(directory as xs:string?, package-uris as xs:string*, package-parts as node()*, permissions as item()*, collections as xs:string*, quality as xs:int?, forest-ids as xs:unsignedLong*)"}, {"content":"manage./manage/v2/packages(${1:start as string}, ${2:pageLength as string}, ${3:format as string})", "trigger":"manage./manage/v2/packages", "description":"(start as string, pageLength as string, format as string)"}, {"content":"manage./manage/v2/packages(${1:pkgname as string}, ${2:format as string})", "trigger":"manage./manage/v2/packages", "description":"(pkgname as string, format as string)"}, {"content":"manage./manage/v2/packages/{pkgname}()", "trigger":"manage./manage/v2/packages/{pkgname}", "description":"()"}, {"content":"manage./manage/v2/packages/{pkgname}(${1:view as string}, ${2:filename as string}, ${3:format as string})", "trigger":"manage./manage/v2/packages/{pkgname}", "description":"(view as string, filename as string, format as string)"}, {"content":"manage./manage/v2/packages/{pkgname}(${1:format as string})", "trigger":"manage./manage/v2/packages/{pkgname}", "description":"(format as string)"}, {"content":"manage./manage/v2/packages/{pkgname}()", "trigger":"manage./manage/v2/packages/{pkgname}", "description":"()"}, {"content":"manage./manage/v2/packages/{pkgname}/databases(${1:start as string}, ${2:pageLength as string}, ${3:format as string})", "trigger":"manage./manage/v2/packages/{pkgname}/databases", "description":"(start as string, pageLength as string, format as string)"}, {"content":"manage./manage/v2/packages/{pkgname}/databases/{name}()", "trigger":"manage./manage/v2/packages/{pkgname}/databases/{name}", "description":"()"}, {"content":"manage./manage/v2/packages/{pkgname}/databases/{name}(${1:format as string})", "trigger":"manage./manage/v2/packages/{pkgname}/databases/{name}", "description":"(format as string)"}, {"content":"manage./manage/v2/packages/{pkgname}/databases/{name}(${1:format as string})", "trigger":"manage./manage/v2/packages/{pkgname}/databases/{name}", "description":"(format as string)"}, {"content":"manage./manage/v2/packages/{pkgname}/databases/{name}()", "trigger":"manage./manage/v2/packages/{pkgname}/databases/{name}", "description":"()"}, {"content":"manage./manage/v2/packages/{pkgname}/servers(${1:start as string}, ${2:pageLength as string}, ${3:format as string})", "trigger":"manage./manage/v2/packages/{pkgname}/servers", "description":"(start as string, pageLength as string, format as string)"}, {"content":"manage./manage/v2/packages/{pkgname}/servers/{name}(${1:group-id={group-id} as string})", "trigger":"manage./manage/v2/packages/{pkgname}/servers/{name}", "description":"(group-id={group-id} as string)"}, {"content":"manage./manage/v2/packages/{pkgname}/servers/{name}(${1:group-id={group-id} as string}, ${2:format as string}, ${3:modules as string})", "trigger":"manage./manage/v2/packages/{pkgname}/servers/{name}", "description":"(group-id={group-id} as string, format as string, modules as string)"}, {"content":"manage./manage/v2/packages/{pkgname}/servers/{name}(${1:group-id={group-id} as string}, ${2:format as string}, ${3:modules as string})", "trigger":"manage./manage/v2/packages/{pkgname}/servers/{name}", "description":"(group-id={group-id} as string, format as string, modules as string)"}, {"content":"manage./manage/v2/packages/{pkgname}/servers/{name}(${1:group-id={group-id} as string}, ${2:modules as string})", "trigger":"manage./manage/v2/packages/{pkgname}/servers/{name}", "description":"(group-id={group-id} as string, modules as string)"}, {"content":"manage./manage/v2/packages/{pkgname}/install(${1:format as string})", "trigger":"manage./manage/v2/packages/{pkgname}/install", "description":"(format as string)"}, {"content":"manage./manage/v2/tickets/{ticketnumber}/revert()", "trigger":"manage./manage/v2/tickets/{ticketnumber}/revert", "description":"()"}, {"content":"pdf.clean(${1:doc as node()?}, ${2:toc as element()?})", "trigger":"pdf.clean", "description":"(doc as node()?, toc as element()?)"}, {"content":"pdf.getToc(${1:uri as String})", "trigger":"pdf.getToc", "description":"(uri as String)"}, {"content":"pdf.makeToc(${1:toc as element()?})", "trigger":"pdf.makeToc", "description":"(toc as element()?)"}, {"content":"pdf.insertTocHeaders(${1:doc as node()?}, ${2:toc as element()?})", "trigger":"pdf.insertTocHeaders", "description":"(doc as node()?, toc as element()?)"}, {"content":"cts.periodCompare(${1:period-1 as cts:period}, ${2:operator as String}, ${3:period-2 as cts:period})", "trigger":"cts.periodCompare", "description":"(period-1 as cts:period, operator as String, period-2 as cts:period)"}, {"content":"temporal.documentPeriod(${1:temporal-collection as String}, ${2:axis as String}, ${3:root as node()})", "trigger":"temporal.documentPeriod", "description":"(temporal-collection as String, axis as String, root as node())"}, {"content":"temporal.getLsqt(${1:temporal-collection as String})", "trigger":"temporal.getLsqt", "description":"(temporal-collection as String)"}, {"content":"temporal.getUseLsqt(${1:temporal-collection as String})", "trigger":"temporal.getUseLsqt", "description":"(temporal-collection as String)"}, {"content":"temporal.setUseLsqt(${1:temporal-collection as String}, ${2:on as Boolean})", "trigger":"temporal.setUseLsqt", "description":"(temporal-collection as String, on as Boolean)"}, {"content":"temporal.advanceLsqt(${1:temporal-collection as String}, ${2:lag as String})", "trigger":"temporal.advanceLsqt", "description":"(temporal-collection as String, lag as String)"}, {"content":"temporal.getLsqtAutomation(${1:temporal-collection as String})", "trigger":"temporal.getLsqtAutomation", "description":"(temporal-collection as String)"}, {"content":"temporal.getLsqtAutomationPeriod(${1:temporal-collection as String})", "trigger":"temporal.getLsqtAutomationPeriod", "description":"(temporal-collection as String)"}, {"content":"temporal.getLsqtAutomationLag(${1:temporal-collection as String})", "trigger":"temporal.getLsqtAutomationLag", "description":"(temporal-collection as String)"}, {"content":"temporal.setLsqtAutomation(${1:temporal-collection as String}, ${2:on as Boolean})", "trigger":"temporal.setLsqtAutomation", "description":"(temporal-collection as String, on as Boolean)"}, {"content":"temporal.setLsqtAutomation(${1:temporal-collection as String}, ${2:on as Boolean}, ${3:period as xs:unsignedInt})", "trigger":"temporal.setLsqtAutomation", "description":"(temporal-collection as String, on as Boolean, period as xs:unsignedInt)"}, {"content":"temporal.setLsqtAutomation(${1:temporal-collection as String}, ${2:on as Boolean}, ${3:period as xs:unsignedInt}, ${4:lag as xs:unsignedInt})", "trigger":"temporal.setLsqtAutomation", "description":"(temporal-collection as String, on as Boolean, period as xs:unsignedInt, lag as xs:unsignedInt)"}, {"content":"p.insert(${1:pipeline-node as node()})", "trigger":"p.insert", "description":"(pipeline-node as node())"}, {"content":"p.create(${1:name as String}, ${2:description as String}, ${3:success-action as element(p:action)?}, ${4:failure-action as element(p:action)?}, ${5:status-transitions as element(p:status-transition)*}, ${6:state-transitions as element(p:state-transition)*})", "trigger":"p.create", "description":"(name as String, description as String, success-action as element(p:action)?, failure-action as element(p:action)?, status-transitions as element(p:status-transition)*, state-transitions as element(p:state-transition)*)"}, {"content":"p.remove(${1:pipeline-name as String})", "trigger":"p.remove", "description":"(pipeline-name as String)"}, {"content":"p.get(${1:pipeline-name as String})", "trigger":"p.get", "description":"(pipeline-name as String)"}, {"content":"p.getById(${1:pipeline-id as xs:unsignedLong})", "trigger":"p.getById", "description":"(pipeline-id as xs:unsignedLong)"}, {"content":"p.collection()", "trigger":"p.collection", "description":"()"}, {"content":"p.pipelines()", "trigger":"p.pipelines", "description":"()"}, {"content":"p.stateTransition(${1:state as xs:anyURI}, ${2:description as String}, ${3:on-success as xs:anyURI?}, ${4:on-failure as xs:anyURI?}, ${5:priority as xs:unsignedLong?}, ${6:default-action as element(p:action)?}, ${7:rules as element(p:execute)*})", "trigger":"p.stateTransition", "description":"(state as xs:anyURI, description as String, on-success as xs:anyURI?, on-failure as xs:anyURI?, priority as xs:unsignedLong?, default-action as element(p:action)?, rules as element(p:execute)*)"}, {"content":"p.statusTransition(${1:status as String}, ${2:description as String}, ${3:on-success as xs:anyURI?}, ${4:on-failure as xs:anyURI?}, ${5:priority as xs:unsignedLong?}, ${6:default-action as element(p:action)?}, ${7:rules as element(p:execute)*})", "trigger":"p.statusTransition", "description":"(status as String, description as String, on-success as xs:anyURI?, on-failure as xs:anyURI?, priority as xs:unsignedLong?, default-action as element(p:action)?, rules as element(p:execute)*)"}, {"content":"p.execute(${1:condition as element(p:condition)?}, ${2:action as element(p:action)?}, ${3:description as xs:string?})", "trigger":"p.execute", "description":"(condition as element(p:condition)?, action as element(p:action)?, description as xs:string?)"}, {"content":"p.condition(${1:module as String}, ${2:description as xs:string?}, ${3:options as element()?})", "trigger":"p.condition", "description":"(module as String, description as xs:string?, options as element()?)"}, {"content":"p.action(${1:module as String}, ${2:description as xs:string?}, ${3:options as element()?})", "trigger":"p.action", "description":"(module as String, description as xs:string?, options as element()?)"}, {"content":"pki.createTemplate(${1:name as String}, ${2:description as String}, ${3:key-type as xs:string?}, ${4:key-options as element()?}, ${5:csr as element(x509:req)})", "trigger":"pki.createTemplate", "description":"(name as String, description as String, key-type as xs:string?, key-options as element()?, csr as element(x509:req))"}, {"content":"pki.insertTemplate(${1:template as element(pki:template)})", "trigger":"pki.insertTemplate", "description":"(template as element(pki:template))"}, {"content":"pki.deleteCertificate(${1:certificate-id as xs:unsignedLong})", "trigger":"pki.deleteCertificate", "description":"(certificate-id as xs:unsignedLong)"}, {"content":"pki.deleteTemplate(${1:template-id as xs:unsignedLong})", "trigger":"pki.deleteTemplate", "description":"(template-id as xs:unsignedLong)"}, {"content":"pki.templateGetId(${1:template as element(pki:template)})", "trigger":"pki.templateGetId", "description":"(template as element(pki:template))"}, {"content":"pki.templateGetName(${1:template as element(pki:template)})", "trigger":"pki.templateGetName", "description":"(template as element(pki:template))"}, {"content":"pki.templateSetName(${1:template as element(pki:template)}, ${2:name as String})", "trigger":"pki.templateSetName", "description":"(template as element(pki:template), name as String)"}, {"content":"pki.templateGetDescription(${1:template as element(pki:template)})", "trigger":"pki.templateGetDescription", "description":"(template as element(pki:template))"}, {"content":"pki.templateSetDescription(${1:template as element(pki:template)}, ${2:description as String})", "trigger":"pki.templateSetDescription", "description":"(template as element(pki:template), description as String)"}, {"content":"pki.templateGetKeyType(${1:template as element(pki:template)})", "trigger":"pki.templateGetKeyType", "description":"(template as element(pki:template))"}, {"content":"pki.templateSetKeyType(${1:template as element(pki:template)}, ${2:key-type as String})", "trigger":"pki.templateSetKeyType", "description":"(template as element(pki:template), key-type as String)"}, {"content":"pki.templateGetVersion(${1:template as element(pki:template)})", "trigger":"pki.templateGetVersion", "description":"(template as element(pki:template))"}, {"content":"pki.templateGetKeyOptions(${1:template as element(pki:template)})", "trigger":"pki.templateGetKeyOptions", "description":"(template as element(pki:template))"}, {"content":"pki.templateSetKeyOptions(${1:template as element(pki:template)}, ${2:key-options as element(pki:key-options)})", "trigger":"pki.templateSetKeyOptions", "description":"(template as element(pki:template), key-options as element(pki:key-options))"}, {"content":"pki.templateGetRequest(${1:template as element(pki:template)})", "trigger":"pki.templateGetRequest", "description":"(template as element(pki:template))"}, {"content":"pki.templateSetRequest(${1:template as element(pki:template)}, ${2:req as element(x509:req)})", "trigger":"pki.templateSetRequest", "description":"(template as element(pki:template), req as element(x509:req))"}, {"content":"pki.getTemplateIds()", "trigger":"pki.getTemplateIds", "description":"()"}, {"content":"pki.getTemplate(${1:template-id as xs:unsignedLong*})", "trigger":"pki.getTemplate", "description":"(template-id as xs:unsignedLong*)"}, {"content":"pki.generateCertificateRequest(${1:template-id as xs:unsignedLong}, ${2:common-name as String}, ${3:dns-name as xs:string?}, ${4:ip-addr as xs:string?})", "trigger":"pki.generateCertificateRequest", "description":"(template-id as xs:unsignedLong, common-name as String, dns-name as xs:string?, ip-addr as xs:string?)"}, {"content":"pki.getPendingCertificateRequestsPem(${1:template-id as xs:unsignedLong})", "trigger":"pki.getPendingCertificateRequestsPem", "description":"(template-id as xs:unsignedLong)"}, {"content":"pki.getPendingCertificateRequestsXml(${1:template-id as xs:unsignedLong})", "trigger":"pki.getPendingCertificateRequestsXml", "description":"(template-id as xs:unsignedLong)"}, {"content":"pki.insertSignedCertificates(${1:certs as String})", "trigger":"pki.insertSignedCertificates", "description":"(certs as String)"}, {"content":"pki.insertTrustedCertificates(${1:certs as String})", "trigger":"pki.insertTrustedCertificates", "description":"(certs as String)"}, {"content":"pki.getTrustedCertificateIds()", "trigger":"pki.getTrustedCertificateIds", "description":"()"}, {"content":"pki.getCertificate(${1:template-id as xs:unsignedLong}, ${2:common-name as String}, ${3:dns-name as xs:string?}, ${4:ip-addr as xs:string?})", "trigger":"pki.getCertificate", "description":"(template-id as xs:unsignedLong, common-name as String, dns-name as xs:string?, ip-addr as xs:string?)"}, {"content":"pki.insertHostCertificate(${1:template-id as xs:unsignedLong}, ${2:certs as String}, ${3:pkey as String})", "trigger":"pki.insertHostCertificate", "description":"(template-id as xs:unsignedLong, certs as String, pkey as String)"}, {"content":"pki.needCertificate(${1:template-id as xs:unsignedLong}, ${2:common-name as String}, ${3:dns-name as xs:string?}, ${4:ip-addr as xs:string?})", "trigger":"pki.needCertificate", "description":"(template-id as xs:unsignedLong, common-name as String, dns-name as xs:string?, ip-addr as xs:string?)"}, {"content":"pki.getPendingCertificateRequest(${1:template-id as xs:unsignedLong}, ${2:common-name as String}, ${3:dns-name as xs:string?}, ${4:ip-addr as xs:string?})", "trigger":"pki.getPendingCertificateRequest", "description":"(template-id as xs:unsignedLong, common-name as String, dns-name as xs:string?, ip-addr as xs:string?)"}, {"content":"pki.generateTemporaryCertificateIfNecessary(${1:template-id as xs:unsignedLong}, ${2:valid-for as xs:unsignedInt}, ${3:common-name as String}, ${4:dns-name as xs:string?}, ${5:ip-addr as xs:string?})", "trigger":"pki.generateTemporaryCertificateIfNecessary", "description":"(template-id as xs:unsignedLong, valid-for as xs:unsignedInt, common-name as String, dns-name as xs:string?, ip-addr as xs:string?)"}, {"content":"pki.generateTemporaryCertificate(${1:template-id as xs:unsignedLong}, ${2:valid-for as xs:unsignedInt}, ${3:common-name as String}, ${4:dns-name as xs:string?}, ${5:ip-addr as xs:string?})", "trigger":"pki.generateTemporaryCertificate", "description":"(template-id as xs:unsignedLong, valid-for as xs:unsignedInt, common-name as String, dns-name as xs:string?, ip-addr as xs:string?)"}, {"content":"pki.isTemporary(${1:cert as element(pki:certificate)})", "trigger":"pki.isTemporary", "description":"(cert as element(pki:certificate))"}, {"content":"pki.getCertificateXml(${1:template-id as xs:unsignedLong}, ${2:hostname as String})", "trigger":"pki.getCertificateXml", "description":"(template-id as xs:unsignedLong, hostname as String)"}, {"content":"pki.getCertificatesForTemplateXml(${1:template-id as xs:unsignedLong})", "trigger":"pki.getCertificatesForTemplateXml", "description":"(template-id as xs:unsignedLong)"}, {"content":"pki.getCertificatePem(${1:template-id as xs:unsignedLong}, ${2:hostname as String})", "trigger":"pki.getCertificatePem", "description":"(template-id as xs:unsignedLong, hostname as String)"}, {"content":"pki.getTemplateByName(${1:template-name as String})", "trigger":"pki.getTemplateByName", "description":"(template-name as String)"}, {"content":"pki.getTemplateCertificateAuthority(${1:template-id as xs:unsignedLong})", "trigger":"pki.getTemplateCertificateAuthority", "description":"(template-id as xs:unsignedLong)"}, {"content":"pki.generateTemplateCertificateAuthority(${1:template-id as xs:unsignedLong}, ${2:valid-for as xs:unsignedInt})", "trigger":"pki.generateTemplateCertificateAuthority", "description":"(template-id as xs:unsignedLong, valid-for as xs:unsignedInt)"}, {"content":"pki.getCertificates(${1:cert-id as xs:unsignedLong*})", "trigger":"pki.getCertificates", "description":"(cert-id as xs:unsignedLong*)"}, {"content":"pki.getCertificatesForTemplate(${1:template-id as xs:unsignedLong})", "trigger":"pki.getCertificatesForTemplate", "description":"(template-id as xs:unsignedLong)"}, {"content":"pki.templateInUse(${1:template-id as xs:unsignedLong})", "trigger":"pki.templateInUse", "description":"(template-id as xs:unsignedLong)"}, {"content":"pki.insertCertificateRevocationList(${1:url as String}, ${2:crl as item()})", "trigger":"pki.insertCertificateRevocationList", "description":"(url as String, crl as item())"}, {"content":"plugin.plugins(${1:capability as xs:string*})", "trigger":"plugin.plugins", "description":"(capability as xs:string*)"}, {"content":"plugin.plugins(${1:capability as xs:string*}, ${2:scope as String})", "trigger":"plugin.plugins", "description":"(capability as xs:string*, scope as String)"}, {"content":"plugin.enumerate(${1:uri as String})", "trigger":"plugin.enumerate", "description":"(uri as String)"}, {"content":"plugin.enumerate(${1:uri as String}, ${2:scope as String})", "trigger":"plugin.enumerate", "description":"(uri as String, scope as String)"}, {"content":"plugin.capability(${1:capability as String}, ${2:uri as String})", "trigger":"plugin.capability", "description":"(capability as String, uri as String)"}, {"content":"plugin.capability(${1:capability as String}, ${2:uri as String}, ${3:scope as String})", "trigger":"plugin.capability", "description":"(capability as String, uri as String, scope as String)"}, {"content":"plugin.implementations(${1:capability as String})", "trigger":"plugin.implementations", "description":"(capability as String)"}, {"content":"plugin.implementations(${1:capability as String}, ${2:scope as String})", "trigger":"plugin.implementations", "description":"(capability as String, scope as String)"}, {"content":"plugin.register(${1:capabilities as map:map}, ${2:plugin-uri as String})", "trigger":"plugin.register", "description":"(capabilities as map:map, plugin-uri as String)"}, {"content":"plugin.initializeScope(${1:scope as String})", "trigger":"plugin.initializeScope", "description":"(scope as String)"}, {"content":"plugin.flushScope(${1:scope as String})", "trigger":"plugin.flushScope", "description":"(scope as String)"}, {"content":"plugin.flushScope(${1:scope as String}, ${2:pid as xs:string?})", "trigger":"plugin.flushScope", "description":"(scope as String, pid as xs:string?)"}, {"content":"plugin.installFromZip(${1:scope as String}, ${2:zip as binary()})", "trigger":"plugin.installFromZip", "description":"(scope as String, zip as binary())"}, {"content":"plugin.uninstall(${1:scope as String}, ${2:pid as xs:string?})", "trigger":"plugin.uninstall", "description":"(scope as String, pid as xs:string?)"}, {"content":"plugin.asset(${1:pid as String}, ${2:scope as String}, ${3:asset-path as String})", "trigger":"plugin.asset", "description":"(pid as String, scope as String, asset-path as String)"}, {"content":"plugin.assetExists(${1:pid as String}, ${2:scope as String}, ${3:asset-path as String})", "trigger":"plugin.assetExists", "description":"(pid as String, scope as String, asset-path as String)"}, {"content":"plugin.installFromFilesystem(${1:scope as String})", "trigger":"plugin.installFromFilesystem", "description":"(scope as String)"}, {"content":"ppt.clean(${1:uri as String}, ${2:doc as node()?})", "trigger":"ppt.clean", "description":"(uri as String, doc as node()?)"}, {"content":"prof.enable(${1:request-id as xs:unsignedLong})", "trigger":"prof.enable", "description":"(request-id as xs:unsignedLong)"}, {"content":"prof.disable(${1:request-id as xs:unsignedLong})", "trigger":"prof.disable", "description":"(request-id as xs:unsignedLong)"}, {"content":"prof.reset(${1:request-id as xs:unsignedLong})", "trigger":"prof.reset", "description":"(request-id as xs:unsignedLong)"}, {"content":"prof.report(${1:request-id as xs:unsignedLong})", "trigger":"prof.report", "description":"(request-id as xs:unsignedLong)"}, {"content":"prof.allowed(${1:request-id as xs:unsignedLong})", "trigger":"prof.allowed", "description":"(request-id as xs:unsignedLong)"}, {"content":"prof.eval(${1:javascript as String})", "trigger":"prof.eval", "description":"(javascript as String)"}, {"content":"prof.eval(${1:javascript as String}, ${2:vars as item()*})", "trigger":"prof.eval", "description":"(javascript as String, vars as item()*)"}, {"content":"prof.eval(${1:javascript as String}, ${2:vars as item()*}, ${3:vars as Object})", "trigger":"prof.eval", "description":"(javascript as String, vars as item()*, vars as Object)"}, {"content":"prof.eval(${1:javascript as String}, ${2:vars as item()*}, ${3:vars as Object}, ${4:options as (element()|map:map)?})", "trigger":"prof.eval", "description":"(javascript as String, vars as item()*, vars as Object, options as (element()|map:map)?)"}, {"content":"prof.invoke(${1:path as String})", "trigger":"prof.invoke", "description":"(path as String)"}, {"content":"prof.invoke(${1:path as String}, ${2:vars as item()*})", "trigger":"prof.invoke", "description":"(path as String, vars as item()*)"}, {"content":"prof.invoke(${1:path as String}, ${2:vars as item()*}, ${3:options as (element()|map:map)?})", "trigger":"prof.invoke", "description":"(path as String, vars as item()*, options as (element()|map:map)?)"}, {"content":"prof.value(${1:expr as String})", "trigger":"prof.value", "description":"(expr as String)"}, {"content":"prof.xsltEval(${1:stylesheet as node()})", "trigger":"prof.xsltEval", "description":"(stylesheet as node())"}, {"content":"prof.xsltEval(${1:stylesheet as node()}, ${2:input as node()?})", "trigger":"prof.xsltEval", "description":"(stylesheet as node(), input as node()?)"}, {"content":"prof.xsltEval(${1:stylesheet as node()}, ${2:input as node()?}, ${3:params as map:map?})", "trigger":"prof.xsltEval", "description":"(stylesheet as node(), input as node()?, params as map:map?)"}, {"content":"prof.xsltEval(${1:stylesheet as node()}, ${2:input as node()?}, ${3:params as map:map?}, ${4:options as (element()|map:map)?})", "trigger":"prof.xsltEval", "description":"(stylesheet as node(), input as node()?, params as map:map?, options as (element()|map:map)?)"}, {"content":"prof.xsltInvoke(${1:path as String})", "trigger":"prof.xsltInvoke", "description":"(path as String)"}, {"content":"prof.xsltInvoke(${1:path as String}, ${2:input as node()?})", "trigger":"prof.xsltInvoke", "description":"(path as String, input as node()?)"}, {"content":"prof.xsltInvoke(${1:path as String}, ${2:input as node()?}, ${3:params as map:map?})", "trigger":"prof.xsltInvoke", "description":"(path as String, input as node()?, params as map:map?)"}, {"content":"prof.xsltInvoke(${1:path as String}, ${2:input as node()?}, ${3:params as map:map?}, ${4:options as (element()|map:map)?})", "trigger":"prof.xsltInvoke", "description":"(path as String, input as node()?, params as map:map?, options as (element()|map:map)?)"}, {"content":"fn.resolveQname(${1:qname as xs:string?}, ${2:element as element()})", "trigger":"fn.resolveQname", "description":"(qname as xs:string?, element as element())"}, {"content":"fn.QName(${1:paramURI as xs:string?}, ${2:paramQName as String})", "trigger":"fn.QName", "description":"(paramURI as xs:string?, paramQName as String)"}, {"content":"fn.expandedQname(${1:paramURI as xs:string?}, ${2:paramLocal as String})", "trigger":"fn.expandedQname", "description":"(paramURI as xs:string?, paramLocal as String)"}, {"content":"fn.prefixFromQname(${1:arg as xs:QName?})", "trigger":"fn.prefixFromQname", "description":"(arg as xs:QName?)"}, {"content":"fn.localNameFromQname(${1:arg as xs:QName?})", "trigger":"fn.localNameFromQname", "description":"(arg as xs:QName?)"}, {"content":"fn.namespaceUriFromQname(${1:arg as xs:QName?})", "trigger":"fn.namespaceUriFromQname", "description":"(arg as xs:QName?)"}, {"content":"fn.namespaceUriForPrefix(${1:prefix as xs:string?}, ${2:element as element()})", "trigger":"fn.namespaceUriForPrefix", "description":"(prefix as xs:string?, element as element())"}, {"content":"fn.inScopePrefixes(${1:element as element()})", "trigger":"fn.inScopePrefixes", "description":"(element as element())"}, {"content":"rdt.ruleValidate(${1:rule-collection as xs:string*})", "trigger":"rdt.ruleValidate", "description":"(rule-collection as xs:string*)"}, {"content":"rdt.redact(${1:doc as node()*}, ${2:rule-collection as xs:string*})", "trigger":"rdt.redact", "description":"(doc as node()*, rule-collection as xs:string*)"}, {"content":"fn.matches(${1:input as xs:string?}, ${2:pattern as String})", "trigger":"fn.matches", "description":"(input as xs:string?, pattern as String)"}, {"content":"fn.matches(${1:input as xs:string?}, ${2:pattern as String}, ${3:flags as String})", "trigger":"fn.matches", "description":"(input as xs:string?, pattern as String, flags as String)"}, {"content":"sql.like(${1:input as xs:string?}, ${2:pattern as String}, ${3:escape as String})", "trigger":"sql.like", "description":"(input as xs:string?, pattern as String, escape as String)"}, {"content":"sql.glob(${1:input as xs:string?}, ${2:pattern as String})", "trigger":"sql.glob", "description":"(input as xs:string?, pattern as String)"}, {"content":"fn.replace(${1:input as xs:string?}, ${2:pattern as String}, ${3:replacement as String})", "trigger":"fn.replace", "description":"(input as xs:string?, pattern as String, replacement as String)"}, {"content":"fn.replace(${1:input as xs:string?}, ${2:pattern as String}, ${3:replacement as String}, ${4:flags as String})", "trigger":"fn.replace", "description":"(input as xs:string?, pattern as String, replacement as String, flags as String)"}, {"content":"fn.analyzeString(${1:in as xs:string?}, ${2:regex as String})", "trigger":"fn.analyzeString", "description":"(in as xs:string?, regex as String)"}, {"content":"fn.analyzeString(${1:in as xs:string?}, ${2:regex as String}, ${3:flags as String})", "trigger":"fn.analyzeString", "description":"(in as xs:string?, regex as String, flags as String)"}, {"content":"fn.tokenize(${1:input as xs:string?}, ${2:pattern as String})", "trigger":"fn.tokenize", "description":"(input as xs:string?, pattern as String)"}, {"content":"fn.tokenize(${1:input as xs:string?}, ${2:pattern as String}, ${3:flags as String})", "trigger":"fn.tokenize", "description":"(input as xs:string?, pattern as String, flags as String)"}, {"content":"rest.rewrite(${1:options as element(rest:options)}, ${2:match-criteria as xs:string+})", "trigger":"rest.rewrite", "description":"(options as element(rest:options), match-criteria as xs:string+)"}, {"content":"rest.reportError(${1:error as element()})", "trigger":"rest.reportError", "description":"(error as element())"}, {"content":"rest.checkOptions(${1:options as element(rest:options)})", "trigger":"rest.checkOptions", "description":"(options as element(rest:options))"}, {"content":"rest.getRawQueryParams()", "trigger":"rest.getRawQueryParams", "description":"()"}, {"content":"rest.matchingRequest(${1:options as element(rest:options)}, ${2:match-criteria as xs:string+})", "trigger":"rest.matchingRequest", "description":"(options as element(rest:options), match-criteria as xs:string+)"}, {"content":"rest.processRequest(${1:request as element(rest:request)})", "trigger":"rest.processRequest", "description":"(request as element(rest:request))"}, {"content":"rest.checkRequest(${1:options as element(rest:request)})", "trigger":"rest.checkRequest", "description":"(options as element(rest:request))"}, {"content":"rest-client./v1/documents(${1:uri+ as string}, ${2:database? as string}, ${3:category* as string}, ${4:format? as string}, ${5:transform? as string}, ${6:trans:{name}* as string}, ${7:txid? as string})", "trigger":"rest-client./v1/documents", "description":"(uri+ as string, database? as string, category* as string, format? as string, transform? as string, trans:{name}* as string, txid? as string)"}, {"content":"rest-client./v1/documents(${1:category* as string}, ${2:database? as string}, ${3:format? as string}, ${4:txid? as string}, ${5:uri as string})", "trigger":"rest-client./v1/documents", "description":"(category* as string, database? as string, format? as string, txid? as string, uri as string)"}, {"content":"rest-client./v1/documents(${1:uri as string}, ${2:category* as string}, ${3:database? as string}, ${4:format? as string}, ${5:collection* as string}, ${6:quality? as string}, ${7:perm:{role}* as string}, ${8:prop:{name}* as string}, ${9:extract? as string}, ${10:repair? as string}, ${11:transform? as string}, ${12:trans:{name}* as string}, ${13:forest-name? as string}, ${14:txid? as string}, ${15:lang? as string}, ${16:temporal-collection? as string}, ${17:system-time? as string})", "trigger":"rest-client./v1/documents", "description":"(uri as string, category* as string, database? as string, format? as string, collection* as string, quality? as string, perm:{role}* as string, prop:{name}* as string, extract? as string, repair? as string, transform? as string, trans:{name}* as string, forest-name? as string, txid? as string, lang? as string, temporal-collection? as string, system-time? as string)"}, {"content":"rest-client./v1/documents?uri={dbUri}(${1:uri as string}, ${2:category* as string}, ${3:database? as string}, ${4:format? as string}, ${5:txid? as string})", "trigger":"rest-client./v1/documents?uri={dbUri}", "description":"(uri as string, category* as string, database? as string, format? as string, txid? as string)"}, {"content":"rest-client./v1/documents?extension={ext}(${1:extension as string}, ${2:category* as string}, ${3:directory? as string}, ${4:database? as string}, ${5:format? as string}, ${6:collection* as string}, ${7:quality? as string}, ${8:perm:{role}* as string}, ${9:prop:{name}* as string}, ${10:extract? as string}, ${11:repair? as string}, ${12:transform? as string}, ${13:trans:{name}* as string}, ${14:forest-name? as string}, ${15:txid? as string}, ${16:lang? as string})", "trigger":"rest-client./v1/documents?extension={ext}", "description":"(extension as string, category* as string, directory? as string, database? as string, format? as string, collection* as string, quality? as string, perm:{role}* as string, prop:{name}* as string, extract? as string, repair? as string, transform? as string, trans:{name}* as string, forest-name? as string, txid? as string, lang? as string)"}, {"content":"rest-client./v1/documents(${1:database? as string}, ${2:transform? as string}, ${3:trans:{name}* as string}, ${4:txid? as string}, ${5:temporal-collection? as string}, ${6:system-time? as string})", "trigger":"rest-client./v1/documents", "description":"(database? as string, transform? as string, trans:{name}* as string, txid? as string, temporal-collection? as string, system-time? as string)"}, {"content":"rest-client./v1/documents(${1:uri as string}, ${2:category* as string}, ${3:database? as string}, ${4:format? as string}, ${5:txid? as string})", "trigger":"rest-client./v1/documents", "description":"(uri as string, category* as string, database? as string, format? as string, txid? as string)"}, {"content":"rest-client./v1/documents(${1:uri+ as string}, ${2:category* as string}, ${3:database? as string}, ${4:txid? as string}, ${5:temporal-collection? as string}, ${6:system-time? as string})", "trigger":"rest-client./v1/documents", "description":"(uri+ as string, category* as string, database? as string, txid? as string, temporal-collection? as string, system-time? as string)"}, {"content":"rest-client./v1/restApis(${1:database? as string}, ${2:format? as string}, ${3:group? as string})", "trigger":"rest-client./v1/restApis", "description":"(database? as string, format? as string, group? as string)"}, {"content":"rest-client./v1/restApis()", "trigger":"rest-client./v1/restApis", "description":"()"}, {"content":"rest-client./v1/restApis/{name}(${1:format? as string}, ${2:group? as string})", "trigger":"rest-client./v1/restApis/{name}", "description":"(format? as string, group? as string)"}, {"content":"rest-client./v1/restApis/{name}(${1:include* as string}, ${2:group? as string})", "trigger":"rest-client./v1/restApis/{name}", "description":"(include* as string, group? as string)"}, {"content":"rest-client./v1/transactions(${1:name as string}, ${2:timeLimit as string}, ${3:database? as string})", "trigger":"rest-client./v1/transactions", "description":"(name as string, timeLimit as string, database? as string)"}, {"content":"rest-client./v1/transactions/{txid}(${1:format? as string}, ${2:database? as string})", "trigger":"rest-client./v1/transactions/{txid}", "description":"(format? as string, database? as string)"}, {"content":"rest-client./v1/transactions/{txid}(${1:result as string}, ${2:database? as string})", "trigger":"rest-client./v1/transactions/{txid}", "description":"(result as string, database? as string)"}, {"content":"rest-client./v1/config/resources(${1:format? as string}, ${2:refresh? as string})", "trigger":"rest-client./v1/config/resources", "description":"(format? as string, refresh? as string)"}, {"content":"rest-client./v1/config/resources/{name}()", "trigger":"rest-client./v1/config/resources/{name}", "description":"()"}, {"content":"rest-client./v1/config/resources/{name}(${1:provider? as string}, ${2:version? as string}, ${3:title? as string}, ${4:description? as string}, ${5:method* as string}, ${6:method:{name}* as string})", "trigger":"rest-client./v1/config/resources/{name}", "description":"(provider? as string, version? as string, title? as string, description? as string, method* as string, method:{name}* as string)"}, {"content":"rest-client./v1/config/resources/{name}()", "trigger":"rest-client./v1/config/resources/{name}", "description":"()"}, {"content":"rest-client./v1/resources/{name}(${1:database? as string}, ${2:txid? as string}, ${3:rs:{name}* as string})", "trigger":"rest-client./v1/resources/{name}", "description":"(database? as string, txid? as string, rs:{name}* as string)"}, {"content":"rest-client./v1/resources/{name}(${1:database? as string}, ${2:txid? as string}, ${3:rs:{name}* as string})", "trigger":"rest-client./v1/resources/{name}", "description":"(database? as string, txid? as string, rs:{name}* as string)"}, {"content":"rest-client./v1/resources/{name}(${1:database? as string}, ${2:txid? as string}, ${3:rs:{name}* as string})", "trigger":"rest-client./v1/resources/{name}", "description":"(database? as string, txid? as string, rs:{name}* as string)"}, {"content":"rest-client./v1/resources/{name}(${1:database? as string}, ${2:txid? as string}, ${3:rs:{name}* as string})", "trigger":"rest-client./v1/resources/{name}", "description":"(database? as string, txid? as string, rs:{name}* as string)"}, {"content":"rest-client./v1/ext/{directories}(${1:format? as string})", "trigger":"rest-client./v1/ext/{directories}", "description":"(format? as string)"}, {"content":"rest-client./v1/ext/{directories}()", "trigger":"rest-client./v1/ext/{directories}", "description":"()"}, {"content":"rest-client./v1/ext/{directories}/{asset}()", "trigger":"rest-client./v1/ext/{directories}/{asset}", "description":"()"}, {"content":"rest-client./v1/ext/{directories}/{asset}(${1:format? as string}, ${2:perm:{role}* as string})", "trigger":"rest-client./v1/ext/{directories}/{asset}", "description":"(format? as string, perm:{role}* as string)"}, {"content":"rest-client./v1/ext/{directories}/{asset}()", "trigger":"rest-client./v1/ext/{directories}/{asset}", "description":"()"}, {"content":"rest-client./v1/eval(${1:xquery? as string}, ${2:javascript? as string}, ${3:vars? as string}, ${4:database? as string}, ${5:txid? as string})", "trigger":"rest-client./v1/eval", "description":"(xquery? as string, javascript? as string, vars? as string, database? as string, txid? as string)"}, {"content":"rest-client./v1/invoke(${1:module as string}, ${2:vars? as string}, ${3:database? as string}, ${4:txid? as string})", "trigger":"rest-client./v1/invoke", "description":"(module as string, vars? as string, database? as string, txid? as string)"}, {"content":"rest-client./v1/search(${1:q? as string}, ${2:structuredQuery? as string}, ${3:start? as string}, ${4:pageLength? as string}, ${5:options? as string}, ${6:view? as string}, ${7:category* as string}, ${8:database? as string}, ${9:format? as string}, ${10:txid? as string}, ${11:collection* as string}, ${12:directory? as string}, ${13:transform? as string}, ${14:trans:{name}* as string}, ${15:forest-name* as string})", "trigger":"rest-client./v1/search", "description":"(q? as string, structuredQuery? as string, start? as string, pageLength? as string, options? as string, view? as string, category* as string, database? as string, format? as string, txid? as string, collection* as string, directory? as string, transform? as string, trans:{name}* as string, forest-name* as string)"}, {"content":"rest-client./v1/search(${1:q? as string}, ${2:start? as string}, ${3:pageLength? as string}, ${4:options? as string}, ${5:view? as string}, ${6:category* as string}, ${7:database? as string}, ${8:format? as string}, ${9:txid? as string}, ${10:collection* as string}, ${11:directory? as string}, ${12:transform? as string}, ${13:trans:{name}* as string}, ${14:forest-name* as string})", "trigger":"rest-client./v1/search", "description":"(q? as string, start? as string, pageLength? as string, options? as string, view? as string, category* as string, database? as string, format? as string, txid? as string, collection* as string, directory? as string, transform? as string, trans:{name}* as string, forest-name* as string)"}, {"content":"rest-client./v1/search(${1:database? as string}, ${2:txid? as string}, ${3:collection? as string}, ${4:directory? as string})", "trigger":"rest-client./v1/search", "description":"(database? as string, txid? as string, collection? as string, directory? as string)"}, {"content":"rest-client./v1/keyvalue(${1:key? as string}, ${2:element? as string}, ${3:attribute? as string}, ${4:value as string}, ${5:start? as string}, ${6:pageLength? as string}, ${7:options? as string}, ${8:view? as string}, ${9:format? as string}, ${10:txid? as string}, ${11:collection* as string}, ${12:directory? as string})", "trigger":"rest-client./v1/keyvalue", "description":"(key? as string, element? as string, attribute? as string, value as string, start? as string, pageLength? as string, options? as string, view? as string, format? as string, txid? as string, collection* as string, directory? as string)"}, {"content":"rest-client./v1/qbe(${1:query? as string}, ${2:start? as string}, ${3:pageLength? as string}, ${4:options? as string}, ${5:category* as string}, ${6:database? as string}, ${7:view? as string}, ${8:format? as string}, ${9:txid? as string}, ${10:collection* as string}, ${11:directory? as string}, ${12:transform? as string}, ${13:trans:{name}* as string}, ${14:forest-name* as string})", "trigger":"rest-client./v1/qbe", "description":"(query? as string, start? as string, pageLength? as string, options? as string, category* as string, database? as string, view? as string, format? as string, txid? as string, collection* as string, directory? as string, transform? as string, trans:{name}* as string, forest-name* as string)"}, {"content":"rest-client./v1/qbe(${1:start? as string}, ${2:pageLength? as string}, ${3:options? as string}, ${4:category* as string}, ${5:database? as string}, ${6:view* as string}, ${7:format? as string}, ${8:txid? as string}, ${9:collection* as string}, ${10:directory? as string}, ${11:transform? as string}, ${12:trans:{name}* as string}, ${13:forest-name* as string})", "trigger":"rest-client./v1/qbe", "description":"(start? as string, pageLength? as string, options? as string, category* as string, database? as string, view* as string, format? as string, txid? as string, collection* as string, directory? as string, transform? as string, trans:{name}* as string, forest-name* as string)"}, {"content":"rest-client./v1/values(${1:database? as string}, ${2:format? as string}, ${3:options? as string})", "trigger":"rest-client./v1/values", "description":"(database? as string, format? as string, options? as string)"}, {"content":"rest-client./v1/values/{name}(${1:q? as string}, ${2:structuredQuery? as string}, ${3:options? as string}, ${4:database? as string}, ${5:view? as string}, ${6:format? as string}, ${7:collection* as string}, ${8:directory? as string}, ${9:direction? as string}, ${10:frequency? as string}, ${11:limit? as string}, ${12:start? as string}, ${13:pageLength? as string}, ${14:aggregate? as string}, ${15:aggregatePath? as string}, ${16:transform? as string}, ${17:trans:{name}* as string}, ${18:txid? as string}, ${19:forest-name* as string})", "trigger":"rest-client./v1/values/{name}", "description":"(q? as string, structuredQuery? as string, options? as string, database? as string, view? as string, format? as string, collection* as string, directory? as string, direction? as string, frequency? as string, limit? as string, start? as string, pageLength? as string, aggregate? as string, aggregatePath? as string, transform? as string, trans:{name}* as string, txid? as string, forest-name* as string)"}, {"content":"rest-client./v1/values/{name}(${1:q? as string}, ${2:options? as string}, ${3:database? as string}, ${4:view? as string}, ${5:format? as string}, ${6:txid? as string}, ${7:direction? as string}, ${8:directory? as string}, ${9:frequency? as string}, ${10:limit? as string}, ${11:start? as string}, ${12:pageLength? as string}, ${13:aggregate? as string}, ${14:aggregatePath? as string}, ${15:transform? as string}, ${16:trans:{name}* as string}, ${17:forest-name* as string})", "trigger":"rest-client./v1/values/{name}", "description":"(q? as string, options? as string, database? as string, view? as string, format? as string, txid? as string, direction? as string, directory? as string, frequency? as string, limit? as string, start? as string, pageLength? as string, aggregate? as string, aggregatePath? as string, transform? as string, trans:{name}* as string, forest-name* as string)"}, {"content":"rest-client./v1/suggest(${1:partial-q? as string}, ${2:q* as string}, ${3:limit? as string}, ${4:cursor-position? as string}, ${5:options? as string}, ${6:database? as string}, ${7:format? as string})", "trigger":"rest-client./v1/suggest", "description":"(partial-q? as string, q* as string, limit? as string, cursor-position? as string, options? as string, database? as string, format? as string)"}, {"content":"rest-client./v1/suggest(${1:partial-q? as string}, ${2:q* as string}, ${3:limit? as string}, ${4:cursor-position? as string}, ${5:options? as string}, ${6:database? as string}, ${7:format? as string})", "trigger":"rest-client./v1/suggest", "description":"(partial-q? as string, q* as string, limit? as string, cursor-position? as string, options? as string, database? as string, format? as string)"}, {"content":"rest-client./v1/alert/rules(${1:database? as string}, ${2:format? as string})", "trigger":"rest-client./v1/alert/rules", "description":"(database? as string, format? as string)"}, {"content":"rest-client./v1/alert/rules/{name}(${1:database? as string}, ${2:format? as string})", "trigger":"rest-client./v1/alert/rules/{name}", "description":"(database? as string, format? as string)"}, {"content":"rest-client./v1/alert/rules/{name}(${1:database? as string}, ${2:format? as string})", "trigger":"rest-client./v1/alert/rules/{name}", "description":"(database? as string, format? as string)"}, {"content":"rest-client./v1/alert/rules/{name}(${1:database? as string})", "trigger":"rest-client./v1/alert/rules/{name}", "description":"(database? as string)"}, {"content":"rest-client./v1/alert/rules/{name}(${1:database? as string})", "trigger":"rest-client./v1/alert/rules/{name}", "description":"(database? as string)"}, {"content":"rest-client./v1/alert/match(${1:uri* as string}, ${2:q? as string}, ${3:structuredQuery? as string}, ${4:options? as string}, ${5:rule* as string}, ${6:start? as string}, ${7:pageLength? as string}, ${8:database? as string}, ${9:format? as string})", "trigger":"rest-client./v1/alert/match", "description":"(uri* as string, q? as string, structuredQuery? as string, options? as string, rule* as string, start? as string, pageLength? as string, database? as string, format? as string)"}, {"content":"rest-client./v1/alert/match(${1:options? as string}, ${2:start? as string}, ${3:pageLength? as string}, ${4:database? as string}, ${5:format? as string})", "trigger":"rest-client./v1/alert/match", "description":"(options? as string, start? as string, pageLength? as string, database? as string, format? as string)"}, {"content":"rest-client./v1/config/query(${1:format? as string})", "trigger":"rest-client./v1/config/query", "description":"(format? as string)"}, {"content":"rest-client./v1/config/query()", "trigger":"rest-client./v1/config/query", "description":"()"}, {"content":"rest-client./v1/config/query/(default|{name})(${1:format? as string})", "trigger":"rest-client./v1/config/query/(default|{name})", "description":"(format? as string)"}, {"content":"rest-client./v1/config/query/(default|{name})(${1:format? as string})", "trigger":"rest-client./v1/config/query/(default|{name})", "description":"(format? as string)"}, {"content":"rest-client./v1/config/query/(default|{name})(${1:format? as string})", "trigger":"rest-client./v1/config/query/(default|{name})", "description":"(format? as string)"}, {"content":"rest-client./v1/config/query/(default|{name})()", "trigger":"rest-client./v1/config/query/(default|{name})", "description":"()"}, {"content":"rest-client./v1/config/query/(default|{name})/{childElement}(${1:format? as string})", "trigger":"rest-client./v1/config/query/(default|{name})/{childElement}", "description":"(format? as string)"}, {"content":"rest-client./v1/config/query/(default|{name})/{childElement}(${1:format? as string})", "trigger":"rest-client./v1/config/query/(default|{name})/{childElement}", "description":"(format? as string)"}, {"content":"rest-client./v1/config/query/(default|{name})/{childElement}(${1:format? as string})", "trigger":"rest-client./v1/config/query/(default|{name})/{childElement}", "description":"(format? as string)"}, {"content":"rest-client./v1/config/query/(default|{name})/{childElement}()", "trigger":"rest-client./v1/config/query/(default|{name})/{childElement}", "description":"()"}, {"content":"rest-client./v1/config/properties(${1:format? as string})", "trigger":"rest-client./v1/config/properties", "description":"(format? as string)"}, {"content":"rest-client./v1/config/properties(${1:format? as string})", "trigger":"rest-client./v1/config/properties", "description":"(format? as string)"}, {"content":"rest-client./v1/config/properties()", "trigger":"rest-client./v1/config/properties", "description":"()"}, {"content":"rest-client./v1/config/properties/{propertyName}(${1:format? as string})", "trigger":"rest-client./v1/config/properties/{propertyName}", "description":"(format? as string)"}, {"content":"rest-client./v1/config/properties/(propertyName)(${1:format? as string})", "trigger":"rest-client./v1/config/properties/(propertyName)", "description":"(format? as string)"}, {"content":"rest-client./v1/config/properties/{propertyName}()", "trigger":"rest-client./v1/config/properties/{propertyName}", "description":"()"}, {"content":"rest-client./v1/config/transforms(${1:format? as string}, ${2:refresh? as string})", "trigger":"rest-client./v1/config/transforms", "description":"(format? as string, refresh? as string)"}, {"content":"rest-client./v1/config/transforms/{name}()", "trigger":"rest-client./v1/config/transforms/{name}", "description":"()"}, {"content":"rest-client./v1/config/transforms/{name}(${1:title? as string}, ${2:provider? as string}, ${3:version? as string}, ${4:description? as string}, ${5:trans:{name}* as string}, ${6:format? as string})", "trigger":"rest-client./v1/config/transforms/{name}", "description":"(title? as string, provider? as string, version? as string, description? as string, trans:{name}* as string, format? as string)"}, {"content":"rest-client./v1/config/transforms/{name}()", "trigger":"rest-client./v1/config/transforms/{name}", "description":"()"}, {"content":"rest-client./v1/config/namespaces(${1:format? as string})", "trigger":"rest-client./v1/config/namespaces", "description":"(format? as string)"}, {"content":"rest-client./v1/config/namespaces(${1:format? as string})", "trigger":"rest-client./v1/config/namespaces", "description":"(format? as string)"}, {"content":"rest-client./v1/config/namespaces(${1:format? as string})", "trigger":"rest-client./v1/config/namespaces", "description":"(format? as string)"}, {"content":"rest-client./v1/config/namespaces()", "trigger":"rest-client./v1/config/namespaces", "description":"()"}, {"content":"rest-client./v1/config/namespaces/{prefix}(${1:format? as string})", "trigger":"rest-client./v1/config/namespaces/{prefix}", "description":"(format? as string)"}, {"content":"rest-client./v1/config/namespaces/{prefix}(${1:format? as string})", "trigger":"rest-client./v1/config/namespaces/{prefix}", "description":"(format? as string)"}, {"content":"rest-client./v1/config/namespaces/{prefix}()", "trigger":"rest-client./v1/config/namespaces/{prefix}", "description":"()"}, {"content":"rest-client./v1/config/indexes(${1:format? as string})", "trigger":"rest-client./v1/config/indexes", "description":"(format? as string)"}, {"content":"rest-client./v1/config/indexes/{name}(${1:format? as string})", "trigger":"rest-client./v1/config/indexes/{name}", "description":"(format? as string)"}, {"content":"rest-client./v1/graphs(${1:database? as string}, ${2:graph? as string}, ${3:default? as string}, ${4:category? as string}, ${5:txid? as string})", "trigger":"rest-client./v1/graphs", "description":"(database? as string, graph? as string, default? as string, category? as string, txid? as string)"}, {"content":"rest-client./v1/graphs(${1:database? as string}, ${2:graph? as string}, ${3:default? as string}, ${4:txid? as string})", "trigger":"rest-client./v1/graphs", "description":"(database? as string, graph? as string, default? as string, txid? as string)"}, {"content":"rest-client./v1/graphs(${1:database? as string}, ${2:graph? as string}, ${3:default? as string}, ${4:repair? as string}, ${5:category? as string}, ${6:txid? as string}, ${7:perm:{role}* as string})", "trigger":"rest-client./v1/graphs", "description":"(database? as string, graph? as string, default? as string, repair? as string, category? as string, txid? as string, perm:{role}* as string)"}, {"content":"rest-client./v1/graphs(${1:database? as string}, ${2:graph? as string}, ${3:default? as string}, ${4:repair? as string}, ${5:category? as string}, ${6:txid? as string}, ${7:perm:{role}* as string})", "trigger":"rest-client./v1/graphs", "description":"(database? as string, graph? as string, default? as string, repair? as string, category? as string, txid? as string, perm:{role}* as string)"}, {"content":"rest-client./v1/graphs(${1:database? as string}, ${2:graph? as string}, ${3:default? as string}, ${4:category? as string}, ${5:txid? as string})", "trigger":"rest-client./v1/graphs", "description":"(database? as string, graph? as string, default? as string, category? as string, txid? as string)"}, {"content":"rest-client./v1/graphs/sparql(${1:query as string}, ${2:default-graph-uri* as string}, ${3:named-graph-uri* as string}, ${4:database? as string}, ${5:base? as string}, ${6:txid? as string}, ${7:start? as string}, ${8:pageLength? as string}, ${9:q? as string}, ${10:structuredQuery? as string}, ${11:options? as string}, ${12:collection* as string}, ${13:directory? as string}, ${14:ruleset* as string}, ${15:default-rulesets? as string}, ${16:optimize? as int}, ${17:bind:{name}* as string}, ${18:bind:{name}:{type}* as string}, ${19:bind:{name}@{lang}* as string})", "trigger":"rest-client./v1/graphs/sparql", "description":"(query as string, default-graph-uri* as string, named-graph-uri* as string, database? as string, base? as string, txid? as string, start? as string, pageLength? as string, q? as string, structuredQuery? as string, options? as string, collection* as string, directory? as string, ruleset* as string, default-rulesets? as string, optimize? as int, bind:{name}* as string, bind:{name}:{type}* as string, bind:{name}@{lang}* as string)"}, {"content":"rest-client./v1/graphs/sparql(${1:query? as string}, ${2:update? as string}, ${3:default-graph-uri* as string}, ${4:named-graph-uri* as string}, ${5:using-graph-uri* as }, ${6:using-named-graph-uri* as }, ${7:database? as string}, ${8:base? as string}, ${9:default-permissions? as }, ${10:perm:{role}* as string}, ${11:txid? as string}, ${12:start? as string}, ${13:pageLength? as string}, ${14:q? as string}, ${15:structuredQuery? as string}, ${16:options? as string}, ${17:collection* as string}, ${18:directory? as string}, ${19:ruleset* as string}, ${20:default-rulesets? as string}, ${21:optimize? as int}, ${22:bind:{name}* as string}, ${23:bind:{name}:{type}* as string}, ${24:bind:{name}@{lang}* as string})", "trigger":"rest-client./v1/graphs/sparql", "description":"(query? as string, update? as string, default-graph-uri* as string, named-graph-uri* as string, using-graph-uri* as , using-named-graph-uri* as , database? as string, base? as string, default-permissions? as , perm:{role}* as string, txid? as string, start? as string, pageLength? as string, q? as string, structuredQuery? as string, options? as string, collection* as string, directory? as string, ruleset* as string, default-rulesets? as string, optimize? as int, bind:{name}* as string, bind:{name}:{type}* as string, bind:{name}@{lang}* as string)"}, {"content":"rest-client./v1/graphs/things(${1:iri* as string}, ${2:database? as string})", "trigger":"rest-client./v1/graphs/things", "description":"(iri* as string, database? as string)"}, {"content":"sem.rulesetStore(${1:locations as xs:string*})", "trigger":"sem.rulesetStore", "description":"(locations as xs:string*)"}, {"content":"sem.rulesetStore(${1:locations as xs:string*}, ${2:store as sem:store*})", "trigger":"sem.rulesetStore", "description":"(locations as xs:string*, store as sem:store*)"}, {"content":"sem.rulesetStore(${1:locations as xs:string*}, ${2:store as sem:store*}, ${3:options as xs:string*})", "trigger":"sem.rulesetStore", "description":"(locations as xs:string*, store as sem:store*, options as xs:string*)"}, {"content":"sc.type()", "trigger":"sc.type", "description":"()"}, {"content":"sc.type(${1:arg as item()})", "trigger":"sc.type", "description":"(arg as item())"}, {"content":"sc.simpleType()", "trigger":"sc.simpleType", "description":"()"}, {"content":"sc.simpleType(${1:arg as item()})", "trigger":"sc.simpleType", "description":"(arg as item())"}, {"content":"sc.complexType()", "trigger":"sc.complexType", "description":"()"}, {"content":"sc.complexType(${1:arg as item()})", "trigger":"sc.complexType", "description":"(arg as item())"}, {"content":"sc.typeApply(${1:type as schema-type()}, ${2:arg as item()})", "trigger":"sc.typeApply", "description":"(type as schema-type(), arg as item())"}, {"content":"sc.elementDecl()", "trigger":"sc.elementDecl", "description":"()"}, {"content":"sc.elementDecl(${1:arg as item()})", "trigger":"sc.elementDecl", "description":"(arg as item())"}, {"content":"sc.attributeDecl()", "trigger":"sc.attributeDecl", "description":"()"}, {"content":"sc.attributeDecl(${1:arg as item()})", "trigger":"sc.attributeDecl", "description":"(arg as item())"}, {"content":"sc.annotations()", "trigger":"sc.annotations", "description":"()"}, {"content":"sc.annotations(${1:arg as schema-component()})", "trigger":"sc.annotations", "description":"(arg as schema-component())"}, {"content":"sc.name()", "trigger":"sc.name", "description":"()"}, {"content":"sc.name(${1:arg as schema-component()})", "trigger":"sc.name", "description":"(arg as schema-component())"}, {"content":"sc.particles()", "trigger":"sc.particles", "description":"()"}, {"content":"sc.particles(${1:arg as schema-component()})", "trigger":"sc.particles", "description":"(arg as schema-component())"}, {"content":"sc.attributes()", "trigger":"sc.attributes", "description":"()"}, {"content":"sc.attributes(${1:arg as schema-component()})", "trigger":"sc.attributes", "description":"(arg as schema-component())"}, {"content":"sc.functionReturnType()", "trigger":"sc.functionReturnType", "description":"()"}, {"content":"sc.functionReturnType(${1:arg as function(*)})", "trigger":"sc.functionReturnType", "description":"(arg as function(*))"}, {"content":"sc.functionParameterType()", "trigger":"sc.functionParameterType", "description":"()"}, {"content":"sc.functionParameterType(${1:arg as function(*)})", "trigger":"sc.functionParameterType", "description":"(arg as function(*))"}, {"content":"sc.functionParameterType(${1:arg as function(*)}, ${2:param as xs:integer?})", "trigger":"sc.functionParameterType", "description":"(arg as function(*), param as xs:integer?)"}, {"content":"sc.typeNamed(${1:arg as xs:QName})", "trigger":"sc.typeNamed", "description":"(arg as xs:QName)"}, {"content":"sc.facets()", "trigger":"sc.facets", "description":"()"}, {"content":"sc.facets(${1:arg as schema-component()})", "trigger":"sc.facets", "description":"(arg as schema-component())"}, {"content":"sc.schema()", "trigger":"sc.schema", "description":"()"}, {"content":"sc.schema(${1:arg as item()})", "trigger":"sc.schema", "description":"(arg as item())"}, {"content":"sc.componentProperty(${1:propname as String})", "trigger":"sc.componentProperty", "description":"(propname as String)"}, {"content":"sc.componentProperty(${1:propname as String}, ${2:arg as schema-component()})", "trigger":"sc.componentProperty", "description":"(propname as String, arg as schema-component())"}, {"content":"sc.schemaFromPath(${1:namespace as String})", "trigger":"sc.schemaFromPath", "description":"(namespace as String)"}, {"content":"sc.schemaFromPath(${1:namespace as String}, ${2:location as String})", "trigger":"sc.schemaFromPath", "description":"(namespace as String, location as String)"}, {"content":"sc.canonicalPath()", "trigger":"sc.canonicalPath", "description":"()"}, {"content":"sc.canonicalPath(${1:arg as schema-component()})", "trigger":"sc.canonicalPath", "description":"(arg as schema-component())"}, {"content":"search.checkOptions(${1:options as element(search:options)})", "trigger":"search.checkOptions", "description":"(options as element(search:options))"}, {"content":"search.checkOptions(${1:options as element(search:options)}, ${2:strict as xs:boolean?})", "trigger":"search.checkOptions", "description":"(options as element(search:options), strict as xs:boolean?)"}, {"content":"search.estimate(${1:cts-query as element()})", "trigger":"search.estimate", "description":"(cts-query as element())"}, {"content":"search.estimate(${1:cts-query as element()}, ${2:options as element(search:options)?})", "trigger":"search.estimate", "description":"(cts-query as element(), options as element(search:options)?)"}, {"content":"search.getDefaultOptions()", "trigger":"search.getDefaultOptions", "description":"()"}, {"content":"search.parse(${1:qtext as xs:string+})", "trigger":"search.parse", "description":"(qtext as xs:string+)"}, {"content":"search.parse(${1:qtext as xs:string+}, ${2:options as element(search:options)?})", "trigger":"search.parse", "description":"(qtext as xs:string+, options as element(search:options)?)"}, {"content":"search.parse(${1:qtext as xs:string+}, ${2:options as element(search:options)?}, ${3:output as xs:string?})", "trigger":"search.parse", "description":"(qtext as xs:string+, options as element(search:options)?, output as xs:string?)"}, {"content":"search.removeConstraint(${1:qtext as String}, ${2:ptext as String}, ${3:options as element(search:options)?})", "trigger":"search.removeConstraint", "description":"(qtext as String, ptext as String, options as element(search:options)?)"}, {"content":"search.resolve(${1:query as element()})", "trigger":"search.resolve", "description":"(query as element())"}, {"content":"search.resolve(${1:query as element()}, ${2:options as element(search:options)?})", "trigger":"search.resolve", "description":"(query as element(), options as element(search:options)?)"}, {"content":"search.resolve(${1:query as element()}, ${2:options as element(search:options)?}, ${3:start as xs:unsignedLong?})", "trigger":"search.resolve", "description":"(query as element(), options as element(search:options)?, start as xs:unsignedLong?)"}, {"content":"search.resolve(${1:query as element()}, ${2:options as element(search:options)?}, ${3:start as xs:unsignedLong?}, ${4:page-length as xs:unsignedLong?})", "trigger":"search.resolve", "description":"(query as element(), options as element(search:options)?, start as xs:unsignedLong?, page-length as xs:unsignedLong?)"}, {"content":"search.resolveNodes(${1:query as element()})", "trigger":"search.resolveNodes", "description":"(query as element())"}, {"content":"search.resolveNodes(${1:query as element()}, ${2:options as element(search:options)?})", "trigger":"search.resolveNodes", "description":"(query as element(), options as element(search:options)?)"}, {"content":"search.resolveNodes(${1:query as element()}, ${2:options as element(search:options)?}, ${3:start as xs:unsignedLong?})", "trigger":"search.resolveNodes", "description":"(query as element(), options as element(search:options)?, start as xs:unsignedLong?)"}, {"content":"search.resolveNodes(${1:query as element()}, ${2:options as element(search:options)?}, ${3:start as xs:unsignedLong?}, ${4:page-length as xs:unsignedLong?})", "trigger":"search.resolveNodes", "description":"(query as element(), options as element(search:options)?, start as xs:unsignedLong?, page-length as xs:unsignedLong?)"}, {"content":"search.search(${1:qtext as xs:string+})", "trigger":"search.search", "description":"(qtext as xs:string+)"}, {"content":"search.search(${1:qtext as xs:string+}, ${2:options as element(search:options)?})", "trigger":"search.search", "description":"(qtext as xs:string+, options as element(search:options)?)"}, {"content":"search.search(${1:qtext as xs:string+}, ${2:options as element(search:options)?}, ${3:start as xs:unsignedLong?})", "trigger":"search.search", "description":"(qtext as xs:string+, options as element(search:options)?, start as xs:unsignedLong?)"}, {"content":"search.search(${1:qtext as xs:string+}, ${2:options as element(search:options)?}, ${3:start as xs:unsignedLong?}, ${4:page-length as xs:unsignedLong?})", "trigger":"search.search", "description":"(qtext as xs:string+, options as element(search:options)?, start as xs:unsignedLong?, page-length as xs:unsignedLong?)"}, {"content":"search.snippet(${1:result as node()}, ${2:cts-query as schema-element(cts:query)})", "trigger":"search.snippet", "description":"(result as node(), cts-query as schema-element(cts:query))"}, {"content":"search.snippet(${1:result as node()}, ${2:cts-query as schema-element(cts:query)}, ${3:options as element(search:transform-results)?})", "trigger":"search.snippet", "description":"(result as node(), cts-query as schema-element(cts:query), options as element(search:transform-results)?)"}, {"content":"search.suggest(${1:qtext as xs:string+})", "trigger":"search.suggest", "description":"(qtext as xs:string+)"}, {"content":"search.suggest(${1:qtext as xs:string+}, ${2:options as element(search:options)?})", "trigger":"search.suggest", "description":"(qtext as xs:string+, options as element(search:options)?)"}, {"content":"search.suggest(${1:qtext as xs:string+}, ${2:options as element(search:options)?}, ${3:limit as xs:unsignedInt?})", "trigger":"search.suggest", "description":"(qtext as xs:string+, options as element(search:options)?, limit as xs:unsignedInt?)"}, {"content":"search.suggest(${1:qtext as xs:string+}, ${2:options as element(search:options)?}, ${3:limit as xs:unsignedInt?}, ${4:cursor-position as xs:unsignedInt?})", "trigger":"search.suggest", "description":"(qtext as xs:string+, options as element(search:options)?, limit as xs:unsignedInt?, cursor-position as xs:unsignedInt?)"}, {"content":"search.suggest(${1:qtext as xs:string+}, ${2:options as element(search:options)?}, ${3:limit as xs:unsignedInt?}, ${4:cursor-position as xs:unsignedInt?}, ${5:focus as xs:positiveInteger?})", "trigger":"search.suggest", "description":"(qtext as xs:string+, options as element(search:options)?, limit as xs:unsignedInt?, cursor-position as xs:unsignedInt?, focus as xs:positiveInteger?)"}, {"content":"search.suggest(${1:qtext as xs:string+}, ${2:options as element(search:options)?}, ${3:limit as xs:unsignedInt?}, ${4:cursor-position as xs:unsignedInt?}, ${5:focus as xs:positiveInteger?}, ${6:query as element(search:query)*})", "trigger":"search.suggest", "description":"(qtext as xs:string+, options as element(search:options)?, limit as xs:unsignedInt?, cursor-position as xs:unsignedInt?, focus as xs:positiveInteger?, query as element(search:query)*)"}, {"content":"search.unparse(${1:qtree as element()})", "trigger":"search.unparse", "description":"(qtree as element())"}, {"content":"search.values(${1:spec-name as String}, ${2:options as element(search:options)})", "trigger":"search.values", "description":"(spec-name as String, options as element(search:options))"}, {"content":"search.values(${1:spec-name as String}, ${2:options as element(search:options)}, ${3:query as element(search:query)?})", "trigger":"search.values", "description":"(spec-name as String, options as element(search:options), query as element(search:query)?)"}, {"content":"search.values(${1:spec-name as String}, ${2:options as element(search:options)}, ${3:query as element(search:query)?}, ${4:limit as xs:unsignedLong?})", "trigger":"search.values", "description":"(spec-name as String, options as element(search:options), query as element(search:query)?, limit as xs:unsignedLong?)"}, {"content":"search.values(${1:spec-name as String}, ${2:options as element(search:options)}, ${3:query as element(search:query)?}, ${4:limit as xs:unsignedLong?}, ${5:start as xs:anyAtomicType?})", "trigger":"search.values", "description":"(spec-name as String, options as element(search:options), query as element(search:query)?, limit as xs:unsignedLong?, start as xs:anyAtomicType?)"}, {"content":"search.values(${1:spec-name as String}, ${2:options as element(search:options)}, ${3:query as element(search:query)?}, ${4:limit as xs:unsignedLong?}, ${5:start as xs:anyAtomicType?}, ${6:page-start as xs:unsignedLong?})", "trigger":"search.values", "description":"(spec-name as String, options as element(search:options), query as element(search:query)?, limit as xs:unsignedLong?, start as xs:anyAtomicType?, page-start as xs:unsignedLong?)"}, {"content":"search.values(${1:spec-name as String}, ${2:options as element(search:options)}, ${3:query as element(search:query)?}, ${4:limit as xs:unsignedLong?}, ${5:start as xs:anyAtomicType?}, ${6:page-start as xs:unsignedLong?}, ${7:page-length as xs:unsignedLong?})", "trigger":"search.values", "description":"(spec-name as String, options as element(search:options), query as element(search:query)?, limit as xs:unsignedLong?, start as xs:anyAtomicType?, page-start as xs:unsignedLong?, page-length as xs:unsignedLong?)"}, {"content":"cts.periodRangeQuery(${1:axis-name as xs:string*}, ${2:operator as String})", "trigger":"cts.periodRangeQuery", "description":"(axis-name as xs:string*, operator as String)"}, {"content":"cts.periodRangeQuery(${1:axis-name as xs:string*}, ${2:operator as String}, ${3:period as cts:period*})", "trigger":"cts.periodRangeQuery", "description":"(axis-name as xs:string*, operator as String, period as cts:period*)"}, {"content":"cts.periodRangeQuery(${1:axis-name as xs:string*}, ${2:operator as String}, ${3:period as cts:period*}, ${4:options as xs:string*})", "trigger":"cts.periodRangeQuery", "description":"(axis-name as xs:string*, operator as String, period as cts:period*, options as xs:string*)"}, {"content":"cts.periodRangeQueryAxis(${1:query as cts:period-range-query})", "trigger":"cts.periodRangeQueryAxis", "description":"(query as cts:period-range-query)"}, {"content":"cts.periodRangeQueryOperator(${1:query as cts:period-range-query})", "trigger":"cts.periodRangeQueryOperator", "description":"(query as cts:period-range-query)"}, {"content":"cts.periodRangeQueryPeriod(${1:query as cts:period-range-query})", "trigger":"cts.periodRangeQueryPeriod", "description":"(query as cts:period-range-query)"}, {"content":"cts.periodRangeQueryOptions(${1:query as cts:period-range-query})", "trigger":"cts.periodRangeQueryOptions", "description":"(query as cts:period-range-query)"}, {"content":"cts.lsqtQuery(${1:temporal-collection as String})", "trigger":"cts.lsqtQuery", "description":"(temporal-collection as String)"}, {"content":"cts.lsqtQuery(${1:temporal-collection as String}, ${2:timestamp as xs:dateTime?})", "trigger":"cts.lsqtQuery", "description":"(temporal-collection as String, timestamp as xs:dateTime?)"}, {"content":"cts.lsqtQuery(${1:temporal-collection as String}, ${2:timestamp as xs:dateTime?}, ${3:options as xs:string*})", "trigger":"cts.lsqtQuery", "description":"(temporal-collection as String, timestamp as xs:dateTime?, options as xs:string*)"}, {"content":"cts.lsqtQuery(${1:temporal-collection as String}, ${2:timestamp as xs:dateTime?}, ${3:options as xs:string*}, ${4:weight as xs:double?})", "trigger":"cts.lsqtQuery", "description":"(temporal-collection as String, timestamp as xs:dateTime?, options as xs:string*, weight as xs:double?)"}, {"content":"cts.lsqtQueryTemporalCollection(${1:query as cts:lsqt-query})", "trigger":"cts.lsqtQueryTemporalCollection", "description":"(query as cts:lsqt-query)"}, {"content":"cts.lsqtQueryTimestamp(${1:query as cts:lsqt-query})", "trigger":"cts.lsqtQueryTimestamp", "description":"(query as cts:lsqt-query)"}, {"content":"cts.lsqtQueryOptions(${1:query as cts:lsqt-query})", "trigger":"cts.lsqtQueryOptions", "description":"(query as cts:lsqt-query)"}, {"content":"cts.lsqtQueryWeight(${1:query as cts:lsqt-query})", "trigger":"cts.lsqtQueryWeight", "description":"(query as cts:lsqt-query)"}, {"content":"cts.periodCompareQuery(${1:axis-1 as String}, ${2:operator as String}, ${3:axis-2 as String})", "trigger":"cts.periodCompareQuery", "description":"(axis-1 as String, operator as String, axis-2 as String)"}, {"content":"cts.periodCompareQuery(${1:axis-1 as String}, ${2:operator as String}, ${3:axis-2 as String}, ${4:options as xs:string*})", "trigger":"cts.periodCompareQuery", "description":"(axis-1 as String, operator as String, axis-2 as String, options as xs:string*)"}, {"content":"cts.periodCompareQueryAxis1(${1:query as cts:period-compare-query})", "trigger":"cts.periodCompareQueryAxis1", "description":"(query as cts:period-compare-query)"}, {"content":"cts.periodCompareQueryAxis2(${1:query as cts:period-compare-query})", "trigger":"cts.periodCompareQueryAxis2", "description":"(query as cts:period-compare-query)"}, {"content":"cts.periodCompareQueryOperator(${1:query as cts:period-compare-query})", "trigger":"cts.periodCompareQueryOperator", "description":"(query as cts:period-compare-query)"}, {"content":"cts.periodCompareQueryOptions(${1:query as cts:period-compare-query})", "trigger":"cts.periodCompareQueryOptions", "description":"(query as cts:period-compare-query)"}, {"content":"cts.trueQuery()", "trigger":"cts.trueQuery", "description":"()"}, {"content":"cts.falseQuery()", "trigger":"cts.falseQuery", "description":"()"}, {"content":"cts.andQuery(${1:queries as cts:query*})", "trigger":"cts.andQuery", "description":"(queries as cts:query*)"}, {"content":"cts.andQuery(${1:queries as cts:query*}, ${2:options as xs:string*})", "trigger":"cts.andQuery", "description":"(queries as cts:query*, options as xs:string*)"}, {"content":"cts.andQueryQueries(${1:query as cts:and-query})", "trigger":"cts.andQueryQueries", "description":"(query as cts:and-query)"}, {"content":"cts.andQueryOptions(${1:query as cts:and-query})", "trigger":"cts.andQueryOptions", "description":"(query as cts:and-query)"}, {"content":"cts.boostQuery(${1:matching-query as cts:query}, ${2:boosting-query as cts:query})", "trigger":"cts.boostQuery", "description":"(matching-query as cts:query, boosting-query as cts:query)"}, {"content":"cts.boostQueryMatchingQuery(${1:query as cts:boost-query})", "trigger":"cts.boostQueryMatchingQuery", "description":"(query as cts:boost-query)"}, {"content":"cts.boostQueryBoostingQuery(${1:query as cts:boost-query})", "trigger":"cts.boostQueryBoostingQuery", "description":"(query as cts:boost-query)"}, {"content":"cts.orQuery(${1:queries as cts:query*})", "trigger":"cts.orQuery", "description":"(queries as cts:query*)"}, {"content":"cts.orQuery(${1:queries as cts:query*}, ${2:options as xs:string*})", "trigger":"cts.orQuery", "description":"(queries as cts:query*, options as xs:string*)"}, {"content":"cts.orQueryQueries(${1:query as cts:or-query})", "trigger":"cts.orQueryQueries", "description":"(query as cts:or-query)"}, {"content":"cts.orQueryOptions(${1:query as cts:or-query})", "trigger":"cts.orQueryOptions", "description":"(query as cts:or-query)"}, {"content":"cts.andNotQuery(${1:positive-query as cts:query}, ${2:negative-query as cts:query})", "trigger":"cts.andNotQuery", "description":"(positive-query as cts:query, negative-query as cts:query)"}, {"content":"cts.andNotQueryPositiveQuery(${1:query as cts:and-not-query})", "trigger":"cts.andNotQueryPositiveQuery", "description":"(query as cts:and-not-query)"}, {"content":"cts.andNotQueryNegativeQuery(${1:query as cts:and-not-query})", "trigger":"cts.andNotQueryNegativeQuery", "description":"(query as cts:and-not-query)"}, {"content":"cts.notQuery(${1:query as cts:query})", "trigger":"cts.notQuery", "description":"(query as cts:query)"}, {"content":"cts.notQueryQuery(${1:query as cts:not-query})", "trigger":"cts.notQueryQuery", "description":"(query as cts:not-query)"}, {"content":"cts.notQueryWeight(${1:query as cts:not-query})", "trigger":"cts.notQueryWeight", "description":"(query as cts:not-query)"}, {"content":"cts.wordQuery(${1:text as xs:string*})", "trigger":"cts.wordQuery", "description":"(text as xs:string*)"}, {"content":"cts.wordQuery(${1:text as xs:string*}, ${2:options as xs:string*})", "trigger":"cts.wordQuery", "description":"(text as xs:string*, options as xs:string*)"}, {"content":"cts.wordQuery(${1:text as xs:string*}, ${2:options as xs:string*}, ${3:weight as xs:double?})", "trigger":"cts.wordQuery", "description":"(text as xs:string*, options as xs:string*, weight as xs:double?)"}, {"content":"cts.wordQueryText(${1:query as cts:word-query})", "trigger":"cts.wordQueryText", "description":"(query as cts:word-query)"}, {"content":"cts.wordQueryOptions(${1:query as cts:word-query})", "trigger":"cts.wordQueryOptions", "description":"(query as cts:word-query)"}, {"content":"cts.wordQueryWeight(${1:query as cts:word-query})", "trigger":"cts.wordQueryWeight", "description":"(query as cts:word-query)"}, {"content":"cts.elementRangeQuery(${1:element-name as xs:QName*}, ${2:operator as String}, ${3:value as xs:anyAtomicType*})", "trigger":"cts.elementRangeQuery", "description":"(element-name as xs:QName*, operator as String, value as xs:anyAtomicType*)"}, {"content":"cts.elementRangeQuery(${1:element-name as xs:QName*}, ${2:operator as String}, ${3:value as xs:anyAtomicType*}, ${4:options as xs:string*})", "trigger":"cts.elementRangeQuery", "description":"(element-name as xs:QName*, operator as String, value as xs:anyAtomicType*, options as xs:string*)"}, {"content":"cts.elementRangeQuery(${1:element-name as xs:QName*}, ${2:operator as String}, ${3:value as xs:anyAtomicType*}, ${4:options as xs:string*}, ${5:weight as xs:double?})", "trigger":"cts.elementRangeQuery", "description":"(element-name as xs:QName*, operator as String, value as xs:anyAtomicType*, options as xs:string*, weight as xs:double?)"}, {"content":"cts.elementRangeQueryElementName(${1:query as cts:element-range-query})", "trigger":"cts.elementRangeQueryElementName", "description":"(query as cts:element-range-query)"}, {"content":"cts.elementRangeQueryOperator(${1:query as cts:element-range-query})", "trigger":"cts.elementRangeQueryOperator", "description":"(query as cts:element-range-query)"}, {"content":"cts.elementRangeQueryValue(${1:query as cts:element-range-query})", "trigger":"cts.elementRangeQueryValue", "description":"(query as cts:element-range-query)"}, {"content":"cts.elementRangeQueryOptions(${1:query as cts:element-range-query})", "trigger":"cts.elementRangeQueryOptions", "description":"(query as cts:element-range-query)"}, {"content":"cts.elementRangeQueryWeight(${1:query as cts:element-range-query})", "trigger":"cts.elementRangeQueryWeight", "description":"(query as cts:element-range-query)"}, {"content":"cts.jsonPropertyRangeQuery(${1:property-name as xs:string*}, ${2:operator as String}, ${3:value as any[]})", "trigger":"cts.jsonPropertyRangeQuery", "description":"(property-name as xs:string*, operator as String, value as any[])"}, {"content":"cts.jsonPropertyRangeQuery(${1:property-name as xs:string*}, ${2:operator as String}, ${3:value as any[]}, ${4:options as xs:string*})", "trigger":"cts.jsonPropertyRangeQuery", "description":"(property-name as xs:string*, operator as String, value as any[], options as xs:string*)"}, {"content":"cts.jsonPropertyRangeQuery(${1:property-name as xs:string*}, ${2:operator as String}, ${3:value as any[]}, ${4:options as xs:string*}, ${5:weight as xs:double?})", "trigger":"cts.jsonPropertyRangeQuery", "description":"(property-name as xs:string*, operator as String, value as any[], options as xs:string*, weight as xs:double?)"}, {"content":"cts.jsonPropertyRangeQueryPropertyName(${1:query as cts:json-property-range-query})", "trigger":"cts.jsonPropertyRangeQueryPropertyName", "description":"(query as cts:json-property-range-query)"}, {"content":"cts.jsonPropertyRangeQueryOperator(${1:query as cts:json-property-range-query})", "trigger":"cts.jsonPropertyRangeQueryOperator", "description":"(query as cts:json-property-range-query)"}, {"content":"cts.jsonPropertyRangeQueryValue(${1:query as cts:json-property-range-query})", "trigger":"cts.jsonPropertyRangeQueryValue", "description":"(query as cts:json-property-range-query)"}, {"content":"cts.jsonPropertyRangeQueryOptions(${1:query as cts:json-property-range-query})", "trigger":"cts.jsonPropertyRangeQueryOptions", "description":"(query as cts:json-property-range-query)"}, {"content":"cts.jsonPropertyRangeQueryWeight(${1:query as cts:json-property-range-query})", "trigger":"cts.jsonPropertyRangeQueryWeight", "description":"(query as cts:json-property-range-query)"}, {"content":"cts.tripleRangeQuery(${1:subject as xs:anyAtomicType*}, ${2:predicate as xs:anyAtomicType*}, ${3:object as xs:anyAtomicType*})", "trigger":"cts.tripleRangeQuery", "description":"(subject as xs:anyAtomicType*, predicate as xs:anyAtomicType*, object as xs:anyAtomicType*)"}, {"content":"cts.tripleRangeQuery(${1:subject as xs:anyAtomicType*}, ${2:predicate as xs:anyAtomicType*}, ${3:object as xs:anyAtomicType*}, ${4:operator as xs:string*})", "trigger":"cts.tripleRangeQuery", "description":"(subject as xs:anyAtomicType*, predicate as xs:anyAtomicType*, object as xs:anyAtomicType*, operator as xs:string*)"}, {"content":"cts.tripleRangeQuery(${1:subject as xs:anyAtomicType*}, ${2:predicate as xs:anyAtomicType*}, ${3:object as xs:anyAtomicType*}, ${4:operator as xs:string*}, ${5:options as xs:string*})", "trigger":"cts.tripleRangeQuery", "description":"(subject as xs:anyAtomicType*, predicate as xs:anyAtomicType*, object as xs:anyAtomicType*, operator as xs:string*, options as xs:string*)"}, {"content":"cts.tripleRangeQuery(${1:subject as xs:anyAtomicType*}, ${2:predicate as xs:anyAtomicType*}, ${3:object as xs:anyAtomicType*}, ${4:operator as xs:string*}, ${5:options as xs:string*}, ${6:weight as xs:double?})", "trigger":"cts.tripleRangeQuery", "description":"(subject as xs:anyAtomicType*, predicate as xs:anyAtomicType*, object as xs:anyAtomicType*, operator as xs:string*, options as xs:string*, weight as xs:double?)"}, {"content":"cts.tripleRangeQuerySubject(${1:query as cts:triple-range-query})", "trigger":"cts.tripleRangeQuerySubject", "description":"(query as cts:triple-range-query)"}, {"content":"cts.tripleRangeQueryPredicate(${1:query as cts:triple-range-query})", "trigger":"cts.tripleRangeQueryPredicate", "description":"(query as cts:triple-range-query)"}, {"content":"cts.tripleRangeQueryObject(${1:query as cts:triple-range-query})", "trigger":"cts.tripleRangeQueryObject", "description":"(query as cts:triple-range-query)"}, {"content":"cts.tripleRangeQueryOperator(${1:query as cts:triple-range-query})", "trigger":"cts.tripleRangeQueryOperator", "description":"(query as cts:triple-range-query)"}, {"content":"cts.tripleRangeQueryOptions(${1:query as cts:triple-range-query})", "trigger":"cts.tripleRangeQueryOptions", "description":"(query as cts:triple-range-query)"}, {"content":"cts.tripleRangeQueryWeight(${1:query as cts:triple-range-query})", "trigger":"cts.tripleRangeQueryWeight", "description":"(query as cts:triple-range-query)"}, {"content":"cts.fieldRangeQuery(${1:field-name as xs:string*}, ${2:operator as String}, ${3:value as any[]})", "trigger":"cts.fieldRangeQuery", "description":"(field-name as xs:string*, operator as String, value as any[])"}, {"content":"cts.fieldRangeQuery(${1:field-name as xs:string*}, ${2:operator as String}, ${3:value as any[]}, ${4:options as xs:string*})", "trigger":"cts.fieldRangeQuery", "description":"(field-name as xs:string*, operator as String, value as any[], options as xs:string*)"}, {"content":"cts.fieldRangeQuery(${1:field-name as xs:string*}, ${2:operator as String}, ${3:value as any[]}, ${4:options as xs:string*}, ${5:weight as xs:double?})", "trigger":"cts.fieldRangeQuery", "description":"(field-name as xs:string*, operator as String, value as any[], options as xs:string*, weight as xs:double?)"}, {"content":"cts.fieldRangeQueryFieldName(${1:query as cts:field-range-query})", "trigger":"cts.fieldRangeQueryFieldName", "description":"(query as cts:field-range-query)"}, {"content":"cts.fieldRangeQueryOperator(${1:query as cts:field-range-query})", "trigger":"cts.fieldRangeQueryOperator", "description":"(query as cts:field-range-query)"}, {"content":"cts.fieldRangeQueryValue(${1:query as cts:field-range-query})", "trigger":"cts.fieldRangeQueryValue", "description":"(query as cts:field-range-query)"}, {"content":"cts.fieldRangeQueryOptions(${1:query as cts:field-range-query})", "trigger":"cts.fieldRangeQueryOptions", "description":"(query as cts:field-range-query)"}, {"content":"cts.fieldRangeQueryWeight(${1:query as cts:field-range-query})", "trigger":"cts.fieldRangeQueryWeight", "description":"(query as cts:field-range-query)"}, {"content":"cts.validIndexPath(${1:string as String}, ${2:ignorens as Boolean})", "trigger":"cts.validIndexPath", "description":"(string as String, ignorens as Boolean)"}, {"content":"cts.pathRangeQuery(${1:path-expression as xs:string*}, ${2:operator as String}, ${3:value as any[]})", "trigger":"cts.pathRangeQuery", "description":"(path-expression as xs:string*, operator as String, value as any[])"}, {"content":"cts.pathRangeQuery(${1:path-expression as xs:string*}, ${2:operator as String}, ${3:value as any[]}, ${4:options as xs:string*})", "trigger":"cts.pathRangeQuery", "description":"(path-expression as xs:string*, operator as String, value as any[], options as xs:string*)"}, {"content":"cts.pathRangeQuery(${1:path-expression as xs:string*}, ${2:operator as String}, ${3:value as any[]}, ${4:options as xs:string*}, ${5:weight as xs:double?})", "trigger":"cts.pathRangeQuery", "description":"(path-expression as xs:string*, operator as String, value as any[], options as xs:string*, weight as xs:double?)"}, {"content":"cts.pathRangeQueryPathName(${1:query as cts:path-range-query})", "trigger":"cts.pathRangeQueryPathName", "description":"(query as cts:path-range-query)"}, {"content":"cts.pathRangeQueryOperator(${1:query as cts:path-range-query})", "trigger":"cts.pathRangeQueryOperator", "description":"(query as cts:path-range-query)"}, {"content":"cts.pathRangeQueryValue(${1:query as cts:path-range-query})", "trigger":"cts.pathRangeQueryValue", "description":"(query as cts:path-range-query)"}, {"content":"cts.pathRangeQueryOptions(${1:query as cts:path-range-query})", "trigger":"cts.pathRangeQueryOptions", "description":"(query as cts:path-range-query)"}, {"content":"cts.pathRangeQueryWeight(${1:query as cts:path-range-query})", "trigger":"cts.pathRangeQueryWeight", "description":"(query as cts:path-range-query)"}, {"content":"cts.elementValueQuery(${1:element-name as xs:QName*})", "trigger":"cts.elementValueQuery", "description":"(element-name as xs:QName*)"}, {"content":"cts.elementValueQuery(${1:element-name as xs:QName*}, ${2:text as xs:string*})", "trigger":"cts.elementValueQuery", "description":"(element-name as xs:QName*, text as xs:string*)"}, {"content":"cts.elementValueQuery(${1:element-name as xs:QName*}, ${2:text as xs:string*}, ${3:options as xs:string*})", "trigger":"cts.elementValueQuery", "description":"(element-name as xs:QName*, text as xs:string*, options as xs:string*)"}, {"content":"cts.elementValueQuery(${1:element-name as xs:QName*}, ${2:text as xs:string*}, ${3:options as xs:string*}, ${4:weight as xs:double?})", "trigger":"cts.elementValueQuery", "description":"(element-name as xs:QName*, text as xs:string*, options as xs:string*, weight as xs:double?)"}, {"content":"cts.elementValueQueryElementName(${1:query as cts:element-value-query})", "trigger":"cts.elementValueQueryElementName", "description":"(query as cts:element-value-query)"}, {"content":"cts.elementValueQueryText(${1:query as cts:element-value-query})", "trigger":"cts.elementValueQueryText", "description":"(query as cts:element-value-query)"}, {"content":"cts.elementValueQueryOptions(${1:query as cts:element-value-query})", "trigger":"cts.elementValueQueryOptions", "description":"(query as cts:element-value-query)"}, {"content":"cts.elementValueQueryWeight(${1:query as cts:element-value-query})", "trigger":"cts.elementValueQueryWeight", "description":"(query as cts:element-value-query)"}, {"content":"cts.jsonPropertyValueQuery(${1:property-name as xs:string*}, ${2:value as xs:anyAtomicType*})", "trigger":"cts.jsonPropertyValueQuery", "description":"(property-name as xs:string*, value as xs:anyAtomicType*)"}, {"content":"cts.jsonPropertyValueQuery(${1:property-name as xs:string*}, ${2:value as xs:anyAtomicType*}, ${3:options as xs:string*})", "trigger":"cts.jsonPropertyValueQuery", "description":"(property-name as xs:string*, value as xs:anyAtomicType*, options as xs:string*)"}, {"content":"cts.jsonPropertyValueQuery(${1:property-name as xs:string*}, ${2:value as xs:anyAtomicType*}, ${3:options as xs:string*}, ${4:weight as xs:double?})", "trigger":"cts.jsonPropertyValueQuery", "description":"(property-name as xs:string*, value as xs:anyAtomicType*, options as xs:string*, weight as xs:double?)"}, {"content":"cts.jsonPropertyValueQueryPropertyName(${1:query as cts:json-property-value-query})", "trigger":"cts.jsonPropertyValueQueryPropertyName", "description":"(query as cts:json-property-value-query)"}, {"content":"cts.jsonPropertyValueQueryValue(${1:query as cts:json-property-value-query})", "trigger":"cts.jsonPropertyValueQueryValue", "description":"(query as cts:json-property-value-query)"}, {"content":"cts.jsonPropertyValueQueryText(${1:query as cts:json-property-value-query})", "trigger":"cts.jsonPropertyValueQueryText", "description":"(query as cts:json-property-value-query)"}, {"content":"cts.jsonPropertyValueQueryOptions(${1:query as cts:json-property-value-query})", "trigger":"cts.jsonPropertyValueQueryOptions", "description":"(query as cts:json-property-value-query)"}, {"content":"cts.jsonPropertyValueQueryWeight(${1:query as cts:json-property-value-query})", "trigger":"cts.jsonPropertyValueQueryWeight", "description":"(query as cts:json-property-value-query)"}, {"content":"cts.elementWordQuery(${1:element-name as xs:QName*}, ${2:text as xs:string*})", "trigger":"cts.elementWordQuery", "description":"(element-name as xs:QName*, text as xs:string*)"}, {"content":"cts.elementWordQuery(${1:element-name as xs:QName*}, ${2:text as xs:string*}, ${3:options as xs:string*})", "trigger":"cts.elementWordQuery", "description":"(element-name as xs:QName*, text as xs:string*, options as xs:string*)"}, {"content":"cts.elementWordQuery(${1:element-name as xs:QName*}, ${2:text as xs:string*}, ${3:options as xs:string*}, ${4:weight as xs:double?})", "trigger":"cts.elementWordQuery", "description":"(element-name as xs:QName*, text as xs:string*, options as xs:string*, weight as xs:double?)"}, {"content":"cts.elementWordQueryText(${1:query as cts:element-word-query})", "trigger":"cts.elementWordQueryText", "description":"(query as cts:element-word-query)"}, {"content":"cts.elementWordQueryElementName(${1:query as cts:element-word-query})", "trigger":"cts.elementWordQueryElementName", "description":"(query as cts:element-word-query)"}, {"content":"cts.elementWordQueryOptions(${1:query as cts:element-word-query})", "trigger":"cts.elementWordQueryOptions", "description":"(query as cts:element-word-query)"}, {"content":"cts.elementWordQueryWeight(${1:query as cts:element-word-query})", "trigger":"cts.elementWordQueryWeight", "description":"(query as cts:element-word-query)"}, {"content":"cts.jsonPropertyWordQuery(${1:property-name as xs:string*}, ${2:text as xs:string*})", "trigger":"cts.jsonPropertyWordQuery", "description":"(property-name as xs:string*, text as xs:string*)"}, {"content":"cts.jsonPropertyWordQuery(${1:property-name as xs:string*}, ${2:text as xs:string*}, ${3:options as xs:string*})", "trigger":"cts.jsonPropertyWordQuery", "description":"(property-name as xs:string*, text as xs:string*, options as xs:string*)"}, {"content":"cts.jsonPropertyWordQuery(${1:property-name as xs:string*}, ${2:text as xs:string*}, ${3:options as xs:string*}, ${4:weight as xs:double?})", "trigger":"cts.jsonPropertyWordQuery", "description":"(property-name as xs:string*, text as xs:string*, options as xs:string*, weight as xs:double?)"}, {"content":"cts.jsonPropertyWordQueryText(${1:query as cts:json-property-word-query})", "trigger":"cts.jsonPropertyWordQueryText", "description":"(query as cts:json-property-word-query)"}, {"content":"cts.jsonPropertyWordQueryPropertyName(${1:query as cts:json-property-word-query})", "trigger":"cts.jsonPropertyWordQueryPropertyName", "description":"(query as cts:json-property-word-query)"}, {"content":"cts.jsonPropertyWordQueryOptions(${1:query as cts:json-property-word-query})", "trigger":"cts.jsonPropertyWordQueryOptions", "description":"(query as cts:json-property-word-query)"}, {"content":"cts.jsonPropertyWordQueryWeight(${1:query as cts:json-property-word-query})", "trigger":"cts.jsonPropertyWordQueryWeight", "description":"(query as cts:json-property-word-query)"}, {"content":"cts.fieldWordQuery(${1:field-name as xs:string*}, ${2:text as xs:string*})", "trigger":"cts.fieldWordQuery", "description":"(field-name as xs:string*, text as xs:string*)"}, {"content":"cts.fieldWordQuery(${1:field-name as xs:string*}, ${2:text as xs:string*}, ${3:options as xs:string*})", "trigger":"cts.fieldWordQuery", "description":"(field-name as xs:string*, text as xs:string*, options as xs:string*)"}, {"content":"cts.fieldWordQuery(${1:field-name as xs:string*}, ${2:text as xs:string*}, ${3:options as xs:string*}, ${4:weight as xs:double?})", "trigger":"cts.fieldWordQuery", "description":"(field-name as xs:string*, text as xs:string*, options as xs:string*, weight as xs:double?)"}, {"content":"cts.fieldWordQueryText(${1:query as cts:field-word-query})", "trigger":"cts.fieldWordQueryText", "description":"(query as cts:field-word-query)"}, {"content":"cts.fieldWordQueryFieldName(${1:query as cts:field-word-query})", "trigger":"cts.fieldWordQueryFieldName", "description":"(query as cts:field-word-query)"}, {"content":"cts.fieldWordQueryOptions(${1:query as cts:field-word-query})", "trigger":"cts.fieldWordQueryOptions", "description":"(query as cts:field-word-query)"}, {"content":"cts.fieldWordQueryWeight(${1:query as cts:field-word-query})", "trigger":"cts.fieldWordQueryWeight", "description":"(query as cts:field-word-query)"}, {"content":"cts.fieldValueQuery(${1:field-name as xs:string*}, ${2:text as xs:anyAtomicType*})", "trigger":"cts.fieldValueQuery", "description":"(field-name as xs:string*, text as xs:anyAtomicType*)"}, {"content":"cts.fieldValueQuery(${1:field-name as xs:string*}, ${2:text as xs:anyAtomicType*}, ${3:options as xs:string*})", "trigger":"cts.fieldValueQuery", "description":"(field-name as xs:string*, text as xs:anyAtomicType*, options as xs:string*)"}, {"content":"cts.fieldValueQuery(${1:field-name as xs:string*}, ${2:text as xs:anyAtomicType*}, ${3:options as xs:string*}, ${4:weight as xs:double?})", "trigger":"cts.fieldValueQuery", "description":"(field-name as xs:string*, text as xs:anyAtomicType*, options as xs:string*, weight as xs:double?)"}, {"content":"cts.fieldValueQueryText(${1:query as cts:field-value-query})", "trigger":"cts.fieldValueQueryText", "description":"(query as cts:field-value-query)"}, {"content":"cts.fieldValueQueryFieldName(${1:query as cts:field-value-query})", "trigger":"cts.fieldValueQueryFieldName", "description":"(query as cts:field-value-query)"}, {"content":"cts.fieldValueQueryOptions(${1:query as cts:field-value-query})", "trigger":"cts.fieldValueQueryOptions", "description":"(query as cts:field-value-query)"}, {"content":"cts.fieldValueQueryWeight(${1:query as cts:field-value-query})", "trigger":"cts.fieldValueQueryWeight", "description":"(query as cts:field-value-query)"}, {"content":"cts.elementAttributeRangeQuery(${1:element-name as xs:QName*}, ${2:attribute-name as xs:QName*}, ${3:operator as String}, ${4:value as xs:anyAtomicType*})", "trigger":"cts.elementAttributeRangeQuery", "description":"(element-name as xs:QName*, attribute-name as xs:QName*, operator as String, value as xs:anyAtomicType*)"}, {"content":"cts.elementAttributeRangeQuery(${1:element-name as xs:QName*}, ${2:attribute-name as xs:QName*}, ${3:operator as String}, ${4:value as xs:anyAtomicType*}, ${5:options as xs:string*})", "trigger":"cts.elementAttributeRangeQuery", "description":"(element-name as xs:QName*, attribute-name as xs:QName*, operator as String, value as xs:anyAtomicType*, options as xs:string*)"}, {"content":"cts.elementAttributeRangeQuery(${1:element-name as xs:QName*}, ${2:attribute-name as xs:QName*}, ${3:operator as String}, ${4:value as xs:anyAtomicType*}, ${5:options as xs:string*}, ${6:weight as xs:double?})", "trigger":"cts.elementAttributeRangeQuery", "description":"(element-name as xs:QName*, attribute-name as xs:QName*, operator as String, value as xs:anyAtomicType*, options as xs:string*, weight as xs:double?)"}, {"content":"cts.elementAttributeRangeQueryElementName(${1:query as cts:element-attribute-range-query})", "trigger":"cts.elementAttributeRangeQueryElementName", "description":"(query as cts:element-attribute-range-query)"}, {"content":"cts.elementAttributeRangeQueryAttributeName(${1:query as cts:element-attribute-range-query})", "trigger":"cts.elementAttributeRangeQueryAttributeName", "description":"(query as cts:element-attribute-range-query)"}, {"content":"cts.elementAttributeRangeQueryOperator(${1:query as cts:element-attribute-range-query})", "trigger":"cts.elementAttributeRangeQueryOperator", "description":"(query as cts:element-attribute-range-query)"}, {"content":"cts.elementAttributeRangeQueryValue(${1:query as cts:element-attribute-range-query})", "trigger":"cts.elementAttributeRangeQueryValue", "description":"(query as cts:element-attribute-range-query)"}, {"content":"cts.elementAttributeRangeQueryOptions(${1:query as cts:element-attribute-range-query})", "trigger":"cts.elementAttributeRangeQueryOptions", "description":"(query as cts:element-attribute-range-query)"}, {"content":"cts.elementAttributeRangeQueryWeight(${1:query as cts:element-attribute-range-query})", "trigger":"cts.elementAttributeRangeQueryWeight", "description":"(query as cts:element-attribute-range-query)"}, {"content":"cts.elementAttributeValueQuery(${1:element-name as xs:QName*}, ${2:attribute-name as xs:QName*}, ${3:text as xs:string*})", "trigger":"cts.elementAttributeValueQuery", "description":"(element-name as xs:QName*, attribute-name as xs:QName*, text as xs:string*)"}, {"content":"cts.elementAttributeValueQuery(${1:element-name as xs:QName*}, ${2:attribute-name as xs:QName*}, ${3:text as xs:string*}, ${4:options as xs:string*})", "trigger":"cts.elementAttributeValueQuery", "description":"(element-name as xs:QName*, attribute-name as xs:QName*, text as xs:string*, options as xs:string*)"}, {"content":"cts.elementAttributeValueQuery(${1:element-name as xs:QName*}, ${2:attribute-name as xs:QName*}, ${3:text as xs:string*}, ${4:options as xs:string*}, ${5:weight as xs:double?})", "trigger":"cts.elementAttributeValueQuery", "description":"(element-name as xs:QName*, attribute-name as xs:QName*, text as xs:string*, options as xs:string*, weight as xs:double?)"}, {"content":"cts.elementAttributeValueQueryText(${1:query as cts:element-attribute-value-query})", "trigger":"cts.elementAttributeValueQueryText", "description":"(query as cts:element-attribute-value-query)"}, {"content":"cts.elementAttributeValueQueryElementName(${1:query as cts:element-attribute-value-query})", "trigger":"cts.elementAttributeValueQueryElementName", "description":"(query as cts:element-attribute-value-query)"}, {"content":"cts.elementAttributeValueQueryAttributeName(${1:query as cts:element-attribute-value-query})", "trigger":"cts.elementAttributeValueQueryAttributeName", "description":"(query as cts:element-attribute-value-query)"}, {"content":"cts.elementAttributeValueQueryOptions(${1:query as cts:element-attribute-value-query})", "trigger":"cts.elementAttributeValueQueryOptions", "description":"(query as cts:element-attribute-value-query)"}, {"content":"cts.elementAttributeValueQueryWeight(${1:query as cts:element-attribute-value-query})", "trigger":"cts.elementAttributeValueQueryWeight", "description":"(query as cts:element-attribute-value-query)"}, {"content":"cts.elementAttributeWordQuery(${1:element-name as xs:QName*}, ${2:attribute-name as xs:QName*}, ${3:text as xs:string*})", "trigger":"cts.elementAttributeWordQuery", "description":"(element-name as xs:QName*, attribute-name as xs:QName*, text as xs:string*)"}, {"content":"cts.elementAttributeWordQuery(${1:element-name as xs:QName*}, ${2:attribute-name as xs:QName*}, ${3:text as xs:string*}, ${4:options as xs:string*})", "trigger":"cts.elementAttributeWordQuery", "description":"(element-name as xs:QName*, attribute-name as xs:QName*, text as xs:string*, options as xs:string*)"}, {"content":"cts.elementAttributeWordQuery(${1:element-name as xs:QName*}, ${2:attribute-name as xs:QName*}, ${3:text as xs:string*}, ${4:options as xs:string*}, ${5:weight as xs:double?})", "trigger":"cts.elementAttributeWordQuery", "description":"(element-name as xs:QName*, attribute-name as xs:QName*, text as xs:string*, options as xs:string*, weight as xs:double?)"}, {"content":"cts.elementAttributeWordQueryText(${1:query as cts:element-attribute-word-query})", "trigger":"cts.elementAttributeWordQueryText", "description":"(query as cts:element-attribute-word-query)"}, {"content":"cts.elementAttributeWordQueryElementName(${1:query as cts:element-attribute-word-query})", "trigger":"cts.elementAttributeWordQueryElementName", "description":"(query as cts:element-attribute-word-query)"}, {"content":"cts.elementAttributeWordQueryAttributeName(${1:query as cts:element-attribute-word-query})", "trigger":"cts.elementAttributeWordQueryAttributeName", "description":"(query as cts:element-attribute-word-query)"}, {"content":"cts.elementAttributeWordQueryOptions(${1:query as cts:element-attribute-word-query})", "trigger":"cts.elementAttributeWordQueryOptions", "description":"(query as cts:element-attribute-word-query)"}, {"content":"cts.elementAttributeWordQueryWeight(${1:query as cts:element-attribute-word-query})", "trigger":"cts.elementAttributeWordQueryWeight", "description":"(query as cts:element-attribute-word-query)"}, {"content":"cts.similarQuery(${1:nodes as node()*})", "trigger":"cts.similarQuery", "description":"(nodes as node()*)"}, {"content":"cts.similarQuery(${1:nodes as node()*}, ${2:weight as xs:double?})", "trigger":"cts.similarQuery", "description":"(nodes as node()*, weight as xs:double?)"}, {"content":"cts.similarQuery(${1:nodes as node()*}, ${2:weight as xs:double?}, ${3:options as element()?})", "trigger":"cts.similarQuery", "description":"(nodes as node()*, weight as xs:double?, options as element()?)"}, {"content":"cts.similarQueryNodes(${1:query as cts:similar-query})", "trigger":"cts.similarQueryNodes", "description":"(query as cts:similar-query)"}, {"content":"cts.similarQueryWeight(${1:query as cts:similar-query})", "trigger":"cts.similarQueryWeight", "description":"(query as cts:similar-query)"}, {"content":"cts.contains(${1:nodes as item()*}, ${2:query as cts:query})", "trigger":"cts.contains", "description":"(nodes as item()*, query as cts:query)"}, {"content":"cts.search(${1:query as cts:query?})", "trigger":"cts.search", "description":"(query as cts:query?)"}, {"content":"cts.search(${1:query as cts:query?}, ${2:options as (cts:order|xs:string)*})", "trigger":"cts.search", "description":"(query as cts:query?, options as (cts:order|xs:string)*)"}, {"content":"cts.search(${1:query as cts:query?}, ${2:options as (cts:order|xs:string)*}, ${3:quality-weight as xs:double?})", "trigger":"cts.search", "description":"(query as cts:query?, options as (cts:order|xs:string)*, quality-weight as xs:double?)"}, {"content":"cts.search(${1:query as cts:query?}, ${2:options as (cts:order|xs:string)*}, ${3:quality-weight as xs:double?}, ${4:forest-ids as xs:unsignedLong*})", "trigger":"cts.search", "description":"(query as cts:query?, options as (cts:order|xs:string)*, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.quality()", "trigger":"cts.quality", "description":"()"}, {"content":"cts.quality(${1:node as node()})", "trigger":"cts.quality", "description":"(node as node())"}, {"content":"cts.score()", "trigger":"cts.score", "description":"()"}, {"content":"cts.score(${1:node as node()})", "trigger":"cts.score", "description":"(node as node())"}, {"content":"cts.relevanceInfo()", "trigger":"cts.relevanceInfo", "description":"()"}, {"content":"cts.relevanceInfo(${1:node as node()})", "trigger":"cts.relevanceInfo", "description":"(node as node())"}, {"content":"cts.relevanceInfo(${1:node as node()}, ${2:output-kind as String})", "trigger":"cts.relevanceInfo", "description":"(node as node(), output-kind as String)"}, {"content":"cts.confidence()", "trigger":"cts.confidence", "description":"()"}, {"content":"cts.confidence(${1:node as node()})", "trigger":"cts.confidence", "description":"(node as node())"}, {"content":"cts.fitness()", "trigger":"cts.fitness", "description":"()"}, {"content":"cts.fitness(${1:node as node()})", "trigger":"cts.fitness", "description":"(node as node())"}, {"content":"cts.remainder()", "trigger":"cts.remainder", "description":"()"}, {"content":"cts.remainder(${1:node as node()})", "trigger":"cts.remainder", "description":"(node as node())"}, {"content":"cts.tokenize(${1:text as String})", "trigger":"cts.tokenize", "description":"(text as String)"}, {"content":"cts.tokenize(${1:text as String}, ${2:language as xs:string?})", "trigger":"cts.tokenize", "description":"(text as String, language as xs:string?)"}, {"content":"cts.tokenize(${1:text as String}, ${2:language as xs:string?}, ${3:field as xs:string?})", "trigger":"cts.tokenize", "description":"(text as String, language as xs:string?, field as xs:string?)"}, {"content":"cts.stem(${1:text as String})", "trigger":"cts.stem", "description":"(text as String)"}, {"content":"cts.stem(${1:text as String}, ${2:language as xs:string?})", "trigger":"cts.stem", "description":"(text as String, language as xs:string?)"}, {"content":"cts.nearQuery(${1:queries as cts:query*})", "trigger":"cts.nearQuery", "description":"(queries as cts:query*)"}, {"content":"cts.nearQuery(${1:queries as cts:query*}, ${2:distance as xs:double?})", "trigger":"cts.nearQuery", "description":"(queries as cts:query*, distance as xs:double?)"}, {"content":"cts.nearQuery(${1:queries as cts:query*}, ${2:distance as xs:double?}, ${3:options as xs:string*})", "trigger":"cts.nearQuery", "description":"(queries as cts:query*, distance as xs:double?, options as xs:string*)"}, {"content":"cts.nearQuery(${1:queries as cts:query*}, ${2:distance as xs:double?}, ${3:options as xs:string*}, ${4:distance-weight as xs:double?})", "trigger":"cts.nearQuery", "description":"(queries as cts:query*, distance as xs:double?, options as xs:string*, distance-weight as xs:double?)"}, {"content":"cts.nearQueryQueries(${1:query as cts:near-query})", "trigger":"cts.nearQueryQueries", "description":"(query as cts:near-query)"}, {"content":"cts.nearQueryDistance(${1:query as cts:near-query})", "trigger":"cts.nearQueryDistance", "description":"(query as cts:near-query)"}, {"content":"cts.nearQueryOptions(${1:query as cts:near-query})", "trigger":"cts.nearQueryOptions", "description":"(query as cts:near-query)"}, {"content":"cts.nearQueryWeight(${1:query as cts:near-query})", "trigger":"cts.nearQueryWeight", "description":"(query as cts:near-query)"}, {"content":"cts.notInQuery(${1:positive-query as cts:query}, ${2:negative-query as cts:query})", "trigger":"cts.notInQuery", "description":"(positive-query as cts:query, negative-query as cts:query)"}, {"content":"cts.notInQueryPositiveQuery(${1:query as cts:not-in-query})", "trigger":"cts.notInQueryPositiveQuery", "description":"(query as cts:not-in-query)"}, {"content":"cts.notInQueryNegativeQuery(${1:query as cts:not-in-query})", "trigger":"cts.notInQueryNegativeQuery", "description":"(query as cts:not-in-query)"}, {"content":"cts.elementQuery(${1:element-name as xs:QName*}, ${2:query as cts:query})", "trigger":"cts.elementQuery", "description":"(element-name as xs:QName*, query as cts:query)"}, {"content":"cts.elementQueryElementName(${1:query as cts:element-query})", "trigger":"cts.elementQueryElementName", "description":"(query as cts:element-query)"}, {"content":"cts.elementQueryQuery(${1:query as cts:element-query})", "trigger":"cts.elementQueryQuery", "description":"(query as cts:element-query)"}, {"content":"cts.jsonPropertyScopeQuery(${1:property-name as xs:string*}, ${2:query as cts:query})", "trigger":"cts.jsonPropertyScopeQuery", "description":"(property-name as xs:string*, query as cts:query)"}, {"content":"cts.jsonPropertyScopeQueryPropertyName(${1:query as cts:json-property-scope-query})", "trigger":"cts.jsonPropertyScopeQueryPropertyName", "description":"(query as cts:json-property-scope-query)"}, {"content":"cts.jsonPropertyScopeQueryQuery(${1:query as cts:json-property-scope-query})", "trigger":"cts.jsonPropertyScopeQueryQuery", "description":"(query as cts:json-property-scope-query)"}, {"content":"cts.documentQuery(${1:uris as xs:string*})", "trigger":"cts.documentQuery", "description":"(uris as xs:string*)"}, {"content":"cts.documentQueryUris(${1:query as cts:document-query})", "trigger":"cts.documentQueryUris", "description":"(query as cts:document-query)"}, {"content":"cts.collectionQuery(${1:uris as xs:string*})", "trigger":"cts.collectionQuery", "description":"(uris as xs:string*)"}, {"content":"cts.collectionQueryUris(${1:query as cts:collection-query})", "trigger":"cts.collectionQueryUris", "description":"(query as cts:collection-query)"}, {"content":"cts.directoryQuery(${1:uris as xs:string*})", "trigger":"cts.directoryQuery", "description":"(uris as xs:string*)"}, {"content":"cts.directoryQuery(${1:uris as xs:string*}, ${2:depth as xs:string?})", "trigger":"cts.directoryQuery", "description":"(uris as xs:string*, depth as xs:string?)"}, {"content":"cts.directoryQueryUris(${1:query as cts:directory-query})", "trigger":"cts.directoryQueryUris", "description":"(query as cts:directory-query)"}, {"content":"cts.directoryQueryDepth(${1:query as cts:directory-query})", "trigger":"cts.directoryQueryDepth", "description":"(query as cts:directory-query)"}, {"content":"cts.register(${1:query as cts:query})", "trigger":"cts.register", "description":"(query as cts:query)"}, {"content":"cts.deregister(${1:id as xs:unsignedLong})", "trigger":"cts.deregister", "description":"(id as xs:unsignedLong)"}, {"content":"cts.registeredQuery(${1:ids as xs:unsignedLong*})", "trigger":"cts.registeredQuery", "description":"(ids as xs:unsignedLong*)"}, {"content":"cts.registeredQuery(${1:ids as xs:unsignedLong*}, ${2:options as xs:string*})", "trigger":"cts.registeredQuery", "description":"(ids as xs:unsignedLong*, options as xs:string*)"}, {"content":"cts.registeredQuery(${1:ids as xs:unsignedLong*}, ${2:options as xs:string*}, ${3:weight as xs:double?})", "trigger":"cts.registeredQuery", "description":"(ids as xs:unsignedLong*, options as xs:string*, weight as xs:double?)"}, {"content":"cts.registeredQueryIds(${1:query as cts:registered-query})", "trigger":"cts.registeredQueryIds", "description":"(query as cts:registered-query)"}, {"content":"cts.registeredQueryOptions(${1:query as cts:registered-query})", "trigger":"cts.registeredQueryOptions", "description":"(query as cts:registered-query)"}, {"content":"cts.registeredQueryWeight(${1:query as cts:registered-query})", "trigger":"cts.registeredQueryWeight", "description":"(query as cts:registered-query)"}, {"content":"cts.words()", "trigger":"cts.words", "description":"()"}, {"content":"cts.words(${1:start as xs:string?})", "trigger":"cts.words", "description":"(start as xs:string?)"}, {"content":"cts.words(${1:start as xs:string?}, ${2:options as xs:string*})", "trigger":"cts.words", "description":"(start as xs:string?, options as xs:string*)"}, {"content":"cts.words(${1:start as xs:string?}, ${2:options as xs:string*}, ${3:query as cts:query?})", "trigger":"cts.words", "description":"(start as xs:string?, options as xs:string*, query as cts:query?)"}, {"content":"cts.words(${1:start as xs:string?}, ${2:options as xs:string*}, ${3:query as cts:query?}, ${4:quality-weight as xs:double?})", "trigger":"cts.words", "description":"(start as xs:string?, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.words(${1:start as xs:string?}, ${2:options as xs:string*}, ${3:query as cts:query?}, ${4:quality-weight as xs:double?}, ${5:forest-ids as xs:unsignedLong*})", "trigger":"cts.words", "description":"(start as xs:string?, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.wordMatch(${1:pattern as String})", "trigger":"cts.wordMatch", "description":"(pattern as String)"}, {"content":"cts.wordMatch(${1:pattern as String}, ${2:options as xs:string*})", "trigger":"cts.wordMatch", "description":"(pattern as String, options as xs:string*)"}, {"content":"cts.wordMatch(${1:pattern as String}, ${2:options as xs:string*}, ${3:query as cts:query?})", "trigger":"cts.wordMatch", "description":"(pattern as String, options as xs:string*, query as cts:query?)"}, {"content":"cts.wordMatch(${1:pattern as String}, ${2:options as xs:string*}, ${3:query as cts:query?}, ${4:quality-weight as xs:double?})", "trigger":"cts.wordMatch", "description":"(pattern as String, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.wordMatch(${1:pattern as String}, ${2:options as xs:string*}, ${3:query as cts:query?}, ${4:quality-weight as xs:double?}, ${5:forest-ids as xs:unsignedLong*})", "trigger":"cts.wordMatch", "description":"(pattern as String, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.elementWords(${1:element-names as xs:QName*})", "trigger":"cts.elementWords", "description":"(element-names as xs:QName*)"}, {"content":"cts.elementWords(${1:element-names as xs:QName*}, ${2:start as xs:string?})", "trigger":"cts.elementWords", "description":"(element-names as xs:QName*, start as xs:string?)"}, {"content":"cts.elementWords(${1:element-names as xs:QName*}, ${2:start as xs:string?}, ${3:options as xs:string*})", "trigger":"cts.elementWords", "description":"(element-names as xs:QName*, start as xs:string?, options as xs:string*)"}, {"content":"cts.elementWords(${1:element-names as xs:QName*}, ${2:start as xs:string?}, ${3:options as xs:string*}, ${4:query as cts:query?})", "trigger":"cts.elementWords", "description":"(element-names as xs:QName*, start as xs:string?, options as xs:string*, query as cts:query?)"}, {"content":"cts.elementWords(${1:element-names as xs:QName*}, ${2:start as xs:string?}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?})", "trigger":"cts.elementWords", "description":"(element-names as xs:QName*, start as xs:string?, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.elementWords(${1:element-names as xs:QName*}, ${2:start as xs:string?}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?}, ${6:forest-ids as xs:unsignedLong*})", "trigger":"cts.elementWords", "description":"(element-names as xs:QName*, start as xs:string?, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.jsonPropertyWords(${1:property-names as xs:string*})", "trigger":"cts.jsonPropertyWords", "description":"(property-names as xs:string*)"}, {"content":"cts.jsonPropertyWords(${1:property-names as xs:string*}, ${2:start as xs:string?})", "trigger":"cts.jsonPropertyWords", "description":"(property-names as xs:string*, start as xs:string?)"}, {"content":"cts.jsonPropertyWords(${1:property-names as xs:string*}, ${2:start as xs:string?}, ${3:options as xs:string*})", "trigger":"cts.jsonPropertyWords", "description":"(property-names as xs:string*, start as xs:string?, options as xs:string*)"}, {"content":"cts.jsonPropertyWords(${1:property-names as xs:string*}, ${2:start as xs:string?}, ${3:options as xs:string*}, ${4:query as cts:query?})", "trigger":"cts.jsonPropertyWords", "description":"(property-names as xs:string*, start as xs:string?, options as xs:string*, query as cts:query?)"}, {"content":"cts.jsonPropertyWords(${1:property-names as xs:string*}, ${2:start as xs:string?}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?})", "trigger":"cts.jsonPropertyWords", "description":"(property-names as xs:string*, start as xs:string?, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.jsonPropertyWords(${1:property-names as xs:string*}, ${2:start as xs:string?}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?}, ${6:forest-ids as xs:unsignedLong*})", "trigger":"cts.jsonPropertyWords", "description":"(property-names as xs:string*, start as xs:string?, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.elementWordMatch(${1:element-names as xs:QName*}, ${2:pattern as xs:string?})", "trigger":"cts.elementWordMatch", "description":"(element-names as xs:QName*, pattern as xs:string?)"}, {"content":"cts.elementWordMatch(${1:element-names as xs:QName*}, ${2:pattern as xs:string?}, ${3:options as xs:string*})", "trigger":"cts.elementWordMatch", "description":"(element-names as xs:QName*, pattern as xs:string?, options as xs:string*)"}, {"content":"cts.elementWordMatch(${1:element-names as xs:QName*}, ${2:pattern as xs:string?}, ${3:options as xs:string*}, ${4:query as cts:query?})", "trigger":"cts.elementWordMatch", "description":"(element-names as xs:QName*, pattern as xs:string?, options as xs:string*, query as cts:query?)"}, {"content":"cts.elementWordMatch(${1:element-names as xs:QName*}, ${2:pattern as xs:string?}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?})", "trigger":"cts.elementWordMatch", "description":"(element-names as xs:QName*, pattern as xs:string?, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.elementWordMatch(${1:element-names as xs:QName*}, ${2:pattern as xs:string?}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?}, ${6:forest-ids as xs:unsignedLong*})", "trigger":"cts.elementWordMatch", "description":"(element-names as xs:QName*, pattern as xs:string?, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.jsonPropertyWordMatch(${1:property-names as xs:string*}, ${2:pattern as xs:string?})", "trigger":"cts.jsonPropertyWordMatch", "description":"(property-names as xs:string*, pattern as xs:string?)"}, {"content":"cts.jsonPropertyWordMatch(${1:property-names as xs:string*}, ${2:pattern as xs:string?}, ${3:options as xs:string*})", "trigger":"cts.jsonPropertyWordMatch", "description":"(property-names as xs:string*, pattern as xs:string?, options as xs:string*)"}, {"content":"cts.jsonPropertyWordMatch(${1:property-names as xs:string*}, ${2:pattern as xs:string?}, ${3:options as xs:string*}, ${4:query as cts:query?})", "trigger":"cts.jsonPropertyWordMatch", "description":"(property-names as xs:string*, pattern as xs:string?, options as xs:string*, query as cts:query?)"}, {"content":"cts.jsonPropertyWordMatch(${1:property-names as xs:string*}, ${2:pattern as xs:string?}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?})", "trigger":"cts.jsonPropertyWordMatch", "description":"(property-names as xs:string*, pattern as xs:string?, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.jsonPropertyWordMatch(${1:property-names as xs:string*}, ${2:pattern as xs:string?}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?}, ${6:forest-ids as xs:unsignedLong*})", "trigger":"cts.jsonPropertyWordMatch", "description":"(property-names as xs:string*, pattern as xs:string?, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.elementValues(${1:element-names as xs:QName*})", "trigger":"cts.elementValues", "description":"(element-names as xs:QName*)"}, {"content":"cts.elementValues(${1:element-names as xs:QName*}, ${2:start as xs:anyAtomicType?})", "trigger":"cts.elementValues", "description":"(element-names as xs:QName*, start as xs:anyAtomicType?)"}, {"content":"cts.elementValues(${1:element-names as xs:QName*}, ${2:start as xs:anyAtomicType?}, ${3:options as xs:string*})", "trigger":"cts.elementValues", "description":"(element-names as xs:QName*, start as xs:anyAtomicType?, options as xs:string*)"}, {"content":"cts.elementValues(${1:element-names as xs:QName*}, ${2:start as xs:anyAtomicType?}, ${3:options as xs:string*}, ${4:query as cts:query?})", "trigger":"cts.elementValues", "description":"(element-names as xs:QName*, start as xs:anyAtomicType?, options as xs:string*, query as cts:query?)"}, {"content":"cts.elementValues(${1:element-names as xs:QName*}, ${2:start as xs:anyAtomicType?}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?})", "trigger":"cts.elementValues", "description":"(element-names as xs:QName*, start as xs:anyAtomicType?, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.elementValues(${1:element-names as xs:QName*}, ${2:start as xs:anyAtomicType?}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?}, ${6:forest-ids as xs:unsignedLong*})", "trigger":"cts.elementValues", "description":"(element-names as xs:QName*, start as xs:anyAtomicType?, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.fieldValues(${1:field-names as xs:string*})", "trigger":"cts.fieldValues", "description":"(field-names as xs:string*)"}, {"content":"cts.fieldValues(${1:field-names as xs:string*}, ${2:start as xs:anyAtomicType?})", "trigger":"cts.fieldValues", "description":"(field-names as xs:string*, start as xs:anyAtomicType?)"}, {"content":"cts.fieldValues(${1:field-names as xs:string*}, ${2:start as xs:anyAtomicType?}, ${3:options as xs:string*})", "trigger":"cts.fieldValues", "description":"(field-names as xs:string*, start as xs:anyAtomicType?, options as xs:string*)"}, {"content":"cts.fieldValues(${1:field-names as xs:string*}, ${2:start as xs:anyAtomicType?}, ${3:options as xs:string*}, ${4:query as cts:query?})", "trigger":"cts.fieldValues", "description":"(field-names as xs:string*, start as xs:anyAtomicType?, options as xs:string*, query as cts:query?)"}, {"content":"cts.fieldValues(${1:field-names as xs:string*}, ${2:start as xs:anyAtomicType?}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?})", "trigger":"cts.fieldValues", "description":"(field-names as xs:string*, start as xs:anyAtomicType?, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.fieldValues(${1:field-names as xs:string*}, ${2:start as xs:anyAtomicType?}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?}, ${6:forest-ids as xs:unsignedLong*})", "trigger":"cts.fieldValues", "description":"(field-names as xs:string*, start as xs:anyAtomicType?, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.values(${1:range-indexes as cts:reference*})", "trigger":"cts.values", "description":"(range-indexes as cts:reference*)"}, {"content":"cts.values(${1:range-indexes as cts:reference*}, ${2:start as xs:anyAtomicType?})", "trigger":"cts.values", "description":"(range-indexes as cts:reference*, start as xs:anyAtomicType?)"}, {"content":"cts.values(${1:range-indexes as cts:reference*}, ${2:start as xs:anyAtomicType?}, ${3:options as xs:string*})", "trigger":"cts.values", "description":"(range-indexes as cts:reference*, start as xs:anyAtomicType?, options as xs:string*)"}, {"content":"cts.values(${1:range-indexes as cts:reference*}, ${2:start as xs:anyAtomicType?}, ${3:options as xs:string*}, ${4:query as cts:query?})", "trigger":"cts.values", "description":"(range-indexes as cts:reference*, start as xs:anyAtomicType?, options as xs:string*, query as cts:query?)"}, {"content":"cts.values(${1:range-indexes as cts:reference*}, ${2:start as xs:anyAtomicType?}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?})", "trigger":"cts.values", "description":"(range-indexes as cts:reference*, start as xs:anyAtomicType?, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.values(${1:range-indexes as cts:reference*}, ${2:start as xs:anyAtomicType?}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?}, ${6:forest-ids as xs:unsignedLong*})", "trigger":"cts.values", "description":"(range-indexes as cts:reference*, start as xs:anyAtomicType?, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.triples()", "trigger":"cts.triples", "description":"()"}, {"content":"cts.triples(${1:subject as xs:anyAtomicType*})", "trigger":"cts.triples", "description":"(subject as xs:anyAtomicType*)"}, {"content":"cts.triples(${1:subject as xs:anyAtomicType*}, ${2:predicate as xs:anyAtomicType*})", "trigger":"cts.triples", "description":"(subject as xs:anyAtomicType*, predicate as xs:anyAtomicType*)"}, {"content":"cts.triples(${1:subject as xs:anyAtomicType*}, ${2:predicate as xs:anyAtomicType*}, ${3:object as xs:anyAtomicType*})", "trigger":"cts.triples", "description":"(subject as xs:anyAtomicType*, predicate as xs:anyAtomicType*, object as xs:anyAtomicType*)"}, {"content":"cts.triples(${1:subject as xs:anyAtomicType*}, ${2:predicate as xs:anyAtomicType*}, ${3:object as xs:anyAtomicType*}, ${4:operator as xs:string*})", "trigger":"cts.triples", "description":"(subject as xs:anyAtomicType*, predicate as xs:anyAtomicType*, object as xs:anyAtomicType*, operator as xs:string*)"}, {"content":"cts.triples(${1:subject as xs:anyAtomicType*}, ${2:predicate as xs:anyAtomicType*}, ${3:object as xs:anyAtomicType*}, ${4:operator as xs:string*}, ${5:options as xs:string*})", "trigger":"cts.triples", "description":"(subject as xs:anyAtomicType*, predicate as xs:anyAtomicType*, object as xs:anyAtomicType*, operator as xs:string*, options as xs:string*)"}, {"content":"cts.triples(${1:subject as xs:anyAtomicType*}, ${2:predicate as xs:anyAtomicType*}, ${3:object as xs:anyAtomicType*}, ${4:operator as xs:string*}, ${5:options as xs:string*}, ${6:query as cts:query?})", "trigger":"cts.triples", "description":"(subject as xs:anyAtomicType*, predicate as xs:anyAtomicType*, object as xs:anyAtomicType*, operator as xs:string*, options as xs:string*, query as cts:query?)"}, {"content":"cts.triples(${1:subject as xs:anyAtomicType*}, ${2:predicate as xs:anyAtomicType*}, ${3:object as xs:anyAtomicType*}, ${4:operator as xs:string*}, ${5:options as xs:string*}, ${6:query as cts:query?}, ${7:forest-ids as xs:unsignedLong*})", "trigger":"cts.triples", "description":"(subject as xs:anyAtomicType*, predicate as xs:anyAtomicType*, object as xs:anyAtomicType*, operator as xs:string*, options as xs:string*, query as cts:query?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.tripleValueStatistics()", "trigger":"cts.tripleValueStatistics", "description":"()"}, {"content":"cts.tripleValueStatistics(${1:values as xs:anyAtomicType*})", "trigger":"cts.tripleValueStatistics", "description":"(values as xs:anyAtomicType*)"}, {"content":"cts.tripleValueStatistics(${1:values as xs:anyAtomicType*}, ${2:forest-ids as xs:unsignedLong*})", "trigger":"cts.tripleValueStatistics", "description":"(values as xs:anyAtomicType*, forest-ids as xs:unsignedLong*)"}, {"content":"cts.elementValueMatch(${1:element-names as xs:QName*}, ${2:pattern as xs:anyAtomicType})", "trigger":"cts.elementValueMatch", "description":"(element-names as xs:QName*, pattern as xs:anyAtomicType)"}, {"content":"cts.elementValueMatch(${1:element-names as xs:QName*}, ${2:pattern as xs:anyAtomicType}, ${3:options as xs:string*})", "trigger":"cts.elementValueMatch", "description":"(element-names as xs:QName*, pattern as xs:anyAtomicType, options as xs:string*)"}, {"content":"cts.elementValueMatch(${1:element-names as xs:QName*}, ${2:pattern as xs:anyAtomicType}, ${3:options as xs:string*}, ${4:query as cts:query?})", "trigger":"cts.elementValueMatch", "description":"(element-names as xs:QName*, pattern as xs:anyAtomicType, options as xs:string*, query as cts:query?)"}, {"content":"cts.elementValueMatch(${1:element-names as xs:QName*}, ${2:pattern as xs:anyAtomicType}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?})", "trigger":"cts.elementValueMatch", "description":"(element-names as xs:QName*, pattern as xs:anyAtomicType, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.elementValueMatch(${1:element-names as xs:QName*}, ${2:pattern as xs:anyAtomicType}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?}, ${6:forest-ids as xs:unsignedLong*})", "trigger":"cts.elementValueMatch", "description":"(element-names as xs:QName*, pattern as xs:anyAtomicType, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.elementValueCoOccurrences(${1:element-name-1 as xs:QName}, ${2:element-name-2 as xs:QName})", "trigger":"cts.elementValueCoOccurrences", "description":"(element-name-1 as xs:QName, element-name-2 as xs:QName)"}, {"content":"cts.elementValueCoOccurrences(${1:element-name-1 as xs:QName}, ${2:element-name-2 as xs:QName}, ${3:options as xs:string*})", "trigger":"cts.elementValueCoOccurrences", "description":"(element-name-1 as xs:QName, element-name-2 as xs:QName, options as xs:string*)"}, {"content":"cts.elementValueCoOccurrences(${1:element-name-1 as xs:QName}, ${2:element-name-2 as xs:QName}, ${3:options as xs:string*}, ${4:query as cts:query?})", "trigger":"cts.elementValueCoOccurrences", "description":"(element-name-1 as xs:QName, element-name-2 as xs:QName, options as xs:string*, query as cts:query?)"}, {"content":"cts.elementValueCoOccurrences(${1:element-name-1 as xs:QName}, ${2:element-name-2 as xs:QName}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?})", "trigger":"cts.elementValueCoOccurrences", "description":"(element-name-1 as xs:QName, element-name-2 as xs:QName, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.elementValueCoOccurrences(${1:element-name-1 as xs:QName}, ${2:element-name-2 as xs:QName}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?}, ${6:forest-ids as xs:unsignedLong*})", "trigger":"cts.elementValueCoOccurrences", "description":"(element-name-1 as xs:QName, element-name-2 as xs:QName, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.elementAttributeValueCoOccurrences(${1:element-name-1 as xs:QName}, ${2:attribute-name-1 as xs:QName?}, ${3:element-name-2 as xs:QName}, ${4:attribute-name-2 as xs:QName?})", "trigger":"cts.elementAttributeValueCoOccurrences", "description":"(element-name-1 as xs:QName, attribute-name-1 as xs:QName?, element-name-2 as xs:QName, attribute-name-2 as xs:QName?)"}, {"content":"cts.elementAttributeValueCoOccurrences(${1:element-name-1 as xs:QName}, ${2:attribute-name-1 as xs:QName?}, ${3:element-name-2 as xs:QName}, ${4:attribute-name-2 as xs:QName?}, ${5:options as xs:string*})", "trigger":"cts.elementAttributeValueCoOccurrences", "description":"(element-name-1 as xs:QName, attribute-name-1 as xs:QName?, element-name-2 as xs:QName, attribute-name-2 as xs:QName?, options as xs:string*)"}, {"content":"cts.elementAttributeValueCoOccurrences(${1:element-name-1 as xs:QName}, ${2:attribute-name-1 as xs:QName?}, ${3:element-name-2 as xs:QName}, ${4:attribute-name-2 as xs:QName?}, ${5:options as xs:string*}, ${6:query as cts:query?})", "trigger":"cts.elementAttributeValueCoOccurrences", "description":"(element-name-1 as xs:QName, attribute-name-1 as xs:QName?, element-name-2 as xs:QName, attribute-name-2 as xs:QName?, options as xs:string*, query as cts:query?)"}, {"content":"cts.elementAttributeValueCoOccurrences(${1:element-name-1 as xs:QName}, ${2:attribute-name-1 as xs:QName?}, ${3:element-name-2 as xs:QName}, ${4:attribute-name-2 as xs:QName?}, ${5:options as xs:string*}, ${6:query as cts:query?}, ${7:quality-weight as xs:double?})", "trigger":"cts.elementAttributeValueCoOccurrences", "description":"(element-name-1 as xs:QName, attribute-name-1 as xs:QName?, element-name-2 as xs:QName, attribute-name-2 as xs:QName?, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.elementAttributeValueCoOccurrences(${1:element-name-1 as xs:QName}, ${2:attribute-name-1 as xs:QName?}, ${3:element-name-2 as xs:QName}, ${4:attribute-name-2 as xs:QName?}, ${5:options as xs:string*}, ${6:query as cts:query?}, ${7:quality-weight as xs:double?}, ${8:forest-ids as xs:unsignedLong*})", "trigger":"cts.elementAttributeValueCoOccurrences", "description":"(element-name-1 as xs:QName, attribute-name-1 as xs:QName?, element-name-2 as xs:QName, attribute-name-2 as xs:QName?, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.valueMatch(${1:range-indexes as cts:reference*}, ${2:pattern as xs:anyAtomicType})", "trigger":"cts.valueMatch", "description":"(range-indexes as cts:reference*, pattern as xs:anyAtomicType)"}, {"content":"cts.valueMatch(${1:range-indexes as cts:reference*}, ${2:pattern as xs:anyAtomicType}, ${3:options as xs:string*})", "trigger":"cts.valueMatch", "description":"(range-indexes as cts:reference*, pattern as xs:anyAtomicType, options as xs:string*)"}, {"content":"cts.valueMatch(${1:range-indexes as cts:reference*}, ${2:pattern as xs:anyAtomicType}, ${3:options as xs:string*}, ${4:query as cts:query?})", "trigger":"cts.valueMatch", "description":"(range-indexes as cts:reference*, pattern as xs:anyAtomicType, options as xs:string*, query as cts:query?)"}, {"content":"cts.valueMatch(${1:range-indexes as cts:reference*}, ${2:pattern as xs:anyAtomicType}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?})", "trigger":"cts.valueMatch", "description":"(range-indexes as cts:reference*, pattern as xs:anyAtomicType, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.valueMatch(${1:range-indexes as cts:reference*}, ${2:pattern as xs:anyAtomicType}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?}, ${6:forest-ids as xs:unsignedLong*})", "trigger":"cts.valueMatch", "description":"(range-indexes as cts:reference*, pattern as xs:anyAtomicType, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.valueCoOccurrences(${1:range-index-1 as cts:reference}, ${2:range-index-2 as cts:reference})", "trigger":"cts.valueCoOccurrences", "description":"(range-index-1 as cts:reference, range-index-2 as cts:reference)"}, {"content":"cts.valueCoOccurrences(${1:range-index-1 as cts:reference}, ${2:range-index-2 as cts:reference}, ${3:options as xs:string*})", "trigger":"cts.valueCoOccurrences", "description":"(range-index-1 as cts:reference, range-index-2 as cts:reference, options as xs:string*)"}, {"content":"cts.valueCoOccurrences(${1:range-index-1 as cts:reference}, ${2:range-index-2 as cts:reference}, ${3:options as xs:string*}, ${4:query as cts:query?})", "trigger":"cts.valueCoOccurrences", "description":"(range-index-1 as cts:reference, range-index-2 as cts:reference, options as xs:string*, query as cts:query?)"}, {"content":"cts.valueCoOccurrences(${1:range-index-1 as cts:reference}, ${2:range-index-2 as cts:reference}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?})", "trigger":"cts.valueCoOccurrences", "description":"(range-index-1 as cts:reference, range-index-2 as cts:reference, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.valueCoOccurrences(${1:range-index-1 as cts:reference}, ${2:range-index-2 as cts:reference}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?}, ${6:forest-ids as xs:unsignedLong*})", "trigger":"cts.valueCoOccurrences", "description":"(range-index-1 as cts:reference, range-index-2 as cts:reference, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.valueRanges(${1:range-indexes as cts:reference*})", "trigger":"cts.valueRanges", "description":"(range-indexes as cts:reference*)"}, {"content":"cts.valueRanges(${1:range-indexes as cts:reference*}, ${2:bounds as xs:anyAtomicType*})", "trigger":"cts.valueRanges", "description":"(range-indexes as cts:reference*, bounds as xs:anyAtomicType*)"}, {"content":"cts.valueRanges(${1:range-indexes as cts:reference*}, ${2:bounds as xs:anyAtomicType*}, ${3:options as xs:string*})", "trigger":"cts.valueRanges", "description":"(range-indexes as cts:reference*, bounds as xs:anyAtomicType*, options as xs:string*)"}, {"content":"cts.valueRanges(${1:range-indexes as cts:reference*}, ${2:bounds as xs:anyAtomicType*}, ${3:options as xs:string*}, ${4:query as cts:query?})", "trigger":"cts.valueRanges", "description":"(range-indexes as cts:reference*, bounds as xs:anyAtomicType*, options as xs:string*, query as cts:query?)"}, {"content":"cts.valueRanges(${1:range-indexes as cts:reference*}, ${2:bounds as xs:anyAtomicType*}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?})", "trigger":"cts.valueRanges", "description":"(range-indexes as cts:reference*, bounds as xs:anyAtomicType*, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.valueRanges(${1:range-indexes as cts:reference*}, ${2:bounds as xs:anyAtomicType*}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?}, ${6:forest-ids as xs:unsignedLong*})", "trigger":"cts.valueRanges", "description":"(range-indexes as cts:reference*, bounds as xs:anyAtomicType*, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.referenceScalarType(${1:index as cts:reference})", "trigger":"cts.referenceScalarType", "description":"(index as cts:reference)"}, {"content":"cts.uriReference()", "trigger":"cts.uriReference", "description":"()"}, {"content":"cts.collectionReference()", "trigger":"cts.collectionReference", "description":"()"}, {"content":"cts.collectionReference(${1:options as xs:string*})", "trigger":"cts.collectionReference", "description":"(options as xs:string*)"}, {"content":"cts.elementReference(${1:element as xs:QName})", "trigger":"cts.elementReference", "description":"(element as xs:QName)"}, {"content":"cts.elementReference(${1:element as xs:QName}, ${2:options as xs:string*})", "trigger":"cts.elementReference", "description":"(element as xs:QName, options as xs:string*)"}, {"content":"cts.jsonPropertyReference(${1:property as String})", "trigger":"cts.jsonPropertyReference", "description":"(property as String)"}, {"content":"cts.jsonPropertyReference(${1:property as String}, ${2:options as xs:string*})", "trigger":"cts.jsonPropertyReference", "description":"(property as String, options as xs:string*)"}, {"content":"cts.elementAttributeReference(${1:element as xs:QName}, ${2:attribute as xs:QName})", "trigger":"cts.elementAttributeReference", "description":"(element as xs:QName, attribute as xs:QName)"}, {"content":"cts.elementAttributeReference(${1:element as xs:QName}, ${2:attribute as xs:QName}, ${3:options as xs:string*})", "trigger":"cts.elementAttributeReference", "description":"(element as xs:QName, attribute as xs:QName, options as xs:string*)"}, {"content":"cts.fieldReference(${1:field as String})", "trigger":"cts.fieldReference", "description":"(field as String)"}, {"content":"cts.fieldReference(${1:field as String}, ${2:options as xs:string*})", "trigger":"cts.fieldReference", "description":"(field as String, options as xs:string*)"}, {"content":"cts.pathReference(${1:path-expression as String})", "trigger":"cts.pathReference", "description":"(path-expression as String)"}, {"content":"cts.pathReference(${1:path-expression as String}, ${2:options as xs:string*})", "trigger":"cts.pathReference", "description":"(path-expression as String, options as xs:string*)"}, {"content":"cts.pathReference(${1:path-expression as String}, ${2:options as xs:string*}, ${3:map as map:map})", "trigger":"cts.pathReference", "description":"(path-expression as String, options as xs:string*, map as map:map)"}, {"content":"cts.valueTuples(${1:range-indexes as cts:reference*})", "trigger":"cts.valueTuples", "description":"(range-indexes as cts:reference*)"}, {"content":"cts.valueTuples(${1:range-indexes as cts:reference*}, ${2:options as xs:string*})", "trigger":"cts.valueTuples", "description":"(range-indexes as cts:reference*, options as xs:string*)"}, {"content":"cts.valueTuples(${1:range-indexes as cts:reference*}, ${2:options as xs:string*}, ${3:query as cts:query?})", "trigger":"cts.valueTuples", "description":"(range-indexes as cts:reference*, options as xs:string*, query as cts:query?)"}, {"content":"cts.valueTuples(${1:range-indexes as cts:reference*}, ${2:options as xs:string*}, ${3:query as cts:query?}, ${4:quality-weight as xs:double?})", "trigger":"cts.valueTuples", "description":"(range-indexes as cts:reference*, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.valueTuples(${1:range-indexes as cts:reference*}, ${2:options as xs:string*}, ${3:query as cts:query?}, ${4:quality-weight as xs:double?}, ${5:forest-ids as xs:unsignedLong*})", "trigger":"cts.valueTuples", "description":"(range-indexes as cts:reference*, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.aggregate(${1:native-plugin as String}, ${2:aggregate-name as String}, ${3:range-indexes as cts:reference*})", "trigger":"cts.aggregate", "description":"(native-plugin as String, aggregate-name as String, range-indexes as cts:reference*)"}, {"content":"cts.aggregate(${1:native-plugin as String}, ${2:aggregate-name as String}, ${3:range-indexes as cts:reference*}, ${4:argument as item()*})", "trigger":"cts.aggregate", "description":"(native-plugin as String, aggregate-name as String, range-indexes as cts:reference*, argument as item()*)"}, {"content":"cts.aggregate(${1:native-plugin as String}, ${2:aggregate-name as String}, ${3:range-indexes as cts:reference*}, ${4:argument as item()*}, ${5:options as xs:string*})", "trigger":"cts.aggregate", "description":"(native-plugin as String, aggregate-name as String, range-indexes as cts:reference*, argument as item()*, options as xs:string*)"}, {"content":"cts.aggregate(${1:native-plugin as String}, ${2:aggregate-name as String}, ${3:range-indexes as cts:reference*}, ${4:argument as item()*}, ${5:options as xs:string*}, ${6:query as cts:query?})", "trigger":"cts.aggregate", "description":"(native-plugin as String, aggregate-name as String, range-indexes as cts:reference*, argument as item()*, options as xs:string*, query as cts:query?)"}, {"content":"cts.aggregate(${1:native-plugin as String}, ${2:aggregate-name as String}, ${3:range-indexes as cts:reference*}, ${4:argument as item()*}, ${5:options as xs:string*}, ${6:query as cts:query?}, ${7:forest-ids as xs:unsignedLong*})", "trigger":"cts.aggregate", "description":"(native-plugin as String, aggregate-name as String, range-indexes as cts:reference*, argument as item()*, options as xs:string*, query as cts:query?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.countAggregate(${1:range-index as cts:reference})", "trigger":"cts.countAggregate", "description":"(range-index as cts:reference)"}, {"content":"cts.countAggregate(${1:range-index as cts:reference}, ${2:options as xs:string*})", "trigger":"cts.countAggregate", "description":"(range-index as cts:reference, options as xs:string*)"}, {"content":"cts.countAggregate(${1:range-index as cts:reference}, ${2:options as xs:string*}, ${3:query as cts:query?})", "trigger":"cts.countAggregate", "description":"(range-index as cts:reference, options as xs:string*, query as cts:query?)"}, {"content":"cts.countAggregate(${1:range-index as cts:reference}, ${2:options as xs:string*}, ${3:query as cts:query?}, ${4:forest-ids as xs:unsignedLong*})", "trigger":"cts.countAggregate", "description":"(range-index as cts:reference, options as xs:string*, query as cts:query?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.min(${1:range-index as cts:reference})", "trigger":"cts.min", "description":"(range-index as cts:reference)"}, {"content":"cts.min(${1:range-index as cts:reference}, ${2:options as xs:string*})", "trigger":"cts.min", "description":"(range-index as cts:reference, options as xs:string*)"}, {"content":"cts.min(${1:range-index as cts:reference}, ${2:options as xs:string*}, ${3:query as cts:query?})", "trigger":"cts.min", "description":"(range-index as cts:reference, options as xs:string*, query as cts:query?)"}, {"content":"cts.min(${1:range-index as cts:reference}, ${2:options as xs:string*}, ${3:query as cts:query?}, ${4:forest-ids as xs:unsignedLong*})", "trigger":"cts.min", "description":"(range-index as cts:reference, options as xs:string*, query as cts:query?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.max(${1:range-index as cts:reference})", "trigger":"cts.max", "description":"(range-index as cts:reference)"}, {"content":"cts.max(${1:range-index as cts:reference}, ${2:options as xs:string*})", "trigger":"cts.max", "description":"(range-index as cts:reference, options as xs:string*)"}, {"content":"cts.max(${1:range-index as cts:reference}, ${2:options as xs:string*}, ${3:query as cts:query?})", "trigger":"cts.max", "description":"(range-index as cts:reference, options as xs:string*, query as cts:query?)"}, {"content":"cts.max(${1:range-index as cts:reference}, ${2:options as xs:string*}, ${3:query as cts:query?}, ${4:forest-ids as xs:unsignedLong*})", "trigger":"cts.max", "description":"(range-index as cts:reference, options as xs:string*, query as cts:query?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.sumAggregate(${1:range-index as cts:reference})", "trigger":"cts.sumAggregate", "description":"(range-index as cts:reference)"}, {"content":"cts.sumAggregate(${1:range-index as cts:reference}, ${2:options as xs:string*})", "trigger":"cts.sumAggregate", "description":"(range-index as cts:reference, options as xs:string*)"}, {"content":"cts.sumAggregate(${1:range-index as cts:reference}, ${2:options as xs:string*}, ${3:query as cts:query?})", "trigger":"cts.sumAggregate", "description":"(range-index as cts:reference, options as xs:string*, query as cts:query?)"}, {"content":"cts.sumAggregate(${1:range-index as cts:reference}, ${2:options as xs:string*}, ${3:query as cts:query?}, ${4:forest-ids as xs:unsignedLong*})", "trigger":"cts.sumAggregate", "description":"(range-index as cts:reference, options as xs:string*, query as cts:query?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.avgAggregate(${1:range-index as cts:reference})", "trigger":"cts.avgAggregate", "description":"(range-index as cts:reference)"}, {"content":"cts.avgAggregate(${1:range-index as cts:reference}, ${2:options as xs:string*})", "trigger":"cts.avgAggregate", "description":"(range-index as cts:reference, options as xs:string*)"}, {"content":"cts.avgAggregate(${1:range-index as cts:reference}, ${2:options as xs:string*}, ${3:query as cts:query?})", "trigger":"cts.avgAggregate", "description":"(range-index as cts:reference, options as xs:string*, query as cts:query?)"}, {"content":"cts.avgAggregate(${1:range-index as cts:reference}, ${2:options as xs:string*}, ${3:query as cts:query?}, ${4:forest-ids as xs:unsignedLong*})", "trigger":"cts.avgAggregate", "description":"(range-index as cts:reference, options as xs:string*, query as cts:query?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.varianceP(${1:range-index as cts:reference})", "trigger":"cts.varianceP", "description":"(range-index as cts:reference)"}, {"content":"cts.varianceP(${1:range-index as cts:reference}, ${2:options as xs:string*})", "trigger":"cts.varianceP", "description":"(range-index as cts:reference, options as xs:string*)"}, {"content":"cts.varianceP(${1:range-index as cts:reference}, ${2:options as xs:string*}, ${3:query as cts:query?})", "trigger":"cts.varianceP", "description":"(range-index as cts:reference, options as xs:string*, query as cts:query?)"}, {"content":"cts.varianceP(${1:range-index as cts:reference}, ${2:options as xs:string*}, ${3:query as cts:query?}, ${4:forest-ids as xs:unsignedLong*})", "trigger":"cts.varianceP", "description":"(range-index as cts:reference, options as xs:string*, query as cts:query?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.variance(${1:range-index as cts:reference})", "trigger":"cts.variance", "description":"(range-index as cts:reference)"}, {"content":"cts.variance(${1:range-index as cts:reference}, ${2:options as xs:string*})", "trigger":"cts.variance", "description":"(range-index as cts:reference, options as xs:string*)"}, {"content":"cts.variance(${1:range-index as cts:reference}, ${2:options as xs:string*}, ${3:query as cts:query?})", "trigger":"cts.variance", "description":"(range-index as cts:reference, options as xs:string*, query as cts:query?)"}, {"content":"cts.variance(${1:range-index as cts:reference}, ${2:options as xs:string*}, ${3:query as cts:query?}, ${4:forest-ids as xs:unsignedLong*})", "trigger":"cts.variance", "description":"(range-index as cts:reference, options as xs:string*, query as cts:query?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.stddevP(${1:range-index as cts:reference})", "trigger":"cts.stddevP", "description":"(range-index as cts:reference)"}, {"content":"cts.stddevP(${1:range-index as cts:reference}, ${2:options as xs:string*})", "trigger":"cts.stddevP", "description":"(range-index as cts:reference, options as xs:string*)"}, {"content":"cts.stddevP(${1:range-index as cts:reference}, ${2:options as xs:string*}, ${3:query as cts:query?})", "trigger":"cts.stddevP", "description":"(range-index as cts:reference, options as xs:string*, query as cts:query?)"}, {"content":"cts.stddevP(${1:range-index as cts:reference}, ${2:options as xs:string*}, ${3:query as cts:query?}, ${4:forest-ids as xs:unsignedLong*})", "trigger":"cts.stddevP", "description":"(range-index as cts:reference, options as xs:string*, query as cts:query?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.stddev(${1:range-index as cts:reference})", "trigger":"cts.stddev", "description":"(range-index as cts:reference)"}, {"content":"cts.stddev(${1:range-index as cts:reference}, ${2:options as xs:string*})", "trigger":"cts.stddev", "description":"(range-index as cts:reference, options as xs:string*)"}, {"content":"cts.stddev(${1:range-index as cts:reference}, ${2:options as xs:string*}, ${3:query as cts:query?})", "trigger":"cts.stddev", "description":"(range-index as cts:reference, options as xs:string*, query as cts:query?)"}, {"content":"cts.stddev(${1:range-index as cts:reference}, ${2:options as xs:string*}, ${3:query as cts:query?}, ${4:forest-ids as xs:unsignedLong*})", "trigger":"cts.stddev", "description":"(range-index as cts:reference, options as xs:string*, query as cts:query?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.covarianceP(${1:value1 as cts:reference}, ${2:value2 as cts:reference})", "trigger":"cts.covarianceP", "description":"(value1 as cts:reference, value2 as cts:reference)"}, {"content":"cts.covarianceP(${1:value1 as cts:reference}, ${2:value2 as cts:reference}, ${3:options as xs:string*})", "trigger":"cts.covarianceP", "description":"(value1 as cts:reference, value2 as cts:reference, options as xs:string*)"}, {"content":"cts.covarianceP(${1:value1 as cts:reference}, ${2:value2 as cts:reference}, ${3:options as xs:string*}, ${4:query as cts:query?})", "trigger":"cts.covarianceP", "description":"(value1 as cts:reference, value2 as cts:reference, options as xs:string*, query as cts:query?)"}, {"content":"cts.covarianceP(${1:value1 as cts:reference}, ${2:value2 as cts:reference}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:forest-ids as xs:unsignedLong*})", "trigger":"cts.covarianceP", "description":"(value1 as cts:reference, value2 as cts:reference, options as xs:string*, query as cts:query?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.covariance(${1:value1 as cts:reference}, ${2:value2 as cts:reference})", "trigger":"cts.covariance", "description":"(value1 as cts:reference, value2 as cts:reference)"}, {"content":"cts.covariance(${1:value1 as cts:reference}, ${2:value2 as cts:reference}, ${3:options as xs:string*})", "trigger":"cts.covariance", "description":"(value1 as cts:reference, value2 as cts:reference, options as xs:string*)"}, {"content":"cts.covariance(${1:value1 as cts:reference}, ${2:value2 as cts:reference}, ${3:options as xs:string*}, ${4:query as cts:query?})", "trigger":"cts.covariance", "description":"(value1 as cts:reference, value2 as cts:reference, options as xs:string*, query as cts:query?)"}, {"content":"cts.covariance(${1:value1 as cts:reference}, ${2:value2 as cts:reference}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:forest-ids as xs:unsignedLong*})", "trigger":"cts.covariance", "description":"(value1 as cts:reference, value2 as cts:reference, options as xs:string*, query as cts:query?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.correlation(${1:value1 as cts:reference}, ${2:value2 as cts:reference})", "trigger":"cts.correlation", "description":"(value1 as cts:reference, value2 as cts:reference)"}, {"content":"cts.correlation(${1:value1 as cts:reference}, ${2:value2 as cts:reference}, ${3:options as xs:string*})", "trigger":"cts.correlation", "description":"(value1 as cts:reference, value2 as cts:reference, options as xs:string*)"}, {"content":"cts.correlation(${1:value1 as cts:reference}, ${2:value2 as cts:reference}, ${3:options as xs:string*}, ${4:query as cts:query?})", "trigger":"cts.correlation", "description":"(value1 as cts:reference, value2 as cts:reference, options as xs:string*, query as cts:query?)"}, {"content":"cts.correlation(${1:value1 as cts:reference}, ${2:value2 as cts:reference}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:forest-ids as xs:unsignedLong*})", "trigger":"cts.correlation", "description":"(value1 as cts:reference, value2 as cts:reference, options as xs:string*, query as cts:query?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.linearModel(${1:values as cts:reference*})", "trigger":"cts.linearModel", "description":"(values as cts:reference*)"}, {"content":"cts.linearModel(${1:values as cts:reference*}, ${2:options as xs:string*})", "trigger":"cts.linearModel", "description":"(values as cts:reference*, options as xs:string*)"}, {"content":"cts.linearModel(${1:values as cts:reference*}, ${2:options as xs:string*}, ${3:query as cts:query?})", "trigger":"cts.linearModel", "description":"(values as cts:reference*, options as xs:string*, query as cts:query?)"}, {"content":"cts.linearModel(${1:values as cts:reference*}, ${2:options as xs:string*}, ${3:query as cts:query?}, ${4:forest-ids as xs:unsignedLong*})", "trigger":"cts.linearModel", "description":"(values as cts:reference*, options as xs:string*, query as cts:query?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.elementValueRanges(${1:element-names as xs:QName*})", "trigger":"cts.elementValueRanges", "description":"(element-names as xs:QName*)"}, {"content":"cts.elementValueRanges(${1:element-names as xs:QName*}, ${2:bounds as xs:anyAtomicType*})", "trigger":"cts.elementValueRanges", "description":"(element-names as xs:QName*, bounds as xs:anyAtomicType*)"}, {"content":"cts.elementValueRanges(${1:element-names as xs:QName*}, ${2:bounds as xs:anyAtomicType*}, ${3:options as xs:string*})", "trigger":"cts.elementValueRanges", "description":"(element-names as xs:QName*, bounds as xs:anyAtomicType*, options as xs:string*)"}, {"content":"cts.elementValueRanges(${1:element-names as xs:QName*}, ${2:bounds as xs:anyAtomicType*}, ${3:options as xs:string*}, ${4:query as cts:query?})", "trigger":"cts.elementValueRanges", "description":"(element-names as xs:QName*, bounds as xs:anyAtomicType*, options as xs:string*, query as cts:query?)"}, {"content":"cts.elementValueRanges(${1:element-names as xs:QName*}, ${2:bounds as xs:anyAtomicType*}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?})", "trigger":"cts.elementValueRanges", "description":"(element-names as xs:QName*, bounds as xs:anyAtomicType*, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.elementValueRanges(${1:element-names as xs:QName*}, ${2:bounds as xs:anyAtomicType*}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?}, ${6:forest-ids as xs:unsignedLong*})", "trigger":"cts.elementValueRanges", "description":"(element-names as xs:QName*, bounds as xs:anyAtomicType*, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.fieldValueMatch(${1:field-names as xs:string*}, ${2:pattern as xs:anyAtomicType})", "trigger":"cts.fieldValueMatch", "description":"(field-names as xs:string*, pattern as xs:anyAtomicType)"}, {"content":"cts.fieldValueMatch(${1:field-names as xs:string*}, ${2:pattern as xs:anyAtomicType}, ${3:options as xs:string*})", "trigger":"cts.fieldValueMatch", "description":"(field-names as xs:string*, pattern as xs:anyAtomicType, options as xs:string*)"}, {"content":"cts.fieldValueMatch(${1:field-names as xs:string*}, ${2:pattern as xs:anyAtomicType}, ${3:options as xs:string*}, ${4:query as cts:query?})", "trigger":"cts.fieldValueMatch", "description":"(field-names as xs:string*, pattern as xs:anyAtomicType, options as xs:string*, query as cts:query?)"}, {"content":"cts.fieldValueMatch(${1:field-names as xs:string*}, ${2:pattern as xs:anyAtomicType}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?})", "trigger":"cts.fieldValueMatch", "description":"(field-names as xs:string*, pattern as xs:anyAtomicType, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.fieldValueMatch(${1:field-names as xs:string*}, ${2:pattern as xs:anyAtomicType}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?}, ${6:forest-ids as xs:unsignedLong*})", "trigger":"cts.fieldValueMatch", "description":"(field-names as xs:string*, pattern as xs:anyAtomicType, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.fieldValueCoOccurrences(${1:field-name-1 as String}, ${2:field-name-2 as String})", "trigger":"cts.fieldValueCoOccurrences", "description":"(field-name-1 as String, field-name-2 as String)"}, {"content":"cts.fieldValueCoOccurrences(${1:field-name-1 as String}, ${2:field-name-2 as String}, ${3:options as xs:string*})", "trigger":"cts.fieldValueCoOccurrences", "description":"(field-name-1 as String, field-name-2 as String, options as xs:string*)"}, {"content":"cts.fieldValueCoOccurrences(${1:field-name-1 as String}, ${2:field-name-2 as String}, ${3:options as xs:string*}, ${4:query as cts:query?})", "trigger":"cts.fieldValueCoOccurrences", "description":"(field-name-1 as String, field-name-2 as String, options as xs:string*, query as cts:query?)"}, {"content":"cts.fieldValueCoOccurrences(${1:field-name-1 as String}, ${2:field-name-2 as String}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?})", "trigger":"cts.fieldValueCoOccurrences", "description":"(field-name-1 as String, field-name-2 as String, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.fieldValueCoOccurrences(${1:field-name-1 as String}, ${2:field-name-2 as String}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?}, ${6:forest-ids as xs:unsignedLong*})", "trigger":"cts.fieldValueCoOccurrences", "description":"(field-name-1 as String, field-name-2 as String, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.fieldValueRanges(${1:field-names as xs:string*})", "trigger":"cts.fieldValueRanges", "description":"(field-names as xs:string*)"}, {"content":"cts.fieldValueRanges(${1:field-names as xs:string*}, ${2:bounds as xs:anyAtomicType*})", "trigger":"cts.fieldValueRanges", "description":"(field-names as xs:string*, bounds as xs:anyAtomicType*)"}, {"content":"cts.fieldValueRanges(${1:field-names as xs:string*}, ${2:bounds as xs:anyAtomicType*}, ${3:options as xs:string*})", "trigger":"cts.fieldValueRanges", "description":"(field-names as xs:string*, bounds as xs:anyAtomicType*, options as xs:string*)"}, {"content":"cts.fieldValueRanges(${1:field-names as xs:string*}, ${2:bounds as xs:anyAtomicType*}, ${3:options as xs:string*}, ${4:query as cts:query?})", "trigger":"cts.fieldValueRanges", "description":"(field-names as xs:string*, bounds as xs:anyAtomicType*, options as xs:string*, query as cts:query?)"}, {"content":"cts.fieldValueRanges(${1:field-names as xs:string*}, ${2:bounds as xs:anyAtomicType*}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?})", "trigger":"cts.fieldValueRanges", "description":"(field-names as xs:string*, bounds as xs:anyAtomicType*, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.fieldValueRanges(${1:field-names as xs:string*}, ${2:bounds as xs:anyAtomicType*}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?}, ${6:forest-ids as xs:unsignedLong*})", "trigger":"cts.fieldValueRanges", "description":"(field-names as xs:string*, bounds as xs:anyAtomicType*, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.frequency(${1:value as item()})", "trigger":"cts.frequency", "description":"(value as item())"}, {"content":"cts.sum(${1:arg as xs:anyAtomicType*})", "trigger":"cts.sum", "description":"(arg as xs:anyAtomicType*)"}, {"content":"cts.sum(${1:arg as xs:anyAtomicType*}, ${2:zero as xs:anyAtomicType?})", "trigger":"cts.sum", "description":"(arg as xs:anyAtomicType*, zero as xs:anyAtomicType?)"}, {"content":"cts.count(${1:arg as item()*})", "trigger":"cts.count", "description":"(arg as item()*)"}, {"content":"cts.count(${1:arg as item()*}, ${2:maximum as xs:double})", "trigger":"cts.count", "description":"(arg as item()*, maximum as xs:double)"}, {"content":"cts.avg(${1:arg as xs:anyAtomicType*})", "trigger":"cts.avg", "description":"(arg as xs:anyAtomicType*)"}, {"content":"cts.uris()", "trigger":"cts.uris", "description":"()"}, {"content":"cts.uris(${1:start as xs:string?})", "trigger":"cts.uris", "description":"(start as xs:string?)"}, {"content":"cts.uris(${1:start as xs:string?}, ${2:options as xs:string*})", "trigger":"cts.uris", "description":"(start as xs:string?, options as xs:string*)"}, {"content":"cts.uris(${1:start as xs:string?}, ${2:options as xs:string*}, ${3:query as cts:query?})", "trigger":"cts.uris", "description":"(start as xs:string?, options as xs:string*, query as cts:query?)"}, {"content":"cts.uris(${1:start as xs:string?}, ${2:options as xs:string*}, ${3:query as cts:query?}, ${4:quality-weight as xs:double?})", "trigger":"cts.uris", "description":"(start as xs:string?, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.uris(${1:start as xs:string?}, ${2:options as xs:string*}, ${3:query as cts:query?}, ${4:quality-weight as xs:double?}, ${5:forest-ids as xs:unsignedLong*})", "trigger":"cts.uris", "description":"(start as xs:string?, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.uriMatch(${1:pattern as String})", "trigger":"cts.uriMatch", "description":"(pattern as String)"}, {"content":"cts.uriMatch(${1:pattern as String}, ${2:options as xs:string*})", "trigger":"cts.uriMatch", "description":"(pattern as String, options as xs:string*)"}, {"content":"cts.uriMatch(${1:pattern as String}, ${2:options as xs:string*}, ${3:query as cts:query?})", "trigger":"cts.uriMatch", "description":"(pattern as String, options as xs:string*, query as cts:query?)"}, {"content":"cts.uriMatch(${1:pattern as String}, ${2:options as xs:string*}, ${3:query as cts:query?}, ${4:quality-weight as xs:double?})", "trigger":"cts.uriMatch", "description":"(pattern as String, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.uriMatch(${1:pattern as String}, ${2:options as xs:string*}, ${3:query as cts:query?}, ${4:quality-weight as xs:double?}, ${5:forest-ids as xs:unsignedLong*})", "trigger":"cts.uriMatch", "description":"(pattern as String, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.collections()", "trigger":"cts.collections", "description":"()"}, {"content":"cts.collections(${1:start as xs:string?})", "trigger":"cts.collections", "description":"(start as xs:string?)"}, {"content":"cts.collections(${1:start as xs:string?}, ${2:options as xs:string*})", "trigger":"cts.collections", "description":"(start as xs:string?, options as xs:string*)"}, {"content":"cts.collections(${1:start as xs:string?}, ${2:options as xs:string*}, ${3:query as cts:query?})", "trigger":"cts.collections", "description":"(start as xs:string?, options as xs:string*, query as cts:query?)"}, {"content":"cts.collections(${1:start as xs:string?}, ${2:options as xs:string*}, ${3:query as cts:query?}, ${4:quality-weight as xs:double?})", "trigger":"cts.collections", "description":"(start as xs:string?, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.collections(${1:start as xs:string?}, ${2:options as xs:string*}, ${3:query as cts:query?}, ${4:quality-weight as xs:double?}, ${5:forest-ids as xs:unsignedLong*})", "trigger":"cts.collections", "description":"(start as xs:string?, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.collectionMatch(${1:pattern as String})", "trigger":"cts.collectionMatch", "description":"(pattern as String)"}, {"content":"cts.collectionMatch(${1:pattern as String}, ${2:options as xs:string*})", "trigger":"cts.collectionMatch", "description":"(pattern as String, options as xs:string*)"}, {"content":"cts.collectionMatch(${1:pattern as String}, ${2:options as xs:string*}, ${3:query as cts:query?})", "trigger":"cts.collectionMatch", "description":"(pattern as String, options as xs:string*, query as cts:query?)"}, {"content":"cts.collectionMatch(${1:pattern as String}, ${2:options as xs:string*}, ${3:query as cts:query?}, ${4:quality-weight as xs:double?})", "trigger":"cts.collectionMatch", "description":"(pattern as String, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.collectionMatch(${1:pattern as String}, ${2:options as xs:string*}, ${3:query as cts:query?}, ${4:quality-weight as xs:double?}, ${5:forest-ids as xs:unsignedLong*})", "trigger":"cts.collectionMatch", "description":"(pattern as String, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.elementAttributeWords(${1:element-names as xs:QName*}, ${2:attribute-names as xs:QName*})", "trigger":"cts.elementAttributeWords", "description":"(element-names as xs:QName*, attribute-names as xs:QName*)"}, {"content":"cts.elementAttributeWords(${1:element-names as xs:QName*}, ${2:attribute-names as xs:QName*}, ${3:start as xs:string?})", "trigger":"cts.elementAttributeWords", "description":"(element-names as xs:QName*, attribute-names as xs:QName*, start as xs:string?)"}, {"content":"cts.elementAttributeWords(${1:element-names as xs:QName*}, ${2:attribute-names as xs:QName*}, ${3:start as xs:string?}, ${4:options as xs:string*})", "trigger":"cts.elementAttributeWords", "description":"(element-names as xs:QName*, attribute-names as xs:QName*, start as xs:string?, options as xs:string*)"}, {"content":"cts.elementAttributeWords(${1:element-names as xs:QName*}, ${2:attribute-names as xs:QName*}, ${3:start as xs:string?}, ${4:options as xs:string*}, ${5:query as cts:query?})", "trigger":"cts.elementAttributeWords", "description":"(element-names as xs:QName*, attribute-names as xs:QName*, start as xs:string?, options as xs:string*, query as cts:query?)"}, {"content":"cts.elementAttributeWords(${1:element-names as xs:QName*}, ${2:attribute-names as xs:QName*}, ${3:start as xs:string?}, ${4:options as xs:string*}, ${5:query as cts:query?}, ${6:quality-weight as xs:double?})", "trigger":"cts.elementAttributeWords", "description":"(element-names as xs:QName*, attribute-names as xs:QName*, start as xs:string?, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.elementAttributeWords(${1:element-names as xs:QName*}, ${2:attribute-names as xs:QName*}, ${3:start as xs:string?}, ${4:options as xs:string*}, ${5:query as cts:query?}, ${6:quality-weight as xs:double?}, ${7:forest-ids as xs:unsignedLong*})", "trigger":"cts.elementAttributeWords", "description":"(element-names as xs:QName*, attribute-names as xs:QName*, start as xs:string?, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.elementAttributeWordMatch(${1:element-names as xs:QName*}, ${2:attribute-names as xs:QName*}, ${3:pattern as String})", "trigger":"cts.elementAttributeWordMatch", "description":"(element-names as xs:QName*, attribute-names as xs:QName*, pattern as String)"}, {"content":"cts.elementAttributeWordMatch(${1:element-names as xs:QName*}, ${2:attribute-names as xs:QName*}, ${3:pattern as String}, ${4:options as xs:string*})", "trigger":"cts.elementAttributeWordMatch", "description":"(element-names as xs:QName*, attribute-names as xs:QName*, pattern as String, options as xs:string*)"}, {"content":"cts.elementAttributeWordMatch(${1:element-names as xs:QName*}, ${2:attribute-names as xs:QName*}, ${3:pattern as String}, ${4:options as xs:string*}, ${5:query as cts:query?})", "trigger":"cts.elementAttributeWordMatch", "description":"(element-names as xs:QName*, attribute-names as xs:QName*, pattern as String, options as xs:string*, query as cts:query?)"}, {"content":"cts.elementAttributeWordMatch(${1:element-names as xs:QName*}, ${2:attribute-names as xs:QName*}, ${3:pattern as String}, ${4:options as xs:string*}, ${5:query as cts:query?}, ${6:quality-weight as xs:double?})", "trigger":"cts.elementAttributeWordMatch", "description":"(element-names as xs:QName*, attribute-names as xs:QName*, pattern as String, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.elementAttributeWordMatch(${1:element-names as xs:QName*}, ${2:attribute-names as xs:QName*}, ${3:pattern as String}, ${4:options as xs:string*}, ${5:query as cts:query?}, ${6:quality-weight as xs:double?}, ${7:forest-ids as xs:unsignedLong*})", "trigger":"cts.elementAttributeWordMatch", "description":"(element-names as xs:QName*, attribute-names as xs:QName*, pattern as String, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.elementAttributeValues(${1:element-names as xs:QName*}, ${2:attribute-names as xs:QName*})", "trigger":"cts.elementAttributeValues", "description":"(element-names as xs:QName*, attribute-names as xs:QName*)"}, {"content":"cts.elementAttributeValues(${1:element-names as xs:QName*}, ${2:attribute-names as xs:QName*}, ${3:start as xs:anyAtomicType?})", "trigger":"cts.elementAttributeValues", "description":"(element-names as xs:QName*, attribute-names as xs:QName*, start as xs:anyAtomicType?)"}, {"content":"cts.elementAttributeValues(${1:element-names as xs:QName*}, ${2:attribute-names as xs:QName*}, ${3:start as xs:anyAtomicType?}, ${4:options as xs:string*})", "trigger":"cts.elementAttributeValues", "description":"(element-names as xs:QName*, attribute-names as xs:QName*, start as xs:anyAtomicType?, options as xs:string*)"}, {"content":"cts.elementAttributeValues(${1:element-names as xs:QName*}, ${2:attribute-names as xs:QName*}, ${3:start as xs:anyAtomicType?}, ${4:options as xs:string*}, ${5:query as cts:query?})", "trigger":"cts.elementAttributeValues", "description":"(element-names as xs:QName*, attribute-names as xs:QName*, start as xs:anyAtomicType?, options as xs:string*, query as cts:query?)"}, {"content":"cts.elementAttributeValues(${1:element-names as xs:QName*}, ${2:attribute-names as xs:QName*}, ${3:start as xs:anyAtomicType?}, ${4:options as xs:string*}, ${5:query as cts:query?}, ${6:quality-weight as xs:double?})", "trigger":"cts.elementAttributeValues", "description":"(element-names as xs:QName*, attribute-names as xs:QName*, start as xs:anyAtomicType?, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.elementAttributeValues(${1:element-names as xs:QName*}, ${2:attribute-names as xs:QName*}, ${3:start as xs:anyAtomicType?}, ${4:options as xs:string*}, ${5:query as cts:query?}, ${6:quality-weight as xs:double?}, ${7:forest-ids as xs:unsignedLong*})", "trigger":"cts.elementAttributeValues", "description":"(element-names as xs:QName*, attribute-names as xs:QName*, start as xs:anyAtomicType?, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.elementAttributeValueMatch(${1:element-names as xs:QName*}, ${2:attribute-names as xs:QName*}, ${3:pattern as xs:anyAtomicType})", "trigger":"cts.elementAttributeValueMatch", "description":"(element-names as xs:QName*, attribute-names as xs:QName*, pattern as xs:anyAtomicType)"}, {"content":"cts.elementAttributeValueMatch(${1:element-names as xs:QName*}, ${2:attribute-names as xs:QName*}, ${3:pattern as xs:anyAtomicType}, ${4:options as xs:string*})", "trigger":"cts.elementAttributeValueMatch", "description":"(element-names as xs:QName*, attribute-names as xs:QName*, pattern as xs:anyAtomicType, options as xs:string*)"}, {"content":"cts.elementAttributeValueMatch(${1:element-names as xs:QName*}, ${2:attribute-names as xs:QName*}, ${3:pattern as xs:anyAtomicType}, ${4:options as xs:string*}, ${5:query as cts:query?})", "trigger":"cts.elementAttributeValueMatch", "description":"(element-names as xs:QName*, attribute-names as xs:QName*, pattern as xs:anyAtomicType, options as xs:string*, query as cts:query?)"}, {"content":"cts.elementAttributeValueMatch(${1:element-names as xs:QName*}, ${2:attribute-names as xs:QName*}, ${3:pattern as xs:anyAtomicType}, ${4:options as xs:string*}, ${5:query as cts:query?}, ${6:quality-weight as xs:double?})", "trigger":"cts.elementAttributeValueMatch", "description":"(element-names as xs:QName*, attribute-names as xs:QName*, pattern as xs:anyAtomicType, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.elementAttributeValueMatch(${1:element-names as xs:QName*}, ${2:attribute-names as xs:QName*}, ${3:pattern as xs:anyAtomicType}, ${4:options as xs:string*}, ${5:query as cts:query?}, ${6:quality-weight as xs:double?}, ${7:forest-ids as xs:unsignedLong*})", "trigger":"cts.elementAttributeValueMatch", "description":"(element-names as xs:QName*, attribute-names as xs:QName*, pattern as xs:anyAtomicType, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.elementAttributeValueRanges(${1:element-names as xs:QName*}, ${2:attribute-names as xs:QName*})", "trigger":"cts.elementAttributeValueRanges", "description":"(element-names as xs:QName*, attribute-names as xs:QName*)"}, {"content":"cts.elementAttributeValueRanges(${1:element-names as xs:QName*}, ${2:attribute-names as xs:QName*}, ${3:bounds as xs:anyAtomicType*})", "trigger":"cts.elementAttributeValueRanges", "description":"(element-names as xs:QName*, attribute-names as xs:QName*, bounds as xs:anyAtomicType*)"}, {"content":"cts.elementAttributeValueRanges(${1:element-names as xs:QName*}, ${2:attribute-names as xs:QName*}, ${3:bounds as xs:anyAtomicType*}, ${4:options as xs:string*})", "trigger":"cts.elementAttributeValueRanges", "description":"(element-names as xs:QName*, attribute-names as xs:QName*, bounds as xs:anyAtomicType*, options as xs:string*)"}, {"content":"cts.elementAttributeValueRanges(${1:element-names as xs:QName*}, ${2:attribute-names as xs:QName*}, ${3:bounds as xs:anyAtomicType*}, ${4:options as xs:string*}, ${5:query as cts:query?})", "trigger":"cts.elementAttributeValueRanges", "description":"(element-names as xs:QName*, attribute-names as xs:QName*, bounds as xs:anyAtomicType*, options as xs:string*, query as cts:query?)"}, {"content":"cts.elementAttributeValueRanges(${1:element-names as xs:QName*}, ${2:attribute-names as xs:QName*}, ${3:bounds as xs:anyAtomicType*}, ${4:options as xs:string*}, ${5:query as cts:query?}, ${6:quality-weight as xs:double?})", "trigger":"cts.elementAttributeValueRanges", "description":"(element-names as xs:QName*, attribute-names as xs:QName*, bounds as xs:anyAtomicType*, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.elementAttributeValueRanges(${1:element-names as xs:QName*}, ${2:attribute-names as xs:QName*}, ${3:bounds as xs:anyAtomicType*}, ${4:options as xs:string*}, ${5:query as cts:query?}, ${6:quality-weight as xs:double?}, ${7:forest-ids as xs:unsignedLong*})", "trigger":"cts.elementAttributeValueRanges", "description":"(element-names as xs:QName*, attribute-names as xs:QName*, bounds as xs:anyAtomicType*, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.fieldWords(${1:field-names as xs:string*})", "trigger":"cts.fieldWords", "description":"(field-names as xs:string*)"}, {"content":"cts.fieldWords(${1:field-names as xs:string*}, ${2:start as xs:string?})", "trigger":"cts.fieldWords", "description":"(field-names as xs:string*, start as xs:string?)"}, {"content":"cts.fieldWords(${1:field-names as xs:string*}, ${2:start as xs:string?}, ${3:options as xs:string*})", "trigger":"cts.fieldWords", "description":"(field-names as xs:string*, start as xs:string?, options as xs:string*)"}, {"content":"cts.fieldWords(${1:field-names as xs:string*}, ${2:start as xs:string?}, ${3:options as xs:string*}, ${4:query as cts:query?})", "trigger":"cts.fieldWords", "description":"(field-names as xs:string*, start as xs:string?, options as xs:string*, query as cts:query?)"}, {"content":"cts.fieldWords(${1:field-names as xs:string*}, ${2:start as xs:string?}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?})", "trigger":"cts.fieldWords", "description":"(field-names as xs:string*, start as xs:string?, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.fieldWords(${1:field-names as xs:string*}, ${2:start as xs:string?}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?}, ${6:forest-ids as xs:unsignedLong*})", "trigger":"cts.fieldWords", "description":"(field-names as xs:string*, start as xs:string?, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.fieldWordMatch(${1:field-names as xs:string*}, ${2:pattern as String})", "trigger":"cts.fieldWordMatch", "description":"(field-names as xs:string*, pattern as String)"}, {"content":"cts.fieldWordMatch(${1:field-names as xs:string*}, ${2:pattern as String}, ${3:options as xs:string*})", "trigger":"cts.fieldWordMatch", "description":"(field-names as xs:string*, pattern as String, options as xs:string*)"}, {"content":"cts.fieldWordMatch(${1:field-names as xs:string*}, ${2:pattern as String}, ${3:options as xs:string*}, ${4:query as cts:query?})", "trigger":"cts.fieldWordMatch", "description":"(field-names as xs:string*, pattern as String, options as xs:string*, query as cts:query?)"}, {"content":"cts.fieldWordMatch(${1:field-names as xs:string*}, ${2:pattern as String}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?})", "trigger":"cts.fieldWordMatch", "description":"(field-names as xs:string*, pattern as String, options as xs:string*, query as cts:query?, quality-weight as xs:double?)"}, {"content":"cts.fieldWordMatch(${1:field-names as xs:string*}, ${2:pattern as String}, ${3:options as xs:string*}, ${4:query as cts:query?}, ${5:quality-weight as xs:double?}, ${6:forest-ids as xs:unsignedLong*})", "trigger":"cts.fieldWordMatch", "description":"(field-names as xs:string*, pattern as String, options as xs:string*, query as cts:query?, quality-weight as xs:double?, forest-ids as xs:unsignedLong*)"}, {"content":"cts.reverseQuery(${1:nodes as node()*})", "trigger":"cts.reverseQuery", "description":"(nodes as node()*)"}, {"content":"cts.reverseQuery(${1:nodes as node()*}, ${2:weight as xs:double?})", "trigger":"cts.reverseQuery", "description":"(nodes as node()*, weight as xs:double?)"}, {"content":"cts.reverseQueryNodes(${1:query as cts:reverse-query})", "trigger":"cts.reverseQueryNodes", "description":"(query as cts:reverse-query)"}, {"content":"cts.reverseQueryWeight(${1:query as cts:reverse-query})", "trigger":"cts.reverseQueryWeight", "description":"(query as cts:reverse-query)"}, {"content":"cts.documentFragmentQuery(${1:query as cts:query})", "trigger":"cts.documentFragmentQuery", "description":"(query as cts:query)"}, {"content":"cts.documentFragmentQueryQuery(${1:query as cts:document-fragment-query})", "trigger":"cts.documentFragmentQueryQuery", "description":"(query as cts:document-fragment-query)"}, {"content":"cts.propertiesFragmentQuery(${1:query as cts:query})", "trigger":"cts.propertiesFragmentQuery", "description":"(query as cts:query)"}, {"content":"cts.propertiesFragmentQueryQuery(${1:query as cts:properties-fragment-query})", "trigger":"cts.propertiesFragmentQueryQuery", "description":"(query as cts:properties-fragment-query)"}, {"content":"cts.locksFragmentQuery(${1:query as cts:query})", "trigger":"cts.locksFragmentQuery", "description":"(query as cts:query)"}, {"content":"cts.locksFragmentQueryQuery(${1:query as cts:locks-fragment-query})", "trigger":"cts.locksFragmentQueryQuery", "description":"(query as cts:locks-fragment-query)"}, {"content":"cts.query(${1:query as node()})", "trigger":"cts.query", "description":"(query as node())"}, {"content":"cts.distinctiveTerms(${1:nodes as node()*})", "trigger":"cts.distinctiveTerms", "description":"(nodes as node()*)"}, {"content":"cts.distinctiveTerms(${1:nodes as node()*}, ${2:options as element()?})", "trigger":"cts.distinctiveTerms", "description":"(nodes as node()*, options as element()?)"}, {"content":"cts.period(${1:start as xs:dateTime}, ${2:end as xs:dateTime})", "trigger":"cts.period", "description":"(start as xs:dateTime, end as xs:dateTime)"}, {"content":"cts.referenceParse(${1:reference as node()})", "trigger":"cts.referenceParse", "description":"(reference as node())"}, {"content":"cts.parse(${1:query as String})", "trigger":"cts.parse", "description":"(query as String)"}, {"content":"cts.parse(${1:query as String}, ${2:bindings as map:map?})", "trigger":"cts.parse", "description":"(query as String, bindings as map:map?)"}, {"content":"xdmp.canGrantRoles(${1:roles as xs:string*})", "trigger":"xdmp.canGrantRoles", "description":"(roles as xs:string*)"}, {"content":"xdmp.securityAssert(${1:privileges as xs:string*}, ${2:kind as String})", "trigger":"xdmp.securityAssert", "description":"(privileges as xs:string*, kind as String)"}, {"content":"xdmp.hasPrivilege(${1:privileges as xs:string*}, ${2:kind as String})", "trigger":"xdmp.hasPrivilege", "description":"(privileges as xs:string*, kind as String)"}, {"content":"xdmp.userRoles(${1:name as String})", "trigger":"xdmp.userRoles", "description":"(name as String)"}, {"content":"xdmp.userRoles(${1:name as String}, ${2:extSecId as xs:unsignedLong})", "trigger":"xdmp.userRoles", "description":"(name as String, extSecId as xs:unsignedLong)"}, {"content":"xdmp.userRoles(${1:name as String}, ${2:extSecId as xs:unsignedLong}, ${3:secDbFirst as Boolean})", "trigger":"xdmp.userRoles", "description":"(name as String, extSecId as xs:unsignedLong, secDbFirst as Boolean)"}, {"content":"xdmp.useridRoles(${1:userId as xs:unsignedLong})", "trigger":"xdmp.useridRoles", "description":"(userId as xs:unsignedLong)"}, {"content":"xdmp.useridRoles(${1:userId as xs:unsignedLong}, ${2:extSecId as xs:unsignedLong})", "trigger":"xdmp.useridRoles", "description":"(userId as xs:unsignedLong, extSecId as xs:unsignedLong)"}, {"content":"xdmp.useridRoles(${1:userId as xs:unsignedLong}, ${2:extSecId as xs:unsignedLong}, ${3:secDbFirst as Boolean})", "trigger":"xdmp.useridRoles", "description":"(userId as xs:unsignedLong, extSecId as xs:unsignedLong, secDbFirst as Boolean)"}, {"content":"xdmp.roleRoles(${1:name as String})", "trigger":"xdmp.roleRoles", "description":"(name as String)"}, {"content":"xdmp.privilegeRoles(${1:action as String}, ${2:kind as String})", "trigger":"xdmp.privilegeRoles", "description":"(action as String, kind as String)"}, {"content":"xdmp.ampRoles(${1:namespace-uri as String}, ${2:localname as String}, ${3:document-uri as String}, ${4:database-id as xs:unsignedLong})", "trigger":"xdmp.ampRoles", "description":"(namespace-uri as String, localname as String, document-uri as String, database-id as xs:unsignedLong)"}, {"content":"xdmp.documentGetCollections(${1:uri as String})", "trigger":"xdmp.documentGetCollections", "description":"(uri as String)"}, {"content":"xdmp.documentGetMetadata(${1:uri as String})", "trigger":"xdmp.documentGetMetadata", "description":"(uri as String)"}, {"content":"xdmp.documentGetMetadata_value(${1:uri as String}, ${2:keyName as String})", "trigger":"xdmp.documentGetMetadata_value", "description":"(uri as String, keyName as String)"}, {"content":"xdmp.nodeMetadata(${1:node as String})", "trigger":"xdmp.nodeMetadata", "description":"(node as String)"}, {"content":"xdmp.nodeMetadata_value(${1:uri as String}, ${2:keyName as String})", "trigger":"xdmp.nodeMetadata_value", "description":"(uri as String, keyName as String)"}, {"content":"xdmp.nodeCollections(${1:node as node()})", "trigger":"xdmp.nodeCollections", "description":"(node as node())"}, {"content":"xdmp.documentGetPermissions(${1:uri as String})", "trigger":"xdmp.documentGetPermissions", "description":"(uri as String)"}, {"content":"xdmp.documentGetPermissions(${1:uri as String}, ${2:output-kind as String})", "trigger":"xdmp.documentGetPermissions", "description":"(uri as String, output-kind as String)"}, {"content":"xdmp.nodePermissions(${1:node as node()})", "trigger":"xdmp.nodePermissions", "description":"(node as node())"}, {"content":"xdmp.nodePermissions(${1:node as node()}, ${2:output-kind as String})", "trigger":"xdmp.nodePermissions", "description":"(node as node(), output-kind as String)"}, {"content":"xdmp.defaultPermissions()", "trigger":"xdmp.defaultPermissions", "description":"()"}, {"content":"xdmp.defaultPermissions(${1:uri as String})", "trigger":"xdmp.defaultPermissions", "description":"(uri as String)"}, {"content":"xdmp.defaultPermissions(${1:uri as String}, ${2:output-kind as String})", "trigger":"xdmp.defaultPermissions", "description":"(uri as String, output-kind as String)"}, {"content":"xdmp.defaultCollections()", "trigger":"xdmp.defaultCollections", "description":"()"}, {"content":"xdmp.defaultCollections(${1:uri as String})", "trigger":"xdmp.defaultCollections", "description":"(uri as String)"}, {"content":"xdmp.getCurrentUser()", "trigger":"xdmp.getCurrentUser", "description":"()"}, {"content":"xdmp.getCurrentUserid()", "trigger":"xdmp.getCurrentUserid", "description":"()"}, {"content":"xdmp.getRequestUser()", "trigger":"xdmp.getRequestUser", "description":"()"}, {"content":"xdmp.getCurrentRoles()", "trigger":"xdmp.getCurrentRoles", "description":"()"}, {"content":"xdmp.permission(${1:role as String}, ${2:capability as String})", "trigger":"xdmp.permission", "description":"(role as String, capability as String)"}, {"content":"xdmp.permission(${1:role as String}, ${2:capability as String}, ${3:output-kind as String})", "trigger":"xdmp.permission", "description":"(role as String, capability as String, output-kind as String)"}, {"content":"xdmp.user(${1:user as String})", "trigger":"xdmp.user", "description":"(user as String)"}, {"content":"xdmp.user(${1:user as String}, ${2:extSecId as xs:unsignedLong})", "trigger":"xdmp.user", "description":"(user as String, extSecId as xs:unsignedLong)"}, {"content":"xdmp.user(${1:user as String}, ${2:extSecId as xs:unsignedLong}, ${3:secDbFirst as Boolean})", "trigger":"xdmp.user", "description":"(user as String, extSecId as xs:unsignedLong, secDbFirst as Boolean)"}, {"content":"xdmp.role(${1:role as String})", "trigger":"xdmp.role", "description":"(role as String)"}, {"content":"xdmp.privilege(${1:action as String}, ${2:kind as String})", "trigger":"xdmp.privilege", "description":"(action as String, kind as String)"}, {"content":"xdmp.amp(${1:namespace as String}, ${2:localname as String}, ${3:module-uri as String}, ${4:database as xs:unsignedLong})", "trigger":"xdmp.amp", "description":"(namespace as String, localname as String, module-uri as String, database as xs:unsignedLong)"}, {"content":"xdmp.userExternalSecurity(${1:user-id as xs:unsignedLong})", "trigger":"xdmp.userExternalSecurity", "description":"(user-id as xs:unsignedLong)"}, {"content":"xdmp.externalSecurity(${1:external-security as String})", "trigger":"xdmp.externalSecurity", "description":"(external-security as String)"}, {"content":"xdmp.credentials(${1:uri as [xs:string?]})", "trigger":"xdmp.credentials", "description":"(uri as [xs:string?])"}, {"content":"xdmp.credential(${1:id as xs:unsignedLong})", "trigger":"xdmp.credential", "description":"(id as xs:unsignedLong)"}, {"content":"xdmp.credentialId(${1:credential-name as String})", "trigger":"xdmp.credentialId", "description":"(credential-name as String)"}, {"content":"sec.createUser(${1:user-name as String}, ${2:description as xs:string?}, ${3:password as String}, ${4:role-names as xs:string*}, ${5:permissions as element(sec:permission)*}, ${6:collections as xs:string*})", "trigger":"sec.createUser", "description":"(user-name as String, description as xs:string?, password as String, role-names as xs:string*, permissions as element(sec:permission)*, collections as xs:string*)"}, {"content":"sec.createUser(${1:user-name as String}, ${2:description as xs:string?}, ${3:password as String}, ${4:role-names as xs:string*}, ${5:permissions as element(sec:permission)*}, ${6:collections as xs:string*}, ${7:external-names as xs:string*})", "trigger":"sec.createUser", "description":"(user-name as String, description as xs:string?, password as String, role-names as xs:string*, permissions as element(sec:permission)*, collections as xs:string*, external-names as xs:string*)"}, {"content":"sec.createUserWithRole(${1:user-name as String}, ${2:description as xs:string?}, ${3:password as String}, ${4:role-names as xs:string*}, ${5:permissions as element(sec:permission)*}, ${6:collections as xs:string*}, ${7:external-names as xs:string*})", "trigger":"sec.createUserWithRole", "description":"(user-name as String, description as xs:string?, password as String, role-names as xs:string*, permissions as element(sec:permission)*, collections as xs:string*, external-names as xs:string*)"}, {"content":"sec.userSetName(${1:user-name as String}, ${2:new-user-name as String}, ${3:password as String})", "trigger":"sec.userSetName", "description":"(user-name as String, new-user-name as String, password as String)"}, {"content":"sec.userSetPassword(${1:user-name as String}, ${2:password as String})", "trigger":"sec.userSetPassword", "description":"(user-name as String, password as String)"}, {"content":"sec.userSetDescription(${1:user-name as String}, ${2:description as String})", "trigger":"sec.userSetDescription", "description":"(user-name as String, description as String)"}, {"content":"sec.roleSetDescription(${1:role-name as String}, ${2:description as String})", "trigger":"sec.roleSetDescription", "description":"(role-name as String, description as String)"}, {"content":"sec.roleGetDescription(${1:role-name as String})", "trigger":"sec.roleGetDescription", "description":"(role-name as String)"}, {"content":"sec.getRoleIds()", "trigger":"sec.getRoleIds", "description":"()"}, {"content":"sec.getRoleIds(${1:role-names as xs:string*})", "trigger":"sec.getRoleIds", "description":"(role-names as xs:string*)"}, {"content":"sec.getRoleNames(${1:role-ids as xs:unsignedLong*})", "trigger":"sec.getRoleNames", "description":"(role-ids as xs:unsignedLong*)"}, {"content":"sec.userSetRoles(${1:user-name as String}, ${2:role-names as xs:string*})", "trigger":"sec.userSetRoles", "description":"(user-name as String, role-names as xs:string*)"}, {"content":"sec.userAddRoles(${1:user-name as String}, ${2:role-names as xs:string*})", "trigger":"sec.userAddRoles", "description":"(user-name as String, role-names as xs:string*)"}, {"content":"sec.userRemoveRoles(${1:user-name as String}, ${2:role-names as xs:string*})", "trigger":"sec.userRemoveRoles", "description":"(user-name as String, role-names as xs:string*)"}, {"content":"sec.userGetRoles(${1:user-name as String})", "trigger":"sec.userGetRoles", "description":"(user-name as String)"}, {"content":"sec.userGetDescription(${1:user-name as String})", "trigger":"sec.userGetDescription", "description":"(user-name as String)"}, {"content":"sec.removeUser(${1:user-name as String})", "trigger":"sec.removeUser", "description":"(user-name as String)"}, {"content":"sec.createRole(${1:role-name as String}, ${2:description as xs:string?}, ${3:role-names as xs:string*}, ${4:permissions as element(sec:permission)*}, ${5:collections as xs:string*})", "trigger":"sec.createRole", "description":"(role-name as String, description as xs:string?, role-names as xs:string*, permissions as element(sec:permission)*, collections as xs:string*)"}, {"content":"sec.createRole(${1:role-name as String}, ${2:description as xs:string?}, ${3:role-names as xs:string*}, ${4:permissions as element(sec:permission)*}, ${5:collections as xs:string*}, ${6:compartment as xs:string?})", "trigger":"sec.createRole", "description":"(role-name as String, description as xs:string?, role-names as xs:string*, permissions as element(sec:permission)*, collections as xs:string*, compartment as xs:string?)"}, {"content":"sec.createRole(${1:role-name as String}, ${2:description as xs:string?}, ${3:role-names as xs:string*}, ${4:permissions as element(sec:permission)*}, ${5:collections as xs:string*}, ${6:compartment as xs:string?}, ${7:external-names as xs:string*})", "trigger":"sec.createRole", "description":"(role-name as String, description as xs:string?, role-names as xs:string*, permissions as element(sec:permission)*, collections as xs:string*, compartment as xs:string?, external-names as xs:string*)"}, {"content":"sec.roleSetName(${1:role-name as String}, ${2:new-role-name as String})", "trigger":"sec.roleSetName", "description":"(role-name as String, new-role-name as String)"}, {"content":"sec.roleSetRoles(${1:role-name as String}, ${2:role-names as xs:string*})", "trigger":"sec.roleSetRoles", "description":"(role-name as String, role-names as xs:string*)"}, {"content":"sec.roleAddRoles(${1:role-name as String}, ${2:new-roles as xs:string*})", "trigger":"sec.roleAddRoles", "description":"(role-name as String, new-roles as xs:string*)"}, {"content":"sec.roleRemoveRoles(${1:role-name as String}, ${2:role-names as xs:string*})", "trigger":"sec.roleRemoveRoles", "description":"(role-name as String, role-names as xs:string*)"}, {"content":"sec.removeRole(${1:role-name as String})", "trigger":"sec.removeRole", "description":"(role-name as String)"}, {"content":"sec.removeRoleFromUsers(${1:role-name as String})", "trigger":"sec.removeRoleFromUsers", "description":"(role-name as String)"}, {"content":"sec.removeRoleFromRoles(${1:role-name as String})", "trigger":"sec.removeRoleFromRoles", "description":"(role-name as String)"}, {"content":"sec.removeRoleFromPrivileges(${1:role-name as String})", "trigger":"sec.removeRoleFromPrivileges", "description":"(role-name as String)"}, {"content":"sec.removeRoleFromAmps(${1:role-name as String})", "trigger":"sec.removeRoleFromAmps", "description":"(role-name as String)"}, {"content":"sec.createPrivilege(${1:privilege-name as String}, ${2:action as String}, ${3:kind as String}, ${4:role-names as xs:string*})", "trigger":"sec.createPrivilege", "description":"(privilege-name as String, action as String, kind as String, role-names as xs:string*)"}, {"content":"sec.privilegeSetName(${1:action as String}, ${2:kind as String}, ${3:new-privilege-name as String})", "trigger":"sec.privilegeSetName", "description":"(action as String, kind as String, new-privilege-name as String)"}, {"content":"sec.removePrivilege(${1:action as String}, ${2:kind as String})", "trigger":"sec.removePrivilege", "description":"(action as String, kind as String)"}, {"content":"sec.privilegeGetRoles(${1:action as String}, ${2:kind as String})", "trigger":"sec.privilegeGetRoles", "description":"(action as String, kind as String)"}, {"content":"sec.privilegeSetRoles(${1:action as String}, ${2:kind as String}, ${3:role-names as xs:string*})", "trigger":"sec.privilegeSetRoles", "description":"(action as String, kind as String, role-names as xs:string*)"}, {"content":"sec.privilegeAddRoles(${1:action as String}, ${2:kind as String}, ${3:role-names as xs:string*})", "trigger":"sec.privilegeAddRoles", "description":"(action as String, kind as String, role-names as xs:string*)"}, {"content":"sec.privilegeRemoveRoles(${1:action as String}, ${2:kind as String}, ${3:role-names as xs:string*})", "trigger":"sec.privilegeRemoveRoles", "description":"(action as String, kind as String, role-names as xs:string*)"}, {"content":"sec.createAmp(${1:namespace as String}, ${2:local-name as String}, ${3:document-uri as String}, ${4:database as xs:unsignedLong}, ${5:role-names as xs:string*})", "trigger":"sec.createAmp", "description":"(namespace as String, local-name as String, document-uri as String, database as xs:unsignedLong, role-names as xs:string*)"}, {"content":"sec.ampSetRoles(${1:namespace as String}, ${2:local-name as String}, ${3:document-uri as String}, ${4:database as xs:unsignedLong}, ${5:role-names as xs:string*})", "trigger":"sec.ampSetRoles", "description":"(namespace as String, local-name as String, document-uri as String, database as xs:unsignedLong, role-names as xs:string*)"}, {"content":"sec.ampAddRoles(${1:namespace as String}, ${2:local-name as String}, ${3:document-uri as String}, ${4:database as xs:unsignedLong}, ${5:role-names as xs:string*})", "trigger":"sec.ampAddRoles", "description":"(namespace as String, local-name as String, document-uri as String, database as xs:unsignedLong, role-names as xs:string*)"}, {"content":"sec.ampGetRoles(${1:namespace as String}, ${2:local-name as String}, ${3:document-uri as String}, ${4:database as xs:unsignedLong})", "trigger":"sec.ampGetRoles", "description":"(namespace as String, local-name as String, document-uri as String, database as xs:unsignedLong)"}, {"content":"sec.roleGetRoles(${1:role-name as String})", "trigger":"sec.roleGetRoles", "description":"(role-name as String)"}, {"content":"sec.ampRemoveRoles(${1:namespace as String}, ${2:local-name as String}, ${3:document-uri as String}, ${4:database as xs:unsignedLong}, ${5:role-names as xs:string*})", "trigger":"sec.ampRemoveRoles", "description":"(namespace as String, local-name as String, document-uri as String, database as xs:unsignedLong, role-names as xs:string*)"}, {"content":"sec.removeAmp(${1:namespace as String}, ${2:local-name as String}, ${3:document-uri as String}, ${4:database as xs:unsignedLong})", "trigger":"sec.removeAmp", "description":"(namespace as String, local-name as String, document-uri as String, database as xs:unsignedLong)"}, {"content":"sec.ampDocCollections()", "trigger":"sec.ampDocCollections", "description":"()"}, {"content":"sec.ampDocPermissions()", "trigger":"sec.ampDocPermissions", "description":"()"}, {"content":"sec.userDocCollections()", "trigger":"sec.userDocCollections", "description":"()"}, {"content":"sec.userDocPermissions()", "trigger":"sec.userDocPermissions", "description":"()"}, {"content":"sec.roleDocCollections()", "trigger":"sec.roleDocCollections", "description":"()"}, {"content":"sec.roleDocPermissions()", "trigger":"sec.roleDocPermissions", "description":"()"}, {"content":"sec.getAmp(${1:namespace as String}, ${2:local-name as String}, ${3:document-uri as String}, ${4:database as xs:unsignedLong})", "trigger":"sec.getAmp", "description":"(namespace as String, local-name as String, document-uri as String, database as xs:unsignedLong)"}, {"content":"sec.getPrivilege(${1:action as String}, ${2:kind as String})", "trigger":"sec.getPrivilege", "description":"(action as String, kind as String)"}, {"content":"sec.privDocCollections()", "trigger":"sec.privDocCollections", "description":"()"}, {"content":"sec.privDocPermissions()", "trigger":"sec.privDocPermissions", "description":"()"}, {"content":"sec.securityCollection()", "trigger":"sec.securityCollection", "description":"()"}, {"content":"sec.securityNamespace()", "trigger":"sec.securityNamespace", "description":"()"}, {"content":"sec.usersCollection()", "trigger":"sec.usersCollection", "description":"()"}, {"content":"sec.rolesCollection()", "trigger":"sec.rolesCollection", "description":"()"}, {"content":"sec.privilegesCollection()", "trigger":"sec.privilegesCollection", "description":"()"}, {"content":"sec.ampsCollection()", "trigger":"sec.ampsCollection", "description":"()"}, {"content":"sec.collectionsCollection()", "trigger":"sec.collectionsCollection", "description":"()"}, {"content":"sec.userSetDefaultPermissions(${1:user-name as String}, ${2:permissions as element(sec:permission)*})", "trigger":"sec.userSetDefaultPermissions", "description":"(user-name as String, permissions as element(sec:permission)*)"}, {"content":"sec.getDistinctPermissions(${1:input-perms as element(sec:permission)*}, ${2:output-perms as element(sec:permission)*})", "trigger":"sec.getDistinctPermissions", "description":"(input-perms as element(sec:permission)*, output-perms as element(sec:permission)*)"}, {"content":"sec.roleSetDefaultPermissions(${1:role-name as String}, ${2:permissions as element(sec:permission)*})", "trigger":"sec.roleSetDefaultPermissions", "description":"(role-name as String, permissions as element(sec:permission)*)"}, {"content":"sec.userGetDefaultPermissions(${1:user-name as String})", "trigger":"sec.userGetDefaultPermissions", "description":"(user-name as String)"}, {"content":"sec.roleGetDefaultPermissions(${1:role-name as String})", "trigger":"sec.roleGetDefaultPermissions", "description":"(role-name as String)"}, {"content":"sec.userGetDefaultCollections(${1:user-name as String})", "trigger":"sec.userGetDefaultCollections", "description":"(user-name as String)"}, {"content":"sec.roleGetDefaultCollections(${1:role-name as String})", "trigger":"sec.roleGetDefaultCollections", "description":"(role-name as String)"}, {"content":"sec.userSetDefaultCollections(${1:user-name as String}, ${2:collections as xs:string*})", "trigger":"sec.userSetDefaultCollections", "description":"(user-name as String, collections as xs:string*)"}, {"content":"sec.roleSetDefaultCollections(${1:role-name as String}, ${2:collections as xs:string*})", "trigger":"sec.roleSetDefaultCollections", "description":"(role-name as String, collections as xs:string*)"}, {"content":"sec.getCollection(${1:uri as String})", "trigger":"sec.getCollection", "description":"(uri as String)"}, {"content":"sec.protectCollection(${1:uri as String}, ${2:permissions as element(sec:permission)*})", "trigger":"sec.protectCollection", "description":"(uri as String, permissions as element(sec:permission)*)"}, {"content":"sec.unprotectCollection(${1:uri as String})", "trigger":"sec.unprotectCollection", "description":"(uri as String)"}, {"content":"sec.collectionSetPermissions(${1:uri as String}, ${2:permissions as element(sec:permission)*})", "trigger":"sec.collectionSetPermissions", "description":"(uri as String, permissions as element(sec:permission)*)"}, {"content":"sec.collectionAddPermissions(${1:uri as String}, ${2:permissions as element(sec:permission)*})", "trigger":"sec.collectionAddPermissions", "description":"(uri as String, permissions as element(sec:permission)*)"}, {"content":"sec.collectionRemovePermissions(${1:uri as String}, ${2:permissions as element(sec:permission)*})", "trigger":"sec.collectionRemovePermissions", "description":"(uri as String, permissions as element(sec:permission)*)"}, {"content":"sec.collectionGetPermissions(${1:uri as String})", "trigger":"sec.collectionGetPermissions", "description":"(uri as String)"}, {"content":"sec.userPrivileges(${1:user-name as String})", "trigger":"sec.userPrivileges", "description":"(user-name as String)"}, {"content":"sec.rolePrivileges(${1:role-name as String})", "trigger":"sec.rolePrivileges", "description":"(role-name as String)"}, {"content":"sec.securityInstalled()", "trigger":"sec.securityInstalled", "description":"()"}, {"content":"sec.uidForName(${1:name as String})", "trigger":"sec.uidForName", "description":"(name as String)"}, {"content":"sec.getUserNames(${1:user-ids as xs:unsignedLong*})", "trigger":"sec.getUserNames", "description":"(user-ids as xs:unsignedLong*)"}, {"content":"sec.setRealm(${1:realm as String})", "trigger":"sec.setRealm", "description":"(realm as String)"}, {"content":"sec.checkAdmin()", "trigger":"sec.checkAdmin", "description":"()"}, {"content":"sec.securityVersion()", "trigger":"sec.securityVersion", "description":"()"}, {"content":"sec.getCompartments()", "trigger":"sec.getCompartments", "description":"()"}, {"content":"sec.roleGetCompartment(${1:role-name as String})", "trigger":"sec.roleGetCompartment", "description":"(role-name as String)"}, {"content":"sec.compartmentGetRoles(${1:compartment-name as String})", "trigger":"sec.compartmentGetRoles", "description":"(compartment-name as String)"}, {"content":"sec.validatePermissions(${1:permissions as element(sec:permission)*})", "trigger":"sec.validatePermissions", "description":"(permissions as element(sec:permission)*)"}, {"content":"sec.roleExists(${1:role-name as String})", "trigger":"sec.roleExists", "description":"(role-name as String)"}, {"content":"sec.userExists(${1:user-name as String})", "trigger":"sec.userExists", "description":"(user-name as String)"}, {"content":"sec.privilegeExists(${1:action as String}, ${2:kind as String})", "trigger":"sec.privilegeExists", "description":"(action as String, kind as String)"}, {"content":"sec.ampExists(${1:namespace as String}, ${2:local-name as String}, ${3:document-uri as String}, ${4:database as xs:unsignedLong})", "trigger":"sec.ampExists", "description":"(namespace as String, local-name as String, document-uri as String, database as xs:unsignedLong)"}, {"content":"sec.userGetLastPasswordDate(${1:user-name as String})", "trigger":"sec.userGetLastPasswordDate", "description":"(user-name as String)"}, {"content":"sec.userGetPasswordExtra(${1:user-name as String})", "trigger":"sec.userGetPasswordExtra", "description":"(user-name as String)"}, {"content":"sec.userSetPasswordExtra(${1:user-name as String}, ${2:extra as element(sec:password-extra)})", "trigger":"sec.userSetPasswordExtra", "description":"(user-name as String, extra as element(sec:password-extra))"}, {"content":"sec.credentialsSetAws(${1:access-key as String}, ${2:secret-key as String})", "trigger":"sec.credentialsSetAws", "description":"(access-key as String, secret-key as String)"}, {"content":"sec.userSetExternalNames(${1:user-name as String}, ${2:external-name as xs:string*})", "trigger":"sec.userSetExternalNames", "description":"(user-name as String, external-name as xs:string*)"}, {"content":"sec.roleSetExternalNames(${1:role-name as String}, ${2:external-name as xs:string*})", "trigger":"sec.roleSetExternalNames", "description":"(role-name as String, external-name as xs:string*)"}, {"content":"sec.roleGetExternalNames(${1:role-name as String})", "trigger":"sec.roleGetExternalNames", "description":"(role-name as String)"}, {"content":"sec.createExternalSecurity(${1:external-security-name as String}, ${2:description as String}, ${3:authentication as String}, ${4:cache-timeout as xs:unsignedInt}, ${5:authorization as String}, ${6:ldap-server-uri as String}, ${7:ldap-base as String}, ${8:ldap-attribute as String}, ${9:ldap-default-user as String}, ${10:ldap-password as String}, ${11:ldap-bind-method as String})", "trigger":"sec.createExternalSecurity", "description":"(external-security-name as String, description as String, authentication as String, cache-timeout as xs:unsignedInt, authorization as String, ldap-server-uri as String, ldap-base as String, ldap-attribute as String, ldap-default-user as String, ldap-password as String, ldap-bind-method as String)"}, {"content":"sec.removeExternalSecurity(${1:external-security-name as String})", "trigger":"sec.removeExternalSecurity", "description":"(external-security-name as String)"}, {"content":"sec.externalSecuritySetName(${1:external-security-name as String}, ${2:new-external-security-name as String})", "trigger":"sec.externalSecuritySetName", "description":"(external-security-name as String, new-external-security-name as String)"}, {"content":"sec.externalSecuritySetDescription(${1:external-security-name as String}, ${2:description as String})", "trigger":"sec.externalSecuritySetDescription", "description":"(external-security-name as String, description as String)"}, {"content":"sec.externalSecuritySetAuthentication(${1:external-security-name as String}, ${2:authentication as String})", "trigger":"sec.externalSecuritySetAuthentication", "description":"(external-security-name as String, authentication as String)"}, {"content":"sec.externalSecuritySetCacheTimeout(${1:external-security-name as String}, ${2:cache-timeout as xs:unsignedInt})", "trigger":"sec.externalSecuritySetCacheTimeout", "description":"(external-security-name as String, cache-timeout as xs:unsignedInt)"}, {"content":"sec.externalSecuritySetAuthorization(${1:external-security-name as String}, ${2:authorization as String})", "trigger":"sec.externalSecuritySetAuthorization", "description":"(external-security-name as String, authorization as String)"}, {"content":"sec.externalSecuritySetLdapServerUri(${1:external-security-name as String}, ${2:ldap-server-uri as String})", "trigger":"sec.externalSecuritySetLdapServerUri", "description":"(external-security-name as String, ldap-server-uri as String)"}, {"content":"sec.externalSecuritySetLdapBase(${1:external-security-name as String}, ${2:ldap-base as String})", "trigger":"sec.externalSecuritySetLdapBase", "description":"(external-security-name as String, ldap-base as String)"}, {"content":"sec.externalSecuritySetLdapAttribute(${1:external-security-name as String}, ${2:ldap-attribute as String})", "trigger":"sec.externalSecuritySetLdapAttribute", "description":"(external-security-name as String, ldap-attribute as String)"}, {"content":"sec.externalSecuritySetLdapDefaultUser(${1:external-security-name as String}, ${2:ldap-default-user as String})", "trigger":"sec.externalSecuritySetLdapDefaultUser", "description":"(external-security-name as String, ldap-default-user as String)"}, {"content":"sec.externalSecuritySetLdapPassword(${1:external-security-name as String}, ${2:ldap-password as String})", "trigger":"sec.externalSecuritySetLdapPassword", "description":"(external-security-name as String, ldap-password as String)"}, {"content":"sec.externalSecurityGetDescription(${1:external-security-name as String})", "trigger":"sec.externalSecurityGetDescription", "description":"(external-security-name as String)"}, {"content":"sec.externalSecurityGetAuthentication(${1:external-security-name as String})", "trigger":"sec.externalSecurityGetAuthentication", "description":"(external-security-name as String)"}, {"content":"sec.externalSecurityGetCacheTimeout(${1:external-security-name as String})", "trigger":"sec.externalSecurityGetCacheTimeout", "description":"(external-security-name as String)"}, {"content":"sec.externalSecurityGetAuthorization(${1:external-security-name as String})", "trigger":"sec.externalSecurityGetAuthorization", "description":"(external-security-name as String)"}, {"content":"sec.externalSecurityGetLdapServerUri(${1:external-security-name as String})", "trigger":"sec.externalSecurityGetLdapServerUri", "description":"(external-security-name as String)"}, {"content":"sec.externalSecurityGetLdapBase(${1:external-security-name as String})", "trigger":"sec.externalSecurityGetLdapBase", "description":"(external-security-name as String)"}, {"content":"sec.externalSecurityGetLdapAttribute(${1:external-security-name as String})", "trigger":"sec.externalSecurityGetLdapAttribute", "description":"(external-security-name as String)"}, {"content":"sec.externalSecurityGetLdapDefaultUser(${1:external-security-name as String})", "trigger":"sec.externalSecurityGetLdapDefaultUser", "description":"(external-security-name as String)"}, {"content":"sec.externalSecurityClearCache(${1:external-security-name as String})", "trigger":"sec.externalSecurityClearCache", "description":"(external-security-name as String)"}, {"content":"sec.credentialsGetAws()", "trigger":"sec.credentialsGetAws", "description":"()"}, {"content":"sec.ampsChangeModulesDatabase(${1:old-db as xs:unsignedLong}, ${2:new-db as xs:unsignedLong})", "trigger":"sec.ampsChangeModulesDatabase", "description":"(old-db as xs:unsignedLong, new-db as xs:unsignedLong)"}, {"content":"sec.userGetExternalNames(${1:user-name as String})", "trigger":"sec.userGetExternalNames", "description":"(user-name as String)"}, {"content":"sec.externalSecuritySetLdapBindMethod(${1:external-security-name as String}, ${2:ldap-bind-method as String})", "trigger":"sec.externalSecuritySetLdapBindMethod", "description":"(external-security-name as String, ldap-bind-method as String)"}, {"content":"sec.externalSecurityGetLdapBindMethod(${1:external-security-name as String})", "trigger":"sec.externalSecurityGetLdapBindMethod", "description":"(external-security-name as String)"}, {"content":"sec.protectedPathsCollection()", "trigger":"sec.protectedPathsCollection", "description":"()"}, {"content":"sec.protectedPathDocCollections()", "trigger":"sec.protectedPathDocCollections", "description":"()"}, {"content":"sec.protectPath(${1:path as String}, ${2:path-namespaces as element(sec:path-namespace)*}, ${3:permissions as element(sec:permission)+})", "trigger":"sec.protectPath", "description":"(path as String, path-namespaces as element(sec:path-namespace)*, permissions as element(sec:permission)+)"}, {"content":"sec.unprotectPath(${1:path as String}, ${2:path-namespaces as element(sec:path-namespace)*})", "trigger":"sec.unprotectPath", "description":"(path as String, path-namespaces as element(sec:path-namespace)*)"}, {"content":"sec.pathSetPermissions(${1:path as String}, ${2:path-namespaces as element(sec:path-namespace)*}, ${3:permissions as element(sec:permission)+})", "trigger":"sec.pathSetPermissions", "description":"(path as String, path-namespaces as element(sec:path-namespace)*, permissions as element(sec:permission)+)"}, {"content":"sec.pathAddPermissions(${1:path as String}, ${2:path-namespaces as element(sec:path-namespace)*}, ${3:permissions as element(sec:permission)+})", "trigger":"sec.pathAddPermissions", "description":"(path as String, path-namespaces as element(sec:path-namespace)*, permissions as element(sec:permission)+)"}, {"content":"sec.pathRemovePermissions(${1:path as String}, ${2:path-namespaces as element(sec:path-namespace)*}, ${3:permissions as element(sec:permission)+})", "trigger":"sec.pathRemovePermissions", "description":"(path as String, path-namespaces as element(sec:path-namespace)*, permissions as element(sec:permission)+)"}, {"content":"sec.pathGetPermissions(${1:path as String}, ${2:path-namespaces as element(sec:path-namespace)*})", "trigger":"sec.pathGetPermissions", "description":"(path as String, path-namespaces as element(sec:path-namespace)*)"}, {"content":"sec.queryRolesetsCollection()", "trigger":"sec.queryRolesetsCollection", "description":"()"}, {"content":"sec.queryRolesetsDocCollections()", "trigger":"sec.queryRolesetsDocCollections", "description":"()"}, {"content":"sec.securityPathNamespace(${1:prefix as String}, ${2:namespace-uri as String})", "trigger":"sec.securityPathNamespace", "description":"(prefix as String, namespace-uri as String)"}, {"content":"sec.queryRoleset(${1:role-names as xs:string+})", "trigger":"sec.queryRoleset", "description":"(role-names as xs:string+)"}, {"content":"sec.addQueryRolesets(${1:rolesets as element(sec:query-roleset)+})", "trigger":"sec.addQueryRolesets", "description":"(rolesets as element(sec:query-roleset)+)"}, {"content":"sec.removeQueryRolesets(${1:rolesets as element(sec:query-roleset)+)})", "trigger":"sec.removeQueryRolesets", "description":"(rolesets as element(sec:query-roleset)+))"}, {"content":"sec.uriCredentialTarget(${1:uri-pattern as String}, ${2:authentication as String})", "trigger":"sec.uriCredentialTarget", "description":"(uri-pattern as String, authentication as String)"}, {"content":"sec.createCredential(${1:name as String}, ${2:description as String}, ${3:username as xs:string?}, ${4:password as xs:string?}, ${5:certificate as xs:string?}, ${6:private-key as xs:string?}, ${7:signing as Boolean}, ${8:targets as element(sec:credential-target)*}, ${9:permissions as element(sec:permission)*})", "trigger":"sec.createCredential", "description":"(name as String, description as String, username as xs:string?, password as xs:string?, certificate as xs:string?, private-key as xs:string?, signing as Boolean, targets as element(sec:credential-target)*, permissions as element(sec:permission)*)"}, {"content":"sec.getCredential(${1:credential-name as String})", "trigger":"sec.getCredential", "description":"(credential-name as String)"}, {"content":"sec.removeCredential(${1:credential-name as String})", "trigger":"sec.removeCredential", "description":"(credential-name as String)"}, {"content":"sec.removeCredentialById(${1:credential-id as xs:unsignedLong})", "trigger":"sec.removeCredentialById", "description":"(credential-id as xs:unsignedLong)"}, {"content":"sec.getCredentialIds()", "trigger":"sec.getCredentialIds", "description":"()"}, {"content":"sec.getCredentialNames()", "trigger":"sec.getCredentialNames", "description":"()"}, {"content":"sec.credentialGetId(${1:credential-name as String})", "trigger":"sec.credentialGetId", "description":"(credential-name as String)"}, {"content":"sec.credentialGetDescription(${1:credential-name as String})", "trigger":"sec.credentialGetDescription", "description":"(credential-name as String)"}, {"content":"sec.credentialGetUsername(${1:credential-name as String})", "trigger":"sec.credentialGetUsername", "description":"(credential-name as String)"}, {"content":"sec.credentialGetPassword(${1:credential-name as String})", "trigger":"sec.credentialGetPassword", "description":"(credential-name as String)"}, {"content":"sec.credentialGetCertificate(${1:credential-name as String})", "trigger":"sec.credentialGetCertificate", "description":"(credential-name as String)"}, {"content":"sec.credentialGetPrivateKey(${1:credential-name as String})", "trigger":"sec.credentialGetPrivateKey", "description":"(credential-name as String)"}, {"content":"sec.credentialGetTargets(${1:credential-name as String})", "trigger":"sec.credentialGetTargets", "description":"(credential-name as String)"}, {"content":"sec.credentialGetSigning(${1:credential-name as String})", "trigger":"sec.credentialGetSigning", "description":"(credential-name as String)"}, {"content":"sec.credentialGetPermissions(${1:credential-name as String})", "trigger":"sec.credentialGetPermissions", "description":"(credential-name as String)"}, {"content":"sec.credentialSetName(${1:credential-name as String}, ${2:new-name as String})", "trigger":"sec.credentialSetName", "description":"(credential-name as String, new-name as String)"}, {"content":"sec.credentialSetDescription(${1:credential-name as String}, ${2:description as String})", "trigger":"sec.credentialSetDescription", "description":"(credential-name as String, description as String)"}, {"content":"sec.credentialSetUsername(${1:credential-name as String}, ${2:username as xs:string?})", "trigger":"sec.credentialSetUsername", "description":"(credential-name as String, username as xs:string?)"}, {"content":"sec.credentialSetPassword(${1:credential-name as String}, ${2:password as xs:string?})", "trigger":"sec.credentialSetPassword", "description":"(credential-name as String, password as xs:string?)"}, {"content":"sec.credentialSetCertificate(${1:credential-name as String}, ${2:certificate as xs:string?}, ${3:private-key as xs:string?})", "trigger":"sec.credentialSetCertificate", "description":"(credential-name as String, certificate as xs:string?, private-key as xs:string?)"}, {"content":"sec.credentialSetTargets(${1:credential-name as String}, ${2:targets as element(sec:credential-target)*})", "trigger":"sec.credentialSetTargets", "description":"(credential-name as String, targets as element(sec:credential-target)*)"}, {"content":"sec.credentialSetSigning(${1:credential-name as String}, ${2:signing as Boolean})", "trigger":"sec.credentialSetSigning", "description":"(credential-name as String, signing as Boolean)"}, {"content":"sec.credentialSetPermissions(${1:credential-name as String}, ${2:permissions as element(sec:permission)*})", "trigger":"sec.credentialSetPermissions", "description":"(credential-name as String, permissions as element(sec:permission)*)"}, {"content":"sem.()", "trigger":"sem.", "description":"()"}, {"content":"sem.rdfParse(${1:in as item()})", "trigger":"sem.rdfParse", "description":"(in as item())"}, {"content":"sem.rdfParse(${1:in as item()}, ${2:options as xs:string*})", "trigger":"sem.rdfParse", "description":"(in as item(), options as xs:string*)"}, {"content":"sem.rdfSerialize(${1:triples as sem:triple*})", "trigger":"sem.rdfSerialize", "description":"(triples as sem:triple*)"}, {"content":"sem.rdfSerialize(${1:triples as sem:triple*}, ${2:options as xs:string*})", "trigger":"sem.rdfSerialize", "description":"(triples as sem:triple*, options as xs:string*)"}, {"content":"sem.rdfGet(${1:location as String})", "trigger":"sem.rdfGet", "description":"(location as String)"}, {"content":"sem.rdfGet(${1:location as String}, ${2:options as xs:string*})", "trigger":"sem.rdfGet", "description":"(location as String, options as xs:string*)"}, {"content":"sem.rdfGet(${1:location as String}, ${2:options as xs:string*}, ${3:http-opts as element()?})", "trigger":"sem.rdfGet", "description":"(location as String, options as xs:string*, http-opts as element()?)"}, {"content":"sem.rdfInsert(${1:triples as sem.triple | ValueIterator | Array})", "trigger":"sem.rdfInsert", "description":"(triples as sem.triple | ValueIterator | Array)"}, {"content":"sem.rdfInsert(${1:triples as sem.triple | ValueIterator | Array}, ${2:options as xs:string*})", "trigger":"sem.rdfInsert", "description":"(triples as sem.triple | ValueIterator | Array, options as xs:string*)"}, {"content":"sem.rdfInsert(${1:triples as sem.triple | ValueIterator | Array}, ${2:options as xs:string*}, ${3:permissions as Object[]})", "trigger":"sem.rdfInsert", "description":"(triples as sem.triple | ValueIterator | Array, options as xs:string*, permissions as Object[])"}, {"content":"sem.rdfInsert(${1:triples as sem.triple | ValueIterator | Array}, ${2:options as xs:string*}, ${3:permissions as Object[]}, ${4:collections as xs:string*})", "trigger":"sem.rdfInsert", "description":"(triples as sem.triple | ValueIterator | Array, options as xs:string*, permissions as Object[], collections as xs:string*)"}, {"content":"sem.rdfInsert(${1:triples as sem.triple | ValueIterator | Array}, ${2:options as xs:string*}, ${3:permissions as Object[]}, ${4:collections as xs:string*}, ${5:quality as xs:int?})", "trigger":"sem.rdfInsert", "description":"(triples as sem.triple | ValueIterator | Array, options as xs:string*, permissions as Object[], collections as xs:string*, quality as xs:int?)"}, {"content":"sem.rdfInsert(${1:triples as sem.triple | ValueIterator | Array}, ${2:options as xs:string*}, ${3:permissions as Object[]}, ${4:collections as xs:string*}, ${5:quality as xs:int?}, ${6:forest-ids as xs:unsignedLong*})", "trigger":"sem.rdfInsert", "description":"(triples as sem.triple | ValueIterator | Array, options as xs:string*, permissions as Object[], collections as xs:string*, quality as xs:int?, forest-ids as xs:unsignedLong*)"}, {"content":"sem.rdfLoad(${1:location as String})", "trigger":"sem.rdfLoad", "description":"(location as String)"}, {"content":"sem.rdfLoad(${1:location as String}, ${2:options as xs:string*})", "trigger":"sem.rdfLoad", "description":"(location as String, options as xs:string*)"}, {"content":"sem.rdfLoad(${1:location as String}, ${2:options as xs:string*}, ${3:http-opts as element()?})", "trigger":"sem.rdfLoad", "description":"(location as String, options as xs:string*, http-opts as element()?)"}, {"content":"sem.rdfLoad(${1:location as String}, ${2:options as xs:string*}, ${3:http-opts as element()?}, ${4:permissions as item()*})", "trigger":"sem.rdfLoad", "description":"(location as String, options as xs:string*, http-opts as element()?, permissions as item()*)"}, {"content":"sem.rdfLoad(${1:location as String}, ${2:options as xs:string*}, ${3:http-opts as element()?}, ${4:permissions as item()*}, ${5:collections as xs:string*})", "trigger":"sem.rdfLoad", "description":"(location as String, options as xs:string*, http-opts as element()?, permissions as item()*, collections as xs:string*)"}, {"content":"sem.rdfLoad(${1:location as String}, ${2:options as xs:string*}, ${3:http-opts as element()?}, ${4:permissions as item()*}, ${5:collections as xs:string*}, ${6:quality as xs:int?})", "trigger":"sem.rdfLoad", "description":"(location as String, options as xs:string*, http-opts as element()?, permissions as item()*, collections as xs:string*, quality as xs:int?)"}, {"content":"sem.rdfLoad(${1:location as String}, ${2:options as xs:string*}, ${3:http-opts as element()?}, ${4:permissions as item()*}, ${5:collections as xs:string*}, ${6:quality as xs:int?}, ${7:forest-ids as xs:unsignedLong*})", "trigger":"sem.rdfLoad", "description":"(location as String, options as xs:string*, http-opts as element()?, permissions as item()*, collections as xs:string*, quality as xs:int?, forest-ids as xs:unsignedLong*)"}, {"content":"sem.databaseNodes(${1:triples as sem:triple*})", "trigger":"sem.databaseNodes", "description":"(triples as sem:triple*)"}, {"content":"sem.databaseNodes(${1:triples as sem:triple*}, ${2:options as xs:string*})", "trigger":"sem.databaseNodes", "description":"(triples as sem:triple*, options as xs:string*)"}, {"content":"sem.databaseNodes(${1:triples as sem:triple*}, ${2:options as xs:string*}, ${3:query as cts:query?})", "trigger":"sem.databaseNodes", "description":"(triples as sem:triple*, options as xs:string*, query as cts:query?)"}, {"content":"sem.graph(${1:graphname as sem:iri})", "trigger":"sem.graph", "description":"(graphname as sem:iri)"}, {"content":"sem.graphInsert(${1:graphname as sem:iri}, ${2:triples as sem:triple*})", "trigger":"sem.graphInsert", "description":"(graphname as sem:iri, triples as sem:triple*)"}, {"content":"sem.graphInsert(${1:graphname as sem:iri}, ${2:triples as sem:triple*}, ${3:permissions as item()*})", "trigger":"sem.graphInsert", "description":"(graphname as sem:iri, triples as sem:triple*, permissions as item()*)"}, {"content":"sem.graphInsert(${1:graphname as sem:iri}, ${2:triples as sem:triple*}, ${3:permissions as item()*}, ${4:collections as xs:string*})", "trigger":"sem.graphInsert", "description":"(graphname as sem:iri, triples as sem:triple*, permissions as item()*, collections as xs:string*)"}, {"content":"sem.graphInsert(${1:graphname as sem:iri}, ${2:triples as sem:triple*}, ${3:permissions as item()*}, ${4:collections as xs:string*}, ${5:quality as xs:int?})", "trigger":"sem.graphInsert", "description":"(graphname as sem:iri, triples as sem:triple*, permissions as item()*, collections as xs:string*, quality as xs:int?)"}, {"content":"sem.graphInsert(${1:graphname as sem:iri}, ${2:triples as sem:triple*}, ${3:permissions as item()*}, ${4:collections as xs:string*}, ${5:quality as xs:int?}, ${6:forest-ids as xs:unsignedLong*})", "trigger":"sem.graphInsert", "description":"(graphname as sem:iri, triples as sem:triple*, permissions as item()*, collections as xs:string*, quality as xs:int?, forest-ids as xs:unsignedLong*)"}, {"content":"sem.graphDelete(${1:graphname as sem:iri})", "trigger":"sem.graphDelete", "description":"(graphname as sem:iri)"}, {"content":"sem.queryResultsSerialize(${1:results as item()*})", "trigger":"sem.queryResultsSerialize", "description":"(results as item()*)"}, {"content":"sem.queryResultsSerialize(${1:results as item()*}, ${2:options as xs:string*})", "trigger":"sem.queryResultsSerialize", "description":"(results as item()*, options as xs:string*)"}, {"content":"sem.curieExpand(${1:curie as String})", "trigger":"sem.curieExpand", "description":"(curie as String)"}, {"content":"sem.curieExpand(${1:curie as String}, ${2:mapping as map:map})", "trigger":"sem.curieExpand", "description":"(curie as String, mapping as map:map)"}, {"content":"sem.curieShorten(${1:iri as sem:iri})", "trigger":"sem.curieShorten", "description":"(iri as sem:iri)"}, {"content":"sem.curieShorten(${1:iri as sem:iri}, ${2:mapping as map:map})", "trigger":"sem.curieShorten", "description":"(iri as sem:iri, mapping as map:map)"}, {"content":"sem.prefixes(${1:prefixdef as xs:string?})", "trigger":"sem.prefixes", "description":"(prefixdef as xs:string?)"}, {"content":"sem.prefixes(${1:prefixdef as xs:string?}, ${2:include-common as xs:boolean?})", "trigger":"sem.prefixes", "description":"(prefixdef as xs:string?, include-common as xs:boolean?)"}, {"content":"sem.rdfBuilder()", "trigger":"sem.rdfBuilder", "description":"()"}, {"content":"sem.rdfBuilder(${1:prefixes as map:map?})", "trigger":"sem.rdfBuilder", "description":"(prefixes as map:map?)"}, {"content":"sem.rdfBuilder(${1:prefixes as map:map?}, ${2:graph as sem:iri?})", "trigger":"sem.rdfBuilder", "description":"(prefixes as map:map?, graph as sem:iri?)"}, {"content":"sem.describe(${1:iris as sem:iri*})", "trigger":"sem.describe", "description":"(iris as sem:iri*)"}, {"content":"sem.transitiveClosure(${1:seeds as sem:iri*}, ${2:predicates as sem:iri*}, ${3:limit as xs:integer})", "trigger":"sem.transitiveClosure", "description":"(seeds as sem:iri*, predicates as sem:iri*, limit as xs:integer)"}, {"content":"sem.sparqlValues(${1:sparql as String}, ${2:values as map:map*})", "trigger":"sem.sparqlValues", "description":"(sparql as String, values as map:map*)"}, {"content":"sem.sparqlValues(${1:sparql as String}, ${2:values as map:map*}, ${3:options as xs:string*})", "trigger":"sem.sparqlValues", "description":"(sparql as String, values as map:map*, options as xs:string*)"}, {"content":"sem.sparqlValues(${1:sparql as String}, ${2:values as map:map*}, ${3:options as xs:string*}, ${4:store as item()*})", "trigger":"sem.sparqlValues", "description":"(sparql as String, values as map:map*, options as xs:string*, store as item()*)"}, {"content":"sem.iri(${1:string-iri as String})", "trigger":"sem.iri", "description":"(string-iri as String)"}, {"content":"fn.boolean(${1:arg as ValueIterator | Array})", "trigger":"fn.boolean", "description":"(arg as ValueIterator | Array)"}, {"content":"fn.boolean(${1:arg as ValueIterator | Array}, ${2:collation as String})", "trigger":"fn.boolean", "description":"(arg as ValueIterator | Array, collation as String)"}, {"content":"fn.indexOf(${1:seqParam as xs:anyAtomicType*}, ${2:srchParam as xs:anyAtomicType})", "trigger":"fn.indexOf", "description":"(seqParam as xs:anyAtomicType*, srchParam as xs:anyAtomicType)"}, {"content":"fn.indexOf(${1:seqParam as xs:anyAtomicType*}, ${2:srchParam as xs:anyAtomicType}, ${3:collationLiteral as String})", "trigger":"fn.indexOf", "description":"(seqParam as xs:anyAtomicType*, srchParam as xs:anyAtomicType, collationLiteral as String)"}, {"content":"fn.empty(${1:arg as item()*})", "trigger":"fn.empty", "description":"(arg as item()*)"}, {"content":"fn.exists(${1:arg as item()*})", "trigger":"fn.exists", "description":"(arg as item()*)"}, {"content":"fn.distinctNodes(${1:nodes as node()*})", "trigger":"fn.distinctNodes", "description":"(nodes as node()*)"}, {"content":"fn.distinctValues(${1:arg as ValueIterator})", "trigger":"fn.distinctValues", "description":"(arg as ValueIterator)"}, {"content":"fn.distinctValues(${1:arg as ValueIterator}, ${2:collation as String})", "trigger":"fn.distinctValues", "description":"(arg as ValueIterator, collation as String)"}, {"content":"fn.insertBefore(${1:target as item()*}, ${2:position as xs:integer}, ${3:inserts as item()*})", "trigger":"fn.insertBefore", "description":"(target as item()*, position as xs:integer, inserts as item()*)"}, {"content":"fn.remove(${1:target as item()*}, ${2:position as xs:integer})", "trigger":"fn.remove", "description":"(target as item()*, position as xs:integer)"}, {"content":"fn.reverse(${1:target as item()*})", "trigger":"fn.reverse", "description":"(target as item()*)"}, {"content":"fn.subsequence(${1:sourceSeq as ValueIterator}, ${2:startingLoc as xs:double})", "trigger":"fn.subsequence", "description":"(sourceSeq as ValueIterator, startingLoc as xs:double)"}, {"content":"fn.subsequence(${1:sourceSeq as ValueIterator}, ${2:startingLoc as xs:double}, ${3:length as xs:double})", "trigger":"fn.subsequence", "description":"(sourceSeq as ValueIterator, startingLoc as xs:double, length as xs:double)"}, {"content":"fn.unordered(${1:sourceSeq as item()*})", "trigger":"fn.unordered", "description":"(sourceSeq as item()*)"}, {"content":"fn.zeroOrOne(${1:arg as item()*})", "trigger":"fn.zeroOrOne", "description":"(arg as item()*)"}, {"content":"fn.oneOrMore(${1:arg as item()*})", "trigger":"fn.oneOrMore", "description":"(arg as item()*)"}, {"content":"fn.exactlyOne(${1:arg as item()*})", "trigger":"fn.exactlyOne", "description":"(arg as item()*)"}, {"content":"fn.deepEqual(${1:parameter1 as item()*}, ${2:parameter2 as item()*})", "trigger":"fn.deepEqual", "description":"(parameter1 as item()*, parameter2 as item()*)"}, {"content":"fn.deepEqual(${1:parameter1 as item()*}, ${2:parameter2 as item()*}, ${3:collation as String})", "trigger":"fn.deepEqual", "description":"(parameter1 as item()*, parameter2 as item()*, collation as String)"}, {"content":"fn.count(${1:arg as item()*})", "trigger":"fn.count", "description":"(arg as item()*)"}, {"content":"fn.count(${1:arg as item()*}, ${2:maximum as xs:double?})", "trigger":"fn.count", "description":"(arg as item()*, maximum as xs:double?)"}, {"content":"fn.avg(${1:arg as ValueIterator | Array})", "trigger":"fn.avg", "description":"(arg as ValueIterator | Array)"}, {"content":"fn.max(${1:arg as ValueIterator | Array})", "trigger":"fn.max", "description":"(arg as ValueIterator | Array)"}, {"content":"fn.max(${1:arg as ValueIterator | Array}, ${2:collation as String})", "trigger":"fn.max", "description":"(arg as ValueIterator | Array, collation as String)"}, {"content":"fn.min(${1:arg as ValueIterator | Array})", "trigger":"fn.min", "description":"(arg as ValueIterator | Array)"}, {"content":"fn.min(${1:arg as ValueIterator | Array}, ${2:collation as String})", "trigger":"fn.min", "description":"(arg as ValueIterator | Array, collation as String)"}, {"content":"fn.sum(${1:arg as ValueIterator | Array})", "trigger":"fn.sum", "description":"(arg as ValueIterator | Array)"}, {"content":"fn.sum(${1:arg as ValueIterator | Array}, ${2:zero as xs:anyAtomicType?})", "trigger":"fn.sum", "description":"(arg as ValueIterator | Array, zero as xs:anyAtomicType?)"}, {"content":"fn.id(${1:arg as xs:string*})", "trigger":"fn.id", "description":"(arg as xs:string*)"}, {"content":"fn.id(${1:arg as xs:string*}, ${2:node as node()})", "trigger":"fn.id", "description":"(arg as xs:string*, node as node())"}, {"content":"fn.idref(${1:arg as xs:string*})", "trigger":"fn.idref", "description":"(arg as xs:string*)"}, {"content":"fn.idref(${1:arg as xs:string*}, ${2:node as node()})", "trigger":"fn.idref", "description":"(arg as xs:string*, node as node())"}, {"content":"fn.doc()", "trigger":"fn.doc", "description":"()"}, {"content":"fn.doc(${1:uri as String | String[] | ValueIterator})", "trigger":"fn.doc", "description":"(uri as String | String[] | ValueIterator)"}, {"content":"fn.docAvailable(${1:uri as xs:string?})", "trigger":"fn.docAvailable", "description":"(uri as xs:string?)"}, {"content":"fn.collection()", "trigger":"fn.collection", "description":"()"}, {"content":"fn.collection(${1:uri as xs:string*})", "trigger":"fn.collection", "description":"(uri as xs:string*)"}, {"content":"fn.document(${1:uris as String | String[] | ValueIterator})", "trigger":"fn.document", "description":"(uris as String | String[] | ValueIterator)"}, {"content":"fn.document(${1:uris as String | String[] | ValueIterator}, ${2:base-node as node()})", "trigger":"fn.document", "description":"(uris as String | String[] | ValueIterator, base-node as node())"}, {"content":"fn.unparsedText(${1:href as String})", "trigger":"fn.unparsedText", "description":"(href as String)"}, {"content":"fn.unparsedText(${1:href as String}, ${2:encoding as String})", "trigger":"fn.unparsedText", "description":"(href as String, encoding as String)"}, {"content":"fn.unparsedTextAvailable(${1:href as String})", "trigger":"fn.unparsedTextAvailable", "description":"(href as String)"}, {"content":"fn.unparsedTextAvailable(${1:href as String}, ${2:encoding as String})", "trigger":"fn.unparsedTextAvailable", "description":"(href as String, encoding as String)"}, {"content":"xdmp.setResponseOutputMethod(${1:method as String})", "trigger":"xdmp.setResponseOutputMethod", "description":"(method as String)"}, {"content":"xdmp.email(${1:message as Object})", "trigger":"xdmp.email", "description":"(message as Object)"}, {"content":"sem.datatype(${1:value as xs:anyAtomicType})", "trigger":"sem.datatype", "description":"(value as xs:anyAtomicType)"}, {"content":"sem.bnode()", "trigger":"sem.bnode", "description":"()"}, {"content":"sem.bnode(${1:value as xs:anyAtomicType})", "trigger":"sem.bnode", "description":"(value as xs:anyAtomicType)"}, {"content":"xdmp.type(${1:value as xs:anyAtomicType})", "trigger":"xdmp.type", "description":"(value as xs:anyAtomicType)"}, {"content":"sem.isIRI(${1:value as xs:anyAtomicType})", "trigger":"sem.isIRI", "description":"(value as xs:anyAtomicType)"}, {"content":"sem.isBlank(${1:value as xs:anyAtomicType})", "trigger":"sem.isBlank", "description":"(value as xs:anyAtomicType)"}, {"content":"sem.isLiteral(${1:value as xs:anyAtomicType})", "trigger":"sem.isLiteral", "description":"(value as xs:anyAtomicType)"}, {"content":"sem.isNumeric(${1:value as xs:anyAtomicType})", "trigger":"sem.isNumeric", "description":"(value as xs:anyAtomicType)"}, {"content":"sem.sameTerm(${1:a as xs:anyAtomicType}, ${2:b as xs:anyAtomicType})", "trigger":"sem.sameTerm", "description":"(a as xs:anyAtomicType, b as xs:anyAtomicType)"}, {"content":"sem.lang(${1:value as xs:anyAtomicType})", "trigger":"sem.lang", "description":"(value as xs:anyAtomicType)"}, {"content":"sem.langMatches(${1:lang-tag as String}, ${2:lang-range as String})", "trigger":"sem.langMatches", "description":"(lang-tag as String, lang-range as String)"}, {"content":"sem.random()", "trigger":"sem.random", "description":"()"}, {"content":"sem.defaultGraphIri()", "trigger":"sem.defaultGraphIri", "description":"()"}, {"content":"sem.graphAddPermissions(${1:graph as sem:iri}, ${2:permissions as Object[]})", "trigger":"sem.graphAddPermissions", "description":"(graph as sem:iri, permissions as Object[])"}, {"content":"sem.graphSetPermissions(${1:graph as sem:iri}, ${2:permissions as Object[]})", "trigger":"sem.graphSetPermissions", "description":"(graph as sem:iri, permissions as Object[])"}, {"content":"sem.graphRemovePermissions(${1:graph as sem:iri}, ${2:permissions as Object[]})", "trigger":"sem.graphRemovePermissions", "description":"(graph as sem:iri, permissions as Object[])"}, {"content":"sem.graphGetPermissions(${1:graph as sem:iri})", "trigger":"sem.graphGetPermissions", "description":"(graph as sem:iri)"}, {"content":"sem.graphGetPermissions(${1:graph as sem:iri}, ${2:format as String})", "trigger":"sem.graphGetPermissions", "description":"(graph as sem:iri, format as String)"}, {"content":"sem.if(${1:condition as Boolean}, ${2:then as item()*}, ${3:else as item()*})", "trigger":"sem.if", "description":"(condition as Boolean, then as item()*, else as item()*)"}, {"content":"sem.coalesce(${1:parameter1 as item()*})", "trigger":"sem.coalesce", "description":"(parameter1 as item()*)"}, {"content":"sem.coalesce(${1:parameter1 as item()*}, ${2:parameterN as item()*,...})", "trigger":"sem.coalesce", "description":"(parameter1 as item()*, parameterN as item()*,...)"}, {"content":"sem.timezoneString(${1:value as xs:dateTime})", "trigger":"sem.timezoneString", "description":"(value as xs:dateTime)"}, {"content":"sem.uuidString()", "trigger":"sem.uuidString", "description":"()"}, {"content":"sem.uuid()", "trigger":"sem.uuid", "description":"()"}, {"content":"sem.triple(${1:subject_or_node as item()})", "trigger":"sem.triple", "description":"(subject_or_node as item())"}, {"content":"sem.triple(${1:subject_or_node as item()}, ${2:predicate as xs:anyAtomicType})", "trigger":"sem.triple", "description":"(subject_or_node as item(), predicate as xs:anyAtomicType)"}, {"content":"sem.triple(${1:subject_or_node as item()}, ${2:predicate as xs:anyAtomicType}, ${3:object as xs:anyAtomicType})", "trigger":"sem.triple", "description":"(subject_or_node as item(), predicate as xs:anyAtomicType, object as xs:anyAtomicType)"}, {"content":"sem.triple(${1:subject_or_node as item()}, ${2:predicate as xs:anyAtomicType}, ${3:object as xs:anyAtomicType}, ${4:graph as sem:iri?})", "trigger":"sem.triple", "description":"(subject_or_node as item(), predicate as xs:anyAtomicType, object as xs:anyAtomicType, graph as sem:iri?)"}, {"content":"sem.tripleSubject(${1:triple as sem:triple})", "trigger":"sem.tripleSubject", "description":"(triple as sem:triple)"}, {"content":"sem.triplePredicate(${1:triple as sem:triple})", "trigger":"sem.triplePredicate", "description":"(triple as sem:triple)"}, {"content":"sem.tripleObject(${1:triple as sem:triple})", "trigger":"sem.tripleObject", "description":"(triple as sem:triple)"}, {"content":"sem.tripleGraph(${1:triple as sem:triple})", "trigger":"sem.tripleGraph", "description":"(triple as sem:triple)"}, {"content":"sem.unknown(${1:string as String}, ${2:datatype as sem:iri})", "trigger":"sem.unknown", "description":"(string as String, datatype as sem:iri)"}, {"content":"sem.unknownDatatype(${1:val as sem:unknown})", "trigger":"sem.unknownDatatype", "description":"(val as sem:unknown)"}, {"content":"sem.invalid(${1:string as String}, ${2:datatype as sem:iri})", "trigger":"sem.invalid", "description":"(string as String, datatype as sem:iri)"}, {"content":"sem.invalidDatatype(${1:val as sem:invalid})", "trigger":"sem.invalidDatatype", "description":"(val as sem:invalid)"}, {"content":"rdf.langString(${1:string as String}, ${2:lang as String})", "trigger":"rdf.langString", "description":"(string as String, lang as String)"}, {"content":"rdf.langStringLanguage(${1:val as rdf:langString})", "trigger":"rdf.langStringLanguage", "description":"(val as rdf:langString)"}, {"content":"sem.typedLiteral(${1:value as String}, ${2:datatype as sem:iri})", "trigger":"sem.typedLiteral", "description":"(value as String, datatype as sem:iri)"}, {"content":"sem.sparql(${1:sparql as String})", "trigger":"sem.sparql", "description":"(sparql as String)"}, {"content":"sem.sparql(${1:sparql as String}, ${2:bindings as map:map?})", "trigger":"sem.sparql", "description":"(sparql as String, bindings as map:map?)"}, {"content":"sem.sparql(${1:sparql as String}, ${2:bindings as map:map?}, ${3:options as xs:string*})", "trigger":"sem.sparql", "description":"(sparql as String, bindings as map:map?, options as xs:string*)"}, {"content":"sem.sparql(${1:sparql as String}, ${2:bindings as map:map?}, ${3:options as xs:string*}, ${4:store as sem:store*})", "trigger":"sem.sparql", "description":"(sparql as String, bindings as map:map?, options as xs:string*, store as sem:store*)"}, {"content":"sem.sparqlUpdate(${1:sparql as String})", "trigger":"sem.sparqlUpdate", "description":"(sparql as String)"}, {"content":"sem.sparqlUpdate(${1:sparql as String}, ${2:bindings as map:map?})", "trigger":"sem.sparqlUpdate", "description":"(sparql as String, bindings as map:map?)"}, {"content":"sem.sparqlUpdate(${1:sparql as String}, ${2:bindings as map:map?}, ${3:options as xs:string*})", "trigger":"sem.sparqlUpdate", "description":"(sparql as String, bindings as map:map?, options as xs:string*)"}, {"content":"sem.sparqlUpdate(${1:sparql as String}, ${2:bindings as map:map?}, ${3:options as xs:string*}, ${4:store as sem:store*})", "trigger":"sem.sparqlUpdate", "description":"(sparql as String, bindings as map:map?, options as xs:string*, store as sem:store*)"}, {"content":"sem.sparqlUpdate(${1:sparql as String}, ${2:bindings as map:map?}, ${3:options as xs:string*}, ${4:store as sem:store*}, ${5:default-permissions as Object[]})", "trigger":"sem.sparqlUpdate", "description":"(sparql as String, bindings as map:map?, options as xs:string*, store as sem:store*, default-permissions as Object[])"}, {"content":"sem.inMemoryStore(${1:dataset as sem:triple*})", "trigger":"sem.inMemoryStore", "description":"(dataset as sem:triple*)"}, {"content":"sem.store()", "trigger":"sem.store", "description":"()"}, {"content":"sem.store(${1:options as xs:string*})", "trigger":"sem.store", "description":"(options as xs:string*)"}, {"content":"sem.store(${1:options as xs:string*}, ${2:query as cts:query?})", "trigger":"sem.store", "description":"(options as xs:string*, query as cts:query?)"}, {"content":"spell.load(${1:path as String}, ${2:uri as String})", "trigger":"spell.load", "description":"(path as String, uri as String)"}, {"content":"spell.insert(${1:uri as String}, ${2:dict as element(spell:dictionary) | Object | object-node()})", "trigger":"spell.insert", "description":"(uri as String, dict as element(spell:dictionary) | Object | object-node())"}, {"content":"spell.addWord(${1:uri as String}, ${2:word as String})", "trigger":"spell.addWord", "description":"(uri as String, word as String)"}, {"content":"spell.removeWord(${1:uri as String}, ${2:word as String})", "trigger":"spell.removeWord", "description":"(uri as String, word as String)"}, {"content":"spell.makeDictionary(${1:words as xs:string*})", "trigger":"spell.makeDictionary", "description":"(words as xs:string*)"}, {"content":"spell.makeDictionary(${1:words as xs:string*}, ${2:output-kind as String})", "trigger":"spell.makeDictionary", "description":"(words as xs:string*, output-kind as String)"}, {"content":"spell.isCorrect(${1:uri as xs:string*}, ${2:word as String})", "trigger":"spell.isCorrect", "description":"(uri as xs:string*, word as String)"}, {"content":"spell.suggest(${1:uri as xs:string*}, ${2:word as String})", "trigger":"spell.suggest", "description":"(uri as xs:string*, word as String)"}, {"content":"spell.suggest(${1:uri as xs:string*}, ${2:word as String}, ${3:options as (element()|map:map)?})", "trigger":"spell.suggest", "description":"(uri as xs:string*, word as String, options as (element()|map:map)?)"}, {"content":"spell.levenshteinDistance(${1:str1 as String}, ${2:str2 as String})", "trigger":"spell.levenshteinDistance", "description":"(str1 as String, str2 as String)"}, {"content":"spell.doubleMetaphone(${1:word as String})", "trigger":"spell.doubleMetaphone", "description":"(word as String)"}, {"content":"spell.suggestDetailed(${1:dictionary_uris as xs:string*}, ${2:word as String})", "trigger":"spell.suggestDetailed", "description":"(dictionary_uris as xs:string*, word as String)"}, {"content":"spell.suggestDetailed(${1:dictionary_uris as xs:string*}, ${2:word as String}, ${3:options as (element()|map:map)?})", "trigger":"spell.suggestDetailed", "description":"(dictionary_uris as xs:string*, word as String, options as (element()|map:map)?)"}, {"content":"spell.romanize(${1:string as String})", "trigger":"spell.romanize", "description":"(string as String)"}, {"content":"xdmp.sql(${1:sql2 as String})", "trigger":"xdmp.sql", "description":"(sql2 as String)"}, {"content":"xdmp.sql(${1:sql2 as String}, ${2:options as xs:string*})", "trigger":"xdmp.sql", "description":"(sql2 as String, options as xs:string*)"}, {"content":"xdmp.sql(${1:sql2 as String}, ${2:options as xs:string*}, ${3:bindings as map:map?})", "trigger":"xdmp.sql", "description":"(sql2 as String, options as xs:string*, bindings as map:map?)"}, {"content":"xdmp.sql(${1:sql2 as String}, ${2:options as xs:string*}, ${3:bindings as map:map?}, ${4:query as cts:query?})", "trigger":"xdmp.sql", "description":"(sql2 as String, options as xs:string*, bindings as map:map?, query as cts:query?)"}, {"content":"xdmp.x509CertificateExtract(${1:cert as String})", "trigger":"xdmp.x509CertificateExtract", "description":"(cert as String)"}, {"content":"xdmp.md5(${1:data as item()})", "trigger":"xdmp.md5", "description":"(data as item())"}, {"content":"xdmp.md5(${1:data as item()}, ${2:encoding as String})", "trigger":"xdmp.md5", "description":"(data as item(), encoding as String)"}, {"content":"xdmp.hmacMd5(${1:secretkey as item()}, ${2:message as item()})", "trigger":"xdmp.hmacMd5", "description":"(secretkey as item(), message as item())"}, {"content":"xdmp.hmacMd5(${1:secretkey as item()}, ${2:message as item()}, ${3:encoding as String})", "trigger":"xdmp.hmacMd5", "description":"(secretkey as item(), message as item(), encoding as String)"}, {"content":"xdmp.sha1(${1:data as item()})", "trigger":"xdmp.sha1", "description":"(data as item())"}, {"content":"xdmp.sha1(${1:data as item()}, ${2:encoding as String})", "trigger":"xdmp.sha1", "description":"(data as item(), encoding as String)"}, {"content":"xdmp.hmacSha1(${1:secretkey as item()}, ${2:message as item()})", "trigger":"xdmp.hmacSha1", "description":"(secretkey as item(), message as item())"}, {"content":"xdmp.hmacSha1(${1:secretkey as item()}, ${2:message as item()}, ${3:encoding as String})", "trigger":"xdmp.hmacSha1", "description":"(secretkey as item(), message as item(), encoding as String)"}, {"content":"xdmp.sha256(${1:data as item()})", "trigger":"xdmp.sha256", "description":"(data as item())"}, {"content":"xdmp.sha256(${1:data as item()}, ${2:encoding as String})", "trigger":"xdmp.sha256", "description":"(data as item(), encoding as String)"}, {"content":"xdmp.hmacSha256(${1:secretkey as item()}, ${2:message as item()})", "trigger":"xdmp.hmacSha256", "description":"(secretkey as item(), message as item())"}, {"content":"xdmp.hmacSha256(${1:secretkey as item()}, ${2:message as item()}, ${3:encoding as String})", "trigger":"xdmp.hmacSha256", "description":"(secretkey as item(), message as item(), encoding as String)"}, {"content":"xdmp.sha384(${1:data as item()})", "trigger":"xdmp.sha384", "description":"(data as item())"}, {"content":"xdmp.sha384(${1:data as item()}, ${2:encoding as String})", "trigger":"xdmp.sha384", "description":"(data as item(), encoding as String)"}, {"content":"xdmp.sha512(${1:data as item()})", "trigger":"xdmp.sha512", "description":"(data as item())"}, {"content":"xdmp.sha512(${1:data as item()}, ${2:encoding as String})", "trigger":"xdmp.sha512", "description":"(data as item(), encoding as String)"}, {"content":"xdmp.hmacSha512(${1:secretkey as item()}, ${2:message as item()})", "trigger":"xdmp.hmacSha512", "description":"(secretkey as item(), message as item())"}, {"content":"xdmp.hmacSha512(${1:secretkey as item()}, ${2:message as item()}, ${3:encoding as String})", "trigger":"xdmp.hmacSha512", "description":"(secretkey as item(), message as item(), encoding as String)"}, {"content":"xdmp.hostStatus(${1:host-id as xs:unsignedLong*})", "trigger":"xdmp.hostStatus", "description":"(host-id as xs:unsignedLong*)"}, {"content":"xdmp.hostGetSslFipsEnabled(${1:host-id as xs:unsignedLong*})", "trigger":"xdmp.hostGetSslFipsEnabled", "description":"(host-id as xs:unsignedLong*)"}, {"content":"xdmp.cacheStatus()", "trigger":"xdmp.cacheStatus", "description":"()"}, {"content":"xdmp.cacheStatus(${1:host-id as xs:unsignedLong*})", "trigger":"xdmp.cacheStatus", "description":"(host-id as xs:unsignedLong*)"}, {"content":"xdmp.forestStatus(${1:forest-id as xs:unsignedLong*})", "trigger":"xdmp.forestStatus", "description":"(forest-id as xs:unsignedLong*)"}, {"content":"xdmp.forestOnline(${1:forestID as xs:unsignedLong})", "trigger":"xdmp.forestOnline", "description":"(forestID as xs:unsignedLong)"}, {"content":"xdmp.forestOnline(${1:forestID as xs:unsignedLong}, ${2:timestamp as xs:unsignedLong})", "trigger":"xdmp.forestOnline", "description":"(forestID as xs:unsignedLong, timestamp as xs:unsignedLong)"}, {"content":"xdmp.forestOnline(${1:forestID as xs:unsignedLong}, ${2:timestamp as xs:unsignedLong}, ${3:isReplica as Boolean})", "trigger":"xdmp.forestOnline", "description":"(forestID as xs:unsignedLong, timestamp as xs:unsignedLong, isReplica as Boolean)"}, {"content":"xdmp.forestOnline(${1:forestID as xs:unsignedLong}, ${2:timestamp as xs:unsignedLong}, ${3:isReplica as Boolean}, ${4:syncingOk as Boolean})", "trigger":"xdmp.forestOnline", "description":"(forestID as xs:unsignedLong, timestamp as xs:unsignedLong, isReplica as Boolean, syncingOk as Boolean)"}, {"content":"xdmp.serverStatus(${1:host-id as xs:unsignedLong}, ${2:server-id as xs:unsignedLong*})", "trigger":"xdmp.serverStatus", "description":"(host-id as xs:unsignedLong, server-id as xs:unsignedLong*)"}, {"content":"xdmp.forestCounts(${1:forest-id as xs:unsignedLong*})", "trigger":"xdmp.forestCounts", "description":"(forest-id as xs:unsignedLong*)"}, {"content":"xdmp.forestCounts(${1:forest-id as xs:unsignedLong*}, ${2:show-elements as xs:string*})", "trigger":"xdmp.forestCounts", "description":"(forest-id as xs:unsignedLong*, show-elements as xs:string*)"}, {"content":"xdmp.forestCounts(${1:forest-id as xs:unsignedLong*}, ${2:show-elements as xs:string*}, ${3:options as xs:string*})", "trigger":"xdmp.forestCounts", "description":"(forest-id as xs:unsignedLong*, show-elements as xs:string*, options as xs:string*)"}, {"content":"xdmp.requestStatus(${1:host-id as xs:unsignedLong}, ${2:server-id as xs:unsignedLong}, ${3:request-id as xs:unsignedLong*})", "trigger":"xdmp.requestStatus", "description":"(host-id as xs:unsignedLong, server-id as xs:unsignedLong, request-id as xs:unsignedLong*)"}, {"content":"xdmp.foreignClusterStatus(${1:host-id as xs:unsignedLong}, ${2:foreign-cluster-id as xs:unsignedLong})", "trigger":"xdmp.foreignClusterStatus", "description":"(host-id as xs:unsignedLong, foreign-cluster-id as xs:unsignedLong)"}, {"content":"xdmp.keystoreStatus()", "trigger":"xdmp.keystoreStatus", "description":"()"}, {"content":"fn.codepointsToString(${1:arg as xs:integer*})", "trigger":"fn.codepointsToString", "description":"(arg as xs:integer*)"}, {"content":"fn.stringToCodepoints(${1:arg as String})", "trigger":"fn.stringToCodepoints", "description":"(arg as String)"}, {"content":"fn.compare(${1:comparand1 as xs:string?}, ${2:comparand2 as xs:string?})", "trigger":"fn.compare", "description":"(comparand1 as xs:string?, comparand2 as xs:string?)"}, {"content":"fn.compare(${1:comparand1 as xs:string?}, ${2:comparand2 as xs:string?}, ${3:collation as String})", "trigger":"fn.compare", "description":"(comparand1 as xs:string?, comparand2 as xs:string?, collation as String)"}, {"content":"fn.codepointEqual(${1:comparand1 as xs:string?}, ${2:comparand2 as xs:string?})", "trigger":"fn.codepointEqual", "description":"(comparand1 as xs:string?, comparand2 as xs:string?)"}, {"content":"fn.concat(${1:parameter1 as xs:anyAtomicType?})", "trigger":"fn.concat", "description":"(parameter1 as xs:anyAtomicType?)"}, {"content":"fn.concat(${1:parameter1 as xs:anyAtomicType?}, ${2:parameterN as xs:anyAtomicType?,...})", "trigger":"fn.concat", "description":"(parameter1 as xs:anyAtomicType?, parameterN as xs:anyAtomicType?,...)"}, {"content":"fn.stringJoin(${1:parameter1 as xs:string*}, ${2:parameter2 as String})", "trigger":"fn.stringJoin", "description":"(parameter1 as xs:string*, parameter2 as String)"}, {"content":"fn.startsWith(${1:parameter1 as xs:string?}, ${2:parameter2 as xs:string?})", "trigger":"fn.startsWith", "description":"(parameter1 as xs:string?, parameter2 as xs:string?)"}, {"content":"fn.startsWith(${1:parameter1 as xs:string?}, ${2:parameter2 as xs:string?}, ${3:collation as String})", "trigger":"fn.startsWith", "description":"(parameter1 as xs:string?, parameter2 as xs:string?, collation as String)"}, {"content":"fn.endsWith(${1:parameter1 as xs:string?}, ${2:parameter2 as xs:string?})", "trigger":"fn.endsWith", "description":"(parameter1 as xs:string?, parameter2 as xs:string?)"}, {"content":"fn.endsWith(${1:parameter1 as xs:string?}, ${2:parameter2 as xs:string?}, ${3:collation as String})", "trigger":"fn.endsWith", "description":"(parameter1 as xs:string?, parameter2 as xs:string?, collation as String)"}, {"content":"fn.contains(${1:parameter1 as xs:string?}, ${2:parameter2 as xs:string?})", "trigger":"fn.contains", "description":"(parameter1 as xs:string?, parameter2 as xs:string?)"}, {"content":"fn.contains(${1:parameter1 as xs:string?}, ${2:parameter2 as xs:string?}, ${3:collation as String})", "trigger":"fn.contains", "description":"(parameter1 as xs:string?, parameter2 as xs:string?, collation as String)"}, {"content":"fn.substring(${1:sourceString as xs:string?}, ${2:startingLoc as xs:double})", "trigger":"fn.substring", "description":"(sourceString as xs:string?, startingLoc as xs:double)"}, {"content":"fn.substring(${1:sourceString as xs:string?}, ${2:startingLoc as xs:double}, ${3:length as xs:double})", "trigger":"fn.substring", "description":"(sourceString as xs:string?, startingLoc as xs:double, length as xs:double)"}, {"content":"fn.stringLength()", "trigger":"fn.stringLength", "description":"()"}, {"content":"fn.stringLength(${1:sourceString as xs:string?})", "trigger":"fn.stringLength", "description":"(sourceString as xs:string?)"}, {"content":"fn.substringBefore(${1:input as xs:string?}, ${2:before as xs:string?})", "trigger":"fn.substringBefore", "description":"(input as xs:string?, before as xs:string?)"}, {"content":"fn.substringBefore(${1:input as xs:string?}, ${2:before as xs:string?}, ${3:collation as String})", "trigger":"fn.substringBefore", "description":"(input as xs:string?, before as xs:string?, collation as String)"}, {"content":"fn.substringAfter(${1:input as xs:string?}, ${2:after as xs:string?})", "trigger":"fn.substringAfter", "description":"(input as xs:string?, after as xs:string?)"}, {"content":"fn.substringAfter(${1:input as xs:string?}, ${2:after as xs:string?}, ${3:collation as String})", "trigger":"fn.substringAfter", "description":"(input as xs:string?, after as xs:string?, collation as String)"}, {"content":"fn.normalizeSpace()", "trigger":"fn.normalizeSpace", "description":"()"}, {"content":"fn.normalizeSpace(${1:input as xs:string?})", "trigger":"fn.normalizeSpace", "description":"(input as xs:string?)"}, {"content":"fn.normalizeUnicode(${1:arg as xs:string?})", "trigger":"fn.normalizeUnicode", "description":"(arg as xs:string?)"}, {"content":"fn.normalizeUnicode(${1:arg as xs:string?}, ${2:normalizationForm as String})", "trigger":"fn.normalizeUnicode", "description":"(arg as xs:string?, normalizationForm as String)"}, {"content":"fn.upperCase(${1:string as xs:string?})", "trigger":"fn.upperCase", "description":"(string as xs:string?)"}, {"content":"fn.lowerCase(${1:string as xs:string?})", "trigger":"fn.lowerCase", "description":"(string as xs:string?)"}, {"content":"fn.translate(${1:src as xs:string?}, ${2:mapString as xs:string?}, ${3:transString as xs:string?})", "trigger":"fn.translate", "description":"(src as xs:string?, mapString as xs:string?, transString as xs:string?)"}, {"content":"fn.stringPad(${1:padString as xs:string?}, ${2:padCount as xs:integer})", "trigger":"fn.stringPad", "description":"(padString as xs:string?, padCount as xs:integer)"}, {"content":"fn.escapeUri(${1:uri-part as String}, ${2:escape-reserved as Boolean})", "trigger":"fn.escapeUri", "description":"(uri-part as String, escape-reserved as Boolean)"}, {"content":"fn.encodeForUri(${1:uri-part as String})", "trigger":"fn.encodeForUri", "description":"(uri-part as String)"}, {"content":"fn.iriToUri(${1:uri-part as String})", "trigger":"fn.iriToUri", "description":"(uri-part as String)"}, {"content":"fn.escapeHtmlUri(${1:uri-part as String})", "trigger":"fn.escapeHtmlUri", "description":"(uri-part as String)"}, {"content":"xdmp.encodeForNcname(${1:name as String})", "trigger":"xdmp.encodeForNcname", "description":"(name as String)"}, {"content":"xdmp.decodeFromNcname(${1:name as String})", "trigger":"xdmp.decodeFromNcname", "description":"(name as String)"}, {"content":"xdmp.position(${1:test as xs:string?}, ${2:target as xs:string?})", "trigger":"xdmp.position", "description":"(test as xs:string?, target as xs:string?)"}, {"content":"xdmp.position(${1:test as xs:string?}, ${2:target as xs:string?}, ${3:collation as xs:string?})", "trigger":"xdmp.position", "description":"(test as xs:string?, target as xs:string?, collation as xs:string?)"}, {"content":"xdmp.initcap(${1:string as xs:string?})", "trigger":"xdmp.initcap", "description":"(string as xs:string?)"}, {"content":"tde.getView(${1:schema as String}, ${2:view as String})", "trigger":"tde.getView", "description":"(schema as String, view as String)"}, {"content":"tde.documentDataExtract(${1:documents as node()*})", "trigger":"tde.documentDataExtract", "description":"(documents as node()*)"}, {"content":"tde.documentDataExtract(${1:documents as node()*}, ${2:templates as node[]})", "trigger":"tde.documentDataExtract", "description":"(documents as node()*, templates as node[])"}, {"content":"tde.validate(${1:templates as node[]})", "trigger":"tde.validate", "description":"(templates as node[])"}, {"content":"tde.validate(${1:templates as node[]}, ${2:excludeTemplateURIs as String[]})", "trigger":"tde.validate", "description":"(templates as node[], excludeTemplateURIs as String[])"}, {"content":"temporal.()", "trigger":"temporal.", "description":"()"}, {"content":"temporal.axisCreate(${1:axis-name as String}, ${2:start-range-index as cts:reference}, ${3:end-range-index as cts:reference})", "trigger":"temporal.axisCreate", "description":"(axis-name as String, start-range-index as cts:reference, end-range-index as cts:reference)"}, {"content":"temporal.axisRemove(${1:axis-name as String})", "trigger":"temporal.axisRemove", "description":"(axis-name as String)"}, {"content":"temporal.axes()", "trigger":"temporal.axes", "description":"()"}, {"content":"temporal.collectionCreate(${1:collection-name as String}, ${2:system-axis as String}, ${3:valid-axis as String})", "trigger":"temporal.collectionCreate", "description":"(collection-name as String, system-axis as String, valid-axis as String)"}, {"content":"temporal.collectionCreate(${1:collection-name as String}, ${2:system-axis as String}, ${3:valid-axis as String}, ${4:options as xs:string*})", "trigger":"temporal.collectionCreate", "description":"(collection-name as String, system-axis as String, valid-axis as String, options as xs:string*)"}, {"content":"temporal.collectionRemove(${1:collection-name as String})", "trigger":"temporal.collectionRemove", "description":"(collection-name as String)"}, {"content":"temporal.collectionGetAxis(${1:temporal-collection as String}, ${2:axis as String})", "trigger":"temporal.collectionGetAxis", "description":"(temporal-collection as String, axis as String)"}, {"content":"temporal.collections()", "trigger":"temporal.collections", "description":"()"}, {"content":"temporal.axisGetStart(${1:axis-name as String})", "trigger":"temporal.axisGetStart", "description":"(axis-name as String)"}, {"content":"temporal.axisGetEnd(${1:axis-name as String})", "trigger":"temporal.axisGetEnd", "description":"(axis-name as String)"}, {"content":"temporal.collectionGetOptions(${1:temporal-collection as String})", "trigger":"temporal.collectionGetOptions", "description":"(temporal-collection as String)"}, {"content":"temporal.collectionSetOptions(${1:temporal-collection as String}, ${2:options as xs:string*})", "trigger":"temporal.collectionSetOptions", "description":"(temporal-collection as String, options as xs:string*)"}, {"content":"thsr.load(${1:path as String}, ${2:uri as String})", "trigger":"thsr.load", "description":"(path as String, uri as String)"}, {"content":"thsr.insert(${1:uri as String}, ${2:thsr as element(thsr:thesaurus)})", "trigger":"thsr.insert", "description":"(uri as String, thsr as element(thsr:thesaurus))"}, {"content":"thsr.setEntry(${1:uri as String}, ${2:entry as element(thsr:entry)|Object})", "trigger":"thsr.setEntry", "description":"(uri as String, entry as element(thsr:entry)|Object)"}, {"content":"thsr.removeTerm(${1:uri as xs:string*}, ${2:term as String})", "trigger":"thsr.removeTerm", "description":"(uri as xs:string*, term as String)"}, {"content":"thsr.removeEntry(${1:uri as xs:string*}, ${2:entry as element(thsr:entry)|Object})", "trigger":"thsr.removeEntry", "description":"(uri as xs:string*, entry as element(thsr:entry)|Object)"}, {"content":"thsr.addSynonym(${1:entry as element(thsr:entry)}, ${2:synonym as element(thsr:synonym)|Object})", "trigger":"thsr.addSynonym", "description":"(entry as element(thsr:entry), synonym as element(thsr:synonym)|Object)"}, {"content":"thsr.removeSynonym(${1:entry as element(thsr:entry)}, ${2:synonym as element(thsr:synonym)|Object})", "trigger":"thsr.removeSynonym", "description":"(entry as element(thsr:entry), synonym as element(thsr:synonym)|Object)"}, {"content":"thsr.lookup(${1:uri as xs:string*}, ${2:term as String})", "trigger":"thsr.lookup", "description":"(uri as xs:string*, term as String)"}, {"content":"thsr.lookup(${1:uri as xs:string*}, ${2:term as String}, ${3:output-kind as String})", "trigger":"thsr.lookup", "description":"(uri as xs:string*, term as String, output-kind as String)"}, {"content":"thsr.queryLookup(${1:uri as xs:string*}, ${2:query as cts:query})", "trigger":"thsr.queryLookup", "description":"(uri as xs:string*, query as cts:query)"}, {"content":"thsr.queryLookup(${1:uri as xs:string*}, ${2:query as cts:query}, ${3:output-kind as String})", "trigger":"thsr.queryLookup", "description":"(uri as xs:string*, query as cts:query, output-kind as String)"}, {"content":"thsr.expand(${1:query as cts:query}, ${2:entries as item()*}, ${3:entries as (element() | Object)*}, ${4:new-weight as xs:double?}, ${5:min-weight as xs:double?}, ${6:filter as node()*})", "trigger":"thsr.expand", "description":"(query as cts:query, entries as item()*, entries as (element() | Object)*, new-weight as xs:double?, min-weight as xs:double?, filter as node()*)"}, {"content":"xdmp.tidy(${1:doc as String})", "trigger":"xdmp.tidy", "description":"(doc as String)"}, {"content":"xdmp.tidy(${1:doc as String}, ${2:options as (element()|map:map)?})", "trigger":"xdmp.tidy", "description":"(doc as String, options as (element()|map:map)?)"}, {"content":"tieredstorage.forestMigrate(${1:forest-ids as xs:unsignedLong*})", "trigger":"tieredstorage.forestMigrate", "description":"(forest-ids as xs:unsignedLong*)"}, {"content":"tieredstorage.forestMigrate(${1:forest-ids as xs:unsignedLong*}, ${2:new-host-id as xs:unsignedLong?})", "trigger":"tieredstorage.forestMigrate", "description":"(forest-ids as xs:unsignedLong*, new-host-id as xs:unsignedLong?)"}, {"content":"tieredstorage.forestMigrate(${1:forest-ids as xs:unsignedLong*}, ${2:new-host-id as xs:unsignedLong?}, ${3:new-data-directory as xs:string?})", "trigger":"tieredstorage.forestMigrate", "description":"(forest-ids as xs:unsignedLong*, new-host-id as xs:unsignedLong?, new-data-directory as xs:string?)"}, {"content":"tieredstorage.forestMigrate(${1:forest-ids as xs:unsignedLong*}, ${2:new-host-id as xs:unsignedLong?}, ${3:new-data-directory as xs:string?}, ${4:new-large-data-directory as xs:string?})", "trigger":"tieredstorage.forestMigrate", "description":"(forest-ids as xs:unsignedLong*, new-host-id as xs:unsignedLong?, new-data-directory as xs:string?, new-large-data-directory as xs:string?)"}, {"content":"tieredstorage.forestMigrate(${1:forest-ids as xs:unsignedLong*}, ${2:new-host-id as xs:unsignedLong?}, ${3:new-data-directory as xs:string?}, ${4:new-large-data-directory as xs:string?}, ${5:new-fast-data-directory as xs:string?})", "trigger":"tieredstorage.forestMigrate", "description":"(forest-ids as xs:unsignedLong*, new-host-id as xs:unsignedLong?, new-data-directory as xs:string?, new-large-data-directory as xs:string?, new-fast-data-directory as xs:string?)"}, {"content":"tieredstorage.forestMigrate(${1:forest-ids as xs:unsignedLong*}, ${2:new-host-id as xs:unsignedLong?}, ${3:new-data-directory as xs:string?}, ${4:new-large-data-directory as xs:string?}, ${5:new-fast-data-directory as xs:string?}, ${6:options as xs:string*})", "trigger":"tieredstorage.forestMigrate", "description":"(forest-ids as xs:unsignedLong*, new-host-id as xs:unsignedLong?, new-data-directory as xs:string?, new-large-data-directory as xs:string?, new-fast-data-directory as xs:string?, options as xs:string*)"}, {"content":"tieredstorage.forestCombine(${1:forest-ids as xs:unsignedLong*}, ${2:forest-name as String}, ${3:host-id as xs:unsignedLong})", "trigger":"tieredstorage.forestCombine", "description":"(forest-ids as xs:unsignedLong*, forest-name as String, host-id as xs:unsignedLong)"}, {"content":"tieredstorage.forestCombine(${1:forest-ids as xs:unsignedLong*}, ${2:forest-name as String}, ${3:host-id as xs:unsignedLong}, ${4:data-directory as xs:string?})", "trigger":"tieredstorage.forestCombine", "description":"(forest-ids as xs:unsignedLong*, forest-name as String, host-id as xs:unsignedLong, data-directory as xs:string?)"}, {"content":"tieredstorage.forestCombine(${1:forest-ids as xs:unsignedLong*}, ${2:forest-name as String}, ${3:host-id as xs:unsignedLong}, ${4:data-directory as xs:string?}, ${5:large-data-directory as xs:string?})", "trigger":"tieredstorage.forestCombine", "description":"(forest-ids as xs:unsignedLong*, forest-name as String, host-id as xs:unsignedLong, data-directory as xs:string?, large-data-directory as xs:string?)"}, {"content":"tieredstorage.forestCombine(${1:forest-ids as xs:unsignedLong*}, ${2:forest-name as String}, ${3:host-id as xs:unsignedLong}, ${4:data-directory as xs:string?}, ${5:large-data-directory as xs:string?}, ${6:fast-data-directory as xs:string?})", "trigger":"tieredstorage.forestCombine", "description":"(forest-ids as xs:unsignedLong*, forest-name as String, host-id as xs:unsignedLong, data-directory as xs:string?, large-data-directory as xs:string?, fast-data-directory as xs:string?)"}, {"content":"tieredstorage.forestCombine(${1:forest-ids as xs:unsignedLong*}, ${2:forest-name as String}, ${3:host-id as xs:unsignedLong}, ${4:data-directory as xs:string?}, ${5:large-data-directory as xs:string?}, ${6:fast-data-directory as xs:string?}, ${7:options as xs:string*})", "trigger":"tieredstorage.forestCombine", "description":"(forest-ids as xs:unsignedLong*, forest-name as String, host-id as xs:unsignedLong, data-directory as xs:string?, large-data-directory as xs:string?, fast-data-directory as xs:string?, options as xs:string*)"}, {"content":"tieredstorage.rangePartitionCreate(${1:database-id as xs:unsignedLong}, ${2:partition-name as String}, ${3:lower as xs:anyAtomicType?}, ${4:upper as xs:anyAtomicType?}, ${5:forests-per-host as xs:unsignedInt}, ${6:host-ids as xs:unsignedLong*})", "trigger":"tieredstorage.rangePartitionCreate", "description":"(database-id as xs:unsignedLong, partition-name as String, lower as xs:anyAtomicType?, upper as xs:anyAtomicType?, forests-per-host as xs:unsignedInt, host-ids as xs:unsignedLong*)"}, {"content":"tieredstorage.rangePartitionCreate(${1:database-id as xs:unsignedLong}, ${2:partition-name as String}, ${3:lower as xs:anyAtomicType?}, ${4:upper as xs:anyAtomicType?}, ${5:forests-per-host as xs:unsignedInt}, ${6:host-ids as xs:unsignedLong*}, ${7:data-directory as xs:string?})", "trigger":"tieredstorage.rangePartitionCreate", "description":"(database-id as xs:unsignedLong, partition-name as String, lower as xs:anyAtomicType?, upper as xs:anyAtomicType?, forests-per-host as xs:unsignedInt, host-ids as xs:unsignedLong*, data-directory as xs:string?)"}, {"content":"tieredstorage.rangePartitionCreate(${1:database-id as xs:unsignedLong}, ${2:partition-name as String}, ${3:lower as xs:anyAtomicType?}, ${4:upper as xs:anyAtomicType?}, ${5:forests-per-host as xs:unsignedInt}, ${6:host-ids as xs:unsignedLong*}, ${7:data-directory as xs:string?}, ${8:large-data-directory as xs:string?})", "trigger":"tieredstorage.rangePartitionCreate", "description":"(database-id as xs:unsignedLong, partition-name as String, lower as xs:anyAtomicType?, upper as xs:anyAtomicType?, forests-per-host as xs:unsignedInt, host-ids as xs:unsignedLong*, data-directory as xs:string?, large-data-directory as xs:string?)"}, {"content":"tieredstorage.rangePartitionCreate(${1:database-id as xs:unsignedLong}, ${2:partition-name as String}, ${3:lower as xs:anyAtomicType?}, ${4:upper as xs:anyAtomicType?}, ${5:forests-per-host as xs:unsignedInt}, ${6:host-ids as xs:unsignedLong*}, ${7:data-directory as xs:string?}, ${8:large-data-directory as xs:string?}, ${9:fast-data-directory as xs:string?})", "trigger":"tieredstorage.rangePartitionCreate", "description":"(database-id as xs:unsignedLong, partition-name as String, lower as xs:anyAtomicType?, upper as xs:anyAtomicType?, forests-per-host as xs:unsignedInt, host-ids as xs:unsignedLong*, data-directory as xs:string?, large-data-directory as xs:string?, fast-data-directory as xs:string?)"}, {"content":"tieredstorage.rangePartitionCreate(${1:database-id as xs:unsignedLong}, ${2:partition-name as String}, ${3:lower as xs:anyAtomicType?}, ${4:upper as xs:anyAtomicType?}, ${5:forests-per-host as xs:unsignedInt}, ${6:host-ids as xs:unsignedLong*}, ${7:data-directory as xs:string?}, ${8:large-data-directory as xs:string?}, ${9:fast-data-directory as xs:string?}, ${10:options as xs:string*})", "trigger":"tieredstorage.rangePartitionCreate", "description":"(database-id as xs:unsignedLong, partition-name as String, lower as xs:anyAtomicType?, upper as xs:anyAtomicType?, forests-per-host as xs:unsignedInt, host-ids as xs:unsignedLong*, data-directory as xs:string?, large-data-directory as xs:string?, fast-data-directory as xs:string?, options as xs:string*)"}, {"content":"tieredstorage.partitionForests(${1:database-id as xs:unsignedLong}, ${2:partition-name as String})", "trigger":"tieredstorage.partitionForests", "description":"(database-id as xs:unsignedLong, partition-name as String)"}, {"content":"tieredstorage.partitionForests(${1:database-id as xs:unsignedLong}, ${2:partition-name as String}, ${3:include-replicas as Boolean})", "trigger":"tieredstorage.partitionForests", "description":"(database-id as xs:unsignedLong, partition-name as String, include-replicas as Boolean)"}, {"content":"tieredstorage.databasePartitions(${1:database-id as xs:unsignedLong})", "trigger":"tieredstorage.databasePartitions", "description":"(database-id as xs:unsignedLong)"}, {"content":"tieredstorage.partitionSetUpdatesAllowed(${1:database-id as xs:unsignedLong}, ${2:partition-name as String}, ${3:value as String})", "trigger":"tieredstorage.partitionSetUpdatesAllowed", "description":"(database-id as xs:unsignedLong, partition-name as String, value as String)"}, {"content":"tieredstorage.partitionSetAvailability(${1:database-id as xs:unsignedLong}, ${2:partition-name as String}, ${3:value as String})", "trigger":"tieredstorage.partitionSetAvailability", "description":"(database-id as xs:unsignedLong, partition-name as String, value as String)"}, {"content":"tieredstorage.partitionTransfer(${1:partition-db-id as xs:unsignedLong}, ${2:partition-name as String}, ${3:dst-db-id as xs:unsignedLong})", "trigger":"tieredstorage.partitionTransfer", "description":"(partition-db-id as xs:unsignedLong, partition-name as String, dst-db-id as xs:unsignedLong)"}, {"content":"tieredstorage.partitionTransfer(${1:partition-db-id as xs:unsignedLong}, ${2:partition-name as String}, ${3:dst-db-id as xs:unsignedLong}, ${4:options as xs:string*})", "trigger":"tieredstorage.partitionTransfer", "description":"(partition-db-id as xs:unsignedLong, partition-name as String, dst-db-id as xs:unsignedLong, options as xs:string*)"}, {"content":"tieredstorage.partitionMigrate(${1:database-id as xs:unsignedLong}, ${2:partition-name as String}, ${3:host-ids as xs:unsignedLong*})", "trigger":"tieredstorage.partitionMigrate", "description":"(database-id as xs:unsignedLong, partition-name as String, host-ids as xs:unsignedLong*)"}, {"content":"tieredstorage.partitionMigrate(${1:database-id as xs:unsignedLong}, ${2:partition-name as String}, ${3:host-ids as xs:unsignedLong*}, ${4:data-directory as xs:string?})", "trigger":"tieredstorage.partitionMigrate", "description":"(database-id as xs:unsignedLong, partition-name as String, host-ids as xs:unsignedLong*, data-directory as xs:string?)"}, {"content":"tieredstorage.partitionMigrate(${1:database-id as xs:unsignedLong}, ${2:partition-name as String}, ${3:host-ids as xs:unsignedLong*}, ${4:data-directory as xs:string?}, ${5:large-data-directory as xs:string?})", "trigger":"tieredstorage.partitionMigrate", "description":"(database-id as xs:unsignedLong, partition-name as String, host-ids as xs:unsignedLong*, data-directory as xs:string?, large-data-directory as xs:string?)"}, {"content":"tieredstorage.partitionMigrate(${1:database-id as xs:unsignedLong}, ${2:partition-name as String}, ${3:host-ids as xs:unsignedLong*}, ${4:data-directory as xs:string?}, ${5:large-data-directory as xs:string?}, ${6:fast-data-directory as xs:string?})", "trigger":"tieredstorage.partitionMigrate", "description":"(database-id as xs:unsignedLong, partition-name as String, host-ids as xs:unsignedLong*, data-directory as xs:string?, large-data-directory as xs:string?, fast-data-directory as xs:string?)"}, {"content":"tieredstorage.partitionMigrate(${1:database-id as xs:unsignedLong}, ${2:partition-name as String}, ${3:host-ids as xs:unsignedLong*}, ${4:data-directory as xs:string?}, ${5:large-data-directory as xs:string?}, ${6:fast-data-directory as xs:string?}, ${7:options as xs:string*})", "trigger":"tieredstorage.partitionMigrate", "description":"(database-id as xs:unsignedLong, partition-name as String, host-ids as xs:unsignedLong*, data-directory as xs:string?, large-data-directory as xs:string?, fast-data-directory as xs:string?, options as xs:string*)"}, {"content":"tieredstorage.partitionResize(${1:database-id as xs:unsignedLong}, ${2:partition-name as String}, ${3:forests-per-host as xs:unsignedInt}, ${4:host-ids as xs:unsignedLong*})", "trigger":"tieredstorage.partitionResize", "description":"(database-id as xs:unsignedLong, partition-name as String, forests-per-host as xs:unsignedInt, host-ids as xs:unsignedLong*)"}, {"content":"tieredstorage.partitionResize(${1:database-id as xs:unsignedLong}, ${2:partition-name as String}, ${3:forests-per-host as xs:unsignedInt}, ${4:host-ids as xs:unsignedLong*}, ${5:data-directory as xs:string?})", "trigger":"tieredstorage.partitionResize", "description":"(database-id as xs:unsignedLong, partition-name as String, forests-per-host as xs:unsignedInt, host-ids as xs:unsignedLong*, data-directory as xs:string?)"}, {"content":"tieredstorage.partitionResize(${1:database-id as xs:unsignedLong}, ${2:partition-name as String}, ${3:forests-per-host as xs:unsignedInt}, ${4:host-ids as xs:unsignedLong*}, ${5:data-directory as xs:string?}, ${6:large-data-directory as xs:string?})", "trigger":"tieredstorage.partitionResize", "description":"(database-id as xs:unsignedLong, partition-name as String, forests-per-host as xs:unsignedInt, host-ids as xs:unsignedLong*, data-directory as xs:string?, large-data-directory as xs:string?)"}, {"content":"tieredstorage.partitionResize(${1:database-id as xs:unsignedLong}, ${2:partition-name as String}, ${3:forests-per-host as xs:unsignedInt}, ${4:host-ids as xs:unsignedLong*}, ${5:data-directory as xs:string?}, ${6:large-data-directory as xs:string?}, ${7:fast-data-directory as xs:string?})", "trigger":"tieredstorage.partitionResize", "description":"(database-id as xs:unsignedLong, partition-name as String, forests-per-host as xs:unsignedInt, host-ids as xs:unsignedLong*, data-directory as xs:string?, large-data-directory as xs:string?, fast-data-directory as xs:string?)"}, {"content":"tieredstorage.partitionResize(${1:database-id as xs:unsignedLong}, ${2:partition-name as String}, ${3:forests-per-host as xs:unsignedInt}, ${4:host-ids as xs:unsignedLong*}, ${5:data-directory as xs:string?}, ${6:large-data-directory as xs:string?}, ${7:fast-data-directory as xs:string?}, ${8:options as xs:string*})", "trigger":"tieredstorage.partitionResize", "description":"(database-id as xs:unsignedLong, partition-name as String, forests-per-host as xs:unsignedInt, host-ids as xs:unsignedLong*, data-directory as xs:string?, large-data-directory as xs:string?, fast-data-directory as xs:string?, options as xs:string*)"}, {"content":"tieredstorage.partitionDelete(${1:database-id as xs:unsignedLong}, ${2:partition-name as String}, ${3:delete-data as Boolean})", "trigger":"tieredstorage.partitionDelete", "description":"(database-id as xs:unsignedLong, partition-name as String, delete-data as Boolean)"}, {"content":"tieredstorage.partitionDelete(${1:database-id as xs:unsignedLong}, ${2:partition-name as String}, ${3:delete-data as Boolean}, ${4:options as xs:string*})", "trigger":"tieredstorage.partitionDelete", "description":"(database-id as xs:unsignedLong, partition-name as String, delete-data as Boolean, options as xs:string*)"}, {"content":"tieredstorage.databaseCreateSuperDatabase(${1:database-id as xs:unsignedLong}, ${2:database-name as String})", "trigger":"tieredstorage.databaseCreateSuperDatabase", "description":"(database-id as xs:unsignedLong, database-name as String)"}, {"content":"tieredstorage.databaseCreateSubDatabase(${1:dbid as xs:unsignedLong}, ${2:database-name as String})", "trigger":"tieredstorage.databaseCreateSubDatabase", "description":"(dbid as xs:unsignedLong, database-name as String)"}, {"content":"tieredstorage.databaseCreateSubDatabase(${1:dbid as xs:unsignedLong}, ${2:database-name as String}, ${3:kind as String})", "trigger":"tieredstorage.databaseCreateSubDatabase", "description":"(dbid as xs:unsignedLong, database-name as String, kind as String)"}, {"content":"tieredstorage.databaseDeleteSuperDatabase(${1:database-id as xs:unsignedLong}, ${2:delete-dbid as xs:unsignedLong})", "trigger":"tieredstorage.databaseDeleteSuperDatabase", "description":"(database-id as xs:unsignedLong, delete-dbid as xs:unsignedLong)"}, {"content":"tieredstorage.databaseDeleteSubDatabase(${1:database-id as xs:unsignedLong}, ${2:delete-dbid as xs:unsignedLong})", "trigger":"tieredstorage.databaseDeleteSubDatabase", "description":"(database-id as xs:unsignedLong, delete-dbid as xs:unsignedLong)"}, {"content":"tieredstorage.queryPartitionCreate(${1:database-id as xs:unsignedLong}, ${2:partition-name as String}, ${3:partition-number as xs:unsignedInt?}, ${4:forests-per-host as xs:unsignedInt}, ${5:host-ids as xs:unsignedLong*})", "trigger":"tieredstorage.queryPartitionCreate", "description":"(database-id as xs:unsignedLong, partition-name as String, partition-number as xs:unsignedInt?, forests-per-host as xs:unsignedInt, host-ids as xs:unsignedLong*)"}, {"content":"tieredstorage.queryPartitionCreate(${1:database-id as xs:unsignedLong}, ${2:partition-name as String}, ${3:partition-number as xs:unsignedInt?}, ${4:forests-per-host as xs:unsignedInt}, ${5:host-ids as xs:unsignedLong*}, ${6:data-directory as xs:string?})", "trigger":"tieredstorage.queryPartitionCreate", "description":"(database-id as xs:unsignedLong, partition-name as String, partition-number as xs:unsignedInt?, forests-per-host as xs:unsignedInt, host-ids as xs:unsignedLong*, data-directory as xs:string?)"}, {"content":"tieredstorage.queryPartitionCreate(${1:database-id as xs:unsignedLong}, ${2:partition-name as String}, ${3:partition-number as xs:unsignedInt?}, ${4:forests-per-host as xs:unsignedInt}, ${5:host-ids as xs:unsignedLong*}, ${6:data-directory as xs:string?}, ${7:large-data-directory as xs:string?})", "trigger":"tieredstorage.queryPartitionCreate", "description":"(database-id as xs:unsignedLong, partition-name as String, partition-number as xs:unsignedInt?, forests-per-host as xs:unsignedInt, host-ids as xs:unsignedLong*, data-directory as xs:string?, large-data-directory as xs:string?)"}, {"content":"tieredstorage.queryPartitionCreate(${1:database-id as xs:unsignedLong}, ${2:partition-name as String}, ${3:partition-number as xs:unsignedInt?}, ${4:forests-per-host as xs:unsignedInt}, ${5:host-ids as xs:unsignedLong*}, ${6:data-directory as xs:string?}, ${7:large-data-directory as xs:string?}, ${8:fast-data-directory as xs:string?})", "trigger":"tieredstorage.queryPartitionCreate", "description":"(database-id as xs:unsignedLong, partition-name as String, partition-number as xs:unsignedInt?, forests-per-host as xs:unsignedInt, host-ids as xs:unsignedLong*, data-directory as xs:string?, large-data-directory as xs:string?, fast-data-directory as xs:string?)"}, {"content":"tieredstorage.queryPartitionCreate(${1:database-id as xs:unsignedLong}, ${2:partition-name as String}, ${3:partition-number as xs:unsignedInt?}, ${4:forests-per-host as xs:unsignedInt}, ${5:host-ids as xs:unsignedLong*}, ${6:data-directory as xs:string?}, ${7:large-data-directory as xs:string?}, ${8:fast-data-directory as xs:string?}, ${9:options as xs:string*})", "trigger":"tieredstorage.queryPartitionCreate", "description":"(database-id as xs:unsignedLong, partition-name as String, partition-number as xs:unsignedInt?, forests-per-host as xs:unsignedInt, host-ids as xs:unsignedLong*, data-directory as xs:string?, large-data-directory as xs:string?, fast-data-directory as xs:string?, options as xs:string*)"}, {"content":"tieredstorage.databasePartitionNumbers(${1:database-id as xs:unsignedLong})", "trigger":"tieredstorage.databasePartitionNumbers", "description":"(database-id as xs:unsignedLong)"}, {"content":"tieredstorage.partitionNumberForests(${1:database-id as xs:unsignedLong}, ${2:partition-number as xs:unsignedLong})", "trigger":"tieredstorage.partitionNumberForests", "description":"(database-id as xs:unsignedLong, partition-number as xs:unsignedLong)"}, {"content":"tieredstorage.partitionSetQuery(${1:schema-database-id as xs:unsignedLong}, ${2:partition-number as xs:unsignedInt}, ${3:query as cts:query})", "trigger":"tieredstorage.partitionSetQuery", "description":"(schema-database-id as xs:unsignedLong, partition-number as xs:unsignedInt, query as cts:query)"}, {"content":"tieredstorage.partitionGetQuery(${1:schema-database-id as xs:unsignedLong}, ${2:partition-number as xs:unsignedInt})", "trigger":"tieredstorage.partitionGetQuery", "description":"(schema-database-id as xs:unsignedLong, partition-number as xs:unsignedInt)"}, {"content":"tieredstorage.partitionDeleteQuery(${1:schema-database-id as xs:unsignedLong}, ${2:partition-number as xs:unsignedInt})", "trigger":"tieredstorage.partitionDeleteQuery", "description":"(schema-database-id as xs:unsignedLong, partition-number as xs:unsignedInt)"}, {"content":"tieredstorage.partitionQueries(${1:schema-database-id as xs:unsignedLong})", "trigger":"tieredstorage.partitionQueries", "description":"(schema-database-id as xs:unsignedLong)"}, {"content":"fn.trace(${1:value as item()*}, ${2:label as String})", "trigger":"fn.trace", "description":"(value as item()*, label as String)"}, {"content":"xdmp.getTransactionMode()", "trigger":"xdmp.getTransactionMode", "description":"()"}, {"content":"xdmp.setTransactionMode(${1:value as String})", "trigger":"xdmp.setTransactionMode", "description":"(value as String)"}, {"content":"xdmp.transaction()", "trigger":"xdmp.transaction", "description":"()"}, {"content":"xdmp.transaction(${1:txn-name as String})", "trigger":"xdmp.transaction", "description":"(txn-name as String)"}, {"content":"xdmp.transaction(${1:txn-name as String}, ${2:host-id as xs:unsignedLong})", "trigger":"xdmp.transaction", "description":"(txn-name as String, host-id as xs:unsignedLong)"}, {"content":"xdmp.setTransactionName(${1:name as String})", "trigger":"xdmp.setTransactionName", "description":"(name as String)"}, {"content":"xdmp.setTransactionName(${1:name as String}, ${2:host-id as xs:unsignedLong})", "trigger":"xdmp.setTransactionName", "description":"(name as String, host-id as xs:unsignedLong)"}, {"content":"xdmp.setTransactionName(${1:name as String}, ${2:host-id as xs:unsignedLong}, ${3:txn-id as xs:unsignedLong})", "trigger":"xdmp.setTransactionName", "description":"(name as String, host-id as xs:unsignedLong, txn-id as xs:unsignedLong)"}, {"content":"xdmp.setTransactionTimeLimit(${1:time-limit as xs:unsignedInt})", "trigger":"xdmp.setTransactionTimeLimit", "description":"(time-limit as xs:unsignedInt)"}, {"content":"xdmp.setTransactionTimeLimit(${1:time-limit as xs:unsignedInt}, ${2:host-id as xs:unsignedLong})", "trigger":"xdmp.setTransactionTimeLimit", "description":"(time-limit as xs:unsignedInt, host-id as xs:unsignedLong)"}, {"content":"xdmp.setTransactionTimeLimit(${1:time-limit as xs:unsignedInt}, ${2:host-id as xs:unsignedLong}, ${3:txn-id as xs:unsignedLong})", "trigger":"xdmp.setTransactionTimeLimit", "description":"(time-limit as xs:unsignedInt, host-id as xs:unsignedLong, txn-id as xs:unsignedLong)"}, {"content":"xdmp.commit()", "trigger":"xdmp.commit", "description":"()"}, {"content":"xdmp.rollback()", "trigger":"xdmp.rollback", "description":"()"}, {"content":"xdmp.transactionCommit(${1:host-id as xs:unsignedLong}, ${2:txn-id as xs:unsignedLong})", "trigger":"xdmp.transactionCommit", "description":"(host-id as xs:unsignedLong, txn-id as xs:unsignedLong)"}, {"content":"xdmp.transactionRollback(${1:host-id as xs:unsignedLong}, ${2:txn-id as xs:unsignedLong})", "trigger":"xdmp.transactionRollback", "description":"(host-id as xs:unsignedLong, txn-id as xs:unsignedLong)"}, {"content":"xdmp.xaComplete(${1:forestID as xs:unsignedLong}, ${2:txn-id as xs:unsignedLong}, ${3:commit as Boolean}, ${4:remember as Boolean})", "trigger":"xdmp.xaComplete", "description":"(forestID as xs:unsignedLong, txn-id as xs:unsignedLong, commit as Boolean, remember as Boolean)"}, {"content":"xdmp.xaForget(${1:forestID as xs:unsignedLong}, ${2:txn-id as xs:unsignedLong})", "trigger":"xdmp.xaForget", "description":"(forestID as xs:unsignedLong, txn-id as xs:unsignedLong)"}, {"content":"trgr.createTrigger(${1:trigger-name as String}, ${2:description as xs:string?}, ${3:event as element()}, ${4:module as element(trgr:module)}, ${5:enabled as Boolean}, ${6:permissions as item()*})", "trigger":"trgr.createTrigger", "description":"(trigger-name as String, description as xs:string?, event as element(), module as element(trgr:module), enabled as Boolean, permissions as item()*)"}, {"content":"trgr.createTrigger(${1:trigger-name as String}, ${2:description as xs:string?}, ${3:event as element()}, ${4:module as element(trgr:module)}, ${5:enabled as Boolean}, ${6:permissions as item()*}, ${7:recursive as xs:boolean?})", "trigger":"trgr.createTrigger", "description":"(trigger-name as String, description as xs:string?, event as element(), module as element(trgr:module), enabled as Boolean, permissions as item()*, recursive as xs:boolean?)"}, {"content":"trgr.createTrigger(${1:trigger-name as String}, ${2:description as xs:string?}, ${3:event as element()}, ${4:module as element(trgr:module)}, ${5:enabled as Boolean}, ${6:permissions as item()*}, ${7:recursive as xs:boolean?}, ${8:task-priority as String})", "trigger":"trgr.createTrigger", "description":"(trigger-name as String, description as xs:string?, event as element(), module as element(trgr:module), enabled as Boolean, permissions as item()*, recursive as xs:boolean?, task-priority as String)"}, {"content":"trgr.triggerSetName(${1:trigger-name as String}, ${2:new-trigger-name as String})", "trigger":"trgr.triggerSetName", "description":"(trigger-name as String, new-trigger-name as String)"}, {"content":"trgr.triggerSetDescription(${1:trigger-name as String}, ${2:description as String})", "trigger":"trgr.triggerSetDescription", "description":"(trigger-name as String, description as String)"}, {"content":"trgr.triggerEnable(${1:trigger-name as String})", "trigger":"trgr.triggerEnable", "description":"(trigger-name as String)"}, {"content":"trgr.triggerDisable(${1:trigger-name as String})", "trigger":"trgr.triggerDisable", "description":"(trigger-name as String)"}, {"content":"trgr.triggerSetModule(${1:trigger-name as String}, ${2:module as element(trgr:module)})", "trigger":"trgr.triggerSetModule", "description":"(trigger-name as String, module as element(trgr:module))"}, {"content":"trgr.triggerSetEvent(${1:trigger-name as String}, ${2:event as element()})", "trigger":"trgr.triggerSetEvent", "description":"(trigger-name as String, event as element())"}, {"content":"trgr.triggerSetPermissions(${1:trigger-name as String}, ${2:permissions as item()*})", "trigger":"trgr.triggerSetPermissions", "description":"(trigger-name as String, permissions as item()*)"}, {"content":"trgr.triggerGetPermissions(${1:trigger-name as String})", "trigger":"trgr.triggerGetPermissions", "description":"(trigger-name as String)"}, {"content":"trgr.triggerAddPermissions(${1:trigger-name as String}, ${2:permissions as item()*})", "trigger":"trgr.triggerAddPermissions", "description":"(trigger-name as String, permissions as item()*)"}, {"content":"trgr.triggerRemovePermissions(${1:trigger-name as String}, ${2:permissions as item()*})", "trigger":"trgr.triggerRemovePermissions", "description":"(trigger-name as String, permissions as item()*)"}, {"content":"trgr.getTrigger(${1:trigger-name as String})", "trigger":"trgr.getTrigger", "description":"(trigger-name as String)"}, {"content":"trgr.getTriggerById(${1:trigger-id as xs:unsignedLong})", "trigger":"trgr.getTriggerById", "description":"(trigger-id as xs:unsignedLong)"}, {"content":"trgr.triggerModule(${1:database-id as xs:unsignedLong}, ${2:root as String}, ${3:path as String})", "trigger":"trgr.triggerModule", "description":"(database-id as xs:unsignedLong, root as String, path as String)"}, {"content":"trgr.triggerDataEvent(${1:scope as element()}, ${2:content as element()}, ${3:when as element(trgr:when)})", "trigger":"trgr.triggerDataEvent", "description":"(scope as element(), content as element(), when as element(trgr:when))"}, {"content":"trgr.triggerDatabaseOnlineEvent(${1:user-name as String})", "trigger":"trgr.triggerDatabaseOnlineEvent", "description":"(user-name as String)"}, {"content":"trgr.documentScope(${1:uri as String})", "trigger":"trgr.documentScope", "description":"(uri as String)"}, {"content":"trgr.collectionScope(${1:uri as String})", "trigger":"trgr.collectionScope", "description":"(uri as String)"}, {"content":"trgr.directoryScope(${1:uri as String}, ${2:depth as String})", "trigger":"trgr.directoryScope", "description":"(uri as String, depth as String)"}, {"content":"trgr.documentContent(${1:update-kind as String})", "trigger":"trgr.documentContent", "description":"(update-kind as String)"}, {"content":"trgr.anyPropertyContent()", "trigger":"trgr.anyPropertyContent", "description":"()"}, {"content":"trgr.propertyContent(${1:property-name as xs:QName})", "trigger":"trgr.propertyContent", "description":"(property-name as xs:QName)"}, {"content":"trgr.preCommit()", "trigger":"trgr.preCommit", "description":"()"}, {"content":"trgr.postCommit()", "trigger":"trgr.postCommit", "description":"()"}, {"content":"trgr.removeTrigger(${1:trigger-name as String})", "trigger":"trgr.removeTrigger", "description":"(trigger-name as String)"}, {"content":"trgr.triggerSetRecursive(${1:trigger-name as String}, ${2:recursive as Boolean})", "trigger":"trgr.triggerSetRecursive", "description":"(trigger-name as String, recursive as Boolean)"}, {"content":"trgr.triggerSetTaskPriority(${1:trigger-name as String}, ${2:task-priority as String})", "trigger":"trgr.triggerSetTaskPriority", "description":"(trigger-name as String, task-priority as String)"}, {"content":"trgr.triggersChangeModulesDatabase(${1:old-db as xs:unsignedLong}, ${2:new-db as xs:unsignedLong})", "trigger":"trgr.triggersChangeModulesDatabase", "description":"(old-db as xs:unsignedLong, new-db as xs:unsignedLong)"}, {"content":"trgr.anyCustomPropertyContent()", "trigger":"trgr.anyCustomPropertyContent", "description":"()"}, {"content":"trgr.validateTriggerName(${1:trigger-name as String})", "trigger":"trgr.validateTriggerName", "description":"(trigger-name as String)"}, {"content":"trgr.validateDataEvent(${1:event as element(trgr:data-event)})", "trigger":"trgr.validateDataEvent", "description":"(event as element(trgr:data-event))"}, {"content":"trgr.validateScope()", "trigger":"trgr.validateScope", "description":"()"}, {"content":"trgr.validateContent()", "trigger":"trgr.validateContent", "description":"()"}, {"content":"trgr.validateWhen()", "trigger":"trgr.validateWhen", "description":"()"}, {"content":"trgr.validateDatabaseOnlineEvent(${1:database-online-event as element(trgr:database-online-event)})", "trigger":"trgr.validateDatabaseOnlineEvent", "description":"(database-online-event as element(trgr:database-online-event))"}, {"content":"trgr.validateModule(${1:module as element(trgr:module)})", "trigger":"trgr.validateModule", "description":"(module as element(trgr:module))"}, {"content":"trgr.triggersUri()", "trigger":"trgr.triggersUri", "description":"()"}, {"content":"trgr.getUniqueTriggerId()", "trigger":"trgr.getUniqueTriggerId", "description":"()"}, {"content":"trgr.triggersCollection()", "trigger":"trgr.triggersCollection", "description":"()"}, {"content":"trgr.triggersNamespace()", "trigger":"trgr.triggersNamespace", "description":"()"}, {"content":"xdmp.rethrow()", "trigger":"xdmp.rethrow", "description":"()"}, {"content":"xdmp.lockForUpdate(${1:uri as String})", "trigger":"xdmp.lockForUpdate", "description":"(uri as String)"}, {"content":"xdmp.save(${1:path as String}, ${2:node as node()})", "trigger":"xdmp.save", "description":"(path as String, node as node())"}, {"content":"xdmp.save(${1:path as String}, ${2:node as node()}, ${3:options as (element()|map:map)?})", "trigger":"xdmp.save", "description":"(path as String, node as node(), options as (element()|map:map)?)"}, {"content":"xdmp.documentLoad(${1:location as String})", "trigger":"xdmp.documentLoad", "description":"(location as String)"}, {"content":"xdmp.documentLoad(${1:location as String}, ${2:options as (element()|map:map)?})", "trigger":"xdmp.documentLoad", "description":"(location as String, options as (element()|map:map)?)"}, {"content":"temporal.documentLoad(${1:temporal-collection as String}, ${2:location as String})", "trigger":"temporal.documentLoad", "description":"(temporal-collection as String, location as String)"}, {"content":"temporal.documentLoad(${1:temporal-collection as String}, ${2:location as String}, ${3:options as Object?})", "trigger":"temporal.documentLoad", "description":"(temporal-collection as String, location as String, options as Object?)"}, {"content":"xdmp.load(${1:path as String})", "trigger":"xdmp.load", "description":"(path as String)"}, {"content":"xdmp.load(${1:path as String}, ${2:uri as xs:string?})", "trigger":"xdmp.load", "description":"(path as String, uri as xs:string?)"}, {"content":"xdmp.load(${1:path as String}, ${2:uri as xs:string?}, ${3:permissions as Object[]})", "trigger":"xdmp.load", "description":"(path as String, uri as xs:string?, permissions as Object[])"}, {"content":"xdmp.load(${1:path as String}, ${2:uri as xs:string?}, ${3:permissions as Object[]}, ${4:collections as xs:string*})", "trigger":"xdmp.load", "description":"(path as String, uri as xs:string?, permissions as Object[], collections as xs:string*)"}, {"content":"xdmp.load(${1:path as String}, ${2:uri as xs:string?}, ${3:permissions as Object[]}, ${4:collections as xs:string*}, ${5:quality as xs:int?})", "trigger":"xdmp.load", "description":"(path as String, uri as xs:string?, permissions as Object[], collections as xs:string*, quality as xs:int?)"}, {"content":"xdmp.load(${1:path as String}, ${2:uri as xs:string?}, ${3:permissions as Object[]}, ${4:collections as xs:string*}, ${5:quality as xs:int?}, ${6:default-namespace as xs:string?})", "trigger":"xdmp.load", "description":"(path as String, uri as xs:string?, permissions as Object[], collections as xs:string*, quality as xs:int?, default-namespace as xs:string?)"}, {"content":"xdmp.load(${1:path as String}, ${2:uri as xs:string?}, ${3:permissions as Object[]}, ${4:collections as xs:string*}, ${5:quality as xs:int?}, ${6:default-namespace as xs:string?}, ${7:options as xs:string*})", "trigger":"xdmp.load", "description":"(path as String, uri as xs:string?, permissions as Object[], collections as xs:string*, quality as xs:int?, default-namespace as xs:string?, options as xs:string*)"}, {"content":"xdmp.load(${1:path as String}, ${2:uri as xs:string?}, ${3:permissions as Object[]}, ${4:collections as xs:string*}, ${5:quality as xs:int?}, ${6:default-namespace as xs:string?}, ${7:options as xs:string*}, ${8:forest-ids as xs:unsignedLong*})", "trigger":"xdmp.load", "description":"(path as String, uri as xs:string?, permissions as Object[], collections as xs:string*, quality as xs:int?, default-namespace as xs:string?, options as xs:string*, forest-ids as xs:unsignedLong*)"}, {"content":"xdmp.documentInsert(${1:uri as String}, ${2:root as node()})", "trigger":"xdmp.documentInsert", "description":"(uri as String, root as node())"}, {"content":"xdmp.documentInsert(${1:uri as String}, ${2:root as node()}, ${3:options as (element()|map:map)?})", "trigger":"xdmp.documentInsert", "description":"(uri as String, root as node(), options as (element()|map:map)?)"}, {"content":"temporal.statementSetSystemTime(${1:system-time as xs:dateTime})", "trigger":"temporal.statementSetSystemTime", "description":"(system-time as xs:dateTime)"}, {"content":"temporal.statementGetSystemTime()", "trigger":"temporal.statementGetSystemTime", "description":"()"}, {"content":"temporal.documentInsert(${1:temporal-collection as String}, ${2:uri as String}, ${3:root as node()})", "trigger":"temporal.documentInsert", "description":"(temporal-collection as String, uri as String, root as node())"}, {"content":"temporal.documentInsert(${1:temporal-collection as String}, ${2:uri as String}, ${3:root as node()}, ${4:permissions as Object[]})", "trigger":"temporal.documentInsert", "description":"(temporal-collection as String, uri as String, root as node(), permissions as Object[])"}, {"content":"temporal.documentInsert(${1:temporal-collection as String}, ${2:uri as String}, ${3:root as node()}, ${4:permissions as Object[]}, ${5:collections as xs:string*})", "trigger":"temporal.documentInsert", "description":"(temporal-collection as String, uri as String, root as node(), permissions as Object[], collections as xs:string*)"}, {"content":"temporal.documentInsert(${1:temporal-collection as String}, ${2:uri as String}, ${3:root as node()}, ${4:permissions as Object[]}, ${5:collections as xs:string*}, ${6:quality as xs:int?})", "trigger":"temporal.documentInsert", "description":"(temporal-collection as String, uri as String, root as node(), permissions as Object[], collections as xs:string*, quality as xs:int?)"}, {"content":"temporal.documentInsert(${1:temporal-collection as String}, ${2:uri as String}, ${3:root as node()}, ${4:permissions as Object[]}, ${5:collections as xs:string*}, ${6:quality as xs:int?}, ${7:forest-ids as xs:unsignedLong*})", "trigger":"temporal.documentInsert", "description":"(temporal-collection as String, uri as String, root as node(), permissions as Object[], collections as xs:string*, quality as xs:int?, forest-ids as xs:unsignedLong*)"}, {"content":"xdmp.directoryCreate(${1:uri as String})", "trigger":"xdmp.directoryCreate", "description":"(uri as String)"}, {"content":"xdmp.directoryCreate(${1:uri as String}, ${2:permissions as Object[]})", "trigger":"xdmp.directoryCreate", "description":"(uri as String, permissions as Object[])"}, {"content":"xdmp.directoryCreate(${1:uri as String}, ${2:permissions as Object[]}, ${3:collections as xs:string*})", "trigger":"xdmp.directoryCreate", "description":"(uri as String, permissions as Object[], collections as xs:string*)"}, {"content":"xdmp.directoryCreate(${1:uri as String}, ${2:permissions as Object[]}, ${3:collections as xs:string*}, ${4:quality as xs:int?})", "trigger":"xdmp.directoryCreate", "description":"(uri as String, permissions as Object[], collections as xs:string*, quality as xs:int?)"}, {"content":"xdmp.directoryCreate(${1:uri as String}, ${2:permissions as Object[]}, ${3:collections as xs:string*}, ${4:quality as xs:int?}, ${5:forest-ids as xs:unsignedLong*})", "trigger":"xdmp.directoryCreate", "description":"(uri as String, permissions as Object[], collections as xs:string*, quality as xs:int?, forest-ids as xs:unsignedLong*)"}, {"content":"xdmp.documentDelete(${1:uri as String})", "trigger":"xdmp.documentDelete", "description":"(uri as String)"}, {"content":"temporal.documentDelete(${1:temporal-collection as String}, ${2:uri as String})", "trigger":"temporal.documentDelete", "description":"(temporal-collection as String, uri as String)"}, {"content":"xdmp.directoryDelete(${1:uri as String})", "trigger":"xdmp.directoryDelete", "description":"(uri as String)"}, {"content":"xdmp.collectionDelete(${1:uri as String})", "trigger":"xdmp.collectionDelete", "description":"(uri as String)"}, {"content":"xdmp.nodeReplace(${1:old as node()}, ${2:new as node()})", "trigger":"xdmp.nodeReplace", "description":"(old as node(), new as node())"}, {"content":"xdmp.nodeDelete(${1:old as node()})", "trigger":"xdmp.nodeDelete", "description":"(old as node())"}, {"content":"xdmp.nodeInsertBefore(${1:sibling as node()}, ${2:new as node()})", "trigger":"xdmp.nodeInsertBefore", "description":"(sibling as node(), new as node())"}, {"content":"xdmp.nodeInsertAfter(${1:sibling as node()}, ${2:new as node()})", "trigger":"xdmp.nodeInsertAfter", "description":"(sibling as node(), new as node())"}, {"content":"xdmp.nodeInsertChild(${1:parent as node()}, ${2:new as node()})", "trigger":"xdmp.nodeInsertChild", "description":"(parent as node(), new as node())"}, {"content":"xdmp.documentAddCollections(${1:uri as String}, ${2:collections as xs:string*})", "trigger":"xdmp.documentAddCollections", "description":"(uri as String, collections as xs:string*)"}, {"content":"xdmp.documentRemoveCollections(${1:uri as String}, ${2:collections as xs:string*})", "trigger":"xdmp.documentRemoveCollections", "description":"(uri as String, collections as xs:string*)"}, {"content":"xdmp.documentSetCollections(${1:uri as String}, ${2:collections as xs:string*})", "trigger":"xdmp.documentSetCollections", "description":"(uri as String, collections as xs:string*)"}, {"content":"xdmp.documentPutMetadata(${1:uri as String}, ${2:metadata as map:map})", "trigger":"xdmp.documentPutMetadata", "description":"(uri as String, metadata as map:map)"}, {"content":"xdmp.documentSetMetadata(${1:uri as String}, ${2:metadata as map:map})", "trigger":"xdmp.documentSetMetadata", "description":"(uri as String, metadata as map:map)"}, {"content":"xdmp.documentRemoveMetadata(${1:uri as String}, ${2:metadata as xs:string*})", "trigger":"xdmp.documentRemoveMetadata", "description":"(uri as String, metadata as xs:string*)"}, {"content":"xdmp.documentAddPermissions(${1:uri as String}, ${2:permissions as Object[]})", "trigger":"xdmp.documentAddPermissions", "description":"(uri as String, permissions as Object[])"}, {"content":"xdmp.documentRemovePermissions(${1:uri as String}, ${2:permissions as Object[]})", "trigger":"xdmp.documentRemovePermissions", "description":"(uri as String, permissions as Object[])"}, {"content":"xdmp.documentSetPermissions(${1:uri as String}, ${2:permissions as Object[]})", "trigger":"xdmp.documentSetPermissions", "description":"(uri as String, permissions as Object[])"}, {"content":"xdmp.documentSetQuality(${1:uri as String}, ${2:quality as xs:integer})", "trigger":"xdmp.documentSetQuality", "description":"(uri as String, quality as xs:integer)"}, {"content":"xdmp.merge()", "trigger":"xdmp.merge", "description":"()"}, {"content":"xdmp.merge(${1:options as (element()|map:map)?})", "trigger":"xdmp.merge", "description":"(options as (element()|map:map)?)"}, {"content":"xdmp.merging()", "trigger":"xdmp.merging", "description":"()"}, {"content":"xdmp.lockAcquire(${1:uri as String})", "trigger":"xdmp.lockAcquire", "description":"(uri as String)"}, {"content":"xdmp.lockAcquire(${1:uri as String}, ${2:scope as xs:string?})", "trigger":"xdmp.lockAcquire", "description":"(uri as String, scope as xs:string?)"}, {"content":"xdmp.lockAcquire(${1:uri as String}, ${2:scope as xs:string?}, ${3:depth as xs:string?})", "trigger":"xdmp.lockAcquire", "description":"(uri as String, scope as xs:string?, depth as xs:string?)"}, {"content":"xdmp.lockAcquire(${1:uri as String}, ${2:scope as xs:string?}, ${3:depth as xs:string?}, ${4:owner as item()*})", "trigger":"xdmp.lockAcquire", "description":"(uri as String, scope as xs:string?, depth as xs:string?, owner as item()*)"}, {"content":"xdmp.lockAcquire(${1:uri as String}, ${2:scope as xs:string?}, ${3:depth as xs:string?}, ${4:owner as item()*}, ${5:timeout as xs:unsignedLong?})", "trigger":"xdmp.lockAcquire", "description":"(uri as String, scope as xs:string?, depth as xs:string?, owner as item()*, timeout as xs:unsignedLong?)"}, {"content":"xdmp.lockRelease(${1:uri as String})", "trigger":"xdmp.lockRelease", "description":"(uri as String)"}, {"content":"xdmp.documentSetProperties(${1:uri as String}, ${2:props as element()*})", "trigger":"xdmp.documentSetProperties", "description":"(uri as String, props as element()*)"}, {"content":"xdmp.documentAddProperties(${1:uri as String}, ${2:props as element()*})", "trigger":"xdmp.documentAddProperties", "description":"(uri as String, props as element()*)"}, {"content":"xdmp.documentRemoveProperties(${1:uri as String}, ${2:property-names as xs:QName*})", "trigger":"xdmp.documentRemoveProperties", "description":"(uri as String, property-names as xs:QName*)"}, {"content":"xdmp.documentSetProperty(${1:uri as String}, ${2:prop as element()})", "trigger":"xdmp.documentSetProperty", "description":"(uri as String, prop as element())"}, {"content":"xdmp.documentAssign(${1:uri as String}, ${2:forest-count as xs:positiveInteger})", "trigger":"xdmp.documentAssign", "description":"(uri as String, forest-count as xs:positiveInteger)"}, {"content":"xdmp.documentAssign(${1:uri as String}, ${2:forest-count as xs:positiveInteger}, ${3:assignment-policy as String})", "trigger":"xdmp.documentAssign", "description":"(uri as String, forest-count as xs:positiveInteger, assignment-policy as String)"}, {"content":"xdmp.documentPartitionAssign(${1:root as node()})", "trigger":"xdmp.documentPartitionAssign", "description":"(root as node())"}, {"content":"xdmp.documentPartitionAssign(${1:root as node()}, ${2:partition-queries as map:map})", "trigger":"xdmp.documentPartitionAssign", "description":"(root as node(), partition-queries as map:map)"}, {"content":"xdmp.databasePartitionForests(${1:value as xs:anyAtomicType})", "trigger":"xdmp.databasePartitionForests", "description":"(value as xs:anyAtomicType)"}, {"content":"view.schemaCreate(${1:schema-name as String}, ${2:permissions as item()*})", "trigger":"view.schemaCreate", "description":"(schema-name as String, permissions as item()*)"}, {"content":"view.schemaRemove(${1:schema-name as String})", "trigger":"view.schemaRemove", "description":"(schema-name as String)"}, {"content":"view.schemaGet(${1:schema-name as String})", "trigger":"view.schemaGet", "description":"(schema-name as String)"}, {"content":"view.schemaSetPermissions(${1:schema-name as String}, ${2:permissions as item()*})", "trigger":"view.schemaSetPermissions", "description":"(schema-name as String, permissions as item()*)"}, {"content":"view.schemaAddPermissions(${1:schema-name as String}, ${2:permissions as item()*})", "trigger":"view.schemaAddPermissions", "description":"(schema-name as String, permissions as item()*)"}, {"content":"view.schemaRemovePermissions(${1:schema-name as String}, ${2:permissions as item()*})", "trigger":"view.schemaRemovePermissions", "description":"(schema-name as String, permissions as item()*)"}, {"content":"view.create(${1:schema-name as String}, ${2:name as String}, ${3:scope as element(*,view:view-scope)}, ${4:columns as element(view:column)*}, ${5:fields as element(view:field)*}, ${6:permissions as item()*})", "trigger":"view.create", "description":"(schema-name as String, name as String, scope as element(*,view:view-scope), columns as element(view:column)*, fields as element(view:field)*, permissions as item()*)"}, {"content":"view.get(${1:schema-name as String}, ${2:view-name as String})", "trigger":"view.get", "description":"(schema-name as String, view-name as String)"}, {"content":"view.getById(${1:view-id as xs:unsignedLong})", "trigger":"view.getById", "description":"(view-id as xs:unsignedLong)"}, {"content":"view.remove(${1:schema-name as String}, ${2:view-name as String})", "trigger":"view.remove", "description":"(schema-name as String, view-name as String)"}, {"content":"view.setName(${1:schema-name as String}, ${2:view-name as String}, ${3:new-name as String})", "trigger":"view.setName", "description":"(schema-name as String, view-name as String, new-name as String)"}, {"content":"view.setOrdered(${1:schema-name as String}, ${2:view-name as String}, ${3:ordered as Boolean})", "trigger":"view.setOrdered", "description":"(schema-name as String, view-name as String, ordered as Boolean)"}, {"content":"view.getOrdered(${1:schema-name as String}, ${2:view-name as String})", "trigger":"view.getOrdered", "description":"(schema-name as String, view-name as String)"}, {"content":"view.setViewScope(${1:schema-name as String}, ${2:view-name as String}, ${3:scope as element(*,view:view-scope)})", "trigger":"view.setViewScope", "description":"(schema-name as String, view-name as String, scope as element(*,view:view-scope))"}, {"content":"view.setPermissions(${1:schema-name as String}, ${2:view-name as String}, ${3:permissions as item()*})", "trigger":"view.setPermissions", "description":"(schema-name as String, view-name as String, permissions as item()*)"}, {"content":"view.addPermissions(${1:schema-name as String}, ${2:view-name as String}, ${3:permissions as item()*})", "trigger":"view.addPermissions", "description":"(schema-name as String, view-name as String, permissions as item()*)"}, {"content":"view.removePermissions(${1:schema-name as String}, ${2:view-name as String}, ${3:permissions as item()*})", "trigger":"view.removePermissions", "description":"(schema-name as String, view-name as String, permissions as item()*)"}, {"content":"view.setColumns(${1:schema-name as String}, ${2:view-name as String}, ${3:columns as element(view:column)*})", "trigger":"view.setColumns", "description":"(schema-name as String, view-name as String, columns as element(view:column)*)"}, {"content":"view.addColumn(${1:schema-name as String}, ${2:view-name as String}, ${3:column as element(view:column)})", "trigger":"view.addColumn", "description":"(schema-name as String, view-name as String, column as element(view:column))"}, {"content":"view.removeColumn(${1:schema-name as String}, ${2:view-name as String}, ${3:column-name as String})", "trigger":"view.removeColumn", "description":"(schema-name as String, view-name as String, column-name as String)"}, {"content":"view.columns(${1:schema-name as String}, ${2:view-name as String})", "trigger":"view.columns", "description":"(schema-name as String, view-name as String)"}, {"content":"view.getColumn(${1:schema-name as String}, ${2:view-name as String}, ${3:column-name as String})", "trigger":"view.getColumn", "description":"(schema-name as String, view-name as String, column-name as String)"}, {"content":"view.schemas()", "trigger":"view.schemas", "description":"()"}, {"content":"view.views(${1:schema-name as String})", "trigger":"view.views", "description":"(schema-name as String)"}, {"content":"view.elementViewScope(${1:localname as xs:QName})", "trigger":"view.elementViewScope", "description":"(localname as xs:QName)"}, {"content":"view.collectionViewScope(${1:collection as String})", "trigger":"view.collectionViewScope", "description":"(collection as String)"}, {"content":"view.column(${1:name as String}, ${2:range-index as cts:reference})", "trigger":"view.column", "description":"(name as String, range-index as cts:reference)"}, {"content":"view.collection()", "trigger":"view.collection", "description":"()"}, {"content":"view.getViewScope(${1:schema-name as String}, ${2:view-name as String})", "trigger":"view.getViewScope", "description":"(schema-name as String, view-name as String)"}, {"content":"view.removeById(${1:view-id as xs:unsignedLong})", "trigger":"view.removeById", "description":"(view-id as xs:unsignedLong)"}, {"content":"view.schemaGetPermissions(${1:schema-name as String})", "trigger":"view.schemaGetPermissions", "description":"(schema-name as String)"}, {"content":"view.getPermissions(${1:schema-name as String}, ${2:view-name as String})", "trigger":"view.getPermissions", "description":"(schema-name as String, view-name as String)"}, {"content":"view.setFields(${1:schema-name as String}, ${2:view-name as String}, ${3:fields as element(view:field)*})", "trigger":"view.setFields", "description":"(schema-name as String, view-name as String, fields as element(view:field)*)"}, {"content":"view.addField(${1:schema-name as String}, ${2:view-name as String}, ${3:field as element(view:field)})", "trigger":"view.addField", "description":"(schema-name as String, view-name as String, field as element(view:field))"}, {"content":"view.removeField(${1:schema-name as String}, ${2:view-name as String}, ${3:field-name as String})", "trigger":"view.removeField", "description":"(schema-name as String, view-name as String, field-name as String)"}, {"content":"view.fields(${1:schema-name as String}, ${2:view-name as String})", "trigger":"view.fields", "description":"(schema-name as String, view-name as String)"}, {"content":"view.getField(${1:schema-name as String}, ${2:view-name as String}, ${3:field-name as String})", "trigger":"view.getField", "description":"(schema-name as String, view-name as String, field-name as String)"}, {"content":"view.getBindings(${1:schema-name as String}, ${2:view-name as String})", "trigger":"view.getBindings", "description":"(schema-name as String, view-name as String)"}, {"content":"view.field(${1:name as String})", "trigger":"view.field", "description":"(name as String)"}, {"content":"cts.walk(${1:node as node()}, ${2:query as cts:query}, ${3:expr as item()*})", "trigger":"cts.walk", "description":"(node as node(), query as cts:query, expr as item()*)"}, {"content":"cts.walk(${1:node as node()}, ${2:query as cts:query}, ${3:callback as function(xs:string, text(), cts:query*, xs:integer) as xs:string?})", "trigger":"cts.walk", "description":"(node as node(), query as cts:query, callback as function(xs:string, text(), cts:query*, xs:integer) as xs:string?)"}, {"content":"cts.highlight(${1:node as node()}, ${2:query as cts:query}, ${3:expr as item()*})", "trigger":"cts.highlight", "description":"(node as node(), query as cts:query, expr as item()*)"}, {"content":"cts.highlight(${1:node as node()}, ${2:query as cts:query}, ${3:callback as function(NodeBuilder, xs:string, text(), cts:query*, xs:integer) as xs:string?}, ${4:builder as NodeBuilder})", "trigger":"cts.highlight", "description":"(node as node(), query as cts:query, callback as function(NodeBuilder, xs:string, text(), cts:query*, xs:integer) as xs:string?, builder as NodeBuilder)"}, {"content":"cts.elementWalk(${1:node as node()}, ${2:element as xs:QName*}, ${3:expr as item()*})", "trigger":"cts.elementWalk", "description":"(node as node(), element as xs:QName*, expr as item()*)"}, {"content":"cts.elementWalk(${1:node as node()}, ${2:element as xs:QName*}, ${3:callback as function(NodeBuilder, node()) as xs:string?}, ${4:builder as NodeBuilder})", "trigger":"cts.elementWalk", "description":"(node as node(), element as xs:QName*, callback as function(NodeBuilder, node()) as xs:string?, builder as NodeBuilder)"}, {"content":"ooxml.runsMerge(${1:nodes as node()*})", "trigger":"ooxml.runsMerge", "description":"(nodes as node()*)"}, {"content":"xhtml.clean(${1:doc as node()?})", "trigger":"xhtml.clean", "description":"(doc as node()?)"}, {"content":"xhtml.restructure(${1:doc as node()?})", "trigger":"xhtml.restructure", "description":"(doc as node()?)"}, {"content":"xhtml.addLists(${1:doc as node()?})", "trigger":"xhtml.addLists", "description":"(doc as node()?)"}, {"content":"xinc.linkExpand(${1:context as node()}, ${2:ref as element(xi:include)})", "trigger":"xinc.linkExpand", "description":"(context as node(), ref as element(xi:include))"}, {"content":"xinc.nodeExpand(${1:node as node()})", "trigger":"xinc.nodeExpand", "description":"(node as node())"}, {"content":"xinc.linkReferences(${1:node as node()})", "trigger":"xinc.linkReferences", "description":"(node as node())"}, {"content":"xp.parseXpointer(${1:xpointer as String})", "trigger":"xp.parseXpointer", "description":"(xpointer as String)"}, {"content":"xp.pathFromElementScheme(${1:part as String})", "trigger":"xp.pathFromElementScheme", "description":"(part as String)"}, {"content":"xp.altPathFromElementScheme(${1:part as String})", "trigger":"xp.altPathFromElementScheme", "description":"(part as String)"}, {"content":"xp.doDereference(${1:context as node()}, ${2:path as String}, ${3:ns-bindings as xs:string*})", "trigger":"xp.doDereference", "description":"(context as node(), path as String, ns-bindings as xs:string*)"}, {"content":"xp.dereference(${1:context as node()}, ${2:xpointer as String})", "trigger":"xp.dereference", "description":"(context as node(), xpointer as String)"}, {"content":"fn.regexGroup(${1:group-number as xs:integer})", "trigger":"fn.regexGroup", "description":"(group-number as xs:integer)"}, {"content":"fn.current()", "trigger":"fn.current", "description":"()"}, {"content":"xdmp.currentPosition()", "trigger":"xdmp.currentPosition", "description":"()"}, {"content":"xdmp.currentLast()", "trigger":"xdmp.currentLast", "description":"()"}, {"content":"fn.systemProperty(${1:property-name as String})", "trigger":"fn.systemProperty", "description":"(property-name as String)"}, {"content":"fn.elementAvailable(${1:element-name as String})", "trigger":"fn.elementAvailable", "description":"(element-name as String)"}, {"content":"fn.key(${1:key-name as String}, ${2:key-value as String})", "trigger":"fn.key", "description":"(key-name as String, key-value as String)"}, {"content":"fn.key(${1:key-name as String}, ${2:key-value as String}, ${3:top as node()})", "trigger":"fn.key", "description":"(key-name as String, key-value as String, top as node())"}, {"content":"fn.currentGroup()", "trigger":"fn.currentGroup", "description":"()"}, {"content":"fn.currentGroupingKey()", "trigger":"fn.currentGroupingKey", "description":"()"}, {"content":"fn.typeAvailable(${1:type-name as String})", "trigger":"fn.typeAvailable", "description":"(type-name as String)"}, {"content":"fn.functionAvailable(${1:function-name as String})", "trigger":"fn.functionAvailable", "description":"(function-name as String)"}, {"content":"fn.functionAvailable(${1:function-name as String}, ${2:arity as xs:integer})", "trigger":"fn.functionAvailable", "description":"(function-name as String, arity as xs:integer)"}, {"content":"fn.unparsedEntityUri(${1:entity-name as String})", "trigger":"fn.unparsedEntityUri", "description":"(entity-name as String)"}, {"content":"fn.unparsedEntityPublicId(${1:entity-name as String})", "trigger":"fn.unparsedEntityPublicId", "description":"(entity-name as String)"}, {"content":"xdmp.zipManifest(${1:zipfile as binary()})", "trigger":"xdmp.zipManifest", "description":"(zipfile as binary())"}, {"content":"xdmp.zipGet(${1:zipfile as binary()}, ${2:name as String})", "trigger":"xdmp.zipGet", "description":"(zipfile as binary(), name as String)"}, {"content":"xdmp.zipGet(${1:zipfile as binary()}, ${2:name as String}, ${3:options as (element()|map:map)?})", "trigger":"xdmp.zipGet", "description":"(zipfile as binary(), name as String, options as (element()|map:map)?)"}, {"content":"xdmp.zipCreate(${1:manifest as Array|Node}, ${2:nodes as Array|ValueIterator})", "trigger":"xdmp.zipCreate", "description":"(manifest as Array|Node, nodes as Array|ValueIterator)"}, {"content":"xdmp.gzip(${1:node as node()})", "trigger":"xdmp.gzip", "description":"(node as node())"}, {"content":"xdmp.gunzip(${1:gzipnode as binary()}, ${2:options as (element()|map:map)?})", "trigger":"xdmp.gunzip", "description":"(gzipnode as binary(), options as (element()|map:map)?)"}]