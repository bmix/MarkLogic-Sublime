# [PackageDev] target_format: plist, ext: tmLanguage
---
name: XQuery
scopeName: source.xquery-ml
fileTypes: [xq, xql, xqm, xqy, xquery]
uuid: cddd8a73-ed1e-4303-a649-a23e816fafa1

patterns:
- include: '#Xml'
- include: '#entity'
- include: '#bare-ampersand'
- name: meta.tag.preprocessor.xml
  begin: '(<\?)\s*([-_a-zA-Z0-9]+)'
  captures:
    '1': { name: punctuation.definition.tag.begin.xml }
    '2': { name: entity.name.tag.xml }
  end: '(\?>)'
  patterns:
    - name: entity.other.attribute-name.xml
      match: ' ([a-zA-Z-]+)'
    - include: '#doublequotedString'
    - include: '#singlequotedString'

- name: keyword.control.import.xquery
  match: '^xquery version .*;$'

- name: constant.numeric.float.xquery
  match: '\b(?i:(\d+\.\d*(e[\-\+]?\d+)?))(?=[^a-zA-Z_])'

- name: constant.numeric.float.xquery
  match: '(?<=[^0-9a-zA-Z_])(?i:(\.\d+(e[\-\+]?\d+)?))'

- name: constant.numeric.float.xquery
  match: '\b(?i:(\d+e[\-\+]?\d+))'

- name: constant.numeric.integer.decimal.xquery
  match: '\b([1-9]+[0-9]*|0)'

- name: keyword.control.import.xquery
  match: '\b(import|module|schema)\b'

- name: comment.block.xquery
  begin: '\(:'
  captures:
    '0': { name: punctuation.definition.comment.xquery }
  end: ':\)'
  patterns:
    - include: '#block_comment'

- name: support.type.xquery
  comment: http://www.w3.org/TR/xpath-datamodel/#types
  match: '(?<![:\-_a-zA-Z0-9])((xs:)(string|boolean|decimal|float|double|duration|dateTime|time|date|gYearMonth|gYear|gMonthDay|gDay|gMonth|hexBinary|base64Binary|anyURI|QName|NOTATION|anyAtomicType|anyType|anySimpleType|untypedAtomic|dayTimeDuration|yearMonthDuration|integer|nonPositiveInteger|negativeInteger|long|int|short|byte|nonNegativeInteger|unsignedLong|unsignedInt|unsignedShort|unsignedByte|positiveInteger|ENTITY|ID|NMTOKEN|language|NCName|Name|token|normalizedString))(?![:\-_a-zA-Z0-9])'

- name: variable.other.xquery
  match: ((\$)(?:([\-_a-zA-Z0-9]+)((:)))?([\-_a-zA-Z0-9]+))
  captures:
    '1': { name: punctuation.definition.variable.xquery }

- name: support.constant.xquery
  match: '/(child|descendant|attribute|self|descendant-or-self|following-sibling|following|parent|ancestor|preceding-sibling|preceding|ancestor-or-self)::'

- name: meta.function.xquery
  patterns:
    - match: (function)\s+((?:([\-_a-zA-Z0-9]+):)?([\-_a-zA-Z0-9]+))\s*\(
      captures:
        '1': { name: storage.type.function.xquery }
        '2': { name: entity.name.function.xquery }
      patterns:
        - include: '#function_parameters'
        - include: '$self'

    - begin: \s*(function)\s+(?!namespace)
      beginCaptures:
        '1': { name: storage.type.function.xquery }
      end: \(
      patterns:
        - match: ((?:([\-_a-zA-Z0-9]+):)?([\-_a-zA-Z0-9]+))
          captures:
            '1': { name: entity.name.function.xquery }
        - include: '#function_parameters'
        - include: '$self'

- name: meta.variable.xquery
  match: '(declare)\s+(variable)\s+(\$(?:[\-_a-zA-Z0-9]+:)?[\-_a-zA-Z0-9]+)'
  captures:
    '1': { name: keyword.other.xquery }
    '2': { name: storage.type.variable.xquery }
    '3': { name: entity.name.function.variable.xquery }

- name: meta.variable.xquery
  begin: '(declare)\s+(variable)\s*'
  captures:
    '1': { name: keyword.other.xquery }
    '2': { name: storage.type.variable.xquery }
  end: '(\$(?:[\-_a-zA-Z0-9]+:)?[\-_a-zA-Z0-9]+)'
  endCaptures:
    '1': { name: entity.name.function.variable.xquery }

- name: keyword.other.prolog.xquery
  match: \b(base-uri|boundary-space|collation|construction|copy-namespaces|declare|default|element|empty(?![-])|function|greatest|import|inherit|instance|least|module|namespace|no-inherit|no-preserve|option|order|ordered|ordering|preserve|strip|unordered|variable|xdmp:mapping|xdmp:transaction-mode)\b

- name: keyword.operator.logical.xquery
  match: (?<![:\-_a-zA-Z0-9])(of|as|by|in|at|or|and)(?![:\-_a-zA-Z0-9])

- match: (?<![:\-_a-zA-Z0-9])(for|let|return|where|if|then|else|order by|satisfies|every)(?![:\-_a-zA-Z0-9])
  captures:
    '1': { name: keyword.control.flow.xquery }

- match: (?<![:\-_a-zA-Z0-9])(element|attribute|document|document-node\(\)|empty-sequence\(\)|schema-element|schema-attribute|processing-instruction|comment|text|node)(?![:\-_a-zA-Z0-9])
  captures:
    '1': { name: support.type.xquery }

- name: keyword.operator.assignment.xquery
  match: :=

- name: keyword.operator.arithmetic.xquery
  match: (?<![:\-_a-zA-Z0-9])(\+|-|<=?|>=?|eq|ne|lt|le|ge|gt|\*|div|idiv|mod)(?![:\-_a-zA-Z0-9])

- name: support.function.builtin.xquery
  match: (?<![:\-_a-zA-Z0-9])((fn:)?(abs|adjust-date-to-timezone|adjust-dateTime-to-timezone|adjust-time-to-timezone|analyze-string|avg|base-uri|boolean|ceiling|codepoint-equal|codepoints-to-string|collection|compare|concat|contains|count|current|current-date|current-dateTime|current-group|current-grouping-key|current-time|data|day-from-date|day-from-dateTime|days-from-duration|deep-equal|default-collation|distinct-nodes|distinct-values|doc|doc-available|document|document-uri|element-available|empty|encode-for-uri|ends-with|error|escape-html-uri|escape-uri|exactly-one|exists|expanded-QName|false|filter|floor|fold-left|fold-right|format-date|format-dateTime|format-number|format-time|function-arity|function-available|function-lookup|function-name|generate-id|head|hours-from-dateTime|hours-from-duration|hours-from-time|id|idref|implicit-timezone|in-scope-prefixes|index-of|insert-before|iri-to-uri|key|lang|last|local-name|local-name-from-QName|lower-case|map|map-pairs|matches|max|min|minutes-from-dateTime|minutes-from-duration|minutes-from-time|month-from-date|month-from-dateTime|months-from-duration|name|namespace-uri|namespace-uri-for-prefix|namespace-uri-from-QName|nilled|node-kind|node-name|normalize-space|normalize-unicode|not|number|one-or-more|position|prefix-from-QName|QName|regex-group|remove|replace|resolve-QName|resolve-uri|reverse|root|round|round-half-to-even|seconds-from-dateTime|seconds-from-duration|seconds-from-time|starts-with|static-base-uri|string|string-join|string-length|string-pad|string-to-codepoints|subsequence|substring|substring-after|substring-before|subtract-dateTimes-yielding-dayTimeDuration|subtract-dateTimes-yielding-yearMonthDuration|sum|system-property|tail|timezone-from-date|timezone-from-dateTime|timezone-from-time|tokenize|trace|translate|true|type-available|unordered|unparsed-entity-public-id|unparsed-entity-uri|unparsed-text|unparsed-text-available|upper-case|year-from-date|year-from-dateTime|years-from-duration|zero-or-one))(?=\s*\()

- name: support.function.marklogic.xquery
  match: (?<![:\-_a-zA-Z0-9])(xdmp:(access|add-response-header|add64|amp|amp-roles|and64|annotation|apply|architecture|atomizable|base64-decode|base64-encode|binary-decode|binary-is-external|binary-is-large|binary-is-small|binary-size|cache-status|can-grant-roles|castable-as|cluster|cluster-name|collation-canonical-uri|collection-delete|collection-locks|collection-properties|commit|configuration-timestamp|crypt|crypt2|current-last|current-position|database|database-backup|database-backup-cancel|database-backup-purge|database-backup-status|database-backup-validate|database-forests|database-global-nonblocking-timestamp|database-is-replica|database-name|database-nonblocking-timestamp|database-partition-forests|database-path-namespaces|database-restore|database-restore-cancel|database-restore-status|database-restore-validate|databases|dayname-from-date|decode-from-NCName|default-collections|default-permissions|describe|diacritic-less|directory|directory-create|directory-delete|directory-locks|directory-properties|document-add-collections|document-add-permissions|document-add-properties|document-assign|document-delete|document-filter|document-forest|document-get|document-get-collections|document-get-permissions|document-get-properties|document-get-quality|document-insert|document-load|document-locks|document-properties|document-remove-collections|document-remove-permissions|document-remove-properties|document-set-collections|document-set-permissions|document-set-properties|document-set-property|document-set-quality|document-timestamp|eager|elapsed-time|element-content-type|email|encode-for-NCName|encoding-language-detect|estimate|eval|eval-in|excel-convert|exists|external-binary|external-binary-path|external-security|filesystem-directory|filesystem-file|filesystem-file-exists|filesystem-file-length|filesystem-filepath|foreign-cluster-status|foreign-clusters|forest|forest-backup|forest-clear|forest-counts|forest-databases|forest-host|forest-name|forest-online|forest-open-replica|forest-restart|forest-restore|forest-rollback|forest-status|forest-updates-allowed|forests|format-number|from-json|function|function-module|function-name|function-parameter-name|function-parameter-type|function-return-type|function-signature|functions|get|get-current-roles|get-current-user|get-current-userid|get-invoked-path|get-original-url|get-orphaned-binaries|get-request-body|get-request-client-address|get-request-client-certificate|get-request-field|get-request-field-content-type|get-request-field-filename|get-request-field-names|get-request-header|get-request-header-names|get-request-method|get-request-path|get-request-port|get-request-protocol|get-request-url|get-request-user|get-request-username|get-response-code|get-response-encoding|get-server-field|get-server-field-names|get-session-field|get-session-field-names|get-transaction-mode|get-url-rewriter-path|group|group-hosts|group-name|group-servers|groups|gss-server-negotiate|gunzip|gzip|has-privilege|hash32|hash64|hex-to-integer|hmac-md5|hmac-sha1|hmac-sha256|hmac-sha512|host|host-forests|host-get-ssl-fips-enabled|host-name|host-status|hosts|http-delete|http-get|http-head|http-options|http-post|http-put|initcap|integer-to-hex|integer-to-octal|invoke|invoke-function|invoke-in|key-from-QName|lazy|ldap-lookup|ldap-search|load|lock-acquire|lock-for-update|lock-release|log|log-level|login|logout|lshift64|md5|merge|merge-cancel|merging|modules-database|modules-root|month-name-from-date|mul64|multipart-decode|multipart-encode|node-database|node-delete|node-insert-after|node-insert-before|node-insert-child|node-kind|node-replace|node-uri|not64|octal-to-integer|or64|parse-dateTime|parse-yymmdd|path|pdf-convert|permission|plan|plannable|platform|position|powerpoint-convert|pretty-print|privilege|privilege-roles|product-edition|product-environment|QName-from-key|quarter-from-date|query-meters|query-trace|quote|random|redirect-response|remove-orphaned-binary|request|request-cancel|request-status|request-timestamp|resolve-uri|restart|rethrow|role|role-roles|rollback|rshift64|save|schema-database|security-assert|security-database|server|server-name|server-status|servers|set|set-request-time-limit|set-response-code|set-response-content-type|set-response-encoding|set-server-field|set-server-field-privilege|set-session-field|set-transaction-mode|set-transaction-name|set-transaction-time-limit|sha1|sha256|sha384|sha512|shutdown|sleep|spawn|spawn-function|spawn-in|sql|start-journal-archiving|step64|stop-journal-archiving|strftime|subbinary|tidy|timestamp-to-wallclock|to-json|trace|transaction|transaction-commit|transaction-rollback|triggers-database|type|unpath|unquote|uri-content-type|uri-format|uri-is-file|url-decode|url-encode|user|user-external-security|user-last-login|user-roles|validate|value|version|wallclock-to-timestamp|week-from-date|weekday-from-date|with-namespaces|word-convert|x509-certificate-extract|xa-complete|xa-forget|xor64|xquery-version|xslt-eval|xslt-invoke|yearday-from-date|zip-create|zip-get|zip-manifest))(?=\s*\()

- name: support.function.cts.xquery
  match: (?<![:\-_a-zA-Z0-9])(cts:(aggregate|and-not-query|and-not-query-negative-query|and-not-query-positive-query|and-query|and-query-options|and-query-queries|arc-intersection|avg|avg-aggregate|bearing|boost-query|boost-query-boosting-query|boost-query-matching-query|bounding-boxes|box|box-east|box-intersects|box-north|box-south|box-west|circle|circle-center|circle-intersects|circle-radius|classify|cluster|collection-match|collection-query|collection-query-uris|collection-reference|collections|complex-polygon|complex-polygon-contains|complex-polygon-inner|complex-polygon-intersects|complex-polygon-outer|confidence|contains|correlation|count|count-aggregate|covariance|covariance-p|deregister|destination|directory-query|directory-query-depth|directory-query-uris|distance|distinctive-terms|document-fragment-query|document-fragment-query-query|document-query|document-query-uris|element-attribute-pair-geospatial-boxes|element-attribute-pair-geospatial-query|element-attribute-pair-geospatial-query-element-name|element-attribute-pair-geospatial-query-latitude-name|element-attribute-pair-geospatial-query-longitude-name|element-attribute-pair-geospatial-query-options|element-attribute-pair-geospatial-query-region|element-attribute-pair-geospatial-query-weight|element-attribute-pair-geospatial-value-match|element-attribute-pair-geospatial-values|element-attribute-range-query|element-attribute-range-query-attribute-name|element-attribute-range-query-element-name|element-attribute-range-query-operator|element-attribute-range-query-options|element-attribute-range-query-value|element-attribute-range-query-weight|element-attribute-reference|element-attribute-value-co-occurrences|element-attribute-value-geospatial-co-occurrences|element-attribute-value-match|element-attribute-value-query|element-attribute-value-query-attribute-name|element-attribute-value-query-element-name|element-attribute-value-query-options|element-attribute-value-query-text|element-attribute-value-query-weight|element-attribute-value-ranges|element-attribute-values|element-attribute-word-match|element-attribute-word-query|element-attribute-word-query-attribute-name|element-attribute-word-query-element-name|element-attribute-word-query-options|element-attribute-word-query-text|element-attribute-word-query-weight|element-attribute-words|element-child-geospatial-boxes|element-child-geospatial-query|element-child-geospatial-query-child-name|element-child-geospatial-query-element-name|element-child-geospatial-query-options|element-child-geospatial-query-region|element-child-geospatial-query-weight|element-child-geospatial-value-match|element-child-geospatial-values|element-geospatial-boxes|element-geospatial-query|element-geospatial-query-element-name|element-geospatial-query-options|element-geospatial-query-region|element-geospatial-query-weight|element-geospatial-value-match|element-geospatial-values|element-pair-geospatial-boxes|element-pair-geospatial-query|element-pair-geospatial-query-element-name|element-pair-geospatial-query-latitude-name|element-pair-geospatial-query-longitude-name|element-pair-geospatial-query-options|element-pair-geospatial-query-region|element-pair-geospatial-query-weight|element-pair-geospatial-value-match|element-pair-geospatial-values|element-query|element-query-element-name|element-query-query|element-range-query|element-range-query-element-name|element-range-query-operator|element-range-query-options|element-range-query-value|element-range-query-weight|element-reference|element-value-co-occurrences|element-value-geospatial-co-occurrences|element-value-match|element-value-query|element-value-query-element-name|element-value-query-options|element-value-query-text|element-value-query-weight|element-value-ranges|element-values|element-walk|element-word-match|element-word-query|element-word-query-element-name|element-word-query-options|element-word-query-text|element-word-query-weight|element-words|entity-highlight|field-range-query|field-range-query-field-name|field-range-query-operator|field-range-query-options|field-range-query-value|field-range-query-weight|field-reference|field-value-co-occurrences|field-value-match|field-value-query|field-value-query-field-name|field-value-query-options|field-value-query-text|field-value-query-weight|field-value-ranges|field-values|field-word-match|field-word-query|field-word-query-field-name|field-word-query-options|field-word-query-text|field-word-query-weight|field-words|fitness|frequency|geospatial-attribute-pair-reference|geospatial-co-occurrences|geospatial-element-child-reference|geospatial-element-pair-reference|geospatial-element-reference|geospatial-path-reference|highlight|linear-model|linestring|linestring-vertices|locks-query|locks-query-query|max|median|min|near-query|near-query-distance|near-query-options|near-query-queries|near-query-weight|not-in-query|not-in-query-negative-query|not-in-query-positive-query|not-query|not-query-query|not-query-weight|or-query|or-query-queries|parse-wkt|path-geospatial-query|path-geospatial-query-options|path-geospatial-query-path-expression|path-geospatial-query-region|path-geospatial-query-weight|path-range-query|path-range-query-operator|path-range-query-options|path-range-query-path-name|path-range-query-value|path-range-query-weight|path-reference|percent-rank|percentile|point|point-latitude|point-longitude|polygon|polygon-contains|polygon-intersects|polygon-vertices|properties-query|properties-query-query|quality|query|rank|reference-parse|register|registered-query|registered-query-ids|registered-query-options|registered-query-weight|relevance-info|remainder|reverse-query|reverse-query-nodes|reverse-query-weight|score|search|shortest-distance|similar-query|similar-query-nodes|similar-query-weight|stddev|stddev-p|stem|sum|sum-aggregate|thresholds|to-wkt|tokenize|train|triple-range-query|triple-range-query-object|triple-range-query-operator|triple-range-query-options|triple-range-query-predicate|triple-range-query-subject|triple-range-query-weight|triples|uri-match|uri-reference|uris|valid-index-path|value-co-occurrences|value-match|value-ranges|value-tuples|values|variance|variance-p|walk|word-match|word-query|word-query-options|word-query-text|word-query-weight|words))(?=\s*\()

- name: invalid.illegal.function.xdmp
  match: '(?<![:\-_a-zA-Z0-9])(xdmp:([\-_a-zA-Z0-9][\-\._a-zA-Z0-9]*:)?([\-_a-zA-Z0-9][\-\._a-zA-Z0-9]*))\s*\('

- name: invalid.illegal.function.cts
  match: '(?<![:\-_a-zA-Z0-9])(cts:([\-_a-zA-Z0-9][\-\._a-zA-Z0-9]*:)?([\-_a-zA-Z0-9][\-\._a-zA-Z0-9]*))\s*\('

- include: '#string'

- name: meta
  begin: '(\()'
  beginCaptures:
    '1': { name: punctuation.definition.begin.xquery }
  end: '(\))'
  endCaptures:
    '1': { name: punctuation.definition.end.xquery }
  patterns:
    - include: '$self'

- include: '#function_call'
repository:
  'block_comment':
    begin: '\(:'
    end: ':\)'
    patterns:
      - include: '#block_comment'

  code_block:
    name: meta.code-block.xquery
    begin: '\{'
    end: '\}'
    patterns:
      - include: '$self'

  string:
    patterns:
      - include: '#singlequotedString'
      - include: '#doublequotedString'

  singlequotedString:
    name: string.quoted.single.xquery
    begin: '(?<![-_a-zA-Z0-9:]>)\s*''(?!\s*</[-_a-zA-Z0-9:])'
    beginCaptures:
      '0': { name: punctuation.definition.string.begin.xquery }
    end: "'"
    endCaptures:
      '0': { name: punctuation.definition.string.end.xquery }
    patterns:
      - include: '#entity'
      - include: '#bare-ampersand'

  doublequotedString:
    name: string.quoted.double.xquery
    begin: '(?<![-_a-zA-Z0-9:]>)\s*"(?!\s*</[-_a-zA-Z0-9:])'
    beginCaptures:
      '0': { name: punctuation.definition.string.begin.xquery }
    end: '"'
    endCaptures:
      '0': { name: punctuation.definition.string.end.xquery }
    patterns:
      - include: '#entity'
      - include: '#bare-ampersand'

  entity:
    name: constant.character.entity.xml
    match: '(&)([:a-zA-Z_][:a-zA-Z0-9_.-]*|#[0-9]+|#x[0-9a-fA-F]+)(;)'
    captures:
      '1': { name: punctuation.definition.constant.xml }

  bare-ampersand:
    name: invalid.illegal.bad-ampersand.xml
    match: '&'

  function_call:
    name: support.function.xquery
    match: '(?:[\-_a-zA-Z0-9]+:)?[\-_a-zA-Z0-9]+(?=\()'
    captures:
      '1': { name: punctuation.definition.parameters.begin.xquery }

  function_parameters:
    name: variable.parameter.xquery
    match: '\$([\-_a-zA-Z0-9][\-\._a-zA-Z0-9]*:)?([\-_a-zA-Z0-9][\-\._a-zA-Z0-9]*)'

  EntityDecl:
    begin: '(<!)(ENTITY)\s+(%\s+)?([:a-zA-Z_][:a-zA-Z0-9_.-]*)(\s+(?:SYSTEM|PUBLIC)\s+)?'
    captures:
      '1': { name: punctuation.definition.tag.begin.xml }
      '2': { name: keyword.entity.xml }
      '3': { name: punctuation.definition.entity.xml }
      '4': { name: variable.entity.xml }
      '5': { name: keyword.entitytype.xml }
    end: '(>)'
    patterns:
      - include: '#doublequotedStringXml'
      - include: '#singlequotedStringXml'

  doublequotedStringXml:
    name: string.quoted.double.xml
    begin: '"'
    beginCaptures:
      '0': { name: punctuation.definition.string.begin.xml }
    end: '"'
    endCaptures:
      '0': { name: punctuation.definition.string.end.xml }
    patterns:
      - include: '#entity'
      - include: '#bare-ampersand'
      - include: '#code_block'

  singlequotedStringXml:
    begin: "'"
    beginCaptures:
      '0': { name: punctuation.definition.string.begin.xml }
    end: "'"
    endCaptures:
      '0': { name: punctuation.definition.string.end.xml }
    name: string.quoted.single.xml
    patterns:
      - include: '#entity'
      - include: '#bare-ampersand'
      - include: '#code_block'

  internalSubset:
    begin: '(\[)'
    captures:
      '1': { name: punctuation.definition.constant.xml }
    end: '(\])'
    name: meta.internalsubset.xml
    patterns:
      - include: '#EntityDecl'
      - include: '#parameterEntity'

  parameterEntity:
    name: constant.character.parameter-entity.xml
    match: '(%)([:a-zA-Z_][:a-zA-Z0-9_.-]*)(;)'
    captures:
      '1': { name: punctuation.definition.constant.xml }
      '3': { name: punctuation.definition.constant.xml }

  tagStuff:
    patterns:
      - match: '(?:([-_a-zA-Z0-9]+)((:)))?([-_a-zA-Z0-9]+)='
        captures:
          '1': { name: entity.other.attribute-name.namespace.xml }
          '2': { name: entity.other.attribute-name.xml }
          '3': { name: punctuation.separator.namespace.xml }
          '4': { name: entity.other.attribute-name.localname.xml }
      - include: '#doublequotedStringXml'
      - include: '#singlequotedStringXml'

  Xml:
    patterns:
      - name: meta.tag.preprocessor.xml
        begin: '(<\?)\s*([-_a-zA-Z0-9]+)'
        captures:
          '1': { name: punctuation.definition.tag.begin.xml }
          '2': { name: entity.name.tag.xml }
        end: '(\?>)'
        patterns:
          - name: entity.other.attribute-name.xml
            match: ' ([a-zA-Z-]+)'
          - include: '#doublequotedString'
          - include: '#singlequotedString'

      - name: meta.tag.sgml.doctype.xml
        begin: '(<!)(DOCTYPE)\s+([:a-zA-Z_][:a-zA-Z0-9_.-]*)'
        captures:
          '1': { name: punctuation.definition.tag.begin.xml }
          '2': { name: keyword.doctype.xml }
          '3': { name: variable.documentroot.xml }
        end: '\s*(>)'
        patterns:
          - include: '#internalSubset'

      - name: comment.block.xml
        begin: '<[!%]--'
        captures:
          '0': { name: punctuation.definition.comment.xml }
        end: '--%?>'

      - name: comment.processing-instruction.xml
        begin: '<\?'
        captures:
          '0': { name: punctuation.definition.processing-instruction.xml }
        end: '\?>'

      - name: meta.tag.no-content.xml
        begin: '(<)((?:([-_a-zA-Z0-9]+)((:)))?([-_a-zA-Z0-9:]+))(?=(\s[^>]*)?></\2>)'
        beginCaptures:
          '1': { name: punctuation.definition.tag.begin.xml }
          '3': { name: entity.name.tag.namespace.xml }
          '4': { name: entity.name.tag.xml }
          '5': { name: punctuation.separator.namespace.xml }
          '6': { name: entity.name.tag.localname.xml }
        end: '(>)(<)(/)(?:([-_a-zA-Z0-9]+)((:)))?([-_a-zA-Z0-9:]+)(>)'
        endCaptures:
          '1': { name: punctuation.definition.tag.end.xml }
          '2': { name: punctuation.definition.tag.begin.xml meta.scope.between-tag-pair.xml }
          '3': { name: punctuation.definition.tag.begin.xml }
          '4': { name: entity.name.tag.namespace.xml }
          '5': { name: entity.name.tag.xml }
          '6': { name: punctuation.separator.namespace.xml }
          '7': { name: entity.name.tag.localname.xml }
          '8': { name: punctuation.definition.tag.end.xml }
        patterns:
          - include: '#tagStuff'


      - name: meta.tag.xml
        begin: '(</?)(?:([-_a-zA-Z0-9]+)((:)))?([-_a-zA-Z0-9:]+)'
        captures:
          '1': { name: punctuation.definition.tag.begin.xml }
          '2': { name: entity.name.tag.namespace.xml }
          '3': { name: entity.name.tag.xml }
          '4': { name: punctuation.separator.namespace.xml }
          '5': { name: entity.name.tag.localname.xml }
        end: '(/?>)'
        endCaptures:
          '1': { name: punctuation.definition.tag.end.xml }
        patterns:
          - include: '#tagStuff'

      - include: '#entity'

      - include: '#bare-ampersand'

      - name: string.unquoted.cdata.xml
        begin: '<!\[CDATA\['
        beginCaptures:
          '0': { name: punctuation.definition.string.begin.xml }
        end: ']]>'
        endCaptures:
          '0': { name: punctuation.definition.string.end.xml }

# - name: function_call
#   begin: '[\-_a-zA-Z0-9]+:[\-_a-zA-Z0-9]+(\()'
#   beginCaptures:
#     '1': { name: punctuation.definition.parameters.begin.xquery }
#   end: '(\))'
#   endCaptures:
#     '1': { name: punctuation.definition.parameters.end.xquery }
#   patterns:
#     - include: '#function_call'

# - include: '#string'
# - include: '#function_call'